"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aminoConverters = exports.registry = exports.MsgUpdateDenomResponse = exports.MsgUpdateDenom = exports.MsgSetDenomMetadataResponse = exports.MsgSetDenomMetadata = exports.MsgChangeAdminResponse = exports.MsgChangeAdmin = exports.MsgBurnResponse = exports.MsgBurn = exports.MsgMintResponse = exports.MsgMint = exports.MsgCreateDenomResponse = exports.MsgCreateDenom = void 0;
const wire_1 = require("@bufbuild/protobuf/wire");
const bank_1 = require("../cosmos/bank/v1beta1/bank");
const coin_1 = require("../cosmos/base/v1beta1/coin");
exports.MsgCreateDenom = {
    $type: "seiprotocol.seichain.tokenfactory.MsgCreateDenom",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.subdenom !== "") {
            writer.uint32(18).string(message.subdenom);
        }
        if (message.allow_list !== undefined) {
            bank_1.AllowList.encode(message.allow_list, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateDenom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subdenom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.allow_list = bank_1.AllowList.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            subdenom: isSet(object.subdenom) ? globalThis.String(object.subdenom) : "",
            allow_list: isSet(object.allow_list) ? bank_1.AllowList.fromJSON(object.allow_list) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.subdenom !== "") {
            obj.subdenom = message.subdenom;
        }
        if (message.allow_list !== undefined) {
            obj.allow_list = bank_1.AllowList.toJSON(message.allow_list);
        }
        return obj;
    },
    create(base) {
        return exports.MsgCreateDenom.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateDenom();
        message.sender = object.sender ?? "";
        message.subdenom = object.subdenom ?? "";
        message.allow_list = object.allow_list !== undefined && object.allow_list !== null ? bank_1.AllowList.fromPartial(object.allow_list) : undefined;
        return message;
    }
};
exports.MsgCreateDenomResponse = {
    $type: "seiprotocol.seichain.tokenfactory.MsgCreateDenomResponse",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.new_token_denom !== "") {
            writer.uint32(10).string(message.new_token_denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateDenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.new_token_denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { new_token_denom: isSet(object.new_token_denom) ? globalThis.String(object.new_token_denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.new_token_denom !== "") {
            obj.new_token_denom = message.new_token_denom;
        }
        return obj;
    },
    create(base) {
        return exports.MsgCreateDenomResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateDenomResponse();
        message.new_token_denom = object.new_token_denom ?? "";
        return message;
    }
};
exports.MsgMint = {
    $type: "seiprotocol.seichain.tokenfactory.MsgMint",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMint();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.amount !== undefined) {
            obj.amount = coin_1.Coin.toJSON(message.amount);
        }
        return obj;
    },
    create(base) {
        return exports.MsgMint.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgMint();
        message.sender = object.sender ?? "";
        message.amount = object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
        return message;
    }
};
exports.MsgMintResponse = {
    $type: "seiprotocol.seichain.tokenfactory.MsgMintResponse",
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMintResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgMintResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgMintResponse();
        return message;
    }
};
exports.MsgBurn = {
    $type: "seiprotocol.seichain.tokenfactory.MsgBurn",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgBurn();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.amount !== undefined) {
            obj.amount = coin_1.Coin.toJSON(message.amount);
        }
        return obj;
    },
    create(base) {
        return exports.MsgBurn.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgBurn();
        message.sender = object.sender ?? "";
        message.amount = object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
        return message;
    }
};
exports.MsgBurnResponse = {
    $type: "seiprotocol.seichain.tokenfactory.MsgBurnResponse",
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgBurnResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgBurnResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgBurnResponse();
        return message;
    }
};
exports.MsgChangeAdmin = {
    $type: "seiprotocol.seichain.tokenfactory.MsgChangeAdmin",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.new_admin !== "") {
            writer.uint32(26).string(message.new_admin);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChangeAdmin();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.new_admin = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            new_admin: isSet(object.new_admin) ? globalThis.String(object.new_admin) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.new_admin !== "") {
            obj.new_admin = message.new_admin;
        }
        return obj;
    },
    create(base) {
        return exports.MsgChangeAdmin.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgChangeAdmin();
        message.sender = object.sender ?? "";
        message.denom = object.denom ?? "";
        message.new_admin = object.new_admin ?? "";
        return message;
    }
};
exports.MsgChangeAdminResponse = {
    $type: "seiprotocol.seichain.tokenfactory.MsgChangeAdminResponse",
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgChangeAdminResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgChangeAdminResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgChangeAdminResponse();
        return message;
    }
};
exports.MsgSetDenomMetadata = {
    $type: "seiprotocol.seichain.tokenfactory.MsgSetDenomMetadata",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.metadata !== undefined) {
            bank_1.Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetDenomMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.metadata = bank_1.Metadata.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            metadata: isSet(object.metadata) ? bank_1.Metadata.fromJSON(object.metadata) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.metadata !== undefined) {
            obj.metadata = bank_1.Metadata.toJSON(message.metadata);
        }
        return obj;
    },
    create(base) {
        return exports.MsgSetDenomMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgSetDenomMetadata();
        message.sender = object.sender ?? "";
        message.metadata = object.metadata !== undefined && object.metadata !== null ? bank_1.Metadata.fromPartial(object.metadata) : undefined;
        return message;
    }
};
exports.MsgSetDenomMetadataResponse = {
    $type: "seiprotocol.seichain.tokenfactory.MsgSetDenomMetadataResponse",
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetDenomMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgSetDenomMetadataResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgSetDenomMetadataResponse();
        return message;
    }
};
exports.MsgUpdateDenom = {
    $type: "seiprotocol.seichain.tokenfactory.MsgUpdateDenom",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.allow_list !== undefined) {
            bank_1.AllowList.encode(message.allow_list, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateDenom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.allow_list = bank_1.AllowList.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            allow_list: isSet(object.allow_list) ? bank_1.AllowList.fromJSON(object.allow_list) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.allow_list !== undefined) {
            obj.allow_list = bank_1.AllowList.toJSON(message.allow_list);
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateDenom.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateDenom();
        message.sender = object.sender ?? "";
        message.denom = object.denom ?? "";
        message.allow_list = object.allow_list !== undefined && object.allow_list !== null ? bank_1.AllowList.fromPartial(object.allow_list) : undefined;
        return message;
    }
};
exports.MsgUpdateDenomResponse = {
    $type: "seiprotocol.seichain.tokenfactory.MsgUpdateDenomResponse",
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateDenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgUpdateDenomResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateDenomResponse();
        return message;
    }
};
function createBaseMsgCreateDenom() {
    return { sender: "", subdenom: "", allow_list: undefined };
}
function createBaseMsgCreateDenomResponse() {
    return { new_token_denom: "" };
}
function createBaseMsgMint() {
    return { sender: "", amount: undefined };
}
function createBaseMsgMintResponse() {
    return {};
}
function createBaseMsgBurn() {
    return { sender: "", amount: undefined };
}
function createBaseMsgBurnResponse() {
    return {};
}
function createBaseMsgChangeAdmin() {
    return { sender: "", denom: "", new_admin: "" };
}
function createBaseMsgChangeAdminResponse() {
    return {};
}
function createBaseMsgSetDenomMetadata() {
    return { sender: "", metadata: undefined };
}
function createBaseMsgSetDenomMetadataResponse() {
    return {};
}
function createBaseMsgUpdateDenom() {
    return { sender: "", denom: "", allow_list: undefined };
}
function createBaseMsgUpdateDenomResponse() {
    return {};
}
function isSet(value) {
    return value !== null && value !== undefined;
}
exports.registry = [
    ["/seiprotocol.seichain.tokenfactory.MsgCreateDenom", exports.MsgCreateDenom],
    ["/seiprotocol.seichain.tokenfactory.MsgCreateDenomResponse", exports.MsgCreateDenomResponse],
    ["/seiprotocol.seichain.tokenfactory.MsgMint", exports.MsgMint],
    ["/seiprotocol.seichain.tokenfactory.MsgMintResponse", exports.MsgMintResponse],
    ["/seiprotocol.seichain.tokenfactory.MsgBurn", exports.MsgBurn],
    ["/seiprotocol.seichain.tokenfactory.MsgBurnResponse", exports.MsgBurnResponse],
    ["/seiprotocol.seichain.tokenfactory.MsgChangeAdmin", exports.MsgChangeAdmin],
    ["/seiprotocol.seichain.tokenfactory.MsgChangeAdminResponse", exports.MsgChangeAdminResponse],
    ["/seiprotocol.seichain.tokenfactory.MsgSetDenomMetadata", exports.MsgSetDenomMetadata],
    ["/seiprotocol.seichain.tokenfactory.MsgSetDenomMetadataResponse", exports.MsgSetDenomMetadataResponse],
    ["/seiprotocol.seichain.tokenfactory.MsgUpdateDenom", exports.MsgUpdateDenom],
    ["/seiprotocol.seichain.tokenfactory.MsgUpdateDenomResponse", exports.MsgUpdateDenomResponse]
];
exports.aminoConverters = {
    "/seiprotocol.seichain.tokenfactory.MsgCreateDenom": {
        aminoType: "tokenfactory/MsgCreateDenom",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.tokenfactory.MsgCreateDenomResponse": {
        aminoType: "tokenfactory/MsgCreateDenomResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.tokenfactory.MsgMint": {
        aminoType: "tokenfactory/MsgMint",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.tokenfactory.MsgMintResponse": {
        aminoType: "tokenfactory/MsgMintResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.tokenfactory.MsgBurn": {
        aminoType: "tokenfactory/MsgBurn",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.tokenfactory.MsgBurnResponse": {
        aminoType: "tokenfactory/MsgBurnResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.tokenfactory.MsgChangeAdmin": {
        aminoType: "tokenfactory/MsgChangeAdmin",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.tokenfactory.MsgChangeAdminResponse": {
        aminoType: "tokenfactory/MsgChangeAdminResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.tokenfactory.MsgSetDenomMetadata": {
        aminoType: "tokenfactory/MsgSetDenomMetadata",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.tokenfactory.MsgSetDenomMetadataResponse": {
        aminoType: "tokenfactory/MsgSetDenomMetadataResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.tokenfactory.MsgUpdateDenom": {
        aminoType: "tokenfactory/MsgUpdateDenom",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.tokenfactory.MsgUpdateDenomResponse": {
        aminoType: "tokenfactory/MsgUpdateDenomResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    }
};

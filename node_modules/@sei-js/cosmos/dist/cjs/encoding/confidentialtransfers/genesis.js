"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aminoConverters = exports.registry = exports.GenesisCtAccount = exports.GenesisState = void 0;
const wire_1 = require("@bufbuild/protobuf/wire");
const confidential_1 = require("./confidential");
const params_1 = require("./params");
exports.GenesisState = {
    $type: "seiprotocol.seichain.confidentialtransfers.GenesisState",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        for (const v of message.accounts) {
            exports.GenesisCtAccount.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.accounts.push(exports.GenesisCtAccount.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
            accounts: globalThis.Array.isArray(object?.accounts) ? object.accounts.map((e) => exports.GenesisCtAccount.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = params_1.Params.toJSON(message.params);
        }
        if (message.accounts?.length) {
            obj.accounts = message.accounts.map((e) => exports.GenesisCtAccount.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        message.accounts = object.accounts?.map((e) => exports.GenesisCtAccount.fromPartial(e)) || [];
        return message;
    }
};
exports.GenesisCtAccount = {
    $type: "seiprotocol.seichain.confidentialtransfers.GenesisCtAccount",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        if (message.account !== undefined) {
            confidential_1.CtAccount.encode(message.account, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisCtAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.account = confidential_1.CtAccount.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
            account: isSet(object.account) ? confidential_1.CtAccount.fromJSON(object.account) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key.length !== 0) {
            obj.key = base64FromBytes(message.key);
        }
        if (message.account !== undefined) {
            obj.account = confidential_1.CtAccount.toJSON(message.account);
        }
        return obj;
    },
    create(base) {
        return exports.GenesisCtAccount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisCtAccount();
        message.key = object.key ?? new Uint8Array(0);
        message.account = object.account !== undefined && object.account !== null ? confidential_1.CtAccount.fromPartial(object.account) : undefined;
        return message;
    }
};
function createBaseGenesisState() {
    return { params: undefined, accounts: [] };
}
function createBaseGenesisCtAccount() {
    return { key: new Uint8Array(0), account: undefined };
}
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
exports.registry = [
    ["/seiprotocol.seichain.confidentialtransfers.GenesisState", exports.GenesisState],
    ["/seiprotocol.seichain.confidentialtransfers.GenesisCtAccount", exports.GenesisCtAccount]
];
exports.aminoConverters = {
    "/seiprotocol.seichain.confidentialtransfers.GenesisState": {
        aminoType: "confidentialtransfers/GenesisState",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.GenesisCtAccount": {
        aminoType: "confidentialtransfers/GenesisCtAccount",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    }
};

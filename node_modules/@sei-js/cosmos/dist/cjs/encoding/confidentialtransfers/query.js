"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aminoConverters = exports.registry = exports.TransferDecrypted = exports.WithdrawDecrypted = exports.InitializeAccountDecrypted = exports.ApplyPendingBalanceDecrypted = exports.DecryptedCtAccount = exports.GetAllCtAccountsResponse = exports.GetAllCtAccountsRequest = exports.GetCtAccountResponse = exports.GetCtAccountRequest = void 0;
const wire_1 = require("@bufbuild/protobuf/wire");
const pagination_1 = require("../cosmos/base/query/v1beta1/pagination");
const confidential_1 = require("./confidential");
const zk_1 = require("./zk");
exports.GetCtAccountRequest = {
    $type: "seiprotocol.seichain.confidentialtransfers.GetCtAccountRequest",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCtAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.GetCtAccountRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCtAccountRequest();
        message.address = object.address ?? "";
        message.denom = object.denom ?? "";
        return message;
    }
};
exports.GetCtAccountResponse = {
    $type: "seiprotocol.seichain.confidentialtransfers.GetCtAccountResponse",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.account !== undefined) {
            confidential_1.CtAccount.encode(message.account, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCtAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.account = confidential_1.CtAccount.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { account: isSet(object.account) ? confidential_1.CtAccount.fromJSON(object.account) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.account !== undefined) {
            obj.account = confidential_1.CtAccount.toJSON(message.account);
        }
        return obj;
    },
    create(base) {
        return exports.GetCtAccountResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCtAccountResponse();
        message.account = object.account !== undefined && object.account !== null ? confidential_1.CtAccount.fromPartial(object.account) : undefined;
        return message;
    }
};
exports.GetAllCtAccountsRequest = {
    $type: "seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsRequest",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllCtAccountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.GetAllCtAccountsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAllCtAccountsRequest();
        message.address = object.address ?? "";
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    }
};
exports.GetAllCtAccountsResponse = {
    $type: "seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsResponse",
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.accounts) {
            confidential_1.CtAccountWithDenom.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllCtAccountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.accounts.push(confidential_1.CtAccountWithDenom.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accounts: globalThis.Array.isArray(object?.accounts) ? object.accounts.map((e) => confidential_1.CtAccountWithDenom.fromJSON(e)) : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accounts?.length) {
            obj.accounts = message.accounts.map((e) => confidential_1.CtAccountWithDenom.toJSON(e));
        }
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.GetAllCtAccountsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAllCtAccountsResponse();
        message.accounts = object.accounts?.map((e) => confidential_1.CtAccountWithDenom.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    }
};
exports.DecryptedCtAccount = {
    $type: "seiprotocol.seichain.confidentialtransfers.DecryptedCtAccount",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.public_key.length !== 0) {
            writer.uint32(10).bytes(message.public_key);
        }
        if (message.pending_balance_lo !== 0) {
            writer.uint32(16).uint64(message.pending_balance_lo);
        }
        if (message.pending_balance_hi !== 0) {
            writer.uint32(24).uint64(message.pending_balance_hi);
        }
        if (message.combined_pending_balance !== "") {
            writer.uint32(34).string(message.combined_pending_balance);
        }
        if (message.pending_balance_credit_counter !== 0) {
            writer.uint32(40).uint32(message.pending_balance_credit_counter);
        }
        if (message.available_balance !== "") {
            writer.uint32(50).string(message.available_balance);
        }
        if (message.decryptable_available_balance !== "") {
            writer.uint32(58).string(message.decryptable_available_balance);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecryptedCtAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.public_key = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.pending_balance_lo = longToNumber(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.pending_balance_hi = longToNumber(reader.uint64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.combined_pending_balance = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.pending_balance_credit_counter = reader.uint32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.available_balance = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.decryptable_available_balance = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            public_key: isSet(object.public_key) ? bytesFromBase64(object.public_key) : new Uint8Array(0),
            pending_balance_lo: isSet(object.pending_balance_lo) ? globalThis.Number(object.pending_balance_lo) : 0,
            pending_balance_hi: isSet(object.pending_balance_hi) ? globalThis.Number(object.pending_balance_hi) : 0,
            combined_pending_balance: isSet(object.combined_pending_balance) ? globalThis.String(object.combined_pending_balance) : "",
            pending_balance_credit_counter: isSet(object.pending_balance_credit_counter) ? globalThis.Number(object.pending_balance_credit_counter) : 0,
            available_balance: isSet(object.available_balance) ? globalThis.String(object.available_balance) : "",
            decryptable_available_balance: isSet(object.decryptable_available_balance) ? globalThis.String(object.decryptable_available_balance) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.public_key.length !== 0) {
            obj.public_key = base64FromBytes(message.public_key);
        }
        if (message.pending_balance_lo !== 0) {
            obj.pending_balance_lo = Math.round(message.pending_balance_lo);
        }
        if (message.pending_balance_hi !== 0) {
            obj.pending_balance_hi = Math.round(message.pending_balance_hi);
        }
        if (message.combined_pending_balance !== "") {
            obj.combined_pending_balance = message.combined_pending_balance;
        }
        if (message.pending_balance_credit_counter !== 0) {
            obj.pending_balance_credit_counter = Math.round(message.pending_balance_credit_counter);
        }
        if (message.available_balance !== "") {
            obj.available_balance = message.available_balance;
        }
        if (message.decryptable_available_balance !== "") {
            obj.decryptable_available_balance = message.decryptable_available_balance;
        }
        return obj;
    },
    create(base) {
        return exports.DecryptedCtAccount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDecryptedCtAccount();
        message.public_key = object.public_key ?? new Uint8Array(0);
        message.pending_balance_lo = object.pending_balance_lo ?? 0;
        message.pending_balance_hi = object.pending_balance_hi ?? 0;
        message.combined_pending_balance = object.combined_pending_balance ?? "";
        message.pending_balance_credit_counter = object.pending_balance_credit_counter ?? 0;
        message.available_balance = object.available_balance ?? "";
        message.decryptable_available_balance = object.decryptable_available_balance ?? "";
        return message;
    }
};
exports.ApplyPendingBalanceDecrypted = {
    $type: "seiprotocol.seichain.confidentialtransfers.ApplyPendingBalanceDecrypted",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.new_decryptable_available_balance !== "") {
            writer.uint32(26).string(message.new_decryptable_available_balance);
        }
        if (message.current_pending_balance_counter !== 0) {
            writer.uint32(32).uint32(message.current_pending_balance_counter);
        }
        if (message.current_available_balance !== "") {
            writer.uint32(42).string(message.current_available_balance);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApplyPendingBalanceDecrypted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.new_decryptable_available_balance = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.current_pending_balance_counter = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.current_available_balance = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            new_decryptable_available_balance: isSet(object.new_decryptable_available_balance) ? globalThis.String(object.new_decryptable_available_balance) : "",
            current_pending_balance_counter: isSet(object.current_pending_balance_counter) ? globalThis.Number(object.current_pending_balance_counter) : 0,
            current_available_balance: isSet(object.current_available_balance) ? globalThis.String(object.current_available_balance) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.new_decryptable_available_balance !== "") {
            obj.new_decryptable_available_balance = message.new_decryptable_available_balance;
        }
        if (message.current_pending_balance_counter !== 0) {
            obj.current_pending_balance_counter = Math.round(message.current_pending_balance_counter);
        }
        if (message.current_available_balance !== "") {
            obj.current_available_balance = message.current_available_balance;
        }
        return obj;
    },
    create(base) {
        return exports.ApplyPendingBalanceDecrypted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseApplyPendingBalanceDecrypted();
        message.address = object.address ?? "";
        message.denom = object.denom ?? "";
        message.new_decryptable_available_balance = object.new_decryptable_available_balance ?? "";
        message.current_pending_balance_counter = object.current_pending_balance_counter ?? 0;
        message.current_available_balance = object.current_available_balance ?? "";
        return message;
    }
};
exports.InitializeAccountDecrypted = {
    $type: "seiprotocol.seichain.confidentialtransfers.InitializeAccountDecrypted",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.from_address !== "") {
            writer.uint32(10).string(message.from_address);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.pubkey.length !== 0) {
            writer.uint32(26).bytes(message.pubkey);
        }
        if (message.pending_balance_lo !== 0) {
            writer.uint32(32).uint32(message.pending_balance_lo);
        }
        if (message.pending_balance_hi !== 0) {
            writer.uint32(40).uint64(message.pending_balance_hi);
        }
        if (message.available_balance !== "") {
            writer.uint32(50).string(message.available_balance);
        }
        if (message.decryptable_balance !== "") {
            writer.uint32(58).string(message.decryptable_balance);
        }
        if (message.proofs !== undefined) {
            zk_1.InitializeAccountMsgProofs.encode(message.proofs, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInitializeAccountDecrypted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.from_address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.pubkey = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.pending_balance_lo = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.pending_balance_hi = longToNumber(reader.uint64());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.available_balance = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.decryptable_balance = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.proofs = zk_1.InitializeAccountMsgProofs.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            from_address: isSet(object.from_address) ? globalThis.String(object.from_address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            pubkey: isSet(object.pubkey) ? bytesFromBase64(object.pubkey) : new Uint8Array(0),
            pending_balance_lo: isSet(object.pending_balance_lo) ? globalThis.Number(object.pending_balance_lo) : 0,
            pending_balance_hi: isSet(object.pending_balance_hi) ? globalThis.Number(object.pending_balance_hi) : 0,
            available_balance: isSet(object.available_balance) ? globalThis.String(object.available_balance) : "",
            decryptable_balance: isSet(object.decryptable_balance) ? globalThis.String(object.decryptable_balance) : "",
            proofs: isSet(object.proofs) ? zk_1.InitializeAccountMsgProofs.fromJSON(object.proofs) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.from_address !== "") {
            obj.from_address = message.from_address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.pubkey.length !== 0) {
            obj.pubkey = base64FromBytes(message.pubkey);
        }
        if (message.pending_balance_lo !== 0) {
            obj.pending_balance_lo = Math.round(message.pending_balance_lo);
        }
        if (message.pending_balance_hi !== 0) {
            obj.pending_balance_hi = Math.round(message.pending_balance_hi);
        }
        if (message.available_balance !== "") {
            obj.available_balance = message.available_balance;
        }
        if (message.decryptable_balance !== "") {
            obj.decryptable_balance = message.decryptable_balance;
        }
        if (message.proofs !== undefined) {
            obj.proofs = zk_1.InitializeAccountMsgProofs.toJSON(message.proofs);
        }
        return obj;
    },
    create(base) {
        return exports.InitializeAccountDecrypted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInitializeAccountDecrypted();
        message.from_address = object.from_address ?? "";
        message.denom = object.denom ?? "";
        message.pubkey = object.pubkey ?? new Uint8Array(0);
        message.pending_balance_lo = object.pending_balance_lo ?? 0;
        message.pending_balance_hi = object.pending_balance_hi ?? 0;
        message.available_balance = object.available_balance ?? "";
        message.decryptable_balance = object.decryptable_balance ?? "";
        message.proofs = object.proofs !== undefined && object.proofs !== null ? zk_1.InitializeAccountMsgProofs.fromPartial(object.proofs) : undefined;
        return message;
    }
};
exports.WithdrawDecrypted = {
    $type: "seiprotocol.seichain.confidentialtransfers.WithdrawDecrypted",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.from_address !== "") {
            writer.uint32(10).string(message.from_address);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.amount !== "") {
            writer.uint32(26).string(message.amount);
        }
        if (message.decryptable_balance !== "") {
            writer.uint32(34).string(message.decryptable_balance);
        }
        if (message.remaining_balance_commitment !== "") {
            writer.uint32(42).string(message.remaining_balance_commitment);
        }
        if (message.proofs !== undefined) {
            zk_1.WithdrawMsgProofs.encode(message.proofs, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWithdrawDecrypted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.from_address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.decryptable_balance = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.remaining_balance_commitment = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.proofs = zk_1.WithdrawMsgProofs.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            from_address: isSet(object.from_address) ? globalThis.String(object.from_address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
            decryptable_balance: isSet(object.decryptable_balance) ? globalThis.String(object.decryptable_balance) : "",
            remaining_balance_commitment: isSet(object.remaining_balance_commitment) ? globalThis.String(object.remaining_balance_commitment) : "",
            proofs: isSet(object.proofs) ? zk_1.WithdrawMsgProofs.fromJSON(object.proofs) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.from_address !== "") {
            obj.from_address = message.from_address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        if (message.decryptable_balance !== "") {
            obj.decryptable_balance = message.decryptable_balance;
        }
        if (message.remaining_balance_commitment !== "") {
            obj.remaining_balance_commitment = message.remaining_balance_commitment;
        }
        if (message.proofs !== undefined) {
            obj.proofs = zk_1.WithdrawMsgProofs.toJSON(message.proofs);
        }
        return obj;
    },
    create(base) {
        return exports.WithdrawDecrypted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWithdrawDecrypted();
        message.from_address = object.from_address ?? "";
        message.denom = object.denom ?? "";
        message.amount = object.amount ?? "";
        message.decryptable_balance = object.decryptable_balance ?? "";
        message.remaining_balance_commitment = object.remaining_balance_commitment ?? "";
        message.proofs = object.proofs !== undefined && object.proofs !== null ? zk_1.WithdrawMsgProofs.fromPartial(object.proofs) : undefined;
        return message;
    }
};
exports.TransferDecrypted = {
    $type: "seiprotocol.seichain.confidentialtransfers.TransferDecrypted",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.from_address !== "") {
            writer.uint32(10).string(message.from_address);
        }
        if (message.to_address !== "") {
            writer.uint32(18).string(message.to_address);
        }
        if (message.denom !== "") {
            writer.uint32(26).string(message.denom);
        }
        if (message.transfer_amount_lo !== 0) {
            writer.uint32(32).uint32(message.transfer_amount_lo);
        }
        if (message.transfer_amount_hi !== 0) {
            writer.uint32(40).uint32(message.transfer_amount_hi);
        }
        if (message.total_transfer_amount !== 0) {
            writer.uint32(48).uint64(message.total_transfer_amount);
        }
        if (message.remaining_balance_commitment !== "") {
            writer.uint32(58).string(message.remaining_balance_commitment);
        }
        if (message.decryptable_balance !== "") {
            writer.uint32(66).string(message.decryptable_balance);
        }
        if (message.proofs !== undefined) {
            zk_1.TransferMsgProofs.encode(message.proofs, writer.uint32(74).fork()).join();
        }
        for (const v of message.auditors) {
            writer.uint32(82).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransferDecrypted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.from_address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.to_address = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.transfer_amount_lo = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.transfer_amount_hi = reader.uint32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.total_transfer_amount = longToNumber(reader.uint64());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.remaining_balance_commitment = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.decryptable_balance = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.proofs = zk_1.TransferMsgProofs.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.auditors.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            from_address: isSet(object.from_address) ? globalThis.String(object.from_address) : "",
            to_address: isSet(object.to_address) ? globalThis.String(object.to_address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            transfer_amount_lo: isSet(object.transfer_amount_lo) ? globalThis.Number(object.transfer_amount_lo) : 0,
            transfer_amount_hi: isSet(object.transfer_amount_hi) ? globalThis.Number(object.transfer_amount_hi) : 0,
            total_transfer_amount: isSet(object.total_transfer_amount) ? globalThis.Number(object.total_transfer_amount) : 0,
            remaining_balance_commitment: isSet(object.remaining_balance_commitment) ? globalThis.String(object.remaining_balance_commitment) : "",
            decryptable_balance: isSet(object.decryptable_balance) ? globalThis.String(object.decryptable_balance) : "",
            proofs: isSet(object.proofs) ? zk_1.TransferMsgProofs.fromJSON(object.proofs) : undefined,
            auditors: globalThis.Array.isArray(object?.auditors) ? object.auditors.map((e) => globalThis.String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.from_address !== "") {
            obj.from_address = message.from_address;
        }
        if (message.to_address !== "") {
            obj.to_address = message.to_address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.transfer_amount_lo !== 0) {
            obj.transfer_amount_lo = Math.round(message.transfer_amount_lo);
        }
        if (message.transfer_amount_hi !== 0) {
            obj.transfer_amount_hi = Math.round(message.transfer_amount_hi);
        }
        if (message.total_transfer_amount !== 0) {
            obj.total_transfer_amount = Math.round(message.total_transfer_amount);
        }
        if (message.remaining_balance_commitment !== "") {
            obj.remaining_balance_commitment = message.remaining_balance_commitment;
        }
        if (message.decryptable_balance !== "") {
            obj.decryptable_balance = message.decryptable_balance;
        }
        if (message.proofs !== undefined) {
            obj.proofs = zk_1.TransferMsgProofs.toJSON(message.proofs);
        }
        if (message.auditors?.length) {
            obj.auditors = message.auditors;
        }
        return obj;
    },
    create(base) {
        return exports.TransferDecrypted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTransferDecrypted();
        message.from_address = object.from_address ?? "";
        message.to_address = object.to_address ?? "";
        message.denom = object.denom ?? "";
        message.transfer_amount_lo = object.transfer_amount_lo ?? 0;
        message.transfer_amount_hi = object.transfer_amount_hi ?? 0;
        message.total_transfer_amount = object.total_transfer_amount ?? 0;
        message.remaining_balance_commitment = object.remaining_balance_commitment ?? "";
        message.decryptable_balance = object.decryptable_balance ?? "";
        message.proofs = object.proofs !== undefined && object.proofs !== null ? zk_1.TransferMsgProofs.fromPartial(object.proofs) : undefined;
        message.auditors = object.auditors?.map((e) => e) || [];
        return message;
    }
};
function createBaseGetCtAccountRequest() {
    return { address: "", denom: "" };
}
function createBaseGetCtAccountResponse() {
    return { account: undefined };
}
function createBaseGetAllCtAccountsRequest() {
    return { address: "", pagination: undefined };
}
function createBaseGetAllCtAccountsResponse() {
    return { accounts: [], pagination: undefined };
}
function createBaseDecryptedCtAccount() {
    return {
        public_key: new Uint8Array(0),
        pending_balance_lo: 0,
        pending_balance_hi: 0,
        combined_pending_balance: "",
        pending_balance_credit_counter: 0,
        available_balance: "",
        decryptable_available_balance: ""
    };
}
function createBaseApplyPendingBalanceDecrypted() {
    return {
        address: "",
        denom: "",
        new_decryptable_available_balance: "",
        current_pending_balance_counter: 0,
        current_available_balance: ""
    };
}
function createBaseInitializeAccountDecrypted() {
    return {
        from_address: "",
        denom: "",
        pubkey: new Uint8Array(0),
        pending_balance_lo: 0,
        pending_balance_hi: 0,
        available_balance: "",
        decryptable_balance: "",
        proofs: undefined
    };
}
function createBaseWithdrawDecrypted() {
    return {
        from_address: "",
        denom: "",
        amount: "",
        decryptable_balance: "",
        remaining_balance_commitment: "",
        proofs: undefined
    };
}
function createBaseTransferDecrypted() {
    return {
        from_address: "",
        to_address: "",
        denom: "",
        transfer_amount_lo: 0,
        transfer_amount_hi: 0,
        total_transfer_amount: 0,
        remaining_balance_commitment: "",
        decryptable_balance: "",
        proofs: undefined,
        auditors: []
    };
}
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
exports.registry = [
    ["/seiprotocol.seichain.confidentialtransfers.GetCtAccountRequest", exports.GetCtAccountRequest],
    ["/seiprotocol.seichain.confidentialtransfers.GetCtAccountResponse", exports.GetCtAccountResponse],
    ["/seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsRequest", exports.GetAllCtAccountsRequest],
    ["/seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsResponse", exports.GetAllCtAccountsResponse],
    ["/seiprotocol.seichain.confidentialtransfers.DecryptedCtAccount", exports.DecryptedCtAccount],
    ["/seiprotocol.seichain.confidentialtransfers.ApplyPendingBalanceDecrypted", exports.ApplyPendingBalanceDecrypted],
    ["/seiprotocol.seichain.confidentialtransfers.InitializeAccountDecrypted", exports.InitializeAccountDecrypted],
    ["/seiprotocol.seichain.confidentialtransfers.WithdrawDecrypted", exports.WithdrawDecrypted],
    ["/seiprotocol.seichain.confidentialtransfers.TransferDecrypted", exports.TransferDecrypted]
];
exports.aminoConverters = {
    "/seiprotocol.seichain.confidentialtransfers.GetCtAccountRequest": {
        aminoType: "confidentialtransfers/GetCtAccountRequest",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.GetCtAccountResponse": {
        aminoType: "confidentialtransfers/GetCtAccountResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsRequest": {
        aminoType: "confidentialtransfers/GetAllCtAccountsRequest",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsResponse": {
        aminoType: "confidentialtransfers/GetAllCtAccountsResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.DecryptedCtAccount": {
        aminoType: "confidentialtransfers/DecryptedCtAccount",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.ApplyPendingBalanceDecrypted": {
        aminoType: "confidentialtransfers/ApplyPendingBalanceDecrypted",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.InitializeAccountDecrypted": {
        aminoType: "confidentialtransfers/InitializeAccountDecrypted",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.WithdrawDecrypted": {
        aminoType: "confidentialtransfers/WithdrawDecrypted",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.TransferDecrypted": {
        aminoType: "confidentialtransfers/TransferDecrypted",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    }
};

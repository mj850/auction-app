"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aminoConverters = exports.registry = exports.Params = void 0;
const wire_1 = require("@bufbuild/protobuf/wire");
exports.Params = {
    $type: "seiprotocol.seichain.confidentialtransfers.Params",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.enable_ct_module !== false) {
            writer.uint32(8).bool(message.enable_ct_module);
        }
        if (message.range_proof_gas_cost !== 0) {
            writer.uint32(16).uint64(message.range_proof_gas_cost);
        }
        for (const v of message.enabled_denoms) {
            writer.uint32(26).string(v);
        }
        if (message.ciphertext_gas_cost !== 0) {
            writer.uint32(32).uint64(message.ciphertext_gas_cost);
        }
        if (message.proof_verification_gas_cost !== 0) {
            writer.uint32(40).uint64(message.proof_verification_gas_cost);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.enable_ct_module = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.range_proof_gas_cost = longToNumber(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.enabled_denoms.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.ciphertext_gas_cost = longToNumber(reader.uint64());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.proof_verification_gas_cost = longToNumber(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            enable_ct_module: isSet(object.enable_ct_module) ? globalThis.Boolean(object.enable_ct_module) : false,
            range_proof_gas_cost: isSet(object.range_proof_gas_cost) ? globalThis.Number(object.range_proof_gas_cost) : 0,
            enabled_denoms: globalThis.Array.isArray(object?.enabled_denoms) ? object.enabled_denoms.map((e) => globalThis.String(e)) : [],
            ciphertext_gas_cost: isSet(object.ciphertext_gas_cost) ? globalThis.Number(object.ciphertext_gas_cost) : 0,
            proof_verification_gas_cost: isSet(object.proof_verification_gas_cost) ? globalThis.Number(object.proof_verification_gas_cost) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.enable_ct_module !== false) {
            obj.enable_ct_module = message.enable_ct_module;
        }
        if (message.range_proof_gas_cost !== 0) {
            obj.range_proof_gas_cost = Math.round(message.range_proof_gas_cost);
        }
        if (message.enabled_denoms?.length) {
            obj.enabled_denoms = message.enabled_denoms;
        }
        if (message.ciphertext_gas_cost !== 0) {
            obj.ciphertext_gas_cost = Math.round(message.ciphertext_gas_cost);
        }
        if (message.proof_verification_gas_cost !== 0) {
            obj.proof_verification_gas_cost = Math.round(message.proof_verification_gas_cost);
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.enable_ct_module = object.enable_ct_module ?? false;
        message.range_proof_gas_cost = object.range_proof_gas_cost ?? 0;
        message.enabled_denoms = object.enabled_denoms?.map((e) => e) || [];
        message.ciphertext_gas_cost = object.ciphertext_gas_cost ?? 0;
        message.proof_verification_gas_cost = object.proof_verification_gas_cost ?? 0;
        return message;
    }
};
function createBaseParams() {
    return {
        enable_ct_module: false,
        range_proof_gas_cost: 0,
        enabled_denoms: [],
        ciphertext_gas_cost: 0,
        proof_verification_gas_cost: 0
    };
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
exports.registry = [["/seiprotocol.seichain.confidentialtransfers.Params", exports.Params]];
exports.aminoConverters = {
    "/seiprotocol.seichain.confidentialtransfers.Params": {
        aminoType: "confidentialtransfers/Params",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    }
};

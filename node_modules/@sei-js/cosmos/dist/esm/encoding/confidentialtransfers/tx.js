import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Ciphertext } from "./cryptography";
import { CiphertextCiphertextEqualityProof, CiphertextValidityProof, CloseAccountMsgProofs, InitializeAccountMsgProofs, TransferMsgProofs, WithdrawMsgProofs } from "./zk";
export const MsgTransfer = {
    $type: "seiprotocol.seichain.confidentialtransfers.MsgTransfer",
    encode(message, writer = new BinaryWriter()) {
        if (message.from_address !== "") {
            writer.uint32(10).string(message.from_address);
        }
        if (message.to_address !== "") {
            writer.uint32(18).string(message.to_address);
        }
        if (message.denom !== "") {
            writer.uint32(26).string(message.denom);
        }
        if (message.from_amount_lo !== undefined) {
            Ciphertext.encode(message.from_amount_lo, writer.uint32(34).fork()).join();
        }
        if (message.from_amount_hi !== undefined) {
            Ciphertext.encode(message.from_amount_hi, writer.uint32(42).fork()).join();
        }
        if (message.to_amount_lo !== undefined) {
            Ciphertext.encode(message.to_amount_lo, writer.uint32(50).fork()).join();
        }
        if (message.to_amount_hi !== undefined) {
            Ciphertext.encode(message.to_amount_hi, writer.uint32(58).fork()).join();
        }
        if (message.remaining_balance !== undefined) {
            Ciphertext.encode(message.remaining_balance, writer.uint32(66).fork()).join();
        }
        if (message.decryptable_balance !== "") {
            writer.uint32(74).string(message.decryptable_balance);
        }
        if (message.proofs !== undefined) {
            TransferMsgProofs.encode(message.proofs, writer.uint32(82).fork()).join();
        }
        for (const v of message.auditors) {
            Auditor.encode(v, writer.uint32(90).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgTransfer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.from_address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.to_address = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.from_amount_lo = Ciphertext.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.from_amount_hi = Ciphertext.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.to_amount_lo = Ciphertext.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.to_amount_hi = Ciphertext.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.remaining_balance = Ciphertext.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.decryptable_balance = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.proofs = TransferMsgProofs.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.auditors.push(Auditor.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            from_address: isSet(object.from_address) ? globalThis.String(object.from_address) : "",
            to_address: isSet(object.to_address) ? globalThis.String(object.to_address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            from_amount_lo: isSet(object.from_amount_lo) ? Ciphertext.fromJSON(object.from_amount_lo) : undefined,
            from_amount_hi: isSet(object.from_amount_hi) ? Ciphertext.fromJSON(object.from_amount_hi) : undefined,
            to_amount_lo: isSet(object.to_amount_lo) ? Ciphertext.fromJSON(object.to_amount_lo) : undefined,
            to_amount_hi: isSet(object.to_amount_hi) ? Ciphertext.fromJSON(object.to_amount_hi) : undefined,
            remaining_balance: isSet(object.remaining_balance) ? Ciphertext.fromJSON(object.remaining_balance) : undefined,
            decryptable_balance: isSet(object.decryptable_balance) ? globalThis.String(object.decryptable_balance) : "",
            proofs: isSet(object.proofs) ? TransferMsgProofs.fromJSON(object.proofs) : undefined,
            auditors: globalThis.Array.isArray(object?.auditors) ? object.auditors.map((e) => Auditor.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.from_address !== "") {
            obj.from_address = message.from_address;
        }
        if (message.to_address !== "") {
            obj.to_address = message.to_address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.from_amount_lo !== undefined) {
            obj.from_amount_lo = Ciphertext.toJSON(message.from_amount_lo);
        }
        if (message.from_amount_hi !== undefined) {
            obj.from_amount_hi = Ciphertext.toJSON(message.from_amount_hi);
        }
        if (message.to_amount_lo !== undefined) {
            obj.to_amount_lo = Ciphertext.toJSON(message.to_amount_lo);
        }
        if (message.to_amount_hi !== undefined) {
            obj.to_amount_hi = Ciphertext.toJSON(message.to_amount_hi);
        }
        if (message.remaining_balance !== undefined) {
            obj.remaining_balance = Ciphertext.toJSON(message.remaining_balance);
        }
        if (message.decryptable_balance !== "") {
            obj.decryptable_balance = message.decryptable_balance;
        }
        if (message.proofs !== undefined) {
            obj.proofs = TransferMsgProofs.toJSON(message.proofs);
        }
        if (message.auditors?.length) {
            obj.auditors = message.auditors.map((e) => Auditor.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return MsgTransfer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgTransfer();
        message.from_address = object.from_address ?? "";
        message.to_address = object.to_address ?? "";
        message.denom = object.denom ?? "";
        message.from_amount_lo = object.from_amount_lo !== undefined && object.from_amount_lo !== null ? Ciphertext.fromPartial(object.from_amount_lo) : undefined;
        message.from_amount_hi = object.from_amount_hi !== undefined && object.from_amount_hi !== null ? Ciphertext.fromPartial(object.from_amount_hi) : undefined;
        message.to_amount_lo = object.to_amount_lo !== undefined && object.to_amount_lo !== null ? Ciphertext.fromPartial(object.to_amount_lo) : undefined;
        message.to_amount_hi = object.to_amount_hi !== undefined && object.to_amount_hi !== null ? Ciphertext.fromPartial(object.to_amount_hi) : undefined;
        message.remaining_balance =
            object.remaining_balance !== undefined && object.remaining_balance !== null ? Ciphertext.fromPartial(object.remaining_balance) : undefined;
        message.decryptable_balance = object.decryptable_balance ?? "";
        message.proofs = object.proofs !== undefined && object.proofs !== null ? TransferMsgProofs.fromPartial(object.proofs) : undefined;
        message.auditors = object.auditors?.map((e) => Auditor.fromPartial(e)) || [];
        return message;
    }
};
export const MsgTransferResponse = {
    $type: "seiprotocol.seichain.confidentialtransfers.MsgTransferResponse",
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgTransferResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgTransferResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgTransferResponse();
        return message;
    }
};
export const Auditor = {
    $type: "seiprotocol.seichain.confidentialtransfers.Auditor",
    encode(message, writer = new BinaryWriter()) {
        if (message.auditor_address !== "") {
            writer.uint32(10).string(message.auditor_address);
        }
        if (message.encrypted_transfer_amount_lo !== undefined) {
            Ciphertext.encode(message.encrypted_transfer_amount_lo, writer.uint32(18).fork()).join();
        }
        if (message.encrypted_transfer_amount_hi !== undefined) {
            Ciphertext.encode(message.encrypted_transfer_amount_hi, writer.uint32(26).fork()).join();
        }
        if (message.transfer_amount_lo_validity_proof !== undefined) {
            CiphertextValidityProof.encode(message.transfer_amount_lo_validity_proof, writer.uint32(34).fork()).join();
        }
        if (message.transfer_amount_hi_validity_proof !== undefined) {
            CiphertextValidityProof.encode(message.transfer_amount_hi_validity_proof, writer.uint32(42).fork()).join();
        }
        if (message.transfer_amount_lo_equality_proof !== undefined) {
            CiphertextCiphertextEqualityProof.encode(message.transfer_amount_lo_equality_proof, writer.uint32(50).fork()).join();
        }
        if (message.transfer_amount_hi_equality_proof !== undefined) {
            CiphertextCiphertextEqualityProof.encode(message.transfer_amount_hi_equality_proof, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuditor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.auditor_address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.encrypted_transfer_amount_lo = Ciphertext.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.encrypted_transfer_amount_hi = Ciphertext.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.transfer_amount_lo_validity_proof = CiphertextValidityProof.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.transfer_amount_hi_validity_proof = CiphertextValidityProof.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.transfer_amount_lo_equality_proof = CiphertextCiphertextEqualityProof.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.transfer_amount_hi_equality_proof = CiphertextCiphertextEqualityProof.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            auditor_address: isSet(object.auditor_address) ? globalThis.String(object.auditor_address) : "",
            encrypted_transfer_amount_lo: isSet(object.encrypted_transfer_amount_lo) ? Ciphertext.fromJSON(object.encrypted_transfer_amount_lo) : undefined,
            encrypted_transfer_amount_hi: isSet(object.encrypted_transfer_amount_hi) ? Ciphertext.fromJSON(object.encrypted_transfer_amount_hi) : undefined,
            transfer_amount_lo_validity_proof: isSet(object.transfer_amount_lo_validity_proof)
                ? CiphertextValidityProof.fromJSON(object.transfer_amount_lo_validity_proof)
                : undefined,
            transfer_amount_hi_validity_proof: isSet(object.transfer_amount_hi_validity_proof)
                ? CiphertextValidityProof.fromJSON(object.transfer_amount_hi_validity_proof)
                : undefined,
            transfer_amount_lo_equality_proof: isSet(object.transfer_amount_lo_equality_proof)
                ? CiphertextCiphertextEqualityProof.fromJSON(object.transfer_amount_lo_equality_proof)
                : undefined,
            transfer_amount_hi_equality_proof: isSet(object.transfer_amount_hi_equality_proof)
                ? CiphertextCiphertextEqualityProof.fromJSON(object.transfer_amount_hi_equality_proof)
                : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.auditor_address !== "") {
            obj.auditor_address = message.auditor_address;
        }
        if (message.encrypted_transfer_amount_lo !== undefined) {
            obj.encrypted_transfer_amount_lo = Ciphertext.toJSON(message.encrypted_transfer_amount_lo);
        }
        if (message.encrypted_transfer_amount_hi !== undefined) {
            obj.encrypted_transfer_amount_hi = Ciphertext.toJSON(message.encrypted_transfer_amount_hi);
        }
        if (message.transfer_amount_lo_validity_proof !== undefined) {
            obj.transfer_amount_lo_validity_proof = CiphertextValidityProof.toJSON(message.transfer_amount_lo_validity_proof);
        }
        if (message.transfer_amount_hi_validity_proof !== undefined) {
            obj.transfer_amount_hi_validity_proof = CiphertextValidityProof.toJSON(message.transfer_amount_hi_validity_proof);
        }
        if (message.transfer_amount_lo_equality_proof !== undefined) {
            obj.transfer_amount_lo_equality_proof = CiphertextCiphertextEqualityProof.toJSON(message.transfer_amount_lo_equality_proof);
        }
        if (message.transfer_amount_hi_equality_proof !== undefined) {
            obj.transfer_amount_hi_equality_proof = CiphertextCiphertextEqualityProof.toJSON(message.transfer_amount_hi_equality_proof);
        }
        return obj;
    },
    create(base) {
        return Auditor.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAuditor();
        message.auditor_address = object.auditor_address ?? "";
        message.encrypted_transfer_amount_lo =
            object.encrypted_transfer_amount_lo !== undefined && object.encrypted_transfer_amount_lo !== null
                ? Ciphertext.fromPartial(object.encrypted_transfer_amount_lo)
                : undefined;
        message.encrypted_transfer_amount_hi =
            object.encrypted_transfer_amount_hi !== undefined && object.encrypted_transfer_amount_hi !== null
                ? Ciphertext.fromPartial(object.encrypted_transfer_amount_hi)
                : undefined;
        message.transfer_amount_lo_validity_proof =
            object.transfer_amount_lo_validity_proof !== undefined && object.transfer_amount_lo_validity_proof !== null
                ? CiphertextValidityProof.fromPartial(object.transfer_amount_lo_validity_proof)
                : undefined;
        message.transfer_amount_hi_validity_proof =
            object.transfer_amount_hi_validity_proof !== undefined && object.transfer_amount_hi_validity_proof !== null
                ? CiphertextValidityProof.fromPartial(object.transfer_amount_hi_validity_proof)
                : undefined;
        message.transfer_amount_lo_equality_proof =
            object.transfer_amount_lo_equality_proof !== undefined && object.transfer_amount_lo_equality_proof !== null
                ? CiphertextCiphertextEqualityProof.fromPartial(object.transfer_amount_lo_equality_proof)
                : undefined;
        message.transfer_amount_hi_equality_proof =
            object.transfer_amount_hi_equality_proof !== undefined && object.transfer_amount_hi_equality_proof !== null
                ? CiphertextCiphertextEqualityProof.fromPartial(object.transfer_amount_hi_equality_proof)
                : undefined;
        return message;
    }
};
export const MsgInitializeAccount = {
    $type: "seiprotocol.seichain.confidentialtransfers.MsgInitializeAccount",
    encode(message, writer = new BinaryWriter()) {
        if (message.from_address !== "") {
            writer.uint32(10).string(message.from_address);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.public_key.length !== 0) {
            writer.uint32(26).bytes(message.public_key);
        }
        if (message.decryptable_balance !== "") {
            writer.uint32(34).string(message.decryptable_balance);
        }
        if (message.pending_balance_lo !== undefined) {
            Ciphertext.encode(message.pending_balance_lo, writer.uint32(42).fork()).join();
        }
        if (message.pending_balance_hi !== undefined) {
            Ciphertext.encode(message.pending_balance_hi, writer.uint32(50).fork()).join();
        }
        if (message.available_balance !== undefined) {
            Ciphertext.encode(message.available_balance, writer.uint32(58).fork()).join();
        }
        if (message.proofs !== undefined) {
            InitializeAccountMsgProofs.encode(message.proofs, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInitializeAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.from_address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.public_key = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.decryptable_balance = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.pending_balance_lo = Ciphertext.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.pending_balance_hi = Ciphertext.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.available_balance = Ciphertext.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.proofs = InitializeAccountMsgProofs.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            from_address: isSet(object.from_address) ? globalThis.String(object.from_address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            public_key: isSet(object.public_key) ? bytesFromBase64(object.public_key) : new Uint8Array(0),
            decryptable_balance: isSet(object.decryptable_balance) ? globalThis.String(object.decryptable_balance) : "",
            pending_balance_lo: isSet(object.pending_balance_lo) ? Ciphertext.fromJSON(object.pending_balance_lo) : undefined,
            pending_balance_hi: isSet(object.pending_balance_hi) ? Ciphertext.fromJSON(object.pending_balance_hi) : undefined,
            available_balance: isSet(object.available_balance) ? Ciphertext.fromJSON(object.available_balance) : undefined,
            proofs: isSet(object.proofs) ? InitializeAccountMsgProofs.fromJSON(object.proofs) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.from_address !== "") {
            obj.from_address = message.from_address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.public_key.length !== 0) {
            obj.public_key = base64FromBytes(message.public_key);
        }
        if (message.decryptable_balance !== "") {
            obj.decryptable_balance = message.decryptable_balance;
        }
        if (message.pending_balance_lo !== undefined) {
            obj.pending_balance_lo = Ciphertext.toJSON(message.pending_balance_lo);
        }
        if (message.pending_balance_hi !== undefined) {
            obj.pending_balance_hi = Ciphertext.toJSON(message.pending_balance_hi);
        }
        if (message.available_balance !== undefined) {
            obj.available_balance = Ciphertext.toJSON(message.available_balance);
        }
        if (message.proofs !== undefined) {
            obj.proofs = InitializeAccountMsgProofs.toJSON(message.proofs);
        }
        return obj;
    },
    create(base) {
        return MsgInitializeAccount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgInitializeAccount();
        message.from_address = object.from_address ?? "";
        message.denom = object.denom ?? "";
        message.public_key = object.public_key ?? new Uint8Array(0);
        message.decryptable_balance = object.decryptable_balance ?? "";
        message.pending_balance_lo =
            object.pending_balance_lo !== undefined && object.pending_balance_lo !== null ? Ciphertext.fromPartial(object.pending_balance_lo) : undefined;
        message.pending_balance_hi =
            object.pending_balance_hi !== undefined && object.pending_balance_hi !== null ? Ciphertext.fromPartial(object.pending_balance_hi) : undefined;
        message.available_balance =
            object.available_balance !== undefined && object.available_balance !== null ? Ciphertext.fromPartial(object.available_balance) : undefined;
        message.proofs = object.proofs !== undefined && object.proofs !== null ? InitializeAccountMsgProofs.fromPartial(object.proofs) : undefined;
        return message;
    }
};
export const MsgInitializeAccountResponse = {
    $type: "seiprotocol.seichain.confidentialtransfers.MsgInitializeAccountResponse",
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInitializeAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgInitializeAccountResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgInitializeAccountResponse();
        return message;
    }
};
export const MsgDeposit = {
    $type: "seiprotocol.seichain.confidentialtransfers.MsgDeposit",
    encode(message, writer = new BinaryWriter()) {
        if (message.from_address !== "") {
            writer.uint32(10).string(message.from_address);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.amount !== 0) {
            writer.uint32(24).uint64(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeposit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.from_address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.amount = longToNumber(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            from_address: isSet(object.from_address) ? globalThis.String(object.from_address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.from_address !== "") {
            obj.from_address = message.from_address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.amount !== 0) {
            obj.amount = Math.round(message.amount);
        }
        return obj;
    },
    create(base) {
        return MsgDeposit.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgDeposit();
        message.from_address = object.from_address ?? "";
        message.denom = object.denom ?? "";
        message.amount = object.amount ?? 0;
        return message;
    }
};
export const MsgDepositResponse = {
    $type: "seiprotocol.seichain.confidentialtransfers.MsgDepositResponse",
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDepositResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgDepositResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgDepositResponse();
        return message;
    }
};
export const MsgWithdraw = {
    $type: "seiprotocol.seichain.confidentialtransfers.MsgWithdraw",
    encode(message, writer = new BinaryWriter()) {
        if (message.from_address !== "") {
            writer.uint32(10).string(message.from_address);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.amount !== "") {
            writer.uint32(26).string(message.amount);
        }
        if (message.decryptable_balance !== "") {
            writer.uint32(34).string(message.decryptable_balance);
        }
        if (message.remaining_balance_commitment !== undefined) {
            Ciphertext.encode(message.remaining_balance_commitment, writer.uint32(42).fork()).join();
        }
        if (message.proofs !== undefined) {
            WithdrawMsgProofs.encode(message.proofs, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdraw();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.from_address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.decryptable_balance = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.remaining_balance_commitment = Ciphertext.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.proofs = WithdrawMsgProofs.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            from_address: isSet(object.from_address) ? globalThis.String(object.from_address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
            decryptable_balance: isSet(object.decryptable_balance) ? globalThis.String(object.decryptable_balance) : "",
            remaining_balance_commitment: isSet(object.remaining_balance_commitment) ? Ciphertext.fromJSON(object.remaining_balance_commitment) : undefined,
            proofs: isSet(object.proofs) ? WithdrawMsgProofs.fromJSON(object.proofs) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.from_address !== "") {
            obj.from_address = message.from_address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        if (message.decryptable_balance !== "") {
            obj.decryptable_balance = message.decryptable_balance;
        }
        if (message.remaining_balance_commitment !== undefined) {
            obj.remaining_balance_commitment = Ciphertext.toJSON(message.remaining_balance_commitment);
        }
        if (message.proofs !== undefined) {
            obj.proofs = WithdrawMsgProofs.toJSON(message.proofs);
        }
        return obj;
    },
    create(base) {
        return MsgWithdraw.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgWithdraw();
        message.from_address = object.from_address ?? "";
        message.denom = object.denom ?? "";
        message.amount = object.amount ?? "";
        message.decryptable_balance = object.decryptable_balance ?? "";
        message.remaining_balance_commitment =
            object.remaining_balance_commitment !== undefined && object.remaining_balance_commitment !== null
                ? Ciphertext.fromPartial(object.remaining_balance_commitment)
                : undefined;
        message.proofs = object.proofs !== undefined && object.proofs !== null ? WithdrawMsgProofs.fromPartial(object.proofs) : undefined;
        return message;
    }
};
export const MsgWithdrawResponse = {
    $type: "seiprotocol.seichain.confidentialtransfers.MsgWithdrawResponse",
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdrawResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgWithdrawResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgWithdrawResponse();
        return message;
    }
};
export const MsgApplyPendingBalance = {
    $type: "seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalance",
    encode(message, writer = new BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.new_decryptable_available_balance !== "") {
            writer.uint32(26).string(message.new_decryptable_available_balance);
        }
        if (message.current_pending_balance_counter !== 0) {
            writer.uint32(32).uint32(message.current_pending_balance_counter);
        }
        if (message.current_available_balance !== undefined) {
            Ciphertext.encode(message.current_available_balance, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgApplyPendingBalance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.new_decryptable_available_balance = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.current_pending_balance_counter = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.current_available_balance = Ciphertext.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            new_decryptable_available_balance: isSet(object.new_decryptable_available_balance) ? globalThis.String(object.new_decryptable_available_balance) : "",
            current_pending_balance_counter: isSet(object.current_pending_balance_counter) ? globalThis.Number(object.current_pending_balance_counter) : 0,
            current_available_balance: isSet(object.current_available_balance) ? Ciphertext.fromJSON(object.current_available_balance) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.new_decryptable_available_balance !== "") {
            obj.new_decryptable_available_balance = message.new_decryptable_available_balance;
        }
        if (message.current_pending_balance_counter !== 0) {
            obj.current_pending_balance_counter = Math.round(message.current_pending_balance_counter);
        }
        if (message.current_available_balance !== undefined) {
            obj.current_available_balance = Ciphertext.toJSON(message.current_available_balance);
        }
        return obj;
    },
    create(base) {
        return MsgApplyPendingBalance.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgApplyPendingBalance();
        message.address = object.address ?? "";
        message.denom = object.denom ?? "";
        message.new_decryptable_available_balance = object.new_decryptable_available_balance ?? "";
        message.current_pending_balance_counter = object.current_pending_balance_counter ?? 0;
        message.current_available_balance =
            object.current_available_balance !== undefined && object.current_available_balance !== null
                ? Ciphertext.fromPartial(object.current_available_balance)
                : undefined;
        return message;
    }
};
export const MsgApplyPendingBalanceResponse = {
    $type: "seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalanceResponse",
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgApplyPendingBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgApplyPendingBalanceResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgApplyPendingBalanceResponse();
        return message;
    }
};
export const MsgCloseAccount = {
    $type: "seiprotocol.seichain.confidentialtransfers.MsgCloseAccount",
    encode(message, writer = new BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.proofs !== undefined) {
            CloseAccountMsgProofs.encode(message.proofs, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCloseAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.proofs = CloseAccountMsgProofs.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            proofs: isSet(object.proofs) ? CloseAccountMsgProofs.fromJSON(object.proofs) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.proofs !== undefined) {
            obj.proofs = CloseAccountMsgProofs.toJSON(message.proofs);
        }
        return obj;
    },
    create(base) {
        return MsgCloseAccount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCloseAccount();
        message.address = object.address ?? "";
        message.denom = object.denom ?? "";
        message.proofs = object.proofs !== undefined && object.proofs !== null ? CloseAccountMsgProofs.fromPartial(object.proofs) : undefined;
        return message;
    }
};
export const MsgCloseAccountResponse = {
    $type: "seiprotocol.seichain.confidentialtransfers.MsgCloseAccountResponse",
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCloseAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgCloseAccountResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgCloseAccountResponse();
        return message;
    }
};
function createBaseMsgTransfer() {
    return {
        from_address: "",
        to_address: "",
        denom: "",
        from_amount_lo: undefined,
        from_amount_hi: undefined,
        to_amount_lo: undefined,
        to_amount_hi: undefined,
        remaining_balance: undefined,
        decryptable_balance: "",
        proofs: undefined,
        auditors: []
    };
}
function createBaseMsgTransferResponse() {
    return {};
}
function createBaseAuditor() {
    return {
        auditor_address: "",
        encrypted_transfer_amount_lo: undefined,
        encrypted_transfer_amount_hi: undefined,
        transfer_amount_lo_validity_proof: undefined,
        transfer_amount_hi_validity_proof: undefined,
        transfer_amount_lo_equality_proof: undefined,
        transfer_amount_hi_equality_proof: undefined
    };
}
function createBaseMsgInitializeAccount() {
    return {
        from_address: "",
        denom: "",
        public_key: new Uint8Array(0),
        decryptable_balance: "",
        pending_balance_lo: undefined,
        pending_balance_hi: undefined,
        available_balance: undefined,
        proofs: undefined
    };
}
function createBaseMsgInitializeAccountResponse() {
    return {};
}
function createBaseMsgDeposit() {
    return { from_address: "", denom: "", amount: 0 };
}
function createBaseMsgDepositResponse() {
    return {};
}
function createBaseMsgWithdraw() {
    return {
        from_address: "",
        denom: "",
        amount: "",
        decryptable_balance: "",
        remaining_balance_commitment: undefined,
        proofs: undefined
    };
}
function createBaseMsgWithdrawResponse() {
    return {};
}
function createBaseMsgApplyPendingBalance() {
    return {
        address: "",
        denom: "",
        new_decryptable_available_balance: "",
        current_pending_balance_counter: 0,
        current_available_balance: undefined
    };
}
function createBaseMsgApplyPendingBalanceResponse() {
    return {};
}
function createBaseMsgCloseAccount() {
    return { address: "", denom: "", proofs: undefined };
}
function createBaseMsgCloseAccountResponse() {
    return {};
}
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
export const registry = [
    ["/seiprotocol.seichain.confidentialtransfers.MsgTransfer", MsgTransfer],
    ["/seiprotocol.seichain.confidentialtransfers.MsgTransferResponse", MsgTransferResponse],
    ["/seiprotocol.seichain.confidentialtransfers.Auditor", Auditor],
    ["/seiprotocol.seichain.confidentialtransfers.MsgInitializeAccount", MsgInitializeAccount],
    ["/seiprotocol.seichain.confidentialtransfers.MsgInitializeAccountResponse", MsgInitializeAccountResponse],
    ["/seiprotocol.seichain.confidentialtransfers.MsgDeposit", MsgDeposit],
    ["/seiprotocol.seichain.confidentialtransfers.MsgDepositResponse", MsgDepositResponse],
    ["/seiprotocol.seichain.confidentialtransfers.MsgWithdraw", MsgWithdraw],
    ["/seiprotocol.seichain.confidentialtransfers.MsgWithdrawResponse", MsgWithdrawResponse],
    ["/seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalance", MsgApplyPendingBalance],
    ["/seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalanceResponse", MsgApplyPendingBalanceResponse],
    ["/seiprotocol.seichain.confidentialtransfers.MsgCloseAccount", MsgCloseAccount],
    ["/seiprotocol.seichain.confidentialtransfers.MsgCloseAccountResponse", MsgCloseAccountResponse]
];
export const aminoConverters = {
    "/seiprotocol.seichain.confidentialtransfers.MsgTransfer": {
        aminoType: "confidentialtransfers/MsgTransfer",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.MsgTransferResponse": {
        aminoType: "confidentialtransfers/MsgTransferResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.Auditor": {
        aminoType: "confidentialtransfers/Auditor",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.MsgInitializeAccount": {
        aminoType: "confidentialtransfers/MsgInitializeAccount",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.MsgInitializeAccountResponse": {
        aminoType: "confidentialtransfers/MsgInitializeAccountResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.MsgDeposit": {
        aminoType: "confidentialtransfers/MsgDeposit",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.MsgDepositResponse": {
        aminoType: "confidentialtransfers/MsgDepositResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.MsgWithdraw": {
        aminoType: "confidentialtransfers/MsgWithdraw",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.MsgWithdrawResponse": {
        aminoType: "confidentialtransfers/MsgWithdrawResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalance": {
        aminoType: "confidentialtransfers/MsgApplyPendingBalance",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalanceResponse": {
        aminoType: "confidentialtransfers/MsgApplyPendingBalanceResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.MsgCloseAccount": {
        aminoType: "confidentialtransfers/MsgCloseAccount",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    },
    "/seiprotocol.seichain.confidentialtransfers.MsgCloseAccountResponse": {
        aminoType: "confidentialtransfers/MsgCloseAccountResponse",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    }
};

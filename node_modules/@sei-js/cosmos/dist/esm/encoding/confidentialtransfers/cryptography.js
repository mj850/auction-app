import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const Ciphertext = {
    $type: "seiprotocol.seichain.confidentialtransfers.Ciphertext",
    encode(message, writer = new BinaryWriter()) {
        if (message.c.length !== 0) {
            writer.uint32(10).bytes(message.c);
        }
        if (message.d.length !== 0) {
            writer.uint32(18).bytes(message.d);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCiphertext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.c = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.d = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            c: isSet(object.c) ? bytesFromBase64(object.c) : new Uint8Array(0),
            d: isSet(object.d) ? bytesFromBase64(object.d) : new Uint8Array(0)
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.c.length !== 0) {
            obj.c = base64FromBytes(message.c);
        }
        if (message.d.length !== 0) {
            obj.d = base64FromBytes(message.d);
        }
        return obj;
    },
    create(base) {
        return Ciphertext.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCiphertext();
        message.c = object.c ?? new Uint8Array(0);
        message.d = object.d ?? new Uint8Array(0);
        return message;
    }
};
function createBaseCiphertext() {
    return { c: new Uint8Array(0), d: new Uint8Array(0) };
}
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
export const registry = [["/seiprotocol.seichain.confidentialtransfers.Ciphertext", Ciphertext]];
export const aminoConverters = {
    "/seiprotocol.seichain.confidentialtransfers.Ciphertext": {
        aminoType: "confidentialtransfers/Ciphertext",
        toAmino: (message) => ({ ...message }),
        fromAmino: (object) => ({ ...object })
    }
};

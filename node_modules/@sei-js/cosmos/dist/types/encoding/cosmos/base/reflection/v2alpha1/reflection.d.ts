import type { GeneratedType } from "@cosmjs/proto-signing";
import type { AppDescriptor as AppDescriptor_type, AuthnDescriptor as AuthnDescriptor_type, ChainDescriptor as ChainDescriptor_type, CodecDescriptor as CodecDescriptor_type, ConfigurationDescriptor as ConfigurationDescriptor_type, GetAuthnDescriptorRequest as GetAuthnDescriptorRequest_type, GetAuthnDescriptorResponse as GetAuthnDescriptorResponse_type, GetChainDescriptorRequest as GetChainDescriptorRequest_type, GetChainDescriptorResponse as GetChainDescriptorResponse_type, GetCodecDescriptorRequest as GetCodecDescriptorRequest_type, GetCodecDescriptorResponse as GetCodecDescriptorResponse_type, GetConfigurationDescriptorRequest as GetConfigurationDescriptorRequest_type, GetConfigurationDescriptorResponse as GetConfigurationDescriptorResponse_type, GetQueryServicesDescriptorRequest as GetQueryServicesDescriptorRequest_type, GetQueryServicesDescriptorResponse as GetQueryServicesDescriptorResponse_type, GetTxDescriptorRequest as GetTxDescriptorRequest_type, GetTxDescriptorResponse as GetTxDescriptorResponse_type, InterfaceAcceptingMessageDescriptor as InterfaceAcceptingMessageDescriptor_type, InterfaceDescriptor as InterfaceDescriptor_type, InterfaceImplementerDescriptor as InterfaceImplementerDescriptor_type, MsgDescriptor as MsgDescriptor_type, QueryMethodDescriptor as QueryMethodDescriptor_type, QueryServiceDescriptor as QueryServiceDescriptor_type, QueryServicesDescriptor as QueryServicesDescriptor_type, SigningModeDescriptor as SigningModeDescriptor_type, TxDescriptor as TxDescriptor_type } from "../../../../../types/cosmos/base/reflection/v2alpha1";
import type { MessageFns } from "../../../../common";
export interface AppDescriptor extends AppDescriptor_type {
}
export interface TxDescriptor extends TxDescriptor_type {
}
export interface AuthnDescriptor extends AuthnDescriptor_type {
}
export interface SigningModeDescriptor extends SigningModeDescriptor_type {
}
export interface ChainDescriptor extends ChainDescriptor_type {
}
export interface CodecDescriptor extends CodecDescriptor_type {
}
export interface InterfaceDescriptor extends InterfaceDescriptor_type {
}
export interface InterfaceImplementerDescriptor extends InterfaceImplementerDescriptor_type {
}
export interface InterfaceAcceptingMessageDescriptor extends InterfaceAcceptingMessageDescriptor_type {
}
export interface ConfigurationDescriptor extends ConfigurationDescriptor_type {
}
export interface MsgDescriptor extends MsgDescriptor_type {
}
export interface GetAuthnDescriptorRequest extends GetAuthnDescriptorRequest_type {
}
export interface GetAuthnDescriptorResponse extends GetAuthnDescriptorResponse_type {
}
export interface GetChainDescriptorRequest extends GetChainDescriptorRequest_type {
}
export interface GetChainDescriptorResponse extends GetChainDescriptorResponse_type {
}
export interface GetCodecDescriptorRequest extends GetCodecDescriptorRequest_type {
}
export interface GetCodecDescriptorResponse extends GetCodecDescriptorResponse_type {
}
export interface GetConfigurationDescriptorRequest extends GetConfigurationDescriptorRequest_type {
}
export interface GetConfigurationDescriptorResponse extends GetConfigurationDescriptorResponse_type {
}
export interface GetQueryServicesDescriptorRequest extends GetQueryServicesDescriptorRequest_type {
}
export interface GetQueryServicesDescriptorResponse extends GetQueryServicesDescriptorResponse_type {
}
export interface GetTxDescriptorRequest extends GetTxDescriptorRequest_type {
}
export interface GetTxDescriptorResponse extends GetTxDescriptorResponse_type {
}
export interface QueryServicesDescriptor extends QueryServicesDescriptor_type {
}
export interface QueryServiceDescriptor extends QueryServiceDescriptor_type {
}
export interface QueryMethodDescriptor extends QueryMethodDescriptor_type {
}
export declare const AppDescriptor: MessageFns<AppDescriptor, "cosmos.base.reflection.v2alpha1.AppDescriptor">;
export declare const TxDescriptor: MessageFns<TxDescriptor, "cosmos.base.reflection.v2alpha1.TxDescriptor">;
export declare const AuthnDescriptor: MessageFns<AuthnDescriptor, "cosmos.base.reflection.v2alpha1.AuthnDescriptor">;
export declare const SigningModeDescriptor: MessageFns<SigningModeDescriptor, "cosmos.base.reflection.v2alpha1.SigningModeDescriptor">;
export declare const ChainDescriptor: MessageFns<ChainDescriptor, "cosmos.base.reflection.v2alpha1.ChainDescriptor">;
export declare const CodecDescriptor: MessageFns<CodecDescriptor, "cosmos.base.reflection.v2alpha1.CodecDescriptor">;
export declare const InterfaceDescriptor: MessageFns<InterfaceDescriptor, "cosmos.base.reflection.v2alpha1.InterfaceDescriptor">;
export declare const InterfaceImplementerDescriptor: MessageFns<InterfaceImplementerDescriptor, "cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor">;
export declare const InterfaceAcceptingMessageDescriptor: MessageFns<InterfaceAcceptingMessageDescriptor, "cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor">;
export declare const ConfigurationDescriptor: MessageFns<ConfigurationDescriptor, "cosmos.base.reflection.v2alpha1.ConfigurationDescriptor">;
export declare const MsgDescriptor: MessageFns<MsgDescriptor, "cosmos.base.reflection.v2alpha1.MsgDescriptor">;
export declare const GetAuthnDescriptorRequest: MessageFns<GetAuthnDescriptorRequest, "cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest">;
export declare const GetAuthnDescriptorResponse: MessageFns<GetAuthnDescriptorResponse, "cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse">;
export declare const GetChainDescriptorRequest: MessageFns<GetChainDescriptorRequest, "cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest">;
export declare const GetChainDescriptorResponse: MessageFns<GetChainDescriptorResponse, "cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse">;
export declare const GetCodecDescriptorRequest: MessageFns<GetCodecDescriptorRequest, "cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest">;
export declare const GetCodecDescriptorResponse: MessageFns<GetCodecDescriptorResponse, "cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse">;
export declare const GetConfigurationDescriptorRequest: MessageFns<GetConfigurationDescriptorRequest, "cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest">;
export declare const GetConfigurationDescriptorResponse: MessageFns<GetConfigurationDescriptorResponse, "cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse">;
export declare const GetQueryServicesDescriptorRequest: MessageFns<GetQueryServicesDescriptorRequest, "cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest">;
export declare const GetQueryServicesDescriptorResponse: MessageFns<GetQueryServicesDescriptorResponse, "cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse">;
export declare const GetTxDescriptorRequest: MessageFns<GetTxDescriptorRequest, "cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest">;
export declare const GetTxDescriptorResponse: MessageFns<GetTxDescriptorResponse, "cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse">;
export declare const QueryServicesDescriptor: MessageFns<QueryServicesDescriptor, "cosmos.base.reflection.v2alpha1.QueryServicesDescriptor">;
export declare const QueryServiceDescriptor: MessageFns<QueryServiceDescriptor, "cosmos.base.reflection.v2alpha1.QueryServiceDescriptor">;
export declare const QueryMethodDescriptor: MessageFns<QueryMethodDescriptor, "cosmos.base.reflection.v2alpha1.QueryMethodDescriptor">;
export declare const registry: Array<[string, GeneratedType]>;
export declare const aminoConverters: {
    "/cosmos.base.reflection.v2alpha1.AppDescriptor": {
        aminoType: string;
        toAmino: (message: AppDescriptor) => {
            authn?: AuthnDescriptor_type;
            chain?: ChainDescriptor_type;
            codec?: CodecDescriptor_type;
            configuration?: ConfigurationDescriptor_type;
            query_services?: QueryServicesDescriptor_type;
            tx?: TxDescriptor_type;
        };
        fromAmino: (object: AppDescriptor) => {
            authn?: AuthnDescriptor_type;
            chain?: ChainDescriptor_type;
            codec?: CodecDescriptor_type;
            configuration?: ConfigurationDescriptor_type;
            query_services?: QueryServicesDescriptor_type;
            tx?: TxDescriptor_type;
        };
    };
    "/cosmos.base.reflection.v2alpha1.TxDescriptor": {
        aminoType: string;
        toAmino: (message: TxDescriptor) => {
            fullname: string;
            msgs: MsgDescriptor_type[];
        };
        fromAmino: (object: TxDescriptor) => {
            fullname: string;
            msgs: MsgDescriptor_type[];
        };
    };
    "/cosmos.base.reflection.v2alpha1.AuthnDescriptor": {
        aminoType: string;
        toAmino: (message: AuthnDescriptor) => {
            sign_modes: SigningModeDescriptor_type[];
        };
        fromAmino: (object: AuthnDescriptor) => {
            sign_modes: SigningModeDescriptor_type[];
        };
    };
    "/cosmos.base.reflection.v2alpha1.SigningModeDescriptor": {
        aminoType: string;
        toAmino: (message: SigningModeDescriptor) => {
            name: string;
            number: number;
            authn_info_provider_method_fullname: string;
        };
        fromAmino: (object: SigningModeDescriptor) => {
            name: string;
            number: number;
            authn_info_provider_method_fullname: string;
        };
    };
    "/cosmos.base.reflection.v2alpha1.ChainDescriptor": {
        aminoType: string;
        toAmino: (message: ChainDescriptor) => {
            id: string;
        };
        fromAmino: (object: ChainDescriptor) => {
            id: string;
        };
    };
    "/cosmos.base.reflection.v2alpha1.CodecDescriptor": {
        aminoType: string;
        toAmino: (message: CodecDescriptor) => {
            interfaces: InterfaceDescriptor_type[];
        };
        fromAmino: (object: CodecDescriptor) => {
            interfaces: InterfaceDescriptor_type[];
        };
    };
    "/cosmos.base.reflection.v2alpha1.InterfaceDescriptor": {
        aminoType: string;
        toAmino: (message: InterfaceDescriptor) => {
            fullname: string;
            interface_accepting_messages: InterfaceAcceptingMessageDescriptor_type[];
            interface_implementers: InterfaceImplementerDescriptor_type[];
        };
        fromAmino: (object: InterfaceDescriptor) => {
            fullname: string;
            interface_accepting_messages: InterfaceAcceptingMessageDescriptor_type[];
            interface_implementers: InterfaceImplementerDescriptor_type[];
        };
    };
    "/cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor": {
        aminoType: string;
        toAmino: (message: InterfaceImplementerDescriptor) => {
            fullname: string;
            type_url: string;
        };
        fromAmino: (object: InterfaceImplementerDescriptor) => {
            fullname: string;
            type_url: string;
        };
    };
    "/cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor": {
        aminoType: string;
        toAmino: (message: InterfaceAcceptingMessageDescriptor) => {
            fullname: string;
            field_descriptor_names: string[];
        };
        fromAmino: (object: InterfaceAcceptingMessageDescriptor) => {
            fullname: string;
            field_descriptor_names: string[];
        };
    };
    "/cosmos.base.reflection.v2alpha1.ConfigurationDescriptor": {
        aminoType: string;
        toAmino: (message: ConfigurationDescriptor) => {
            bech32_account_address_prefix: string;
        };
        fromAmino: (object: ConfigurationDescriptor) => {
            bech32_account_address_prefix: string;
        };
    };
    "/cosmos.base.reflection.v2alpha1.MsgDescriptor": {
        aminoType: string;
        toAmino: (message: MsgDescriptor) => {
            msg_type_url: string;
        };
        fromAmino: (object: MsgDescriptor) => {
            msg_type_url: string;
        };
    };
    "/cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest": {
        aminoType: string;
        toAmino: (message: GetAuthnDescriptorRequest) => {};
        fromAmino: (object: GetAuthnDescriptorRequest) => {};
    };
    "/cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse": {
        aminoType: string;
        toAmino: (message: GetAuthnDescriptorResponse) => {
            authn?: AuthnDescriptor_type;
        };
        fromAmino: (object: GetAuthnDescriptorResponse) => {
            authn?: AuthnDescriptor_type;
        };
    };
    "/cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest": {
        aminoType: string;
        toAmino: (message: GetChainDescriptorRequest) => {};
        fromAmino: (object: GetChainDescriptorRequest) => {};
    };
    "/cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse": {
        aminoType: string;
        toAmino: (message: GetChainDescriptorResponse) => {
            chain?: ChainDescriptor_type;
        };
        fromAmino: (object: GetChainDescriptorResponse) => {
            chain?: ChainDescriptor_type;
        };
    };
    "/cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest": {
        aminoType: string;
        toAmino: (message: GetCodecDescriptorRequest) => {};
        fromAmino: (object: GetCodecDescriptorRequest) => {};
    };
    "/cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse": {
        aminoType: string;
        toAmino: (message: GetCodecDescriptorResponse) => {
            codec?: CodecDescriptor_type;
        };
        fromAmino: (object: GetCodecDescriptorResponse) => {
            codec?: CodecDescriptor_type;
        };
    };
    "/cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest": {
        aminoType: string;
        toAmino: (message: GetConfigurationDescriptorRequest) => {};
        fromAmino: (object: GetConfigurationDescriptorRequest) => {};
    };
    "/cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse": {
        aminoType: string;
        toAmino: (message: GetConfigurationDescriptorResponse) => {
            config?: ConfigurationDescriptor_type;
        };
        fromAmino: (object: GetConfigurationDescriptorResponse) => {
            config?: ConfigurationDescriptor_type;
        };
    };
    "/cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest": {
        aminoType: string;
        toAmino: (message: GetQueryServicesDescriptorRequest) => {};
        fromAmino: (object: GetQueryServicesDescriptorRequest) => {};
    };
    "/cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse": {
        aminoType: string;
        toAmino: (message: GetQueryServicesDescriptorResponse) => {
            queries?: QueryServicesDescriptor_type;
        };
        fromAmino: (object: GetQueryServicesDescriptorResponse) => {
            queries?: QueryServicesDescriptor_type;
        };
    };
    "/cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest": {
        aminoType: string;
        toAmino: (message: GetTxDescriptorRequest) => {};
        fromAmino: (object: GetTxDescriptorRequest) => {};
    };
    "/cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse": {
        aminoType: string;
        toAmino: (message: GetTxDescriptorResponse) => {
            tx?: TxDescriptor_type;
        };
        fromAmino: (object: GetTxDescriptorResponse) => {
            tx?: TxDescriptor_type;
        };
    };
    "/cosmos.base.reflection.v2alpha1.QueryServicesDescriptor": {
        aminoType: string;
        toAmino: (message: QueryServicesDescriptor) => {
            query_services: QueryServiceDescriptor_type[];
        };
        fromAmino: (object: QueryServicesDescriptor) => {
            query_services: QueryServiceDescriptor_type[];
        };
    };
    "/cosmos.base.reflection.v2alpha1.QueryServiceDescriptor": {
        aminoType: string;
        toAmino: (message: QueryServiceDescriptor) => {
            fullname: string;
            is_module: boolean;
            methods: QueryMethodDescriptor_type[];
        };
        fromAmino: (object: QueryServiceDescriptor) => {
            fullname: string;
            is_module: boolean;
            methods: QueryMethodDescriptor_type[];
        };
    };
    "/cosmos.base.reflection.v2alpha1.QueryMethodDescriptor": {
        aminoType: string;
        toAmino: (message: QueryMethodDescriptor) => {
            name: string;
            full_query_path: string;
        };
        fromAmino: (object: QueryMethodDescriptor) => {
            name: string;
            full_query_path: string;
        };
    };
};

import type { GeneratedType } from "@cosmjs/proto-signing";
import type { QueryEpochRequest as QueryEpochRequest_type, QueryEpochResponse as QueryEpochResponse_type, QueryParamsRequest as QueryParamsRequest_type, QueryParamsResponse as QueryParamsResponse_type } from "../../types/epoch";
import type { MessageFns } from "../common";
export interface QueryParamsRequest extends QueryParamsRequest_type {
}
export interface QueryParamsResponse extends QueryParamsResponse_type {
}
export interface QueryEpochRequest extends QueryEpochRequest_type {
}
export interface QueryEpochResponse extends QueryEpochResponse_type {
}
export declare const QueryParamsRequest: MessageFns<QueryParamsRequest, "seiprotocol.seichain.epoch.QueryParamsRequest">;
export declare const QueryParamsResponse: MessageFns<QueryParamsResponse, "seiprotocol.seichain.epoch.QueryParamsResponse">;
export declare const QueryEpochRequest: MessageFns<QueryEpochRequest, "seiprotocol.seichain.epoch.QueryEpochRequest">;
export declare const QueryEpochResponse: MessageFns<QueryEpochResponse, "seiprotocol.seichain.epoch.QueryEpochResponse">;
export declare const registry: Array<[string, GeneratedType]>;
export declare const aminoConverters: {
    "/seiprotocol.seichain.epoch.QueryParamsRequest": {
        aminoType: string;
        toAmino: (message: QueryParamsRequest) => {};
        fromAmino: (object: QueryParamsRequest) => {};
    };
    "/seiprotocol.seichain.epoch.QueryParamsResponse": {
        aminoType: string;
        toAmino: (message: QueryParamsResponse) => {
            params?: import("../../types/epoch").Params;
        };
        fromAmino: (object: QueryParamsResponse) => {
            params?: import("../../types/epoch").Params;
        };
    };
    "/seiprotocol.seichain.epoch.QueryEpochRequest": {
        aminoType: string;
        toAmino: (message: QueryEpochRequest) => {};
        fromAmino: (object: QueryEpochRequest) => {};
    };
    "/seiprotocol.seichain.epoch.QueryEpochResponse": {
        aminoType: string;
        toAmino: (message: QueryEpochResponse) => {
            epoch?: import("../../types/epoch").Epoch;
        };
        fromAmino: (object: QueryEpochResponse) => {
            epoch?: import("../../types/epoch").Epoch;
        };
    };
};

import type { GeneratedType } from "@cosmjs/proto-signing";
import type { GenesisCtAccount as GenesisCtAccount_type, GenesisState as GenesisState_type } from "../../types/confidentialtransfers";
import type { MessageFns } from "../common";
export interface GenesisState extends GenesisState_type {
}
export interface GenesisCtAccount extends GenesisCtAccount_type {
}
export declare const GenesisState: MessageFns<GenesisState, "seiprotocol.seichain.confidentialtransfers.GenesisState">;
export declare const GenesisCtAccount: MessageFns<GenesisCtAccount, "seiprotocol.seichain.confidentialtransfers.GenesisCtAccount">;
export declare const registry: Array<[string, GeneratedType]>;
export declare const aminoConverters: {
    "/seiprotocol.seichain.confidentialtransfers.GenesisState": {
        aminoType: string;
        toAmino: (message: GenesisState) => {
            params?: import("../../types/confidentialtransfers").Params;
            accounts: GenesisCtAccount_type[];
        };
        fromAmino: (object: GenesisState) => {
            params?: import("../../types/confidentialtransfers").Params;
            accounts: GenesisCtAccount_type[];
        };
    };
    "/seiprotocol.seichain.confidentialtransfers.GenesisCtAccount": {
        aminoType: string;
        toAmino: (message: GenesisCtAccount) => {
            key: Uint8Array;
            account?: import("../../types/confidentialtransfers").CtAccount;
        };
        fromAmino: (object: GenesisCtAccount) => {
            key: Uint8Array;
            account?: import("../../types/confidentialtransfers").CtAccount;
        };
    };
};

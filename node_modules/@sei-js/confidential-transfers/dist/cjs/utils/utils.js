"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.base64ToBytes = base64ToBytes;
exports.base64FromBytes = base64FromBytes;
exports.marshalAndEncodeCiphertext = marshalAndEncodeCiphertext;
const encoding_1 = require("@sei-js/cosmos/encoding");
function base64ToBytes(b64) {
    if (typeof atob === "function") {
        // Browser environment
        const binary = atob(b64);
        const arr = new Uint8Array(binary.length);
        for (let i = 0; i < binary.length; i++) {
            arr[i] = binary.charCodeAt(i);
        }
        return arr;
    }
    else {
        // Node environment
        return Uint8Array.from(Buffer.from(b64, "base64"));
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function marshalAndEncodeCiphertext(ciphertext) {
    const encodedCiphertext = encoding_1.Encoder.confidentialtransfers.Ciphertext.encode(ciphertext).finish();
    return base64FromBytes(encodedCiphertext);
}

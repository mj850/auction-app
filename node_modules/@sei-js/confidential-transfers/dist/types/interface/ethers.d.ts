import { ContractRunner } from "ethers";
import { CtAccount } from "@sei-js/cosmos/types/confidentialtransfers";
import { DecryptedAccount, DecryptedPendingBalances } from "./types";
/**
 * Fetches the full confidential account state for a given address and denom.
 *
 * @param address - The 0x or SEI address of the account holder.
 * @param denom - The denomination (e.g., "usei").
 * @param contractRunner - An ethers ContractRunner (wallet or provider).
 * @returns A CtAccount object if found, or null if the account is not initialized.
 */
export declare function queryAccountEthers(address: string, denom: string, contractRunner: ContractRunner): Promise<CtAccount | null>;
/**
 * Decrypts the pending balance commitments (lo and hi) using the signed denom.
 *
 * @param signedDenom - Signature over the hashed denom generated by getDenomToSignEthers.
 * @param ctAccount - The confidential account object.
 * @returns The lo and hi decrypted balances and the combined total.
 */
export declare function decryptPendingBalancesEthers(signedDenom: string, ctAccount: CtAccount): Promise<DecryptedPendingBalances>;
/**
 * Decrypts the AES-encrypted available balance (fast-path decryption).
 *
 * @param signedDenom - Signature over the hashed denom generated by getDenomToSignEthers.
 * @param ctAccount - The confidential account object.
 * @returns The decrypted balance as a bigint.
 */
export declare function decryptDecryptableAvailableBalanceEthers(signedDenom: string, ctAccount: CtAccount): Promise<bigint>;
/**
 * Fully decrypts the committed available balance (slow path).
 * Only needed if decryptable balance is insufficient or untrusted.
 *
 * @param signedDenom - Signature over the hashed denom generated by getDenomToSignEthers.
 * @param ctAccount - The confidential account object.
 * @returns The decrypted available balance.
 */
export declare function decryptAvailableBalanceEthers(signedDenom: string, ctAccount: CtAccount): Promise<bigint>;
/**
 * Fully decrypts all relevant balances of a CtAccount.
 *
 * @param signedDenom - Signature over the hashed denom generated by getDenomToSignEthers.
 * @param ctAccount - The confidential account object.
 * @param decryptFullAvailableBalance - Whether to fully decrypt the available balance (slow).
 * @returns A decrypted view of the account state.
 */
export declare function decryptAccountEthers(signedDenom: string, ctAccount: CtAccount, decryptFullAvailableBalance: boolean): Promise<DecryptedAccount>;
/**
 * Initializes a confidential account on chain with zero balance.
 *
 * @param signedDenom - Signature over the hashed denom generated by getDenomToSignEthers.
 * @param address - 0x or sei address of the account.
 * @param denom - The denomination (e.g., "usei").
 * @param contractRunner - The signer to send the transaction.
 * @returns The transaction receipt of the initializeAccount call.
 */
export declare function initializeAccountEthers(signedDenom: string, address: string, denom: string, contractRunner: ContractRunner): Promise<any>;
/**
 * Deposits a visible balance into the confidential account.
 *
 * @param denom - Denomination to deposit into (e.g., "usei").
 * @param amount - Amount in base units (e.g., 1 SEI = 1_000_000).
 * @param contractRunner - The signer to send the transaction.
 * @returns The transaction receipt.
 */
export declare function depositToPrivateBalanceEthers(denom: string, amount: number, contractRunner: ContractRunner): Promise<any>;
/**
 * Applies pending balance into available balance for a confidential account.
 *
 * @param address - 0x or sei address of the account holder.
 * @param denom - The denomination.
 * @param signedDenom - Signature over the hashed denom generated by getDenomToSignEthers.
 * @param contractRunner - Signer to execute the transaction.
 * @returns The transaction receipt or null if account is missing.
 */
export declare function applyPendingBalanceEthers(address: string, denom: string, signedDenom: string, contractRunner: ContractRunner): Promise<any>;
/**
 * Withdraws a specified amount from the available balance.
 *
 * @param address - 0x address to withdraw from.
 * @param denom - The denomination (e.g., "usei").
 * @param amount - Amount to withdraw in base units.
 * @param signedDenom - Signature over the hashed denom generated by getDenomToSignEthers.
 * @param contractRunner - Signer to submit the transaction.
 * @returns Transaction receipt or null if account not found.
 */
export declare function withdrawFromPrivateBalanceEthers(address: string, denom: string, amount: number, signedDenom: string, contractRunner: ContractRunner): Promise<any>;
/**
 * Transfers funds from one confidential account to another.
 *
 * @param senderAddress - 0x or sei address of the sender.
 * @param recipientAddress - 0x or sei address of the recipient.
 * @param denom - The denomination of the transfer.
 * @param amount - Amount to transfer (in base units).
 * @param signedDenom - Signature of the sender over the hashed denom.
 * @param contractRunner - Signer to send the transaction.
 * @returns Transaction receipt or null if accounts not found.
 */
export declare function confidentialTransferEthers(senderAddress: string, recipientAddress: string, denom: string, amount: number, signedDenom: string, contractRunner: ContractRunner): Promise<any>;
/**
 * Closes a confidential account and deletes all associated data on chain.
 *
 * @param address - 0x or sei address of the account.
 * @param denom - Denomination to close.
 * @param signedDenom - Signature over the hashed denom generated by getDenomToSignEthers.
 * @param contractRunner - Signer authorized to close the account.
 * @returns Transaction receipt or null if the account does not exist.
 */
export declare function closeAccountEthers(address: string, denom: string, signedDenom: string, contractRunner: ContractRunner): Promise<any>;
/**
 * Hashes a denom into the format expected by the signing process ("ct:" + denom).
 * Signing this hash generates a secret from which the confidential balances' private keypair can be derived.
 *
 * @param denom - The denom string (e.g., "usei").
 * @returns A keccak256 hash of the prefixed denom, ready to sign.
 */
export declare function getDenomToSignEthers(denom: string): string;

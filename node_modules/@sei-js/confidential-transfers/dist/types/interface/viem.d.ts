import { PublicClient } from "viem";
import { DecryptedAccount, DecryptedPendingBalances } from "./types";
export interface CtAccountResponse {
    publicKey: `0x${string}`;
    pendingBalanceLo: `0x${string}`;
    pendingBalanceHi: `0x${string}`;
    pendingBalanceCreditCounter: number;
    availableBalance: `0x${string}`;
    decryptableAvailableBalance: string;
}
/**
 * Queries the on-chain confidential account state for a given address and denom.
 *
 * @param client - A Viem PublicClient instance.
 * @param address - The 0x account address to query.
 * @param denom - The denom of the confidential account.
 * @returns A CtAccountResponse object, or null if the account is not initialized.
 */
export declare function queryAccountViem(client: PublicClient, address: string | `0x${string}`, denom: string): Promise<CtAccountResponse | null>;
/**
 * Decrypts the pending balance ciphertexts from a CtAccount.
 *
 * @param signedDenom - Signature over the hashed denom generated by getDenomToSignViem.
 * @param ctAccount - The confidential account to decrypt.
 * @returns The low, high, and combined pending balances.
 */
export declare function decryptPendingBalancesViem(signedDenom: `0x${string}`, ctAccount: CtAccountResponse): Promise<DecryptedPendingBalances>;
/**
 * Decrypts the AES-encrypted decryptable available balance.
 *
 * @param signedDenom - The signed hash of the denom.
 * @param ctAccount - The confidential account to decrypt.
 * @returns The decrypted available balance.
 */
export declare function decryptDecryptableAvailableBalanceViem(signedDenom: `0x${string}`, ctAccount: CtAccountResponse): Promise<bigint>;
/**
 * Fully decrypts the committed available balance (slow path).
 * Only needed if decryptable balance is insufficient or untrusted.
 *
 * @param signedDenom - The signed hash of the denom.
 * @param ctAccount - The confidential account to decrypt.
 * @returns The decrypted available balance.
 */
export declare function decryptAvailableBalanceViem(signedDenom: `0x${string}`, ctAccount: CtAccountResponse): Promise<bigint>;
/**
 * Fully decrypts all encrypted components of a confidential account.
 *
 * @param signedDenom - The signed hash of the denom.
 * @param ctAccount - The confidential account to decrypt.
 * @param decryptFullAvailableBalance - Whether to decrypt the available balance (slow).
 * @returns A DecryptedAccount object.
 */
export declare function decryptAccountViem(signedDenom: `0x${string}`, ctAccount: CtAccountResponse, decryptFullAvailableBalance: boolean): Promise<DecryptedAccount>;
/**
 * Generates calldata for depositing into a confidential account.
 *
 * @param address - The address initiating the deposit.
 * @param denom - The denom of the confidential account.
 * @param amount - The amount to deposit.
 * @returns A Viem-compatible calldata params object.
 */
export declare function getInitializeAccountViemArgs(signedDenom: `0x${string}`, address: string | `0x${string}`, denom: string): Promise<{
    account: string;
    address: `0x${string}`;
    abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "fromAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "publicKey";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "pendingBalanceLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "pendingBalanceHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "availableBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "initializeAccount";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "toAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "toAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "auditorAddress";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "encryptedTransferAmountLo";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "encryptedTransferAmountHi";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountLoValidityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountHiValidityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountLoEqualityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountHiEqualityProof";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ICT.Auditor[]";
            readonly name: "auditors";
            readonly type: "tuple[]";
        }];
        readonly name: "transferWithAuditors";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "uint64";
            readonly name: "amount";
            readonly type: "uint64";
        }];
        readonly name: "deposit";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "uint32";
            readonly name: "pendingBalanceCreditCounter";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "availableBalance";
            readonly type: "bytes";
        }];
        readonly name: "applyPendingBalance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalanceCommitment";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "closeAccount";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "addr";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }];
        readonly name: "account";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "publicKey";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "pendingBalanceLo";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "pendingBalanceHi";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint32";
                readonly name: "pendingBalanceCreditCounter";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "availableBalance";
                readonly type: "bytes";
            }, {
                readonly internalType: "string";
                readonly name: "decryptableAvailableBalance";
                readonly type: "string";
            }];
            readonly internalType: "struct CtAccount";
            readonly name: "ctAccount";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    functionName: string;
    args: string[];
    value: bigint;
}>;
/**
 * Generates calldata for depositing into a confidential account.
 *
 * @param address - The 0x address initiating the deposit.
 * @param denom - The denom of the confidential account.
 * @param amount - Amount to deposit in base units (e.g., 1 SEI = 1_000_000).
 * @returns A Viem-compatible calldata params object.
 */
export declare function getDepositToPrivateBalanceViemArgs(address: string | `0x${string}` | undefined, denom: string, amount: bigint): {
    account: string | undefined;
    address: `0x${string}`;
    abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "fromAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "publicKey";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "pendingBalanceLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "pendingBalanceHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "availableBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "initializeAccount";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "toAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "toAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "auditorAddress";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "encryptedTransferAmountLo";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "encryptedTransferAmountHi";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountLoValidityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountHiValidityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountLoEqualityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountHiEqualityProof";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ICT.Auditor[]";
            readonly name: "auditors";
            readonly type: "tuple[]";
        }];
        readonly name: "transferWithAuditors";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "uint64";
            readonly name: "amount";
            readonly type: "uint64";
        }];
        readonly name: "deposit";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "uint32";
            readonly name: "pendingBalanceCreditCounter";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "availableBalance";
            readonly type: "bytes";
        }];
        readonly name: "applyPendingBalance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalanceCommitment";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "closeAccount";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "addr";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }];
        readonly name: "account";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "publicKey";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "pendingBalanceLo";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "pendingBalanceHi";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint32";
                readonly name: "pendingBalanceCreditCounter";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "availableBalance";
                readonly type: "bytes";
            }, {
                readonly internalType: "string";
                readonly name: "decryptableAvailableBalance";
                readonly type: "string";
            }];
            readonly internalType: "struct CtAccount";
            readonly name: "ctAccount";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    functionName: string;
    args: (string | bigint)[];
};
/**
 * Generates calldata for applying pending balances to a confidential account.
 *
 * @param address - The 0x address of the account.
 * @param denom - The denom of the confidential account.
 * @param client - A Viem PublicClient instance.
 * @param signedDenom - The signed hash of the denom.
 * @returns A Viem-compatible calldata params object or null if the account is uninitialized.
 */
export declare function getApplyPendingBalancesViemArgs(address: string, denom: string, client: PublicClient, signedDenom: `0x${string}`): Promise<{
    account: string;
    address: `0x${string}`;
    abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "fromAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "publicKey";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "pendingBalanceLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "pendingBalanceHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "availableBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "initializeAccount";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "toAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "toAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "auditorAddress";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "encryptedTransferAmountLo";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "encryptedTransferAmountHi";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountLoValidityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountHiValidityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountLoEqualityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountHiEqualityProof";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ICT.Auditor[]";
            readonly name: "auditors";
            readonly type: "tuple[]";
        }];
        readonly name: "transferWithAuditors";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "uint64";
            readonly name: "amount";
            readonly type: "uint64";
        }];
        readonly name: "deposit";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "uint32";
            readonly name: "pendingBalanceCreditCounter";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "availableBalance";
            readonly type: "bytes";
        }];
        readonly name: "applyPendingBalance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalanceCommitment";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "closeAccount";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "addr";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }];
        readonly name: "account";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "publicKey";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "pendingBalanceLo";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "pendingBalanceHi";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint32";
                readonly name: "pendingBalanceCreditCounter";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "availableBalance";
                readonly type: "bytes";
            }, {
                readonly internalType: "string";
                readonly name: "decryptableAvailableBalance";
                readonly type: "string";
            }];
            readonly internalType: "struct CtAccount";
            readonly name: "ctAccount";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    functionName: string;
    args: (string | number)[];
    value: bigint;
} | null>;
/**
 * Generates calldata for withdrawing from a confidential account.
 *
 * @param address - The address of the account.
 * @param denom - The denom of the confidential account.
 * @param amount - The amount to withdraw in base units (e.g., 1 SEI = 1_000_000).
 * @param client - A Viem PublicClient instance.
 * @param signedDenom - The signed hash of the denom.
 * @returns A Viem-compatible calldata params object or null if the account is uninitialized.
 */
export declare function getWithdrawFromPrivateBalanceViemArgs(address: string, denom: string, amount: number, client: PublicClient, signedDenom: `0x${string}`): Promise<{
    account: string;
    address: `0x${string}`;
    abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "fromAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "publicKey";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "pendingBalanceLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "pendingBalanceHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "availableBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "initializeAccount";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "toAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "toAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "auditorAddress";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "encryptedTransferAmountLo";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "encryptedTransferAmountHi";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountLoValidityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountHiValidityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountLoEqualityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountHiEqualityProof";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ICT.Auditor[]";
            readonly name: "auditors";
            readonly type: "tuple[]";
        }];
        readonly name: "transferWithAuditors";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "uint64";
            readonly name: "amount";
            readonly type: "uint64";
        }];
        readonly name: "deposit";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "uint32";
            readonly name: "pendingBalanceCreditCounter";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "availableBalance";
            readonly type: "bytes";
        }];
        readonly name: "applyPendingBalance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalanceCommitment";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "closeAccount";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "addr";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }];
        readonly name: "account";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "publicKey";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "pendingBalanceLo";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "pendingBalanceHi";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint32";
                readonly name: "pendingBalanceCreditCounter";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "availableBalance";
                readonly type: "bytes";
            }, {
                readonly internalType: "string";
                readonly name: "decryptableAvailableBalance";
                readonly type: "string";
            }];
            readonly internalType: "struct CtAccount";
            readonly name: "ctAccount";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    functionName: string;
    args: string[];
    value: bigint;
} | null>;
/**
 * Generates calldata for transferring confidential balance to another account.
 *
 * @param senderAddress - The sender's address.
 * @param recipientAddress - The recipient's address.
 * @param denom - The denom of the confidential account.
 * @param amount - The amount to transfer.
 * @param client - A Viem PublicClient instance.
 * @param signedDenom - The signed hash of the denom.
 * @returns A Viem-compatible calldata params object or null if either account is uninitialized.
 */
export declare function getConfidentialTransferViemArgs(senderAddress: string, recipientAddress: string, denom: string, amount: number, client: PublicClient, signedDenom: `0x${string}`): Promise<{
    account: string;
    address: `0x${string}`;
    abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "fromAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "publicKey";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "pendingBalanceLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "pendingBalanceHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "availableBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "initializeAccount";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "toAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "toAddress";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "fromAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "toAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "auditorAddress";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "encryptedTransferAmountLo";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "encryptedTransferAmountHi";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountLoValidityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountHiValidityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountLoEqualityProof";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "transferAmountHiEqualityProof";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ICT.Auditor[]";
            readonly name: "auditors";
            readonly type: "tuple[]";
        }];
        readonly name: "transferWithAuditors";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "uint64";
            readonly name: "amount";
            readonly type: "uint64";
        }];
        readonly name: "deposit";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "uint32";
            readonly name: "pendingBalanceCreditCounter";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "availableBalance";
            readonly type: "bytes";
        }];
        readonly name: "applyPendingBalance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableBalance";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "remainingBalanceCommitment";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "proofs";
            readonly type: "bytes";
        }];
        readonly name: "closeAccount";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "addr";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "denom";
            readonly type: "string";
        }];
        readonly name: "account";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "publicKey";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "pendingBalanceLo";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "pendingBalanceHi";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint32";
                readonly name: "pendingBalanceCreditCounter";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "availableBalance";
                readonly type: "bytes";
            }, {
                readonly internalType: "string";
                readonly name: "decryptableAvailableBalance";
                readonly type: "string";
            }];
            readonly internalType: "struct CtAccount";
            readonly name: "ctAccount";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    functionName: string;
    args: string[];
    value: bigint;
} | null>;
/**
 * Hashes a denom into the format expected by the signing process ("ct:" + denom).
 * Signing this hash generates a secret from which the confidential balances' private keypair can be derived.
 *
 * @param denom - The denom string (e.g., "usei").
 * @returns A keccak256 hash of the prefixed denom, ready to sign.
 */
export declare function getDenomToSignViem(denom: string): `0x${string}`;

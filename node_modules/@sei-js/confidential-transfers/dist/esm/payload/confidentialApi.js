import { ConfidentialTransfers } from "./confidentialTransfers";
import "./wasm_exec.cjs";
export class ConfidentialTransfersWrapper {
    constructor() {
        this.wasmWrapper = new ConfidentialTransfers();
        this.wasmWrapper.initialize();
    }
    async initialize() {
        await this.wasmWrapper.initialize();
    }
    createWithdraw(signedDenom, amount, address, denom, currentDecryptableBalance, currentAvailableBalance) {
        const result = this.wasmWrapper.createWithdraw(signedDenom, amount, address, denom, currentDecryptableBalance, currentAvailableBalance);
        return result;
    }
    createInitialize(signedDenom, address, denom) {
        const result = this.wasmWrapper.createInitialize(signedDenom, address, denom);
        return result;
    }
    createApplyPendingBalance(signedDenom, address, denom, pendingBalanceCreditCounter, currentDecryptableBalance, currentAvailableBalance, currentPendingBalanceLo, currentPendingBalanceHi) {
        const result = this.wasmWrapper.createApplyPendingBalance(signedDenom, address, denom, pendingBalanceCreditCounter, currentDecryptableBalance, currentAvailableBalance, currentPendingBalanceLo, currentPendingBalanceHi);
        return result;
    }
    createTransfer(signedDenom, amount, senderAddress, recipientAddress, denom, currentDecryptableBalance, currentAvailableBalance, recipientPubkey) {
        const result = this.wasmWrapper.createTransfer(signedDenom, amount, senderAddress, recipientAddress, denom, currentDecryptableBalance, currentAvailableBalance, recipientPubkey);
        return result;
    }
    createCloseAccount(signedDenom, address, denom, currentAvailableBalance, currentPendingBalanceLo, currentPendingBalanceHi) {
        const result = this.wasmWrapper.createCloseAccount(signedDenom, address, denom, currentAvailableBalance, currentPendingBalanceLo, currentPendingBalanceHi);
        return result;
    }
    decryptCiphertext(signedDenom, ciphertext) {
        const result = this.wasmWrapper.decryptCiphertext(signedDenom, ciphertext);
        return result;
    }
    decryptAesCiphertext(signedDenom, aesCiphertext) {
        const result = this.wasmWrapper.decryptAESCiphertext(signedDenom, aesCiphertext);
        return result;
    }
}

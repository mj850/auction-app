/**
 * The address of the Confidential Transfers precompile contract.
 * This contract facilitates the interaction with the Confidential Transfers module using the EVM.
 * @category Cosmos Interoperability
 */
export declare const CONFIDENTIAL_TRANSFERS_PRECOMPILE_ADDRESS: `0x${string}`;
/**
 * The ABI for the Confidential Transfers precompile contract.
 * @category Cosmos Interoperability
 */
export declare const CONFIDENTIAL_TRANSFERS_PRECOMPILE_ABI: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "string";
        readonly name: "fromAddress";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "denom";
        readonly type: "string";
    }, {
        readonly internalType: "bytes";
        readonly name: "publicKey";
        readonly type: "bytes";
    }, {
        readonly internalType: "string";
        readonly name: "decryptableBalance";
        readonly type: "string";
    }, {
        readonly internalType: "bytes";
        readonly name: "pendingBalanceLo";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "pendingBalanceHi";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "availableBalance";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "proofs";
        readonly type: "bytes";
    }];
    readonly name: "initializeAccount";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "success";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "string";
        readonly name: "toAddress";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "denom";
        readonly type: "string";
    }, {
        readonly internalType: "bytes";
        readonly name: "fromAmountLo";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "fromAmountHi";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "toAmountLo";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "toAmountHi";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "remainingBalance";
        readonly type: "bytes";
    }, {
        readonly internalType: "string";
        readonly name: "decryptableBalance";
        readonly type: "string";
    }, {
        readonly internalType: "bytes";
        readonly name: "proofs";
        readonly type: "bytes";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "success";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "string";
        readonly name: "toAddress";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "denom";
        readonly type: "string";
    }, {
        readonly internalType: "bytes";
        readonly name: "fromAmountLo";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "fromAmountHi";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "toAmountLo";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "toAmountHi";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "remainingBalance";
        readonly type: "bytes";
    }, {
        readonly internalType: "string";
        readonly name: "decryptableBalance";
        readonly type: "string";
    }, {
        readonly internalType: "bytes";
        readonly name: "proofs";
        readonly type: "bytes";
    }, {
        readonly components: readonly [{
            readonly internalType: "string";
            readonly name: "auditorAddress";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "encryptedTransferAmountLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "encryptedTransferAmountHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "transferAmountLoValidityProof";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "transferAmountHiValidityProof";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "transferAmountLoEqualityProof";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "transferAmountHiEqualityProof";
            readonly type: "bytes";
        }];
        readonly internalType: "struct ICT.Auditor[]";
        readonly name: "auditors";
        readonly type: "tuple[]";
    }];
    readonly name: "transferWithAuditors";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "success";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "string";
        readonly name: "denom";
        readonly type: "string";
    }, {
        readonly internalType: "uint64";
        readonly name: "amount";
        readonly type: "uint64";
    }];
    readonly name: "deposit";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "success";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "string";
        readonly name: "denom";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "decryptableBalance";
        readonly type: "string";
    }, {
        readonly internalType: "uint32";
        readonly name: "pendingBalanceCreditCounter";
        readonly type: "uint32";
    }, {
        readonly internalType: "bytes";
        readonly name: "availableBalance";
        readonly type: "bytes";
    }];
    readonly name: "applyPendingBalance";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "success";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "string";
        readonly name: "denom";
        readonly type: "string";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }, {
        readonly internalType: "string";
        readonly name: "decryptableBalance";
        readonly type: "string";
    }, {
        readonly internalType: "bytes";
        readonly name: "remainingBalanceCommitment";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes";
        readonly name: "proofs";
        readonly type: "bytes";
    }];
    readonly name: "withdraw";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "success";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "string";
        readonly name: "denom";
        readonly type: "string";
    }, {
        readonly internalType: "bytes";
        readonly name: "proofs";
        readonly type: "bytes";
    }];
    readonly name: "closeAccount";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "success";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "string";
        readonly name: "addr";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "denom";
        readonly type: "string";
    }];
    readonly name: "account";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "bytes";
            readonly name: "publicKey";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "pendingBalanceLo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "pendingBalanceHi";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint32";
            readonly name: "pendingBalanceCreditCounter";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "availableBalance";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "decryptableAvailableBalance";
            readonly type: "string";
        }];
        readonly internalType: "struct CtAccount";
        readonly name: "ctAccount";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}];

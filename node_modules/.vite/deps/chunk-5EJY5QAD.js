import {
  __export
} from "./chunk-256EKJAK.js";

// node_modules/@sei-js/cosmos/dist/esm/encoding/confidentialtransfers/index.js
var confidentialtransfers_exports = {};
__export(confidentialtransfers_exports, {
  ApplyPendingBalanceDecrypted: () => ApplyPendingBalanceDecrypted,
  Auditor: () => Auditor,
  Ciphertext: () => Ciphertext,
  CiphertextCiphertextEqualityProof: () => CiphertextCiphertextEqualityProof,
  CiphertextCommitmentEqualityProof: () => CiphertextCommitmentEqualityProof,
  CiphertextValidityProof: () => CiphertextValidityProof,
  CloseAccountMsgProofs: () => CloseAccountMsgProofs,
  CtAccount: () => CtAccount,
  CtAccountWithDenom: () => CtAccountWithDenom,
  DecryptedCtAccount: () => DecryptedCtAccount,
  GenesisCtAccount: () => GenesisCtAccount,
  GenesisState: () => GenesisState,
  GetAllCtAccountsRequest: () => GetAllCtAccountsRequest,
  GetAllCtAccountsResponse: () => GetAllCtAccountsResponse,
  GetCtAccountRequest: () => GetCtAccountRequest,
  GetCtAccountResponse: () => GetCtAccountResponse,
  InitializeAccountDecrypted: () => InitializeAccountDecrypted,
  InitializeAccountMsgProofs: () => InitializeAccountMsgProofs,
  MsgApplyPendingBalance: () => MsgApplyPendingBalance,
  MsgApplyPendingBalanceResponse: () => MsgApplyPendingBalanceResponse,
  MsgCloseAccount: () => MsgCloseAccount,
  MsgCloseAccountResponse: () => MsgCloseAccountResponse,
  MsgDeposit: () => MsgDeposit,
  MsgDepositResponse: () => MsgDepositResponse,
  MsgInitializeAccount: () => MsgInitializeAccount,
  MsgInitializeAccountResponse: () => MsgInitializeAccountResponse,
  MsgTransfer: () => MsgTransfer,
  MsgTransferResponse: () => MsgTransferResponse,
  MsgWithdraw: () => MsgWithdraw,
  MsgWithdrawResponse: () => MsgWithdrawResponse,
  Params: () => Params,
  PubkeyValidityProof: () => PubkeyValidityProof,
  RangeProof: () => RangeProof,
  TransferDecrypted: () => TransferDecrypted,
  TransferMsgProofs: () => TransferMsgProofs,
  WithdrawDecrypted: () => WithdrawDecrypted,
  WithdrawMsgProofs: () => WithdrawMsgProofs,
  ZeroBalanceProof: () => ZeroBalanceProof
});

// node_modules/@bufbuild/protobuf/dist/esm/wire/varint.js
function varint64read() {
  let lowBits = 0;
  let highBits = 0;
  for (let shift = 0; shift < 28; shift += 7) {
    let b = this.buf[this.pos++];
    lowBits |= (b & 127) << shift;
    if ((b & 128) == 0) {
      this.assertBounds();
      return [lowBits, highBits];
    }
  }
  let middleByte = this.buf[this.pos++];
  lowBits |= (middleByte & 15) << 28;
  highBits = (middleByte & 112) >> 4;
  if ((middleByte & 128) == 0) {
    this.assertBounds();
    return [lowBits, highBits];
  }
  for (let shift = 3; shift <= 31; shift += 7) {
    let b = this.buf[this.pos++];
    highBits |= (b & 127) << shift;
    if ((b & 128) == 0) {
      this.assertBounds();
      return [lowBits, highBits];
    }
  }
  throw new Error("invalid varint");
}
function varint64write(lo, hi, bytes) {
  for (let i = 0; i < 28; i = i + 7) {
    const shift = lo >>> i;
    const hasNext = !(shift >>> 7 == 0 && hi == 0);
    const byte = (hasNext ? shift | 128 : shift) & 255;
    bytes.push(byte);
    if (!hasNext) {
      return;
    }
  }
  const splitBits = lo >>> 28 & 15 | (hi & 7) << 4;
  const hasMoreBits = !(hi >> 3 == 0);
  bytes.push((hasMoreBits ? splitBits | 128 : splitBits) & 255);
  if (!hasMoreBits) {
    return;
  }
  for (let i = 3; i < 31; i = i + 7) {
    const shift = hi >>> i;
    const hasNext = !(shift >>> 7 == 0);
    const byte = (hasNext ? shift | 128 : shift) & 255;
    bytes.push(byte);
    if (!hasNext) {
      return;
    }
  }
  bytes.push(hi >>> 31 & 1);
}
var TWO_PWR_32_DBL = 4294967296;
function int64FromString(dec) {
  const minus = dec[0] === "-";
  if (minus) {
    dec = dec.slice(1);
  }
  const base = 1e6;
  let lowBits = 0;
  let highBits = 0;
  function add1e6digit(begin, end) {
    const digit1e6 = Number(dec.slice(begin, end));
    highBits *= base;
    lowBits = lowBits * base + digit1e6;
    if (lowBits >= TWO_PWR_32_DBL) {
      highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);
      lowBits = lowBits % TWO_PWR_32_DBL;
    }
  }
  add1e6digit(-24, -18);
  add1e6digit(-18, -12);
  add1e6digit(-12, -6);
  add1e6digit(-6);
  return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);
}
function int64ToString(lo, hi) {
  let bits = newBits(lo, hi);
  const negative = bits.hi & 2147483648;
  if (negative) {
    bits = negate(bits.lo, bits.hi);
  }
  const result = uInt64ToString(bits.lo, bits.hi);
  return negative ? "-" + result : result;
}
function uInt64ToString(lo, hi) {
  ({ lo, hi } = toUnsigned(lo, hi));
  if (hi <= 2097151) {
    return String(TWO_PWR_32_DBL * hi + lo);
  }
  const low = lo & 16777215;
  const mid = (lo >>> 24 | hi << 8) & 16777215;
  const high = hi >> 16 & 65535;
  let digitA = low + mid * 6777216 + high * 6710656;
  let digitB = mid + high * 8147497;
  let digitC = high * 2;
  const base = 1e7;
  if (digitA >= base) {
    digitB += Math.floor(digitA / base);
    digitA %= base;
  }
  if (digitB >= base) {
    digitC += Math.floor(digitB / base);
    digitB %= base;
  }
  return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);
}
function toUnsigned(lo, hi) {
  return { lo: lo >>> 0, hi: hi >>> 0 };
}
function newBits(lo, hi) {
  return { lo: lo | 0, hi: hi | 0 };
}
function negate(lowBits, highBits) {
  highBits = ~highBits;
  if (lowBits) {
    lowBits = ~lowBits + 1;
  } else {
    highBits += 1;
  }
  return newBits(lowBits, highBits);
}
var decimalFrom1e7WithLeadingZeros = (digit1e7) => {
  const partial = String(digit1e7);
  return "0000000".slice(partial.length) + partial;
};
function varint32write(value, bytes) {
  if (value >= 0) {
    while (value > 127) {
      bytes.push(value & 127 | 128);
      value = value >>> 7;
    }
    bytes.push(value);
  } else {
    for (let i = 0; i < 9; i++) {
      bytes.push(value & 127 | 128);
      value = value >> 7;
    }
    bytes.push(1);
  }
}
function varint32read() {
  let b = this.buf[this.pos++];
  let result = b & 127;
  if ((b & 128) == 0) {
    this.assertBounds();
    return result;
  }
  b = this.buf[this.pos++];
  result |= (b & 127) << 7;
  if ((b & 128) == 0) {
    this.assertBounds();
    return result;
  }
  b = this.buf[this.pos++];
  result |= (b & 127) << 14;
  if ((b & 128) == 0) {
    this.assertBounds();
    return result;
  }
  b = this.buf[this.pos++];
  result |= (b & 127) << 21;
  if ((b & 128) == 0) {
    this.assertBounds();
    return result;
  }
  b = this.buf[this.pos++];
  result |= (b & 15) << 28;
  for (let readBytes = 5; (b & 128) !== 0 && readBytes < 10; readBytes++)
    b = this.buf[this.pos++];
  if ((b & 128) != 0)
    throw new Error("invalid varint");
  this.assertBounds();
  return result >>> 0;
}

// node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js
var protoInt64 = makeInt64Support();
function makeInt64Support() {
  const dv = new DataView(new ArrayBuffer(8));
  const ok = typeof BigInt === "function" && typeof dv.getBigInt64 === "function" && typeof dv.getBigUint64 === "function" && typeof dv.setBigInt64 === "function" && typeof dv.setBigUint64 === "function" && (typeof process != "object" || typeof process.env != "object" || process.env.BUF_BIGINT_DISABLE !== "1");
  if (ok) {
    const MIN = BigInt("-9223372036854775808"), MAX = BigInt("9223372036854775807"), UMIN = BigInt("0"), UMAX = BigInt("18446744073709551615");
    return {
      zero: BigInt(0),
      supported: true,
      parse(value) {
        const bi = typeof value == "bigint" ? value : BigInt(value);
        if (bi > MAX || bi < MIN) {
          throw new Error(`invalid int64: ${value}`);
        }
        return bi;
      },
      uParse(value) {
        const bi = typeof value == "bigint" ? value : BigInt(value);
        if (bi > UMAX || bi < UMIN) {
          throw new Error(`invalid uint64: ${value}`);
        }
        return bi;
      },
      enc(value) {
        dv.setBigInt64(0, this.parse(value), true);
        return {
          lo: dv.getInt32(0, true),
          hi: dv.getInt32(4, true)
        };
      },
      uEnc(value) {
        dv.setBigInt64(0, this.uParse(value), true);
        return {
          lo: dv.getInt32(0, true),
          hi: dv.getInt32(4, true)
        };
      },
      dec(lo, hi) {
        dv.setInt32(0, lo, true);
        dv.setInt32(4, hi, true);
        return dv.getBigInt64(0, true);
      },
      uDec(lo, hi) {
        dv.setInt32(0, lo, true);
        dv.setInt32(4, hi, true);
        return dv.getBigUint64(0, true);
      }
    };
  }
  return {
    zero: "0",
    supported: false,
    parse(value) {
      if (typeof value != "string") {
        value = value.toString();
      }
      assertInt64String(value);
      return value;
    },
    uParse(value) {
      if (typeof value != "string") {
        value = value.toString();
      }
      assertUInt64String(value);
      return value;
    },
    enc(value) {
      if (typeof value != "string") {
        value = value.toString();
      }
      assertInt64String(value);
      return int64FromString(value);
    },
    uEnc(value) {
      if (typeof value != "string") {
        value = value.toString();
      }
      assertUInt64String(value);
      return int64FromString(value);
    },
    dec(lo, hi) {
      return int64ToString(lo, hi);
    },
    uDec(lo, hi) {
      return uInt64ToString(lo, hi);
    }
  };
}
function assertInt64String(value) {
  if (!/^-?[0-9]+$/.test(value)) {
    throw new Error("invalid int64: " + value);
  }
}
function assertUInt64String(value) {
  if (!/^[0-9]+$/.test(value)) {
    throw new Error("invalid uint64: " + value);
  }
}

// node_modules/@bufbuild/protobuf/dist/esm/wire/text-encoding.js
var symbol = Symbol.for("@bufbuild/protobuf/text-encoding");
function getTextEncoding() {
  if (globalThis[symbol] == void 0) {
    const te = new globalThis.TextEncoder();
    const td = new globalThis.TextDecoder();
    globalThis[symbol] = {
      encodeUtf8(text) {
        return te.encode(text);
      },
      decodeUtf8(bytes) {
        return td.decode(bytes);
      },
      checkUtf8(text) {
        try {
          encodeURIComponent(text);
          return true;
        } catch (e) {
          return false;
        }
      }
    };
  }
  return globalThis[symbol];
}

// node_modules/@bufbuild/protobuf/dist/esm/wire/binary-encoding.js
var WireType;
(function(WireType2) {
  WireType2[WireType2["Varint"] = 0] = "Varint";
  WireType2[WireType2["Bit64"] = 1] = "Bit64";
  WireType2[WireType2["LengthDelimited"] = 2] = "LengthDelimited";
  WireType2[WireType2["StartGroup"] = 3] = "StartGroup";
  WireType2[WireType2["EndGroup"] = 4] = "EndGroup";
  WireType2[WireType2["Bit32"] = 5] = "Bit32";
})(WireType || (WireType = {}));
var FLOAT32_MAX = 34028234663852886e22;
var FLOAT32_MIN = -34028234663852886e22;
var UINT32_MAX = 4294967295;
var INT32_MAX = 2147483647;
var INT32_MIN = -2147483648;
var BinaryWriter = class {
  constructor(encodeUtf8 = getTextEncoding().encodeUtf8) {
    this.encodeUtf8 = encodeUtf8;
    this.stack = [];
    this.chunks = [];
    this.buf = [];
  }
  /**
   * Return all bytes written and reset this writer.
   */
  finish() {
    if (this.buf.length) {
      this.chunks.push(new Uint8Array(this.buf));
      this.buf = [];
    }
    let len = 0;
    for (let i = 0; i < this.chunks.length; i++)
      len += this.chunks[i].length;
    let bytes = new Uint8Array(len);
    let offset = 0;
    for (let i = 0; i < this.chunks.length; i++) {
      bytes.set(this.chunks[i], offset);
      offset += this.chunks[i].length;
    }
    this.chunks = [];
    return bytes;
  }
  /**
   * Start a new fork for length-delimited data like a message
   * or a packed repeated field.
   *
   * Must be joined later with `join()`.
   */
  fork() {
    this.stack.push({ chunks: this.chunks, buf: this.buf });
    this.chunks = [];
    this.buf = [];
    return this;
  }
  /**
   * Join the last fork. Write its length and bytes, then
   * return to the previous state.
   */
  join() {
    let chunk = this.finish();
    let prev = this.stack.pop();
    if (!prev)
      throw new Error("invalid state, fork stack empty");
    this.chunks = prev.chunks;
    this.buf = prev.buf;
    this.uint32(chunk.byteLength);
    return this.raw(chunk);
  }
  /**
   * Writes a tag (field number and wire type).
   *
   * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
   *
   * Generated code should compute the tag ahead of time and call `uint32()`.
   */
  tag(fieldNo, type) {
    return this.uint32((fieldNo << 3 | type) >>> 0);
  }
  /**
   * Write a chunk of raw bytes.
   */
  raw(chunk) {
    if (this.buf.length) {
      this.chunks.push(new Uint8Array(this.buf));
      this.buf = [];
    }
    this.chunks.push(chunk);
    return this;
  }
  /**
   * Write a `uint32` value, an unsigned 32 bit varint.
   */
  uint32(value) {
    assertUInt32(value);
    while (value > 127) {
      this.buf.push(value & 127 | 128);
      value = value >>> 7;
    }
    this.buf.push(value);
    return this;
  }
  /**
   * Write a `int32` value, a signed 32 bit varint.
   */
  int32(value) {
    assertInt32(value);
    varint32write(value, this.buf);
    return this;
  }
  /**
   * Write a `bool` value, a variant.
   */
  bool(value) {
    this.buf.push(value ? 1 : 0);
    return this;
  }
  /**
   * Write a `bytes` value, length-delimited arbitrary data.
   */
  bytes(value) {
    this.uint32(value.byteLength);
    return this.raw(value);
  }
  /**
   * Write a `string` value, length-delimited data converted to UTF-8 text.
   */
  string(value) {
    let chunk = this.encodeUtf8(value);
    this.uint32(chunk.byteLength);
    return this.raw(chunk);
  }
  /**
   * Write a `float` value, 32-bit floating point number.
   */
  float(value) {
    assertFloat32(value);
    let chunk = new Uint8Array(4);
    new DataView(chunk.buffer).setFloat32(0, value, true);
    return this.raw(chunk);
  }
  /**
   * Write a `double` value, a 64-bit floating point number.
   */
  double(value) {
    let chunk = new Uint8Array(8);
    new DataView(chunk.buffer).setFloat64(0, value, true);
    return this.raw(chunk);
  }
  /**
   * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
   */
  fixed32(value) {
    assertUInt32(value);
    let chunk = new Uint8Array(4);
    new DataView(chunk.buffer).setUint32(0, value, true);
    return this.raw(chunk);
  }
  /**
   * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
   */
  sfixed32(value) {
    assertInt32(value);
    let chunk = new Uint8Array(4);
    new DataView(chunk.buffer).setInt32(0, value, true);
    return this.raw(chunk);
  }
  /**
   * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
   */
  sint32(value) {
    assertInt32(value);
    value = (value << 1 ^ value >> 31) >>> 0;
    varint32write(value, this.buf);
    return this;
  }
  /**
   * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
   */
  sfixed64(value) {
    let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);
    view.setInt32(0, tc.lo, true);
    view.setInt32(4, tc.hi, true);
    return this.raw(chunk);
  }
  /**
   * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
   */
  fixed64(value) {
    let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);
    view.setInt32(0, tc.lo, true);
    view.setInt32(4, tc.hi, true);
    return this.raw(chunk);
  }
  /**
   * Write a `int64` value, a signed 64-bit varint.
   */
  int64(value) {
    let tc = protoInt64.enc(value);
    varint64write(tc.lo, tc.hi, this.buf);
    return this;
  }
  /**
   * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
   */
  sint64(value) {
    let tc = protoInt64.enc(value), sign = tc.hi >> 31, lo = tc.lo << 1 ^ sign, hi = (tc.hi << 1 | tc.lo >>> 31) ^ sign;
    varint64write(lo, hi, this.buf);
    return this;
  }
  /**
   * Write a `uint64` value, an unsigned 64-bit varint.
   */
  uint64(value) {
    let tc = protoInt64.uEnc(value);
    varint64write(tc.lo, tc.hi, this.buf);
    return this;
  }
};
var BinaryReader = class {
  constructor(buf, decodeUtf8 = getTextEncoding().decodeUtf8) {
    this.decodeUtf8 = decodeUtf8;
    this.varint64 = varint64read;
    this.uint32 = varint32read;
    this.buf = buf;
    this.len = buf.length;
    this.pos = 0;
    this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  /**
   * Reads a tag - field number and wire type.
   */
  tag() {
    let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
    if (fieldNo <= 0 || wireType < 0 || wireType > 5)
      throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
    return [fieldNo, wireType];
  }
  /**
   * Skip one element and return the skipped data.
   *
   * When skipping StartGroup, provide the tags field number to check for
   * matching field number in the EndGroup tag.
   */
  skip(wireType, fieldNo) {
    let start = this.pos;
    switch (wireType) {
      case WireType.Varint:
        while (this.buf[this.pos++] & 128) {
        }
        break;
      case WireType.Bit64:
        this.pos += 4;
      case WireType.Bit32:
        this.pos += 4;
        break;
      case WireType.LengthDelimited:
        let len = this.uint32();
        this.pos += len;
        break;
      case WireType.StartGroup:
        for (; ; ) {
          const [fn, wt] = this.tag();
          if (wt === WireType.EndGroup) {
            if (fieldNo !== void 0 && fn !== fieldNo) {
              throw new Error("invalid end group tag");
            }
            break;
          }
          this.skip(wt, fn);
        }
        break;
      default:
        throw new Error("cant skip wire type " + wireType);
    }
    this.assertBounds();
    return this.buf.subarray(start, this.pos);
  }
  /**
   * Throws error if position in byte array is out of range.
   */
  assertBounds() {
    if (this.pos > this.len)
      throw new RangeError("premature EOF");
  }
  /**
   * Read a `int32` field, a signed 32 bit varint.
   */
  int32() {
    return this.uint32() | 0;
  }
  /**
   * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
   */
  sint32() {
    let zze = this.uint32();
    return zze >>> 1 ^ -(zze & 1);
  }
  /**
   * Read a `int64` field, a signed 64-bit varint.
   */
  int64() {
    return protoInt64.dec(...this.varint64());
  }
  /**
   * Read a `uint64` field, an unsigned 64-bit varint.
   */
  uint64() {
    return protoInt64.uDec(...this.varint64());
  }
  /**
   * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
   */
  sint64() {
    let [lo, hi] = this.varint64();
    let s = -(lo & 1);
    lo = (lo >>> 1 | (hi & 1) << 31) ^ s;
    hi = hi >>> 1 ^ s;
    return protoInt64.dec(lo, hi);
  }
  /**
   * Read a `bool` field, a variant.
   */
  bool() {
    let [lo, hi] = this.varint64();
    return lo !== 0 || hi !== 0;
  }
  /**
   * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
   */
  fixed32() {
    return this.view.getUint32((this.pos += 4) - 4, true);
  }
  /**
   * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
   */
  sfixed32() {
    return this.view.getInt32((this.pos += 4) - 4, true);
  }
  /**
   * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
   */
  fixed64() {
    return protoInt64.uDec(this.sfixed32(), this.sfixed32());
  }
  /**
   * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
   */
  sfixed64() {
    return protoInt64.dec(this.sfixed32(), this.sfixed32());
  }
  /**
   * Read a `float` field, 32-bit floating point number.
   */
  float() {
    return this.view.getFloat32((this.pos += 4) - 4, true);
  }
  /**
   * Read a `double` field, a 64-bit floating point number.
   */
  double() {
    return this.view.getFloat64((this.pos += 8) - 8, true);
  }
  /**
   * Read a `bytes` field, length-delimited arbitrary data.
   */
  bytes() {
    let len = this.uint32(), start = this.pos;
    this.pos += len;
    this.assertBounds();
    return this.buf.subarray(start, start + len);
  }
  /**
   * Read a `string` field, length-delimited data converted to UTF-8 text.
   */
  string() {
    return this.decodeUtf8(this.bytes());
  }
};
function assertInt32(arg) {
  if (typeof arg == "string") {
    arg = Number(arg);
  } else if (typeof arg != "number") {
    throw new Error("invalid int32: " + typeof arg);
  }
  if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)
    throw new Error("invalid int32: " + arg);
}
function assertUInt32(arg) {
  if (typeof arg == "string") {
    arg = Number(arg);
  } else if (typeof arg != "number") {
    throw new Error("invalid uint32: " + typeof arg);
  }
  if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)
    throw new Error("invalid uint32: " + arg);
}
function assertFloat32(arg) {
  if (typeof arg == "string") {
    const o = arg;
    arg = Number(arg);
    if (isNaN(arg) && o !== "NaN") {
      throw new Error("invalid float32: " + o);
    }
  } else if (typeof arg != "number") {
    throw new Error("invalid float32: " + typeof arg);
  }
  if (Number.isFinite(arg) && (arg > FLOAT32_MAX || arg < FLOAT32_MIN))
    throw new Error("invalid float32: " + arg);
}

// node_modules/@bufbuild/protobuf/dist/esm/descriptors.js
var ScalarType;
(function(ScalarType2) {
  ScalarType2[ScalarType2["DOUBLE"] = 1] = "DOUBLE";
  ScalarType2[ScalarType2["FLOAT"] = 2] = "FLOAT";
  ScalarType2[ScalarType2["INT64"] = 3] = "INT64";
  ScalarType2[ScalarType2["UINT64"] = 4] = "UINT64";
  ScalarType2[ScalarType2["INT32"] = 5] = "INT32";
  ScalarType2[ScalarType2["FIXED64"] = 6] = "FIXED64";
  ScalarType2[ScalarType2["FIXED32"] = 7] = "FIXED32";
  ScalarType2[ScalarType2["BOOL"] = 8] = "BOOL";
  ScalarType2[ScalarType2["STRING"] = 9] = "STRING";
  ScalarType2[ScalarType2["BYTES"] = 12] = "BYTES";
  ScalarType2[ScalarType2["UINT32"] = 13] = "UINT32";
  ScalarType2[ScalarType2["SFIXED32"] = 15] = "SFIXED32";
  ScalarType2[ScalarType2["SFIXED64"] = 16] = "SFIXED64";
  ScalarType2[ScalarType2["SINT32"] = 17] = "SINT32";
  ScalarType2[ScalarType2["SINT64"] = 18] = "SINT64";
})(ScalarType || (ScalarType = {}));

// node_modules/@bufbuild/protobuf/dist/esm/reflect/unsafe.js
var unsafeLocal = Symbol.for("reflect unsafe local");

// node_modules/@bufbuild/protobuf/dist/esm/create.js
var tokenZeroMessageField = Symbol();

// node_modules/@sei-js/cosmos/dist/esm/encoding/confidentialtransfers/cryptography.js
var Ciphertext = {
  $type: "seiprotocol.seichain.confidentialtransfers.Ciphertext",
  encode(message, writer = new BinaryWriter()) {
    if (message.c.length !== 0) {
      writer.uint32(10).bytes(message.c);
    }
    if (message.d.length !== 0) {
      writer.uint32(18).bytes(message.d);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCiphertext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.c = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.d = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      c: isSet(object.c) ? bytesFromBase64(object.c) : new Uint8Array(0),
      d: isSet(object.d) ? bytesFromBase64(object.d) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.c.length !== 0) {
      obj.c = base64FromBytes(message.c);
    }
    if (message.d.length !== 0) {
      obj.d = base64FromBytes(message.d);
    }
    return obj;
  },
  create(base) {
    return Ciphertext.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCiphertext();
    message.c = object.c ?? new Uint8Array(0);
    message.d = object.d ?? new Uint8Array(0);
    return message;
  }
};
function createBaseCiphertext() {
  return { c: new Uint8Array(0), d: new Uint8Array(0) };
}
function bytesFromBase64(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet(value) {
  return value !== null && value !== void 0;
}
var registry = [["/seiprotocol.seichain.confidentialtransfers.Ciphertext", Ciphertext]];
var aminoConverters = {
  "/seiprotocol.seichain.confidentialtransfers.Ciphertext": {
    aminoType: "confidentialtransfers/Ciphertext",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/confidentialtransfers/confidential.js
var CtAccount = {
  $type: "seiprotocol.seichain.confidentialtransfers.CtAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.public_key.length !== 0) {
      writer.uint32(10).bytes(message.public_key);
    }
    if (message.pending_balance_lo !== void 0) {
      Ciphertext.encode(message.pending_balance_lo, writer.uint32(18).fork()).join();
    }
    if (message.pending_balance_hi !== void 0) {
      Ciphertext.encode(message.pending_balance_hi, writer.uint32(26).fork()).join();
    }
    if (message.pending_balance_credit_counter !== 0) {
      writer.uint32(32).uint32(message.pending_balance_credit_counter);
    }
    if (message.available_balance !== void 0) {
      Ciphertext.encode(message.available_balance, writer.uint32(42).fork()).join();
    }
    if (message.decryptable_available_balance !== "") {
      writer.uint32(50).string(message.decryptable_available_balance);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCtAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.public_key = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pending_balance_lo = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pending_balance_hi = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.pending_balance_credit_counter = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.available_balance = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.decryptable_available_balance = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      public_key: isSet2(object.public_key) ? bytesFromBase642(object.public_key) : new Uint8Array(0),
      pending_balance_lo: isSet2(object.pending_balance_lo) ? Ciphertext.fromJSON(object.pending_balance_lo) : void 0,
      pending_balance_hi: isSet2(object.pending_balance_hi) ? Ciphertext.fromJSON(object.pending_balance_hi) : void 0,
      pending_balance_credit_counter: isSet2(object.pending_balance_credit_counter) ? globalThis.Number(object.pending_balance_credit_counter) : 0,
      available_balance: isSet2(object.available_balance) ? Ciphertext.fromJSON(object.available_balance) : void 0,
      decryptable_available_balance: isSet2(object.decryptable_available_balance) ? globalThis.String(object.decryptable_available_balance) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.public_key.length !== 0) {
      obj.public_key = base64FromBytes2(message.public_key);
    }
    if (message.pending_balance_lo !== void 0) {
      obj.pending_balance_lo = Ciphertext.toJSON(message.pending_balance_lo);
    }
    if (message.pending_balance_hi !== void 0) {
      obj.pending_balance_hi = Ciphertext.toJSON(message.pending_balance_hi);
    }
    if (message.pending_balance_credit_counter !== 0) {
      obj.pending_balance_credit_counter = Math.round(message.pending_balance_credit_counter);
    }
    if (message.available_balance !== void 0) {
      obj.available_balance = Ciphertext.toJSON(message.available_balance);
    }
    if (message.decryptable_available_balance !== "") {
      obj.decryptable_available_balance = message.decryptable_available_balance;
    }
    return obj;
  },
  create(base) {
    return CtAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCtAccount();
    message.public_key = object.public_key ?? new Uint8Array(0);
    message.pending_balance_lo = object.pending_balance_lo !== void 0 && object.pending_balance_lo !== null ? Ciphertext.fromPartial(object.pending_balance_lo) : void 0;
    message.pending_balance_hi = object.pending_balance_hi !== void 0 && object.pending_balance_hi !== null ? Ciphertext.fromPartial(object.pending_balance_hi) : void 0;
    message.pending_balance_credit_counter = object.pending_balance_credit_counter ?? 0;
    message.available_balance = object.available_balance !== void 0 && object.available_balance !== null ? Ciphertext.fromPartial(object.available_balance) : void 0;
    message.decryptable_available_balance = object.decryptable_available_balance ?? "";
    return message;
  }
};
var CtAccountWithDenom = {
  $type: "seiprotocol.seichain.confidentialtransfers.CtAccountWithDenom",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.account !== void 0) {
      CtAccount.encode(message.account, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCtAccountWithDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.account = CtAccount.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denom: isSet2(object.denom) ? globalThis.String(object.denom) : "",
      account: isSet2(object.account) ? CtAccount.fromJSON(object.account) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.account !== void 0) {
      obj.account = CtAccount.toJSON(message.account);
    }
    return obj;
  },
  create(base) {
    return CtAccountWithDenom.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCtAccountWithDenom();
    message.denom = object.denom ?? "";
    message.account = object.account !== void 0 && object.account !== null ? CtAccount.fromPartial(object.account) : void 0;
    return message;
  }
};
function createBaseCtAccount() {
  return {
    public_key: new Uint8Array(0),
    pending_balance_lo: void 0,
    pending_balance_hi: void 0,
    pending_balance_credit_counter: 0,
    available_balance: void 0,
    decryptable_available_balance: ""
  };
}
function createBaseCtAccountWithDenom() {
  return { denom: "", account: void 0 };
}
function bytesFromBase642(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes2(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet2(value) {
  return value !== null && value !== void 0;
}
var registry2 = [
  ["/seiprotocol.seichain.confidentialtransfers.CtAccount", CtAccount],
  ["/seiprotocol.seichain.confidentialtransfers.CtAccountWithDenom", CtAccountWithDenom]
];
var aminoConverters2 = {
  "/seiprotocol.seichain.confidentialtransfers.CtAccount": {
    aminoType: "confidentialtransfers/CtAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.CtAccountWithDenom": {
    aminoType: "confidentialtransfers/CtAccountWithDenom",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/confidentialtransfers/params.js
var Params = {
  $type: "seiprotocol.seichain.confidentialtransfers.Params",
  encode(message, writer = new BinaryWriter()) {
    if (message.enable_ct_module !== false) {
      writer.uint32(8).bool(message.enable_ct_module);
    }
    if (message.range_proof_gas_cost !== 0) {
      writer.uint32(16).uint64(message.range_proof_gas_cost);
    }
    for (const v of message.enabled_denoms) {
      writer.uint32(26).string(v);
    }
    if (message.ciphertext_gas_cost !== 0) {
      writer.uint32(32).uint64(message.ciphertext_gas_cost);
    }
    if (message.proof_verification_gas_cost !== 0) {
      writer.uint32(40).uint64(message.proof_verification_gas_cost);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.enable_ct_module = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.range_proof_gas_cost = longToNumber(reader.uint64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.enabled_denoms.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.ciphertext_gas_cost = longToNumber(reader.uint64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.proof_verification_gas_cost = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      enable_ct_module: isSet3(object.enable_ct_module) ? globalThis.Boolean(object.enable_ct_module) : false,
      range_proof_gas_cost: isSet3(object.range_proof_gas_cost) ? globalThis.Number(object.range_proof_gas_cost) : 0,
      enabled_denoms: globalThis.Array.isArray(object == null ? void 0 : object.enabled_denoms) ? object.enabled_denoms.map((e) => globalThis.String(e)) : [],
      ciphertext_gas_cost: isSet3(object.ciphertext_gas_cost) ? globalThis.Number(object.ciphertext_gas_cost) : 0,
      proof_verification_gas_cost: isSet3(object.proof_verification_gas_cost) ? globalThis.Number(object.proof_verification_gas_cost) : 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.enable_ct_module !== false) {
      obj.enable_ct_module = message.enable_ct_module;
    }
    if (message.range_proof_gas_cost !== 0) {
      obj.range_proof_gas_cost = Math.round(message.range_proof_gas_cost);
    }
    if ((_a = message.enabled_denoms) == null ? void 0 : _a.length) {
      obj.enabled_denoms = message.enabled_denoms;
    }
    if (message.ciphertext_gas_cost !== 0) {
      obj.ciphertext_gas_cost = Math.round(message.ciphertext_gas_cost);
    }
    if (message.proof_verification_gas_cost !== 0) {
      obj.proof_verification_gas_cost = Math.round(message.proof_verification_gas_cost);
    }
    return obj;
  },
  create(base) {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseParams();
    message.enable_ct_module = object.enable_ct_module ?? false;
    message.range_proof_gas_cost = object.range_proof_gas_cost ?? 0;
    message.enabled_denoms = ((_a = object.enabled_denoms) == null ? void 0 : _a.map((e) => e)) || [];
    message.ciphertext_gas_cost = object.ciphertext_gas_cost ?? 0;
    message.proof_verification_gas_cost = object.proof_verification_gas_cost ?? 0;
    return message;
  }
};
function createBaseParams() {
  return {
    enable_ct_module: false,
    range_proof_gas_cost: 0,
    enabled_denoms: [],
    ciphertext_gas_cost: 0,
    proof_verification_gas_cost: 0
  };
}
function longToNumber(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet3(value) {
  return value !== null && value !== void 0;
}
var registry3 = [["/seiprotocol.seichain.confidentialtransfers.Params", Params]];
var aminoConverters3 = {
  "/seiprotocol.seichain.confidentialtransfers.Params": {
    aminoType: "confidentialtransfers/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/confidentialtransfers/genesis.js
var GenesisState = {
  $type: "seiprotocol.seichain.confidentialtransfers.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.accounts) {
      GenesisCtAccount.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.accounts.push(GenesisCtAccount.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet4(object.params) ? Params.fromJSON(object.params) : void 0,
      accounts: globalThis.Array.isArray(object == null ? void 0 : object.accounts) ? object.accounts.map((e) => GenesisCtAccount.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params.toJSON(message.params);
    }
    if ((_a = message.accounts) == null ? void 0 : _a.length) {
      obj.accounts = message.accounts.map((e) => GenesisCtAccount.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGenesisState();
    message.params = object.params !== void 0 && object.params !== null ? Params.fromPartial(object.params) : void 0;
    message.accounts = ((_a = object.accounts) == null ? void 0 : _a.map((e) => GenesisCtAccount.fromPartial(e))) || [];
    return message;
  }
};
var GenesisCtAccount = {
  $type: "seiprotocol.seichain.confidentialtransfers.GenesisCtAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.account !== void 0) {
      CtAccount.encode(message.account, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisCtAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.account = CtAccount.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet4(object.key) ? bytesFromBase643(object.key) : new Uint8Array(0),
      account: isSet4(object.account) ? CtAccount.fromJSON(object.account) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes3(message.key);
    }
    if (message.account !== void 0) {
      obj.account = CtAccount.toJSON(message.account);
    }
    return obj;
  },
  create(base) {
    return GenesisCtAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGenesisCtAccount();
    message.key = object.key ?? new Uint8Array(0);
    message.account = object.account !== void 0 && object.account !== null ? CtAccount.fromPartial(object.account) : void 0;
    return message;
  }
};
function createBaseGenesisState() {
  return { params: void 0, accounts: [] };
}
function createBaseGenesisCtAccount() {
  return { key: new Uint8Array(0), account: void 0 };
}
function bytesFromBase643(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes3(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet4(value) {
  return value !== null && value !== void 0;
}
var registry4 = [
  ["/seiprotocol.seichain.confidentialtransfers.GenesisState", GenesisState],
  ["/seiprotocol.seichain.confidentialtransfers.GenesisCtAccount", GenesisCtAccount]
];
var aminoConverters4 = {
  "/seiprotocol.seichain.confidentialtransfers.GenesisState": {
    aminoType: "confidentialtransfers/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.GenesisCtAccount": {
    aminoType: "confidentialtransfers/GenesisCtAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/query/v1beta1/pagination.js
var PageRequest = {
  $type: "cosmos.base.query.v1beta1.PageRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.offset !== 0) {
      writer.uint32(16).uint64(message.offset);
    }
    if (message.limit !== 0) {
      writer.uint32(24).uint64(message.limit);
    }
    if (message.count_total !== false) {
      writer.uint32(32).bool(message.count_total);
    }
    if (message.reverse !== false) {
      writer.uint32(40).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.offset = longToNumber2(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.limit = longToNumber2(reader.uint64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.count_total = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet5(object.key) ? bytesFromBase644(object.key) : new Uint8Array(0),
      offset: isSet5(object.offset) ? globalThis.Number(object.offset) : 0,
      limit: isSet5(object.limit) ? globalThis.Number(object.limit) : 0,
      count_total: isSet5(object.count_total) ? globalThis.Boolean(object.count_total) : false,
      reverse: isSet5(object.reverse) ? globalThis.Boolean(object.reverse) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes4(message.key);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.count_total !== false) {
      obj.count_total = message.count_total;
    }
    if (message.reverse !== false) {
      obj.reverse = message.reverse;
    }
    return obj;
  },
  create(base) {
    return PageRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePageRequest();
    message.key = object.key ?? new Uint8Array(0);
    message.offset = object.offset ?? 0;
    message.limit = object.limit ?? 0;
    message.count_total = object.count_total ?? false;
    message.reverse = object.reverse ?? false;
    return message;
  }
};
var PageResponse = {
  $type: "cosmos.base.query.v1beta1.PageResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.next_key.length !== 0) {
      writer.uint32(10).bytes(message.next_key);
    }
    if (message.total !== 0) {
      writer.uint32(16).uint64(message.total);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.next_key = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.total = longToNumber2(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      next_key: isSet5(object.next_key) ? bytesFromBase644(object.next_key) : new Uint8Array(0),
      total: isSet5(object.total) ? globalThis.Number(object.total) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.next_key.length !== 0) {
      obj.next_key = base64FromBytes4(message.next_key);
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },
  create(base) {
    return PageResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePageResponse();
    message.next_key = object.next_key ?? new Uint8Array(0);
    message.total = object.total ?? 0;
    return message;
  }
};
function createBasePageRequest() {
  return { key: new Uint8Array(0), offset: 0, limit: 0, count_total: false, reverse: false };
}
function createBasePageResponse() {
  return { next_key: new Uint8Array(0), total: 0 };
}
function bytesFromBase644(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes4(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber2(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet5(value) {
  return value !== null && value !== void 0;
}
var registry5 = [
  ["/cosmos.base.query.v1beta1.PageRequest", PageRequest],
  ["/cosmos.base.query.v1beta1.PageResponse", PageResponse]
];
var aminoConverters5 = {
  "/cosmos.base.query.v1beta1.PageRequest": {
    aminoType: "cosmos-sdk/PageRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.query.v1beta1.PageResponse": {
    aminoType: "cosmos-sdk/PageResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/confidentialtransfers/zk.js
var TransferMsgProofs = {
  $type: "seiprotocol.seichain.confidentialtransfers.TransferMsgProofs",
  encode(message, writer = new BinaryWriter()) {
    if (message.remaining_balance_commitment_validity_proof !== void 0) {
      CiphertextValidityProof.encode(message.remaining_balance_commitment_validity_proof, writer.uint32(10).fork()).join();
    }
    if (message.sender_transfer_amount_lo_validity_proof !== void 0) {
      CiphertextValidityProof.encode(message.sender_transfer_amount_lo_validity_proof, writer.uint32(18).fork()).join();
    }
    if (message.sender_transfer_amount_hi_validity_proof !== void 0) {
      CiphertextValidityProof.encode(message.sender_transfer_amount_hi_validity_proof, writer.uint32(26).fork()).join();
    }
    if (message.recipient_transfer_amount_lo_validity_proof !== void 0) {
      CiphertextValidityProof.encode(message.recipient_transfer_amount_lo_validity_proof, writer.uint32(34).fork()).join();
    }
    if (message.recipient_transfer_amount_hi_validity_proof !== void 0) {
      CiphertextValidityProof.encode(message.recipient_transfer_amount_hi_validity_proof, writer.uint32(42).fork()).join();
    }
    if (message.remaining_balance_range_proof !== void 0) {
      RangeProof.encode(message.remaining_balance_range_proof, writer.uint32(50).fork()).join();
    }
    if (message.remaining_balance_equality_proof !== void 0) {
      CiphertextCommitmentEqualityProof.encode(message.remaining_balance_equality_proof, writer.uint32(58).fork()).join();
    }
    if (message.transfer_amount_lo_equality_proof !== void 0) {
      CiphertextCiphertextEqualityProof.encode(message.transfer_amount_lo_equality_proof, writer.uint32(66).fork()).join();
    }
    if (message.transfer_amount_hi_equality_proof !== void 0) {
      CiphertextCiphertextEqualityProof.encode(message.transfer_amount_hi_equality_proof, writer.uint32(74).fork()).join();
    }
    if (message.transfer_amount_lo_range_proof !== void 0) {
      RangeProof.encode(message.transfer_amount_lo_range_proof, writer.uint32(82).fork()).join();
    }
    if (message.transfer_amount_hi_range_proof !== void 0) {
      RangeProof.encode(message.transfer_amount_hi_range_proof, writer.uint32(90).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTransferMsgProofs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.remaining_balance_commitment_validity_proof = CiphertextValidityProof.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.sender_transfer_amount_lo_validity_proof = CiphertextValidityProof.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.sender_transfer_amount_hi_validity_proof = CiphertextValidityProof.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.recipient_transfer_amount_lo_validity_proof = CiphertextValidityProof.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.recipient_transfer_amount_hi_validity_proof = CiphertextValidityProof.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.remaining_balance_range_proof = RangeProof.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.remaining_balance_equality_proof = CiphertextCommitmentEqualityProof.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.transfer_amount_lo_equality_proof = CiphertextCiphertextEqualityProof.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.transfer_amount_hi_equality_proof = CiphertextCiphertextEqualityProof.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.transfer_amount_lo_range_proof = RangeProof.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.transfer_amount_hi_range_proof = RangeProof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      remaining_balance_commitment_validity_proof: isSet6(object.remaining_balance_commitment_validity_proof) ? CiphertextValidityProof.fromJSON(object.remaining_balance_commitment_validity_proof) : void 0,
      sender_transfer_amount_lo_validity_proof: isSet6(object.sender_transfer_amount_lo_validity_proof) ? CiphertextValidityProof.fromJSON(object.sender_transfer_amount_lo_validity_proof) : void 0,
      sender_transfer_amount_hi_validity_proof: isSet6(object.sender_transfer_amount_hi_validity_proof) ? CiphertextValidityProof.fromJSON(object.sender_transfer_amount_hi_validity_proof) : void 0,
      recipient_transfer_amount_lo_validity_proof: isSet6(object.recipient_transfer_amount_lo_validity_proof) ? CiphertextValidityProof.fromJSON(object.recipient_transfer_amount_lo_validity_proof) : void 0,
      recipient_transfer_amount_hi_validity_proof: isSet6(object.recipient_transfer_amount_hi_validity_proof) ? CiphertextValidityProof.fromJSON(object.recipient_transfer_amount_hi_validity_proof) : void 0,
      remaining_balance_range_proof: isSet6(object.remaining_balance_range_proof) ? RangeProof.fromJSON(object.remaining_balance_range_proof) : void 0,
      remaining_balance_equality_proof: isSet6(object.remaining_balance_equality_proof) ? CiphertextCommitmentEqualityProof.fromJSON(object.remaining_balance_equality_proof) : void 0,
      transfer_amount_lo_equality_proof: isSet6(object.transfer_amount_lo_equality_proof) ? CiphertextCiphertextEqualityProof.fromJSON(object.transfer_amount_lo_equality_proof) : void 0,
      transfer_amount_hi_equality_proof: isSet6(object.transfer_amount_hi_equality_proof) ? CiphertextCiphertextEqualityProof.fromJSON(object.transfer_amount_hi_equality_proof) : void 0,
      transfer_amount_lo_range_proof: isSet6(object.transfer_amount_lo_range_proof) ? RangeProof.fromJSON(object.transfer_amount_lo_range_proof) : void 0,
      transfer_amount_hi_range_proof: isSet6(object.transfer_amount_hi_range_proof) ? RangeProof.fromJSON(object.transfer_amount_hi_range_proof) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.remaining_balance_commitment_validity_proof !== void 0) {
      obj.remaining_balance_commitment_validity_proof = CiphertextValidityProof.toJSON(message.remaining_balance_commitment_validity_proof);
    }
    if (message.sender_transfer_amount_lo_validity_proof !== void 0) {
      obj.sender_transfer_amount_lo_validity_proof = CiphertextValidityProof.toJSON(message.sender_transfer_amount_lo_validity_proof);
    }
    if (message.sender_transfer_amount_hi_validity_proof !== void 0) {
      obj.sender_transfer_amount_hi_validity_proof = CiphertextValidityProof.toJSON(message.sender_transfer_amount_hi_validity_proof);
    }
    if (message.recipient_transfer_amount_lo_validity_proof !== void 0) {
      obj.recipient_transfer_amount_lo_validity_proof = CiphertextValidityProof.toJSON(message.recipient_transfer_amount_lo_validity_proof);
    }
    if (message.recipient_transfer_amount_hi_validity_proof !== void 0) {
      obj.recipient_transfer_amount_hi_validity_proof = CiphertextValidityProof.toJSON(message.recipient_transfer_amount_hi_validity_proof);
    }
    if (message.remaining_balance_range_proof !== void 0) {
      obj.remaining_balance_range_proof = RangeProof.toJSON(message.remaining_balance_range_proof);
    }
    if (message.remaining_balance_equality_proof !== void 0) {
      obj.remaining_balance_equality_proof = CiphertextCommitmentEqualityProof.toJSON(message.remaining_balance_equality_proof);
    }
    if (message.transfer_amount_lo_equality_proof !== void 0) {
      obj.transfer_amount_lo_equality_proof = CiphertextCiphertextEqualityProof.toJSON(message.transfer_amount_lo_equality_proof);
    }
    if (message.transfer_amount_hi_equality_proof !== void 0) {
      obj.transfer_amount_hi_equality_proof = CiphertextCiphertextEqualityProof.toJSON(message.transfer_amount_hi_equality_proof);
    }
    if (message.transfer_amount_lo_range_proof !== void 0) {
      obj.transfer_amount_lo_range_proof = RangeProof.toJSON(message.transfer_amount_lo_range_proof);
    }
    if (message.transfer_amount_hi_range_proof !== void 0) {
      obj.transfer_amount_hi_range_proof = RangeProof.toJSON(message.transfer_amount_hi_range_proof);
    }
    return obj;
  },
  create(base) {
    return TransferMsgProofs.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTransferMsgProofs();
    message.remaining_balance_commitment_validity_proof = object.remaining_balance_commitment_validity_proof !== void 0 && object.remaining_balance_commitment_validity_proof !== null ? CiphertextValidityProof.fromPartial(object.remaining_balance_commitment_validity_proof) : void 0;
    message.sender_transfer_amount_lo_validity_proof = object.sender_transfer_amount_lo_validity_proof !== void 0 && object.sender_transfer_amount_lo_validity_proof !== null ? CiphertextValidityProof.fromPartial(object.sender_transfer_amount_lo_validity_proof) : void 0;
    message.sender_transfer_amount_hi_validity_proof = object.sender_transfer_amount_hi_validity_proof !== void 0 && object.sender_transfer_amount_hi_validity_proof !== null ? CiphertextValidityProof.fromPartial(object.sender_transfer_amount_hi_validity_proof) : void 0;
    message.recipient_transfer_amount_lo_validity_proof = object.recipient_transfer_amount_lo_validity_proof !== void 0 && object.recipient_transfer_amount_lo_validity_proof !== null ? CiphertextValidityProof.fromPartial(object.recipient_transfer_amount_lo_validity_proof) : void 0;
    message.recipient_transfer_amount_hi_validity_proof = object.recipient_transfer_amount_hi_validity_proof !== void 0 && object.recipient_transfer_amount_hi_validity_proof !== null ? CiphertextValidityProof.fromPartial(object.recipient_transfer_amount_hi_validity_proof) : void 0;
    message.remaining_balance_range_proof = object.remaining_balance_range_proof !== void 0 && object.remaining_balance_range_proof !== null ? RangeProof.fromPartial(object.remaining_balance_range_proof) : void 0;
    message.remaining_balance_equality_proof = object.remaining_balance_equality_proof !== void 0 && object.remaining_balance_equality_proof !== null ? CiphertextCommitmentEqualityProof.fromPartial(object.remaining_balance_equality_proof) : void 0;
    message.transfer_amount_lo_equality_proof = object.transfer_amount_lo_equality_proof !== void 0 && object.transfer_amount_lo_equality_proof !== null ? CiphertextCiphertextEqualityProof.fromPartial(object.transfer_amount_lo_equality_proof) : void 0;
    message.transfer_amount_hi_equality_proof = object.transfer_amount_hi_equality_proof !== void 0 && object.transfer_amount_hi_equality_proof !== null ? CiphertextCiphertextEqualityProof.fromPartial(object.transfer_amount_hi_equality_proof) : void 0;
    message.transfer_amount_lo_range_proof = object.transfer_amount_lo_range_proof !== void 0 && object.transfer_amount_lo_range_proof !== null ? RangeProof.fromPartial(object.transfer_amount_lo_range_proof) : void 0;
    message.transfer_amount_hi_range_proof = object.transfer_amount_hi_range_proof !== void 0 && object.transfer_amount_hi_range_proof !== null ? RangeProof.fromPartial(object.transfer_amount_hi_range_proof) : void 0;
    return message;
  }
};
var InitializeAccountMsgProofs = {
  $type: "seiprotocol.seichain.confidentialtransfers.InitializeAccountMsgProofs",
  encode(message, writer = new BinaryWriter()) {
    if (message.pubkey_validity_proof !== void 0) {
      PubkeyValidityProof.encode(message.pubkey_validity_proof, writer.uint32(10).fork()).join();
    }
    if (message.zero_pending_balance_lo_proof !== void 0) {
      ZeroBalanceProof.encode(message.zero_pending_balance_lo_proof, writer.uint32(18).fork()).join();
    }
    if (message.zero_pending_balance_hi_proof !== void 0) {
      ZeroBalanceProof.encode(message.zero_pending_balance_hi_proof, writer.uint32(26).fork()).join();
    }
    if (message.zero_available_balance_proof !== void 0) {
      ZeroBalanceProof.encode(message.zero_available_balance_proof, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseInitializeAccountMsgProofs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pubkey_validity_proof = PubkeyValidityProof.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.zero_pending_balance_lo_proof = ZeroBalanceProof.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.zero_pending_balance_hi_proof = ZeroBalanceProof.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.zero_available_balance_proof = ZeroBalanceProof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pubkey_validity_proof: isSet6(object.pubkey_validity_proof) ? PubkeyValidityProof.fromJSON(object.pubkey_validity_proof) : void 0,
      zero_pending_balance_lo_proof: isSet6(object.zero_pending_balance_lo_proof) ? ZeroBalanceProof.fromJSON(object.zero_pending_balance_lo_proof) : void 0,
      zero_pending_balance_hi_proof: isSet6(object.zero_pending_balance_hi_proof) ? ZeroBalanceProof.fromJSON(object.zero_pending_balance_hi_proof) : void 0,
      zero_available_balance_proof: isSet6(object.zero_available_balance_proof) ? ZeroBalanceProof.fromJSON(object.zero_available_balance_proof) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pubkey_validity_proof !== void 0) {
      obj.pubkey_validity_proof = PubkeyValidityProof.toJSON(message.pubkey_validity_proof);
    }
    if (message.zero_pending_balance_lo_proof !== void 0) {
      obj.zero_pending_balance_lo_proof = ZeroBalanceProof.toJSON(message.zero_pending_balance_lo_proof);
    }
    if (message.zero_pending_balance_hi_proof !== void 0) {
      obj.zero_pending_balance_hi_proof = ZeroBalanceProof.toJSON(message.zero_pending_balance_hi_proof);
    }
    if (message.zero_available_balance_proof !== void 0) {
      obj.zero_available_balance_proof = ZeroBalanceProof.toJSON(message.zero_available_balance_proof);
    }
    return obj;
  },
  create(base) {
    return InitializeAccountMsgProofs.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseInitializeAccountMsgProofs();
    message.pubkey_validity_proof = object.pubkey_validity_proof !== void 0 && object.pubkey_validity_proof !== null ? PubkeyValidityProof.fromPartial(object.pubkey_validity_proof) : void 0;
    message.zero_pending_balance_lo_proof = object.zero_pending_balance_lo_proof !== void 0 && object.zero_pending_balance_lo_proof !== null ? ZeroBalanceProof.fromPartial(object.zero_pending_balance_lo_proof) : void 0;
    message.zero_pending_balance_hi_proof = object.zero_pending_balance_hi_proof !== void 0 && object.zero_pending_balance_hi_proof !== null ? ZeroBalanceProof.fromPartial(object.zero_pending_balance_hi_proof) : void 0;
    message.zero_available_balance_proof = object.zero_available_balance_proof !== void 0 && object.zero_available_balance_proof !== null ? ZeroBalanceProof.fromPartial(object.zero_available_balance_proof) : void 0;
    return message;
  }
};
var WithdrawMsgProofs = {
  $type: "seiprotocol.seichain.confidentialtransfers.WithdrawMsgProofs",
  encode(message, writer = new BinaryWriter()) {
    if (message.remaining_balance_range_proof !== void 0) {
      RangeProof.encode(message.remaining_balance_range_proof, writer.uint32(10).fork()).join();
    }
    if (message.remaining_balance_equality_proof !== void 0) {
      CiphertextCommitmentEqualityProof.encode(message.remaining_balance_equality_proof, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseWithdrawMsgProofs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.remaining_balance_range_proof = RangeProof.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.remaining_balance_equality_proof = CiphertextCommitmentEqualityProof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      remaining_balance_range_proof: isSet6(object.remaining_balance_range_proof) ? RangeProof.fromJSON(object.remaining_balance_range_proof) : void 0,
      remaining_balance_equality_proof: isSet6(object.remaining_balance_equality_proof) ? CiphertextCommitmentEqualityProof.fromJSON(object.remaining_balance_equality_proof) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.remaining_balance_range_proof !== void 0) {
      obj.remaining_balance_range_proof = RangeProof.toJSON(message.remaining_balance_range_proof);
    }
    if (message.remaining_balance_equality_proof !== void 0) {
      obj.remaining_balance_equality_proof = CiphertextCommitmentEqualityProof.toJSON(message.remaining_balance_equality_proof);
    }
    return obj;
  },
  create(base) {
    return WithdrawMsgProofs.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseWithdrawMsgProofs();
    message.remaining_balance_range_proof = object.remaining_balance_range_proof !== void 0 && object.remaining_balance_range_proof !== null ? RangeProof.fromPartial(object.remaining_balance_range_proof) : void 0;
    message.remaining_balance_equality_proof = object.remaining_balance_equality_proof !== void 0 && object.remaining_balance_equality_proof !== null ? CiphertextCommitmentEqualityProof.fromPartial(object.remaining_balance_equality_proof) : void 0;
    return message;
  }
};
var CloseAccountMsgProofs = {
  $type: "seiprotocol.seichain.confidentialtransfers.CloseAccountMsgProofs",
  encode(message, writer = new BinaryWriter()) {
    if (message.zero_available_balance_proof !== void 0) {
      ZeroBalanceProof.encode(message.zero_available_balance_proof, writer.uint32(10).fork()).join();
    }
    if (message.zero_pending_balance_lo_proof !== void 0) {
      ZeroBalanceProof.encode(message.zero_pending_balance_lo_proof, writer.uint32(18).fork()).join();
    }
    if (message.zero_pending_balance_hi_proof !== void 0) {
      ZeroBalanceProof.encode(message.zero_pending_balance_hi_proof, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCloseAccountMsgProofs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.zero_available_balance_proof = ZeroBalanceProof.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.zero_pending_balance_lo_proof = ZeroBalanceProof.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.zero_pending_balance_hi_proof = ZeroBalanceProof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      zero_available_balance_proof: isSet6(object.zero_available_balance_proof) ? ZeroBalanceProof.fromJSON(object.zero_available_balance_proof) : void 0,
      zero_pending_balance_lo_proof: isSet6(object.zero_pending_balance_lo_proof) ? ZeroBalanceProof.fromJSON(object.zero_pending_balance_lo_proof) : void 0,
      zero_pending_balance_hi_proof: isSet6(object.zero_pending_balance_hi_proof) ? ZeroBalanceProof.fromJSON(object.zero_pending_balance_hi_proof) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.zero_available_balance_proof !== void 0) {
      obj.zero_available_balance_proof = ZeroBalanceProof.toJSON(message.zero_available_balance_proof);
    }
    if (message.zero_pending_balance_lo_proof !== void 0) {
      obj.zero_pending_balance_lo_proof = ZeroBalanceProof.toJSON(message.zero_pending_balance_lo_proof);
    }
    if (message.zero_pending_balance_hi_proof !== void 0) {
      obj.zero_pending_balance_hi_proof = ZeroBalanceProof.toJSON(message.zero_pending_balance_hi_proof);
    }
    return obj;
  },
  create(base) {
    return CloseAccountMsgProofs.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCloseAccountMsgProofs();
    message.zero_available_balance_proof = object.zero_available_balance_proof !== void 0 && object.zero_available_balance_proof !== null ? ZeroBalanceProof.fromPartial(object.zero_available_balance_proof) : void 0;
    message.zero_pending_balance_lo_proof = object.zero_pending_balance_lo_proof !== void 0 && object.zero_pending_balance_lo_proof !== null ? ZeroBalanceProof.fromPartial(object.zero_pending_balance_lo_proof) : void 0;
    message.zero_pending_balance_hi_proof = object.zero_pending_balance_hi_proof !== void 0 && object.zero_pending_balance_hi_proof !== null ? ZeroBalanceProof.fromPartial(object.zero_pending_balance_hi_proof) : void 0;
    return message;
  }
};
var PubkeyValidityProof = {
  $type: "seiprotocol.seichain.confidentialtransfers.PubkeyValidityProof",
  encode(message, writer = new BinaryWriter()) {
    if (message.y.length !== 0) {
      writer.uint32(10).bytes(message.y);
    }
    if (message.z.length !== 0) {
      writer.uint32(18).bytes(message.z);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePubkeyValidityProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.y = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.z = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      y: isSet6(object.y) ? bytesFromBase645(object.y) : new Uint8Array(0),
      z: isSet6(object.z) ? bytesFromBase645(object.z) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.y.length !== 0) {
      obj.y = base64FromBytes5(message.y);
    }
    if (message.z.length !== 0) {
      obj.z = base64FromBytes5(message.z);
    }
    return obj;
  },
  create(base) {
    return PubkeyValidityProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePubkeyValidityProof();
    message.y = object.y ?? new Uint8Array(0);
    message.z = object.z ?? new Uint8Array(0);
    return message;
  }
};
var CiphertextValidityProof = {
  $type: "seiprotocol.seichain.confidentialtransfers.CiphertextValidityProof",
  encode(message, writer = new BinaryWriter()) {
    if (message.commitment_1.length !== 0) {
      writer.uint32(10).bytes(message.commitment_1);
    }
    if (message.commitment_2.length !== 0) {
      writer.uint32(18).bytes(message.commitment_2);
    }
    if (message.response_1.length !== 0) {
      writer.uint32(34).bytes(message.response_1);
    }
    if (message.response_2.length !== 0) {
      writer.uint32(42).bytes(message.response_2);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCiphertextValidityProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.commitment_1 = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.commitment_2 = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.response_1 = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.response_2 = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      commitment_1: isSet6(object.commitment_1) ? bytesFromBase645(object.commitment_1) : new Uint8Array(0),
      commitment_2: isSet6(object.commitment_2) ? bytesFromBase645(object.commitment_2) : new Uint8Array(0),
      response_1: isSet6(object.response_1) ? bytesFromBase645(object.response_1) : new Uint8Array(0),
      response_2: isSet6(object.response_2) ? bytesFromBase645(object.response_2) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.commitment_1.length !== 0) {
      obj.commitment_1 = base64FromBytes5(message.commitment_1);
    }
    if (message.commitment_2.length !== 0) {
      obj.commitment_2 = base64FromBytes5(message.commitment_2);
    }
    if (message.response_1.length !== 0) {
      obj.response_1 = base64FromBytes5(message.response_1);
    }
    if (message.response_2.length !== 0) {
      obj.response_2 = base64FromBytes5(message.response_2);
    }
    return obj;
  },
  create(base) {
    return CiphertextValidityProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCiphertextValidityProof();
    message.commitment_1 = object.commitment_1 ?? new Uint8Array(0);
    message.commitment_2 = object.commitment_2 ?? new Uint8Array(0);
    message.response_1 = object.response_1 ?? new Uint8Array(0);
    message.response_2 = object.response_2 ?? new Uint8Array(0);
    return message;
  }
};
var RangeProof = {
  $type: "seiprotocol.seichain.confidentialtransfers.RangeProof",
  encode(message, writer = new BinaryWriter()) {
    if (message.proof.length !== 0) {
      writer.uint32(10).bytes(message.proof);
    }
    if (message.randomness.length !== 0) {
      writer.uint32(18).bytes(message.randomness);
    }
    if (message.upper_bound !== 0) {
      writer.uint32(24).int64(message.upper_bound);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRangeProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.proof = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.randomness = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.upper_bound = longToNumber3(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proof: isSet6(object.proof) ? bytesFromBase645(object.proof) : new Uint8Array(0),
      randomness: isSet6(object.randomness) ? bytesFromBase645(object.randomness) : new Uint8Array(0),
      upper_bound: isSet6(object.upper_bound) ? globalThis.Number(object.upper_bound) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.proof.length !== 0) {
      obj.proof = base64FromBytes5(message.proof);
    }
    if (message.randomness.length !== 0) {
      obj.randomness = base64FromBytes5(message.randomness);
    }
    if (message.upper_bound !== 0) {
      obj.upper_bound = Math.round(message.upper_bound);
    }
    return obj;
  },
  create(base) {
    return RangeProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRangeProof();
    message.proof = object.proof ?? new Uint8Array(0);
    message.randomness = object.randomness ?? new Uint8Array(0);
    message.upper_bound = object.upper_bound ?? 0;
    return message;
  }
};
var CiphertextCommitmentEqualityProof = {
  $type: "seiprotocol.seichain.confidentialtransfers.CiphertextCommitmentEqualityProof",
  encode(message, writer = new BinaryWriter()) {
    if (message.y0.length !== 0) {
      writer.uint32(10).bytes(message.y0);
    }
    if (message.y1.length !== 0) {
      writer.uint32(18).bytes(message.y1);
    }
    if (message.y2.length !== 0) {
      writer.uint32(26).bytes(message.y2);
    }
    if (message.zs.length !== 0) {
      writer.uint32(34).bytes(message.zs);
    }
    if (message.zx.length !== 0) {
      writer.uint32(42).bytes(message.zx);
    }
    if (message.zr.length !== 0) {
      writer.uint32(50).bytes(message.zr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCiphertextCommitmentEqualityProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.y0 = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.y1 = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.y2 = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.zs = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.zx = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.zr = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      y0: isSet6(object.y0) ? bytesFromBase645(object.y0) : new Uint8Array(0),
      y1: isSet6(object.y1) ? bytesFromBase645(object.y1) : new Uint8Array(0),
      y2: isSet6(object.y2) ? bytesFromBase645(object.y2) : new Uint8Array(0),
      zs: isSet6(object.zs) ? bytesFromBase645(object.zs) : new Uint8Array(0),
      zx: isSet6(object.zx) ? bytesFromBase645(object.zx) : new Uint8Array(0),
      zr: isSet6(object.zr) ? bytesFromBase645(object.zr) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.y0.length !== 0) {
      obj.y0 = base64FromBytes5(message.y0);
    }
    if (message.y1.length !== 0) {
      obj.y1 = base64FromBytes5(message.y1);
    }
    if (message.y2.length !== 0) {
      obj.y2 = base64FromBytes5(message.y2);
    }
    if (message.zs.length !== 0) {
      obj.zs = base64FromBytes5(message.zs);
    }
    if (message.zx.length !== 0) {
      obj.zx = base64FromBytes5(message.zx);
    }
    if (message.zr.length !== 0) {
      obj.zr = base64FromBytes5(message.zr);
    }
    return obj;
  },
  create(base) {
    return CiphertextCommitmentEqualityProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCiphertextCommitmentEqualityProof();
    message.y0 = object.y0 ?? new Uint8Array(0);
    message.y1 = object.y1 ?? new Uint8Array(0);
    message.y2 = object.y2 ?? new Uint8Array(0);
    message.zs = object.zs ?? new Uint8Array(0);
    message.zx = object.zx ?? new Uint8Array(0);
    message.zr = object.zr ?? new Uint8Array(0);
    return message;
  }
};
var CiphertextCiphertextEqualityProof = {
  $type: "seiprotocol.seichain.confidentialtransfers.CiphertextCiphertextEqualityProof",
  encode(message, writer = new BinaryWriter()) {
    if (message.y0.length !== 0) {
      writer.uint32(10).bytes(message.y0);
    }
    if (message.y1.length !== 0) {
      writer.uint32(18).bytes(message.y1);
    }
    if (message.y2.length !== 0) {
      writer.uint32(26).bytes(message.y2);
    }
    if (message.y3.length !== 0) {
      writer.uint32(34).bytes(message.y3);
    }
    if (message.zs.length !== 0) {
      writer.uint32(42).bytes(message.zs);
    }
    if (message.zx.length !== 0) {
      writer.uint32(50).bytes(message.zx);
    }
    if (message.zr.length !== 0) {
      writer.uint32(58).bytes(message.zr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCiphertextCiphertextEqualityProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.y0 = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.y1 = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.y2 = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.y3 = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.zs = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.zx = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.zr = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      y0: isSet6(object.y0) ? bytesFromBase645(object.y0) : new Uint8Array(0),
      y1: isSet6(object.y1) ? bytesFromBase645(object.y1) : new Uint8Array(0),
      y2: isSet6(object.y2) ? bytesFromBase645(object.y2) : new Uint8Array(0),
      y3: isSet6(object.y3) ? bytesFromBase645(object.y3) : new Uint8Array(0),
      zs: isSet6(object.zs) ? bytesFromBase645(object.zs) : new Uint8Array(0),
      zx: isSet6(object.zx) ? bytesFromBase645(object.zx) : new Uint8Array(0),
      zr: isSet6(object.zr) ? bytesFromBase645(object.zr) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.y0.length !== 0) {
      obj.y0 = base64FromBytes5(message.y0);
    }
    if (message.y1.length !== 0) {
      obj.y1 = base64FromBytes5(message.y1);
    }
    if (message.y2.length !== 0) {
      obj.y2 = base64FromBytes5(message.y2);
    }
    if (message.y3.length !== 0) {
      obj.y3 = base64FromBytes5(message.y3);
    }
    if (message.zs.length !== 0) {
      obj.zs = base64FromBytes5(message.zs);
    }
    if (message.zx.length !== 0) {
      obj.zx = base64FromBytes5(message.zx);
    }
    if (message.zr.length !== 0) {
      obj.zr = base64FromBytes5(message.zr);
    }
    return obj;
  },
  create(base) {
    return CiphertextCiphertextEqualityProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCiphertextCiphertextEqualityProof();
    message.y0 = object.y0 ?? new Uint8Array(0);
    message.y1 = object.y1 ?? new Uint8Array(0);
    message.y2 = object.y2 ?? new Uint8Array(0);
    message.y3 = object.y3 ?? new Uint8Array(0);
    message.zs = object.zs ?? new Uint8Array(0);
    message.zx = object.zx ?? new Uint8Array(0);
    message.zr = object.zr ?? new Uint8Array(0);
    return message;
  }
};
var ZeroBalanceProof = {
  $type: "seiprotocol.seichain.confidentialtransfers.ZeroBalanceProof",
  encode(message, writer = new BinaryWriter()) {
    if (message.y_p.length !== 0) {
      writer.uint32(10).bytes(message.y_p);
    }
    if (message.y_d.length !== 0) {
      writer.uint32(18).bytes(message.y_d);
    }
    if (message.z.length !== 0) {
      writer.uint32(26).bytes(message.z);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseZeroBalanceProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.y_p = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.y_d = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.z = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      y_p: isSet6(object.y_p) ? bytesFromBase645(object.y_p) : new Uint8Array(0),
      y_d: isSet6(object.y_d) ? bytesFromBase645(object.y_d) : new Uint8Array(0),
      z: isSet6(object.z) ? bytesFromBase645(object.z) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.y_p.length !== 0) {
      obj.y_p = base64FromBytes5(message.y_p);
    }
    if (message.y_d.length !== 0) {
      obj.y_d = base64FromBytes5(message.y_d);
    }
    if (message.z.length !== 0) {
      obj.z = base64FromBytes5(message.z);
    }
    return obj;
  },
  create(base) {
    return ZeroBalanceProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseZeroBalanceProof();
    message.y_p = object.y_p ?? new Uint8Array(0);
    message.y_d = object.y_d ?? new Uint8Array(0);
    message.z = object.z ?? new Uint8Array(0);
    return message;
  }
};
function createBaseTransferMsgProofs() {
  return {
    remaining_balance_commitment_validity_proof: void 0,
    sender_transfer_amount_lo_validity_proof: void 0,
    sender_transfer_amount_hi_validity_proof: void 0,
    recipient_transfer_amount_lo_validity_proof: void 0,
    recipient_transfer_amount_hi_validity_proof: void 0,
    remaining_balance_range_proof: void 0,
    remaining_balance_equality_proof: void 0,
    transfer_amount_lo_equality_proof: void 0,
    transfer_amount_hi_equality_proof: void 0,
    transfer_amount_lo_range_proof: void 0,
    transfer_amount_hi_range_proof: void 0
  };
}
function createBaseInitializeAccountMsgProofs() {
  return {
    pubkey_validity_proof: void 0,
    zero_pending_balance_lo_proof: void 0,
    zero_pending_balance_hi_proof: void 0,
    zero_available_balance_proof: void 0
  };
}
function createBaseWithdrawMsgProofs() {
  return { remaining_balance_range_proof: void 0, remaining_balance_equality_proof: void 0 };
}
function createBaseCloseAccountMsgProofs() {
  return {
    zero_available_balance_proof: void 0,
    zero_pending_balance_lo_proof: void 0,
    zero_pending_balance_hi_proof: void 0
  };
}
function createBasePubkeyValidityProof() {
  return { y: new Uint8Array(0), z: new Uint8Array(0) };
}
function createBaseCiphertextValidityProof() {
  return {
    commitment_1: new Uint8Array(0),
    commitment_2: new Uint8Array(0),
    response_1: new Uint8Array(0),
    response_2: new Uint8Array(0)
  };
}
function createBaseRangeProof() {
  return { proof: new Uint8Array(0), randomness: new Uint8Array(0), upper_bound: 0 };
}
function createBaseCiphertextCommitmentEqualityProof() {
  return {
    y0: new Uint8Array(0),
    y1: new Uint8Array(0),
    y2: new Uint8Array(0),
    zs: new Uint8Array(0),
    zx: new Uint8Array(0),
    zr: new Uint8Array(0)
  };
}
function createBaseCiphertextCiphertextEqualityProof() {
  return {
    y0: new Uint8Array(0),
    y1: new Uint8Array(0),
    y2: new Uint8Array(0),
    y3: new Uint8Array(0),
    zs: new Uint8Array(0),
    zx: new Uint8Array(0),
    zr: new Uint8Array(0)
  };
}
function createBaseZeroBalanceProof() {
  return { y_p: new Uint8Array(0), y_d: new Uint8Array(0), z: new Uint8Array(0) };
}
function bytesFromBase645(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes5(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber3(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet6(value) {
  return value !== null && value !== void 0;
}
var registry6 = [
  ["/seiprotocol.seichain.confidentialtransfers.TransferMsgProofs", TransferMsgProofs],
  ["/seiprotocol.seichain.confidentialtransfers.InitializeAccountMsgProofs", InitializeAccountMsgProofs],
  ["/seiprotocol.seichain.confidentialtransfers.WithdrawMsgProofs", WithdrawMsgProofs],
  ["/seiprotocol.seichain.confidentialtransfers.CloseAccountMsgProofs", CloseAccountMsgProofs],
  ["/seiprotocol.seichain.confidentialtransfers.PubkeyValidityProof", PubkeyValidityProof],
  ["/seiprotocol.seichain.confidentialtransfers.CiphertextValidityProof", CiphertextValidityProof],
  ["/seiprotocol.seichain.confidentialtransfers.RangeProof", RangeProof],
  ["/seiprotocol.seichain.confidentialtransfers.CiphertextCommitmentEqualityProof", CiphertextCommitmentEqualityProof],
  ["/seiprotocol.seichain.confidentialtransfers.CiphertextCiphertextEqualityProof", CiphertextCiphertextEqualityProof],
  ["/seiprotocol.seichain.confidentialtransfers.ZeroBalanceProof", ZeroBalanceProof]
];
var aminoConverters6 = {
  "/seiprotocol.seichain.confidentialtransfers.TransferMsgProofs": {
    aminoType: "confidentialtransfers/TransferMsgProofs",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.InitializeAccountMsgProofs": {
    aminoType: "confidentialtransfers/InitializeAccountMsgProofs",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.WithdrawMsgProofs": {
    aminoType: "confidentialtransfers/WithdrawMsgProofs",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.CloseAccountMsgProofs": {
    aminoType: "confidentialtransfers/CloseAccountMsgProofs",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.PubkeyValidityProof": {
    aminoType: "confidentialtransfers/PubkeyValidityProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.CiphertextValidityProof": {
    aminoType: "confidentialtransfers/CiphertextValidityProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.RangeProof": {
    aminoType: "confidentialtransfers/RangeProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.CiphertextCommitmentEqualityProof": {
    aminoType: "confidentialtransfers/CiphertextCommitmentEqualityProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.CiphertextCiphertextEqualityProof": {
    aminoType: "confidentialtransfers/CiphertextCiphertextEqualityProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.ZeroBalanceProof": {
    aminoType: "confidentialtransfers/ZeroBalanceProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/confidentialtransfers/query.js
var GetCtAccountRequest = {
  $type: "seiprotocol.seichain.confidentialtransfers.GetCtAccountRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetCtAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet7(object.address) ? globalThis.String(object.address) : "",
      denom: isSet7(object.denom) ? globalThis.String(object.denom) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },
  create(base) {
    return GetCtAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetCtAccountRequest();
    message.address = object.address ?? "";
    message.denom = object.denom ?? "";
    return message;
  }
};
var GetCtAccountResponse = {
  $type: "seiprotocol.seichain.confidentialtransfers.GetCtAccountResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.account !== void 0) {
      CtAccount.encode(message.account, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetCtAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.account = CtAccount.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { account: isSet7(object.account) ? CtAccount.fromJSON(object.account) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.account !== void 0) {
      obj.account = CtAccount.toJSON(message.account);
    }
    return obj;
  },
  create(base) {
    return GetCtAccountResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetCtAccountResponse();
    message.account = object.account !== void 0 && object.account !== null ? CtAccount.fromPartial(object.account) : void 0;
    return message;
  }
};
var GetAllCtAccountsRequest = {
  $type: "seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetAllCtAccountsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet7(object.address) ? globalThis.String(object.address) : "",
      pagination: isSet7(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return GetAllCtAccountsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetAllCtAccountsRequest();
    message.address = object.address ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var GetAllCtAccountsResponse = {
  $type: "seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.accounts) {
      CtAccountWithDenom.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetAllCtAccountsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.accounts.push(CtAccountWithDenom.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      accounts: globalThis.Array.isArray(object == null ? void 0 : object.accounts) ? object.accounts.map((e) => CtAccountWithDenom.fromJSON(e)) : [],
      pagination: isSet7(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.accounts) == null ? void 0 : _a.length) {
      obj.accounts = message.accounts.map((e) => CtAccountWithDenom.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return GetAllCtAccountsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGetAllCtAccountsResponse();
    message.accounts = ((_a = object.accounts) == null ? void 0 : _a.map((e) => CtAccountWithDenom.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var DecryptedCtAccount = {
  $type: "seiprotocol.seichain.confidentialtransfers.DecryptedCtAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.public_key.length !== 0) {
      writer.uint32(10).bytes(message.public_key);
    }
    if (message.pending_balance_lo !== 0) {
      writer.uint32(16).uint64(message.pending_balance_lo);
    }
    if (message.pending_balance_hi !== 0) {
      writer.uint32(24).uint64(message.pending_balance_hi);
    }
    if (message.combined_pending_balance !== "") {
      writer.uint32(34).string(message.combined_pending_balance);
    }
    if (message.pending_balance_credit_counter !== 0) {
      writer.uint32(40).uint32(message.pending_balance_credit_counter);
    }
    if (message.available_balance !== "") {
      writer.uint32(50).string(message.available_balance);
    }
    if (message.decryptable_available_balance !== "") {
      writer.uint32(58).string(message.decryptable_available_balance);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDecryptedCtAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.public_key = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.pending_balance_lo = longToNumber4(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.pending_balance_hi = longToNumber4(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.combined_pending_balance = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.pending_balance_credit_counter = reader.uint32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.available_balance = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.decryptable_available_balance = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      public_key: isSet7(object.public_key) ? bytesFromBase646(object.public_key) : new Uint8Array(0),
      pending_balance_lo: isSet7(object.pending_balance_lo) ? globalThis.Number(object.pending_balance_lo) : 0,
      pending_balance_hi: isSet7(object.pending_balance_hi) ? globalThis.Number(object.pending_balance_hi) : 0,
      combined_pending_balance: isSet7(object.combined_pending_balance) ? globalThis.String(object.combined_pending_balance) : "",
      pending_balance_credit_counter: isSet7(object.pending_balance_credit_counter) ? globalThis.Number(object.pending_balance_credit_counter) : 0,
      available_balance: isSet7(object.available_balance) ? globalThis.String(object.available_balance) : "",
      decryptable_available_balance: isSet7(object.decryptable_available_balance) ? globalThis.String(object.decryptable_available_balance) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.public_key.length !== 0) {
      obj.public_key = base64FromBytes6(message.public_key);
    }
    if (message.pending_balance_lo !== 0) {
      obj.pending_balance_lo = Math.round(message.pending_balance_lo);
    }
    if (message.pending_balance_hi !== 0) {
      obj.pending_balance_hi = Math.round(message.pending_balance_hi);
    }
    if (message.combined_pending_balance !== "") {
      obj.combined_pending_balance = message.combined_pending_balance;
    }
    if (message.pending_balance_credit_counter !== 0) {
      obj.pending_balance_credit_counter = Math.round(message.pending_balance_credit_counter);
    }
    if (message.available_balance !== "") {
      obj.available_balance = message.available_balance;
    }
    if (message.decryptable_available_balance !== "") {
      obj.decryptable_available_balance = message.decryptable_available_balance;
    }
    return obj;
  },
  create(base) {
    return DecryptedCtAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDecryptedCtAccount();
    message.public_key = object.public_key ?? new Uint8Array(0);
    message.pending_balance_lo = object.pending_balance_lo ?? 0;
    message.pending_balance_hi = object.pending_balance_hi ?? 0;
    message.combined_pending_balance = object.combined_pending_balance ?? "";
    message.pending_balance_credit_counter = object.pending_balance_credit_counter ?? 0;
    message.available_balance = object.available_balance ?? "";
    message.decryptable_available_balance = object.decryptable_available_balance ?? "";
    return message;
  }
};
var ApplyPendingBalanceDecrypted = {
  $type: "seiprotocol.seichain.confidentialtransfers.ApplyPendingBalanceDecrypted",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.new_decryptable_available_balance !== "") {
      writer.uint32(26).string(message.new_decryptable_available_balance);
    }
    if (message.current_pending_balance_counter !== 0) {
      writer.uint32(32).uint32(message.current_pending_balance_counter);
    }
    if (message.current_available_balance !== "") {
      writer.uint32(42).string(message.current_available_balance);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseApplyPendingBalanceDecrypted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.new_decryptable_available_balance = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.current_pending_balance_counter = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.current_available_balance = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet7(object.address) ? globalThis.String(object.address) : "",
      denom: isSet7(object.denom) ? globalThis.String(object.denom) : "",
      new_decryptable_available_balance: isSet7(object.new_decryptable_available_balance) ? globalThis.String(object.new_decryptable_available_balance) : "",
      current_pending_balance_counter: isSet7(object.current_pending_balance_counter) ? globalThis.Number(object.current_pending_balance_counter) : 0,
      current_available_balance: isSet7(object.current_available_balance) ? globalThis.String(object.current_available_balance) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.new_decryptable_available_balance !== "") {
      obj.new_decryptable_available_balance = message.new_decryptable_available_balance;
    }
    if (message.current_pending_balance_counter !== 0) {
      obj.current_pending_balance_counter = Math.round(message.current_pending_balance_counter);
    }
    if (message.current_available_balance !== "") {
      obj.current_available_balance = message.current_available_balance;
    }
    return obj;
  },
  create(base) {
    return ApplyPendingBalanceDecrypted.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseApplyPendingBalanceDecrypted();
    message.address = object.address ?? "";
    message.denom = object.denom ?? "";
    message.new_decryptable_available_balance = object.new_decryptable_available_balance ?? "";
    message.current_pending_balance_counter = object.current_pending_balance_counter ?? 0;
    message.current_available_balance = object.current_available_balance ?? "";
    return message;
  }
};
var InitializeAccountDecrypted = {
  $type: "seiprotocol.seichain.confidentialtransfers.InitializeAccountDecrypted",
  encode(message, writer = new BinaryWriter()) {
    if (message.from_address !== "") {
      writer.uint32(10).string(message.from_address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.pubkey.length !== 0) {
      writer.uint32(26).bytes(message.pubkey);
    }
    if (message.pending_balance_lo !== 0) {
      writer.uint32(32).uint32(message.pending_balance_lo);
    }
    if (message.pending_balance_hi !== 0) {
      writer.uint32(40).uint64(message.pending_balance_hi);
    }
    if (message.available_balance !== "") {
      writer.uint32(50).string(message.available_balance);
    }
    if (message.decryptable_balance !== "") {
      writer.uint32(58).string(message.decryptable_balance);
    }
    if (message.proofs !== void 0) {
      InitializeAccountMsgProofs.encode(message.proofs, writer.uint32(66).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseInitializeAccountDecrypted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.from_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pubkey = reader.bytes();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.pending_balance_lo = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.pending_balance_hi = longToNumber4(reader.uint64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.available_balance = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.decryptable_balance = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.proofs = InitializeAccountMsgProofs.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      from_address: isSet7(object.from_address) ? globalThis.String(object.from_address) : "",
      denom: isSet7(object.denom) ? globalThis.String(object.denom) : "",
      pubkey: isSet7(object.pubkey) ? bytesFromBase646(object.pubkey) : new Uint8Array(0),
      pending_balance_lo: isSet7(object.pending_balance_lo) ? globalThis.Number(object.pending_balance_lo) : 0,
      pending_balance_hi: isSet7(object.pending_balance_hi) ? globalThis.Number(object.pending_balance_hi) : 0,
      available_balance: isSet7(object.available_balance) ? globalThis.String(object.available_balance) : "",
      decryptable_balance: isSet7(object.decryptable_balance) ? globalThis.String(object.decryptable_balance) : "",
      proofs: isSet7(object.proofs) ? InitializeAccountMsgProofs.fromJSON(object.proofs) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.from_address !== "") {
      obj.from_address = message.from_address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.pubkey.length !== 0) {
      obj.pubkey = base64FromBytes6(message.pubkey);
    }
    if (message.pending_balance_lo !== 0) {
      obj.pending_balance_lo = Math.round(message.pending_balance_lo);
    }
    if (message.pending_balance_hi !== 0) {
      obj.pending_balance_hi = Math.round(message.pending_balance_hi);
    }
    if (message.available_balance !== "") {
      obj.available_balance = message.available_balance;
    }
    if (message.decryptable_balance !== "") {
      obj.decryptable_balance = message.decryptable_balance;
    }
    if (message.proofs !== void 0) {
      obj.proofs = InitializeAccountMsgProofs.toJSON(message.proofs);
    }
    return obj;
  },
  create(base) {
    return InitializeAccountDecrypted.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseInitializeAccountDecrypted();
    message.from_address = object.from_address ?? "";
    message.denom = object.denom ?? "";
    message.pubkey = object.pubkey ?? new Uint8Array(0);
    message.pending_balance_lo = object.pending_balance_lo ?? 0;
    message.pending_balance_hi = object.pending_balance_hi ?? 0;
    message.available_balance = object.available_balance ?? "";
    message.decryptable_balance = object.decryptable_balance ?? "";
    message.proofs = object.proofs !== void 0 && object.proofs !== null ? InitializeAccountMsgProofs.fromPartial(object.proofs) : void 0;
    return message;
  }
};
var WithdrawDecrypted = {
  $type: "seiprotocol.seichain.confidentialtransfers.WithdrawDecrypted",
  encode(message, writer = new BinaryWriter()) {
    if (message.from_address !== "") {
      writer.uint32(10).string(message.from_address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    if (message.decryptable_balance !== "") {
      writer.uint32(34).string(message.decryptable_balance);
    }
    if (message.remaining_balance_commitment !== "") {
      writer.uint32(42).string(message.remaining_balance_commitment);
    }
    if (message.proofs !== void 0) {
      WithdrawMsgProofs.encode(message.proofs, writer.uint32(50).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseWithdrawDecrypted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.from_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.amount = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.decryptable_balance = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.remaining_balance_commitment = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.proofs = WithdrawMsgProofs.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      from_address: isSet7(object.from_address) ? globalThis.String(object.from_address) : "",
      denom: isSet7(object.denom) ? globalThis.String(object.denom) : "",
      amount: isSet7(object.amount) ? globalThis.String(object.amount) : "",
      decryptable_balance: isSet7(object.decryptable_balance) ? globalThis.String(object.decryptable_balance) : "",
      remaining_balance_commitment: isSet7(object.remaining_balance_commitment) ? globalThis.String(object.remaining_balance_commitment) : "",
      proofs: isSet7(object.proofs) ? WithdrawMsgProofs.fromJSON(object.proofs) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.from_address !== "") {
      obj.from_address = message.from_address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.decryptable_balance !== "") {
      obj.decryptable_balance = message.decryptable_balance;
    }
    if (message.remaining_balance_commitment !== "") {
      obj.remaining_balance_commitment = message.remaining_balance_commitment;
    }
    if (message.proofs !== void 0) {
      obj.proofs = WithdrawMsgProofs.toJSON(message.proofs);
    }
    return obj;
  },
  create(base) {
    return WithdrawDecrypted.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseWithdrawDecrypted();
    message.from_address = object.from_address ?? "";
    message.denom = object.denom ?? "";
    message.amount = object.amount ?? "";
    message.decryptable_balance = object.decryptable_balance ?? "";
    message.remaining_balance_commitment = object.remaining_balance_commitment ?? "";
    message.proofs = object.proofs !== void 0 && object.proofs !== null ? WithdrawMsgProofs.fromPartial(object.proofs) : void 0;
    return message;
  }
};
var TransferDecrypted = {
  $type: "seiprotocol.seichain.confidentialtransfers.TransferDecrypted",
  encode(message, writer = new BinaryWriter()) {
    if (message.from_address !== "") {
      writer.uint32(10).string(message.from_address);
    }
    if (message.to_address !== "") {
      writer.uint32(18).string(message.to_address);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    if (message.transfer_amount_lo !== 0) {
      writer.uint32(32).uint32(message.transfer_amount_lo);
    }
    if (message.transfer_amount_hi !== 0) {
      writer.uint32(40).uint32(message.transfer_amount_hi);
    }
    if (message.total_transfer_amount !== 0) {
      writer.uint32(48).uint64(message.total_transfer_amount);
    }
    if (message.remaining_balance_commitment !== "") {
      writer.uint32(58).string(message.remaining_balance_commitment);
    }
    if (message.decryptable_balance !== "") {
      writer.uint32(66).string(message.decryptable_balance);
    }
    if (message.proofs !== void 0) {
      TransferMsgProofs.encode(message.proofs, writer.uint32(74).fork()).join();
    }
    for (const v of message.auditors) {
      writer.uint32(82).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTransferDecrypted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.from_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.to_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.transfer_amount_lo = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.transfer_amount_hi = reader.uint32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.total_transfer_amount = longToNumber4(reader.uint64());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.remaining_balance_commitment = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.decryptable_balance = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.proofs = TransferMsgProofs.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.auditors.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      from_address: isSet7(object.from_address) ? globalThis.String(object.from_address) : "",
      to_address: isSet7(object.to_address) ? globalThis.String(object.to_address) : "",
      denom: isSet7(object.denom) ? globalThis.String(object.denom) : "",
      transfer_amount_lo: isSet7(object.transfer_amount_lo) ? globalThis.Number(object.transfer_amount_lo) : 0,
      transfer_amount_hi: isSet7(object.transfer_amount_hi) ? globalThis.Number(object.transfer_amount_hi) : 0,
      total_transfer_amount: isSet7(object.total_transfer_amount) ? globalThis.Number(object.total_transfer_amount) : 0,
      remaining_balance_commitment: isSet7(object.remaining_balance_commitment) ? globalThis.String(object.remaining_balance_commitment) : "",
      decryptable_balance: isSet7(object.decryptable_balance) ? globalThis.String(object.decryptable_balance) : "",
      proofs: isSet7(object.proofs) ? TransferMsgProofs.fromJSON(object.proofs) : void 0,
      auditors: globalThis.Array.isArray(object == null ? void 0 : object.auditors) ? object.auditors.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.from_address !== "") {
      obj.from_address = message.from_address;
    }
    if (message.to_address !== "") {
      obj.to_address = message.to_address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.transfer_amount_lo !== 0) {
      obj.transfer_amount_lo = Math.round(message.transfer_amount_lo);
    }
    if (message.transfer_amount_hi !== 0) {
      obj.transfer_amount_hi = Math.round(message.transfer_amount_hi);
    }
    if (message.total_transfer_amount !== 0) {
      obj.total_transfer_amount = Math.round(message.total_transfer_amount);
    }
    if (message.remaining_balance_commitment !== "") {
      obj.remaining_balance_commitment = message.remaining_balance_commitment;
    }
    if (message.decryptable_balance !== "") {
      obj.decryptable_balance = message.decryptable_balance;
    }
    if (message.proofs !== void 0) {
      obj.proofs = TransferMsgProofs.toJSON(message.proofs);
    }
    if ((_a = message.auditors) == null ? void 0 : _a.length) {
      obj.auditors = message.auditors;
    }
    return obj;
  },
  create(base) {
    return TransferDecrypted.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseTransferDecrypted();
    message.from_address = object.from_address ?? "";
    message.to_address = object.to_address ?? "";
    message.denom = object.denom ?? "";
    message.transfer_amount_lo = object.transfer_amount_lo ?? 0;
    message.transfer_amount_hi = object.transfer_amount_hi ?? 0;
    message.total_transfer_amount = object.total_transfer_amount ?? 0;
    message.remaining_balance_commitment = object.remaining_balance_commitment ?? "";
    message.decryptable_balance = object.decryptable_balance ?? "";
    message.proofs = object.proofs !== void 0 && object.proofs !== null ? TransferMsgProofs.fromPartial(object.proofs) : void 0;
    message.auditors = ((_a = object.auditors) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
function createBaseGetCtAccountRequest() {
  return { address: "", denom: "" };
}
function createBaseGetCtAccountResponse() {
  return { account: void 0 };
}
function createBaseGetAllCtAccountsRequest() {
  return { address: "", pagination: void 0 };
}
function createBaseGetAllCtAccountsResponse() {
  return { accounts: [], pagination: void 0 };
}
function createBaseDecryptedCtAccount() {
  return {
    public_key: new Uint8Array(0),
    pending_balance_lo: 0,
    pending_balance_hi: 0,
    combined_pending_balance: "",
    pending_balance_credit_counter: 0,
    available_balance: "",
    decryptable_available_balance: ""
  };
}
function createBaseApplyPendingBalanceDecrypted() {
  return {
    address: "",
    denom: "",
    new_decryptable_available_balance: "",
    current_pending_balance_counter: 0,
    current_available_balance: ""
  };
}
function createBaseInitializeAccountDecrypted() {
  return {
    from_address: "",
    denom: "",
    pubkey: new Uint8Array(0),
    pending_balance_lo: 0,
    pending_balance_hi: 0,
    available_balance: "",
    decryptable_balance: "",
    proofs: void 0
  };
}
function createBaseWithdrawDecrypted() {
  return {
    from_address: "",
    denom: "",
    amount: "",
    decryptable_balance: "",
    remaining_balance_commitment: "",
    proofs: void 0
  };
}
function createBaseTransferDecrypted() {
  return {
    from_address: "",
    to_address: "",
    denom: "",
    transfer_amount_lo: 0,
    transfer_amount_hi: 0,
    total_transfer_amount: 0,
    remaining_balance_commitment: "",
    decryptable_balance: "",
    proofs: void 0,
    auditors: []
  };
}
function bytesFromBase646(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes6(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber4(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet7(value) {
  return value !== null && value !== void 0;
}
var registry7 = [
  ["/seiprotocol.seichain.confidentialtransfers.GetCtAccountRequest", GetCtAccountRequest],
  ["/seiprotocol.seichain.confidentialtransfers.GetCtAccountResponse", GetCtAccountResponse],
  ["/seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsRequest", GetAllCtAccountsRequest],
  ["/seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsResponse", GetAllCtAccountsResponse],
  ["/seiprotocol.seichain.confidentialtransfers.DecryptedCtAccount", DecryptedCtAccount],
  ["/seiprotocol.seichain.confidentialtransfers.ApplyPendingBalanceDecrypted", ApplyPendingBalanceDecrypted],
  ["/seiprotocol.seichain.confidentialtransfers.InitializeAccountDecrypted", InitializeAccountDecrypted],
  ["/seiprotocol.seichain.confidentialtransfers.WithdrawDecrypted", WithdrawDecrypted],
  ["/seiprotocol.seichain.confidentialtransfers.TransferDecrypted", TransferDecrypted]
];
var aminoConverters7 = {
  "/seiprotocol.seichain.confidentialtransfers.GetCtAccountRequest": {
    aminoType: "confidentialtransfers/GetCtAccountRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.GetCtAccountResponse": {
    aminoType: "confidentialtransfers/GetCtAccountResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsRequest": {
    aminoType: "confidentialtransfers/GetAllCtAccountsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.GetAllCtAccountsResponse": {
    aminoType: "confidentialtransfers/GetAllCtAccountsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.DecryptedCtAccount": {
    aminoType: "confidentialtransfers/DecryptedCtAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.ApplyPendingBalanceDecrypted": {
    aminoType: "confidentialtransfers/ApplyPendingBalanceDecrypted",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.InitializeAccountDecrypted": {
    aminoType: "confidentialtransfers/InitializeAccountDecrypted",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.WithdrawDecrypted": {
    aminoType: "confidentialtransfers/WithdrawDecrypted",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.TransferDecrypted": {
    aminoType: "confidentialtransfers/TransferDecrypted",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/confidentialtransfers/tx.js
var MsgTransfer = {
  $type: "seiprotocol.seichain.confidentialtransfers.MsgTransfer",
  encode(message, writer = new BinaryWriter()) {
    if (message.from_address !== "") {
      writer.uint32(10).string(message.from_address);
    }
    if (message.to_address !== "") {
      writer.uint32(18).string(message.to_address);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    if (message.from_amount_lo !== void 0) {
      Ciphertext.encode(message.from_amount_lo, writer.uint32(34).fork()).join();
    }
    if (message.from_amount_hi !== void 0) {
      Ciphertext.encode(message.from_amount_hi, writer.uint32(42).fork()).join();
    }
    if (message.to_amount_lo !== void 0) {
      Ciphertext.encode(message.to_amount_lo, writer.uint32(50).fork()).join();
    }
    if (message.to_amount_hi !== void 0) {
      Ciphertext.encode(message.to_amount_hi, writer.uint32(58).fork()).join();
    }
    if (message.remaining_balance !== void 0) {
      Ciphertext.encode(message.remaining_balance, writer.uint32(66).fork()).join();
    }
    if (message.decryptable_balance !== "") {
      writer.uint32(74).string(message.decryptable_balance);
    }
    if (message.proofs !== void 0) {
      TransferMsgProofs.encode(message.proofs, writer.uint32(82).fork()).join();
    }
    for (const v of message.auditors) {
      Auditor.encode(v, writer.uint32(90).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgTransfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.from_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.to_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.from_amount_lo = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.from_amount_hi = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.to_amount_lo = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.to_amount_hi = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.remaining_balance = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.decryptable_balance = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.proofs = TransferMsgProofs.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.auditors.push(Auditor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      from_address: isSet8(object.from_address) ? globalThis.String(object.from_address) : "",
      to_address: isSet8(object.to_address) ? globalThis.String(object.to_address) : "",
      denom: isSet8(object.denom) ? globalThis.String(object.denom) : "",
      from_amount_lo: isSet8(object.from_amount_lo) ? Ciphertext.fromJSON(object.from_amount_lo) : void 0,
      from_amount_hi: isSet8(object.from_amount_hi) ? Ciphertext.fromJSON(object.from_amount_hi) : void 0,
      to_amount_lo: isSet8(object.to_amount_lo) ? Ciphertext.fromJSON(object.to_amount_lo) : void 0,
      to_amount_hi: isSet8(object.to_amount_hi) ? Ciphertext.fromJSON(object.to_amount_hi) : void 0,
      remaining_balance: isSet8(object.remaining_balance) ? Ciphertext.fromJSON(object.remaining_balance) : void 0,
      decryptable_balance: isSet8(object.decryptable_balance) ? globalThis.String(object.decryptable_balance) : "",
      proofs: isSet8(object.proofs) ? TransferMsgProofs.fromJSON(object.proofs) : void 0,
      auditors: globalThis.Array.isArray(object == null ? void 0 : object.auditors) ? object.auditors.map((e) => Auditor.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.from_address !== "") {
      obj.from_address = message.from_address;
    }
    if (message.to_address !== "") {
      obj.to_address = message.to_address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.from_amount_lo !== void 0) {
      obj.from_amount_lo = Ciphertext.toJSON(message.from_amount_lo);
    }
    if (message.from_amount_hi !== void 0) {
      obj.from_amount_hi = Ciphertext.toJSON(message.from_amount_hi);
    }
    if (message.to_amount_lo !== void 0) {
      obj.to_amount_lo = Ciphertext.toJSON(message.to_amount_lo);
    }
    if (message.to_amount_hi !== void 0) {
      obj.to_amount_hi = Ciphertext.toJSON(message.to_amount_hi);
    }
    if (message.remaining_balance !== void 0) {
      obj.remaining_balance = Ciphertext.toJSON(message.remaining_balance);
    }
    if (message.decryptable_balance !== "") {
      obj.decryptable_balance = message.decryptable_balance;
    }
    if (message.proofs !== void 0) {
      obj.proofs = TransferMsgProofs.toJSON(message.proofs);
    }
    if ((_a = message.auditors) == null ? void 0 : _a.length) {
      obj.auditors = message.auditors.map((e) => Auditor.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return MsgTransfer.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgTransfer();
    message.from_address = object.from_address ?? "";
    message.to_address = object.to_address ?? "";
    message.denom = object.denom ?? "";
    message.from_amount_lo = object.from_amount_lo !== void 0 && object.from_amount_lo !== null ? Ciphertext.fromPartial(object.from_amount_lo) : void 0;
    message.from_amount_hi = object.from_amount_hi !== void 0 && object.from_amount_hi !== null ? Ciphertext.fromPartial(object.from_amount_hi) : void 0;
    message.to_amount_lo = object.to_amount_lo !== void 0 && object.to_amount_lo !== null ? Ciphertext.fromPartial(object.to_amount_lo) : void 0;
    message.to_amount_hi = object.to_amount_hi !== void 0 && object.to_amount_hi !== null ? Ciphertext.fromPartial(object.to_amount_hi) : void 0;
    message.remaining_balance = object.remaining_balance !== void 0 && object.remaining_balance !== null ? Ciphertext.fromPartial(object.remaining_balance) : void 0;
    message.decryptable_balance = object.decryptable_balance ?? "";
    message.proofs = object.proofs !== void 0 && object.proofs !== null ? TransferMsgProofs.fromPartial(object.proofs) : void 0;
    message.auditors = ((_a = object.auditors) == null ? void 0 : _a.map((e) => Auditor.fromPartial(e))) || [];
    return message;
  }
};
var MsgTransferResponse = {
  $type: "seiprotocol.seichain.confidentialtransfers.MsgTransferResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgTransferResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgTransferResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgTransferResponse();
    return message;
  }
};
var Auditor = {
  $type: "seiprotocol.seichain.confidentialtransfers.Auditor",
  encode(message, writer = new BinaryWriter()) {
    if (message.auditor_address !== "") {
      writer.uint32(10).string(message.auditor_address);
    }
    if (message.encrypted_transfer_amount_lo !== void 0) {
      Ciphertext.encode(message.encrypted_transfer_amount_lo, writer.uint32(18).fork()).join();
    }
    if (message.encrypted_transfer_amount_hi !== void 0) {
      Ciphertext.encode(message.encrypted_transfer_amount_hi, writer.uint32(26).fork()).join();
    }
    if (message.transfer_amount_lo_validity_proof !== void 0) {
      CiphertextValidityProof.encode(message.transfer_amount_lo_validity_proof, writer.uint32(34).fork()).join();
    }
    if (message.transfer_amount_hi_validity_proof !== void 0) {
      CiphertextValidityProof.encode(message.transfer_amount_hi_validity_proof, writer.uint32(42).fork()).join();
    }
    if (message.transfer_amount_lo_equality_proof !== void 0) {
      CiphertextCiphertextEqualityProof.encode(message.transfer_amount_lo_equality_proof, writer.uint32(50).fork()).join();
    }
    if (message.transfer_amount_hi_equality_proof !== void 0) {
      CiphertextCiphertextEqualityProof.encode(message.transfer_amount_hi_equality_proof, writer.uint32(58).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAuditor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.auditor_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.encrypted_transfer_amount_lo = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.encrypted_transfer_amount_hi = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.transfer_amount_lo_validity_proof = CiphertextValidityProof.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.transfer_amount_hi_validity_proof = CiphertextValidityProof.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.transfer_amount_lo_equality_proof = CiphertextCiphertextEqualityProof.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.transfer_amount_hi_equality_proof = CiphertextCiphertextEqualityProof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      auditor_address: isSet8(object.auditor_address) ? globalThis.String(object.auditor_address) : "",
      encrypted_transfer_amount_lo: isSet8(object.encrypted_transfer_amount_lo) ? Ciphertext.fromJSON(object.encrypted_transfer_amount_lo) : void 0,
      encrypted_transfer_amount_hi: isSet8(object.encrypted_transfer_amount_hi) ? Ciphertext.fromJSON(object.encrypted_transfer_amount_hi) : void 0,
      transfer_amount_lo_validity_proof: isSet8(object.transfer_amount_lo_validity_proof) ? CiphertextValidityProof.fromJSON(object.transfer_amount_lo_validity_proof) : void 0,
      transfer_amount_hi_validity_proof: isSet8(object.transfer_amount_hi_validity_proof) ? CiphertextValidityProof.fromJSON(object.transfer_amount_hi_validity_proof) : void 0,
      transfer_amount_lo_equality_proof: isSet8(object.transfer_amount_lo_equality_proof) ? CiphertextCiphertextEqualityProof.fromJSON(object.transfer_amount_lo_equality_proof) : void 0,
      transfer_amount_hi_equality_proof: isSet8(object.transfer_amount_hi_equality_proof) ? CiphertextCiphertextEqualityProof.fromJSON(object.transfer_amount_hi_equality_proof) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.auditor_address !== "") {
      obj.auditor_address = message.auditor_address;
    }
    if (message.encrypted_transfer_amount_lo !== void 0) {
      obj.encrypted_transfer_amount_lo = Ciphertext.toJSON(message.encrypted_transfer_amount_lo);
    }
    if (message.encrypted_transfer_amount_hi !== void 0) {
      obj.encrypted_transfer_amount_hi = Ciphertext.toJSON(message.encrypted_transfer_amount_hi);
    }
    if (message.transfer_amount_lo_validity_proof !== void 0) {
      obj.transfer_amount_lo_validity_proof = CiphertextValidityProof.toJSON(message.transfer_amount_lo_validity_proof);
    }
    if (message.transfer_amount_hi_validity_proof !== void 0) {
      obj.transfer_amount_hi_validity_proof = CiphertextValidityProof.toJSON(message.transfer_amount_hi_validity_proof);
    }
    if (message.transfer_amount_lo_equality_proof !== void 0) {
      obj.transfer_amount_lo_equality_proof = CiphertextCiphertextEqualityProof.toJSON(message.transfer_amount_lo_equality_proof);
    }
    if (message.transfer_amount_hi_equality_proof !== void 0) {
      obj.transfer_amount_hi_equality_proof = CiphertextCiphertextEqualityProof.toJSON(message.transfer_amount_hi_equality_proof);
    }
    return obj;
  },
  create(base) {
    return Auditor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAuditor();
    message.auditor_address = object.auditor_address ?? "";
    message.encrypted_transfer_amount_lo = object.encrypted_transfer_amount_lo !== void 0 && object.encrypted_transfer_amount_lo !== null ? Ciphertext.fromPartial(object.encrypted_transfer_amount_lo) : void 0;
    message.encrypted_transfer_amount_hi = object.encrypted_transfer_amount_hi !== void 0 && object.encrypted_transfer_amount_hi !== null ? Ciphertext.fromPartial(object.encrypted_transfer_amount_hi) : void 0;
    message.transfer_amount_lo_validity_proof = object.transfer_amount_lo_validity_proof !== void 0 && object.transfer_amount_lo_validity_proof !== null ? CiphertextValidityProof.fromPartial(object.transfer_amount_lo_validity_proof) : void 0;
    message.transfer_amount_hi_validity_proof = object.transfer_amount_hi_validity_proof !== void 0 && object.transfer_amount_hi_validity_proof !== null ? CiphertextValidityProof.fromPartial(object.transfer_amount_hi_validity_proof) : void 0;
    message.transfer_amount_lo_equality_proof = object.transfer_amount_lo_equality_proof !== void 0 && object.transfer_amount_lo_equality_proof !== null ? CiphertextCiphertextEqualityProof.fromPartial(object.transfer_amount_lo_equality_proof) : void 0;
    message.transfer_amount_hi_equality_proof = object.transfer_amount_hi_equality_proof !== void 0 && object.transfer_amount_hi_equality_proof !== null ? CiphertextCiphertextEqualityProof.fromPartial(object.transfer_amount_hi_equality_proof) : void 0;
    return message;
  }
};
var MsgInitializeAccount = {
  $type: "seiprotocol.seichain.confidentialtransfers.MsgInitializeAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.from_address !== "") {
      writer.uint32(10).string(message.from_address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.public_key.length !== 0) {
      writer.uint32(26).bytes(message.public_key);
    }
    if (message.decryptable_balance !== "") {
      writer.uint32(34).string(message.decryptable_balance);
    }
    if (message.pending_balance_lo !== void 0) {
      Ciphertext.encode(message.pending_balance_lo, writer.uint32(42).fork()).join();
    }
    if (message.pending_balance_hi !== void 0) {
      Ciphertext.encode(message.pending_balance_hi, writer.uint32(50).fork()).join();
    }
    if (message.available_balance !== void 0) {
      Ciphertext.encode(message.available_balance, writer.uint32(58).fork()).join();
    }
    if (message.proofs !== void 0) {
      InitializeAccountMsgProofs.encode(message.proofs, writer.uint32(66).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgInitializeAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.from_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.public_key = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.decryptable_balance = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.pending_balance_lo = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.pending_balance_hi = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.available_balance = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.proofs = InitializeAccountMsgProofs.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      from_address: isSet8(object.from_address) ? globalThis.String(object.from_address) : "",
      denom: isSet8(object.denom) ? globalThis.String(object.denom) : "",
      public_key: isSet8(object.public_key) ? bytesFromBase647(object.public_key) : new Uint8Array(0),
      decryptable_balance: isSet8(object.decryptable_balance) ? globalThis.String(object.decryptable_balance) : "",
      pending_balance_lo: isSet8(object.pending_balance_lo) ? Ciphertext.fromJSON(object.pending_balance_lo) : void 0,
      pending_balance_hi: isSet8(object.pending_balance_hi) ? Ciphertext.fromJSON(object.pending_balance_hi) : void 0,
      available_balance: isSet8(object.available_balance) ? Ciphertext.fromJSON(object.available_balance) : void 0,
      proofs: isSet8(object.proofs) ? InitializeAccountMsgProofs.fromJSON(object.proofs) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.from_address !== "") {
      obj.from_address = message.from_address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.public_key.length !== 0) {
      obj.public_key = base64FromBytes7(message.public_key);
    }
    if (message.decryptable_balance !== "") {
      obj.decryptable_balance = message.decryptable_balance;
    }
    if (message.pending_balance_lo !== void 0) {
      obj.pending_balance_lo = Ciphertext.toJSON(message.pending_balance_lo);
    }
    if (message.pending_balance_hi !== void 0) {
      obj.pending_balance_hi = Ciphertext.toJSON(message.pending_balance_hi);
    }
    if (message.available_balance !== void 0) {
      obj.available_balance = Ciphertext.toJSON(message.available_balance);
    }
    if (message.proofs !== void 0) {
      obj.proofs = InitializeAccountMsgProofs.toJSON(message.proofs);
    }
    return obj;
  },
  create(base) {
    return MsgInitializeAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgInitializeAccount();
    message.from_address = object.from_address ?? "";
    message.denom = object.denom ?? "";
    message.public_key = object.public_key ?? new Uint8Array(0);
    message.decryptable_balance = object.decryptable_balance ?? "";
    message.pending_balance_lo = object.pending_balance_lo !== void 0 && object.pending_balance_lo !== null ? Ciphertext.fromPartial(object.pending_balance_lo) : void 0;
    message.pending_balance_hi = object.pending_balance_hi !== void 0 && object.pending_balance_hi !== null ? Ciphertext.fromPartial(object.pending_balance_hi) : void 0;
    message.available_balance = object.available_balance !== void 0 && object.available_balance !== null ? Ciphertext.fromPartial(object.available_balance) : void 0;
    message.proofs = object.proofs !== void 0 && object.proofs !== null ? InitializeAccountMsgProofs.fromPartial(object.proofs) : void 0;
    return message;
  }
};
var MsgInitializeAccountResponse = {
  $type: "seiprotocol.seichain.confidentialtransfers.MsgInitializeAccountResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgInitializeAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgInitializeAccountResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgInitializeAccountResponse();
    return message;
  }
};
var MsgDeposit = {
  $type: "seiprotocol.seichain.confidentialtransfers.MsgDeposit",
  encode(message, writer = new BinaryWriter()) {
    if (message.from_address !== "") {
      writer.uint32(10).string(message.from_address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.from_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.amount = longToNumber5(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      from_address: isSet8(object.from_address) ? globalThis.String(object.from_address) : "",
      denom: isSet8(object.denom) ? globalThis.String(object.denom) : "",
      amount: isSet8(object.amount) ? globalThis.Number(object.amount) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.from_address !== "") {
      obj.from_address = message.from_address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },
  create(base) {
    return MsgDeposit.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgDeposit();
    message.from_address = object.from_address ?? "";
    message.denom = object.denom ?? "";
    message.amount = object.amount ?? 0;
    return message;
  }
};
var MsgDepositResponse = {
  $type: "seiprotocol.seichain.confidentialtransfers.MsgDepositResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgDepositResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgDepositResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgDepositResponse();
    return message;
  }
};
var MsgWithdraw = {
  $type: "seiprotocol.seichain.confidentialtransfers.MsgWithdraw",
  encode(message, writer = new BinaryWriter()) {
    if (message.from_address !== "") {
      writer.uint32(10).string(message.from_address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    if (message.decryptable_balance !== "") {
      writer.uint32(34).string(message.decryptable_balance);
    }
    if (message.remaining_balance_commitment !== void 0) {
      Ciphertext.encode(message.remaining_balance_commitment, writer.uint32(42).fork()).join();
    }
    if (message.proofs !== void 0) {
      WithdrawMsgProofs.encode(message.proofs, writer.uint32(50).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdraw();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.from_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.amount = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.decryptable_balance = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.remaining_balance_commitment = Ciphertext.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.proofs = WithdrawMsgProofs.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      from_address: isSet8(object.from_address) ? globalThis.String(object.from_address) : "",
      denom: isSet8(object.denom) ? globalThis.String(object.denom) : "",
      amount: isSet8(object.amount) ? globalThis.String(object.amount) : "",
      decryptable_balance: isSet8(object.decryptable_balance) ? globalThis.String(object.decryptable_balance) : "",
      remaining_balance_commitment: isSet8(object.remaining_balance_commitment) ? Ciphertext.fromJSON(object.remaining_balance_commitment) : void 0,
      proofs: isSet8(object.proofs) ? WithdrawMsgProofs.fromJSON(object.proofs) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.from_address !== "") {
      obj.from_address = message.from_address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.decryptable_balance !== "") {
      obj.decryptable_balance = message.decryptable_balance;
    }
    if (message.remaining_balance_commitment !== void 0) {
      obj.remaining_balance_commitment = Ciphertext.toJSON(message.remaining_balance_commitment);
    }
    if (message.proofs !== void 0) {
      obj.proofs = WithdrawMsgProofs.toJSON(message.proofs);
    }
    return obj;
  },
  create(base) {
    return MsgWithdraw.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgWithdraw();
    message.from_address = object.from_address ?? "";
    message.denom = object.denom ?? "";
    message.amount = object.amount ?? "";
    message.decryptable_balance = object.decryptable_balance ?? "";
    message.remaining_balance_commitment = object.remaining_balance_commitment !== void 0 && object.remaining_balance_commitment !== null ? Ciphertext.fromPartial(object.remaining_balance_commitment) : void 0;
    message.proofs = object.proofs !== void 0 && object.proofs !== null ? WithdrawMsgProofs.fromPartial(object.proofs) : void 0;
    return message;
  }
};
var MsgWithdrawResponse = {
  $type: "seiprotocol.seichain.confidentialtransfers.MsgWithdrawResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgWithdrawResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgWithdrawResponse();
    return message;
  }
};
var MsgApplyPendingBalance = {
  $type: "seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalance",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.new_decryptable_available_balance !== "") {
      writer.uint32(26).string(message.new_decryptable_available_balance);
    }
    if (message.current_pending_balance_counter !== 0) {
      writer.uint32(32).uint32(message.current_pending_balance_counter);
    }
    if (message.current_available_balance !== void 0) {
      Ciphertext.encode(message.current_available_balance, writer.uint32(42).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgApplyPendingBalance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.new_decryptable_available_balance = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.current_pending_balance_counter = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.current_available_balance = Ciphertext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet8(object.address) ? globalThis.String(object.address) : "",
      denom: isSet8(object.denom) ? globalThis.String(object.denom) : "",
      new_decryptable_available_balance: isSet8(object.new_decryptable_available_balance) ? globalThis.String(object.new_decryptable_available_balance) : "",
      current_pending_balance_counter: isSet8(object.current_pending_balance_counter) ? globalThis.Number(object.current_pending_balance_counter) : 0,
      current_available_balance: isSet8(object.current_available_balance) ? Ciphertext.fromJSON(object.current_available_balance) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.new_decryptable_available_balance !== "") {
      obj.new_decryptable_available_balance = message.new_decryptable_available_balance;
    }
    if (message.current_pending_balance_counter !== 0) {
      obj.current_pending_balance_counter = Math.round(message.current_pending_balance_counter);
    }
    if (message.current_available_balance !== void 0) {
      obj.current_available_balance = Ciphertext.toJSON(message.current_available_balance);
    }
    return obj;
  },
  create(base) {
    return MsgApplyPendingBalance.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgApplyPendingBalance();
    message.address = object.address ?? "";
    message.denom = object.denom ?? "";
    message.new_decryptable_available_balance = object.new_decryptable_available_balance ?? "";
    message.current_pending_balance_counter = object.current_pending_balance_counter ?? 0;
    message.current_available_balance = object.current_available_balance !== void 0 && object.current_available_balance !== null ? Ciphertext.fromPartial(object.current_available_balance) : void 0;
    return message;
  }
};
var MsgApplyPendingBalanceResponse = {
  $type: "seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalanceResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgApplyPendingBalanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgApplyPendingBalanceResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgApplyPendingBalanceResponse();
    return message;
  }
};
var MsgCloseAccount = {
  $type: "seiprotocol.seichain.confidentialtransfers.MsgCloseAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.proofs !== void 0) {
      CloseAccountMsgProofs.encode(message.proofs, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.proofs = CloseAccountMsgProofs.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet8(object.address) ? globalThis.String(object.address) : "",
      denom: isSet8(object.denom) ? globalThis.String(object.denom) : "",
      proofs: isSet8(object.proofs) ? CloseAccountMsgProofs.fromJSON(object.proofs) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.proofs !== void 0) {
      obj.proofs = CloseAccountMsgProofs.toJSON(message.proofs);
    }
    return obj;
  },
  create(base) {
    return MsgCloseAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCloseAccount();
    message.address = object.address ?? "";
    message.denom = object.denom ?? "";
    message.proofs = object.proofs !== void 0 && object.proofs !== null ? CloseAccountMsgProofs.fromPartial(object.proofs) : void 0;
    return message;
  }
};
var MsgCloseAccountResponse = {
  $type: "seiprotocol.seichain.confidentialtransfers.MsgCloseAccountResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgCloseAccountResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgCloseAccountResponse();
    return message;
  }
};
function createBaseMsgTransfer() {
  return {
    from_address: "",
    to_address: "",
    denom: "",
    from_amount_lo: void 0,
    from_amount_hi: void 0,
    to_amount_lo: void 0,
    to_amount_hi: void 0,
    remaining_balance: void 0,
    decryptable_balance: "",
    proofs: void 0,
    auditors: []
  };
}
function createBaseMsgTransferResponse() {
  return {};
}
function createBaseAuditor() {
  return {
    auditor_address: "",
    encrypted_transfer_amount_lo: void 0,
    encrypted_transfer_amount_hi: void 0,
    transfer_amount_lo_validity_proof: void 0,
    transfer_amount_hi_validity_proof: void 0,
    transfer_amount_lo_equality_proof: void 0,
    transfer_amount_hi_equality_proof: void 0
  };
}
function createBaseMsgInitializeAccount() {
  return {
    from_address: "",
    denom: "",
    public_key: new Uint8Array(0),
    decryptable_balance: "",
    pending_balance_lo: void 0,
    pending_balance_hi: void 0,
    available_balance: void 0,
    proofs: void 0
  };
}
function createBaseMsgInitializeAccountResponse() {
  return {};
}
function createBaseMsgDeposit() {
  return { from_address: "", denom: "", amount: 0 };
}
function createBaseMsgDepositResponse() {
  return {};
}
function createBaseMsgWithdraw() {
  return {
    from_address: "",
    denom: "",
    amount: "",
    decryptable_balance: "",
    remaining_balance_commitment: void 0,
    proofs: void 0
  };
}
function createBaseMsgWithdrawResponse() {
  return {};
}
function createBaseMsgApplyPendingBalance() {
  return {
    address: "",
    denom: "",
    new_decryptable_available_balance: "",
    current_pending_balance_counter: 0,
    current_available_balance: void 0
  };
}
function createBaseMsgApplyPendingBalanceResponse() {
  return {};
}
function createBaseMsgCloseAccount() {
  return { address: "", denom: "", proofs: void 0 };
}
function createBaseMsgCloseAccountResponse() {
  return {};
}
function bytesFromBase647(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes7(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber5(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet8(value) {
  return value !== null && value !== void 0;
}
var registry8 = [
  ["/seiprotocol.seichain.confidentialtransfers.MsgTransfer", MsgTransfer],
  ["/seiprotocol.seichain.confidentialtransfers.MsgTransferResponse", MsgTransferResponse],
  ["/seiprotocol.seichain.confidentialtransfers.Auditor", Auditor],
  ["/seiprotocol.seichain.confidentialtransfers.MsgInitializeAccount", MsgInitializeAccount],
  ["/seiprotocol.seichain.confidentialtransfers.MsgInitializeAccountResponse", MsgInitializeAccountResponse],
  ["/seiprotocol.seichain.confidentialtransfers.MsgDeposit", MsgDeposit],
  ["/seiprotocol.seichain.confidentialtransfers.MsgDepositResponse", MsgDepositResponse],
  ["/seiprotocol.seichain.confidentialtransfers.MsgWithdraw", MsgWithdraw],
  ["/seiprotocol.seichain.confidentialtransfers.MsgWithdrawResponse", MsgWithdrawResponse],
  ["/seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalance", MsgApplyPendingBalance],
  ["/seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalanceResponse", MsgApplyPendingBalanceResponse],
  ["/seiprotocol.seichain.confidentialtransfers.MsgCloseAccount", MsgCloseAccount],
  ["/seiprotocol.seichain.confidentialtransfers.MsgCloseAccountResponse", MsgCloseAccountResponse]
];
var aminoConverters8 = {
  "/seiprotocol.seichain.confidentialtransfers.MsgTransfer": {
    aminoType: "confidentialtransfers/MsgTransfer",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.MsgTransferResponse": {
    aminoType: "confidentialtransfers/MsgTransferResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.Auditor": {
    aminoType: "confidentialtransfers/Auditor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.MsgInitializeAccount": {
    aminoType: "confidentialtransfers/MsgInitializeAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.MsgInitializeAccountResponse": {
    aminoType: "confidentialtransfers/MsgInitializeAccountResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.MsgDeposit": {
    aminoType: "confidentialtransfers/MsgDeposit",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.MsgDepositResponse": {
    aminoType: "confidentialtransfers/MsgDepositResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.MsgWithdraw": {
    aminoType: "confidentialtransfers/MsgWithdraw",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.MsgWithdrawResponse": {
    aminoType: "confidentialtransfers/MsgWithdrawResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalance": {
    aminoType: "confidentialtransfers/MsgApplyPendingBalance",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.MsgApplyPendingBalanceResponse": {
    aminoType: "confidentialtransfers/MsgApplyPendingBalanceResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.MsgCloseAccount": {
    aminoType: "confidentialtransfers/MsgCloseAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.confidentialtransfers.MsgCloseAccountResponse": {
    aminoType: "confidentialtransfers/MsgCloseAccountResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/confio/index.js
var confio_exports = {};
__export(confio_exports, {
  BatchEntry: () => BatchEntry,
  BatchProof: () => BatchProof,
  CommitmentProof: () => CommitmentProof,
  CompressedBatchEntry: () => CompressedBatchEntry,
  CompressedBatchProof: () => CompressedBatchProof,
  CompressedExistenceProof: () => CompressedExistenceProof,
  CompressedNonExistenceProof: () => CompressedNonExistenceProof,
  ExistenceProof: () => ExistenceProof,
  InnerOp: () => InnerOp,
  InnerSpec: () => InnerSpec,
  LeafOp: () => LeafOp,
  NonExistenceProof: () => NonExistenceProof,
  ProofSpec: () => ProofSpec,
  aminoConverters: () => aminoConverters9,
  hashOpFromJSON: () => hashOpFromJSON,
  hashOpToJSON: () => hashOpToJSON,
  lengthOpFromJSON: () => lengthOpFromJSON,
  lengthOpToJSON: () => lengthOpToJSON,
  registry: () => registry9
});

// node_modules/@sei-js/cosmos/dist/esm/types/confio/proofs.js
var HashOp;
(function(HashOp2) {
  HashOp2[HashOp2["NO_HASH"] = 0] = "NO_HASH";
  HashOp2[HashOp2["SHA256"] = 1] = "SHA256";
  HashOp2[HashOp2["SHA512"] = 2] = "SHA512";
  HashOp2[HashOp2["KECCAK"] = 3] = "KECCAK";
  HashOp2[HashOp2["RIPEMD160"] = 4] = "RIPEMD160";
  HashOp2[HashOp2["BITCOIN"] = 5] = "BITCOIN";
  HashOp2[HashOp2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(HashOp || (HashOp = {}));
var LengthOp;
(function(LengthOp2) {
  LengthOp2[LengthOp2["NO_PREFIX"] = 0] = "NO_PREFIX";
  LengthOp2[LengthOp2["VAR_PROTO"] = 1] = "VAR_PROTO";
  LengthOp2[LengthOp2["VAR_RLP"] = 2] = "VAR_RLP";
  LengthOp2[LengthOp2["FIXED32_BIG"] = 3] = "FIXED32_BIG";
  LengthOp2[LengthOp2["FIXED32_LITTLE"] = 4] = "FIXED32_LITTLE";
  LengthOp2[LengthOp2["FIXED64_BIG"] = 5] = "FIXED64_BIG";
  LengthOp2[LengthOp2["FIXED64_LITTLE"] = 6] = "FIXED64_LITTLE";
  LengthOp2[LengthOp2["REQUIRE_32_BYTES"] = 7] = "REQUIRE_32_BYTES";
  LengthOp2[LengthOp2["REQUIRE_64_BYTES"] = 8] = "REQUIRE_64_BYTES";
  LengthOp2[LengthOp2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LengthOp || (LengthOp = {}));

// node_modules/@sei-js/cosmos/dist/esm/encoding/confio/proofs.js
var ExistenceProof = {
  $type: "ics23.ExistenceProof",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    if (message.leaf !== void 0) {
      LeafOp.encode(message.leaf, writer.uint32(26).fork()).join();
    }
    for (const v of message.path) {
      InnerOp.encode(v, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseExistenceProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.leaf = LeafOp.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.path.push(InnerOp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet9(object.key) ? bytesFromBase648(object.key) : new Uint8Array(0),
      value: isSet9(object.value) ? bytesFromBase648(object.value) : new Uint8Array(0),
      leaf: isSet9(object.leaf) ? LeafOp.fromJSON(object.leaf) : void 0,
      path: globalThis.Array.isArray(object == null ? void 0 : object.path) ? object.path.map((e) => InnerOp.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes8(message.key);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes8(message.value);
    }
    if (message.leaf !== void 0) {
      obj.leaf = LeafOp.toJSON(message.leaf);
    }
    if ((_a = message.path) == null ? void 0 : _a.length) {
      obj.path = message.path.map((e) => InnerOp.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ExistenceProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseExistenceProof();
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    message.leaf = object.leaf !== void 0 && object.leaf !== null ? LeafOp.fromPartial(object.leaf) : void 0;
    message.path = ((_a = object.path) == null ? void 0 : _a.map((e) => InnerOp.fromPartial(e))) || [];
    return message;
  }
};
var NonExistenceProof = {
  $type: "ics23.NonExistenceProof",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.left !== void 0) {
      ExistenceProof.encode(message.left, writer.uint32(18).fork()).join();
    }
    if (message.right !== void 0) {
      ExistenceProof.encode(message.right, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseNonExistenceProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.left = ExistenceProof.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.right = ExistenceProof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet9(object.key) ? bytesFromBase648(object.key) : new Uint8Array(0),
      left: isSet9(object.left) ? ExistenceProof.fromJSON(object.left) : void 0,
      right: isSet9(object.right) ? ExistenceProof.fromJSON(object.right) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes8(message.key);
    }
    if (message.left !== void 0) {
      obj.left = ExistenceProof.toJSON(message.left);
    }
    if (message.right !== void 0) {
      obj.right = ExistenceProof.toJSON(message.right);
    }
    return obj;
  },
  create(base) {
    return NonExistenceProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseNonExistenceProof();
    message.key = object.key ?? new Uint8Array(0);
    message.left = object.left !== void 0 && object.left !== null ? ExistenceProof.fromPartial(object.left) : void 0;
    message.right = object.right !== void 0 && object.right !== null ? ExistenceProof.fromPartial(object.right) : void 0;
    return message;
  }
};
var CommitmentProof = {
  $type: "ics23.CommitmentProof",
  encode(message, writer = new BinaryWriter()) {
    if (message.exist !== void 0) {
      ExistenceProof.encode(message.exist, writer.uint32(10).fork()).join();
    }
    if (message.nonexist !== void 0) {
      NonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).join();
    }
    if (message.batch !== void 0) {
      BatchProof.encode(message.batch, writer.uint32(26).fork()).join();
    }
    if (message.compressed !== void 0) {
      CompressedBatchProof.encode(message.compressed, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCommitmentProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.exist = ExistenceProof.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.nonexist = NonExistenceProof.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.batch = BatchProof.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.compressed = CompressedBatchProof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      exist: isSet9(object.exist) ? ExistenceProof.fromJSON(object.exist) : void 0,
      nonexist: isSet9(object.nonexist) ? NonExistenceProof.fromJSON(object.nonexist) : void 0,
      batch: isSet9(object.batch) ? BatchProof.fromJSON(object.batch) : void 0,
      compressed: isSet9(object.compressed) ? CompressedBatchProof.fromJSON(object.compressed) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.exist !== void 0) {
      obj.exist = ExistenceProof.toJSON(message.exist);
    }
    if (message.nonexist !== void 0) {
      obj.nonexist = NonExistenceProof.toJSON(message.nonexist);
    }
    if (message.batch !== void 0) {
      obj.batch = BatchProof.toJSON(message.batch);
    }
    if (message.compressed !== void 0) {
      obj.compressed = CompressedBatchProof.toJSON(message.compressed);
    }
    return obj;
  },
  create(base) {
    return CommitmentProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCommitmentProof();
    message.exist = object.exist !== void 0 && object.exist !== null ? ExistenceProof.fromPartial(object.exist) : void 0;
    message.nonexist = object.nonexist !== void 0 && object.nonexist !== null ? NonExistenceProof.fromPartial(object.nonexist) : void 0;
    message.batch = object.batch !== void 0 && object.batch !== null ? BatchProof.fromPartial(object.batch) : void 0;
    message.compressed = object.compressed !== void 0 && object.compressed !== null ? CompressedBatchProof.fromPartial(object.compressed) : void 0;
    return message;
  }
};
var LeafOp = {
  $type: "ics23.LeafOp",
  encode(message, writer = new BinaryWriter()) {
    if (message.hash !== 0) {
      writer.uint32(8).int32(message.hash);
    }
    if (message.prehash_key !== 0) {
      writer.uint32(16).int32(message.prehash_key);
    }
    if (message.prehash_value !== 0) {
      writer.uint32(24).int32(message.prehash_value);
    }
    if (message.length !== 0) {
      writer.uint32(32).int32(message.length);
    }
    if (message.prefix.length !== 0) {
      writer.uint32(42).bytes(message.prefix);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLeafOp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.hash = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.prehash_key = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.prehash_value = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.length = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.prefix = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      hash: isSet9(object.hash) ? hashOpFromJSON(object.hash) : 0,
      prehash_key: isSet9(object.prehash_key) ? hashOpFromJSON(object.prehash_key) : 0,
      prehash_value: isSet9(object.prehash_value) ? hashOpFromJSON(object.prehash_value) : 0,
      length: isSet9(object.length) ? lengthOpFromJSON(object.length) : 0,
      prefix: isSet9(object.prefix) ? bytesFromBase648(object.prefix) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.hash !== 0) {
      obj.hash = hashOpToJSON(message.hash);
    }
    if (message.prehash_key !== 0) {
      obj.prehash_key = hashOpToJSON(message.prehash_key);
    }
    if (message.prehash_value !== 0) {
      obj.prehash_value = hashOpToJSON(message.prehash_value);
    }
    if (message.length !== 0) {
      obj.length = lengthOpToJSON(message.length);
    }
    if (message.prefix.length !== 0) {
      obj.prefix = base64FromBytes8(message.prefix);
    }
    return obj;
  },
  create(base) {
    return LeafOp.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseLeafOp();
    message.hash = object.hash ?? 0;
    message.prehash_key = object.prehash_key ?? 0;
    message.prehash_value = object.prehash_value ?? 0;
    message.length = object.length ?? 0;
    message.prefix = object.prefix ?? new Uint8Array(0);
    return message;
  }
};
var InnerOp = {
  $type: "ics23.InnerOp",
  encode(message, writer = new BinaryWriter()) {
    if (message.hash !== 0) {
      writer.uint32(8).int32(message.hash);
    }
    if (message.prefix.length !== 0) {
      writer.uint32(18).bytes(message.prefix);
    }
    if (message.suffix.length !== 0) {
      writer.uint32(26).bytes(message.suffix);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseInnerOp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.hash = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.prefix = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.suffix = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      hash: isSet9(object.hash) ? hashOpFromJSON(object.hash) : 0,
      prefix: isSet9(object.prefix) ? bytesFromBase648(object.prefix) : new Uint8Array(0),
      suffix: isSet9(object.suffix) ? bytesFromBase648(object.suffix) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.hash !== 0) {
      obj.hash = hashOpToJSON(message.hash);
    }
    if (message.prefix.length !== 0) {
      obj.prefix = base64FromBytes8(message.prefix);
    }
    if (message.suffix.length !== 0) {
      obj.suffix = base64FromBytes8(message.suffix);
    }
    return obj;
  },
  create(base) {
    return InnerOp.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseInnerOp();
    message.hash = object.hash ?? 0;
    message.prefix = object.prefix ?? new Uint8Array(0);
    message.suffix = object.suffix ?? new Uint8Array(0);
    return message;
  }
};
var ProofSpec = {
  $type: "ics23.ProofSpec",
  encode(message, writer = new BinaryWriter()) {
    if (message.leaf_spec !== void 0) {
      LeafOp.encode(message.leaf_spec, writer.uint32(10).fork()).join();
    }
    if (message.inner_spec !== void 0) {
      InnerSpec.encode(message.inner_spec, writer.uint32(18).fork()).join();
    }
    if (message.max_depth !== 0) {
      writer.uint32(24).int32(message.max_depth);
    }
    if (message.min_depth !== 0) {
      writer.uint32(32).int32(message.min_depth);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseProofSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.leaf_spec = LeafOp.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.inner_spec = InnerSpec.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.max_depth = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.min_depth = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      leaf_spec: isSet9(object.leaf_spec) ? LeafOp.fromJSON(object.leaf_spec) : void 0,
      inner_spec: isSet9(object.inner_spec) ? InnerSpec.fromJSON(object.inner_spec) : void 0,
      max_depth: isSet9(object.max_depth) ? globalThis.Number(object.max_depth) : 0,
      min_depth: isSet9(object.min_depth) ? globalThis.Number(object.min_depth) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.leaf_spec !== void 0) {
      obj.leaf_spec = LeafOp.toJSON(message.leaf_spec);
    }
    if (message.inner_spec !== void 0) {
      obj.inner_spec = InnerSpec.toJSON(message.inner_spec);
    }
    if (message.max_depth !== 0) {
      obj.max_depth = Math.round(message.max_depth);
    }
    if (message.min_depth !== 0) {
      obj.min_depth = Math.round(message.min_depth);
    }
    return obj;
  },
  create(base) {
    return ProofSpec.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseProofSpec();
    message.leaf_spec = object.leaf_spec !== void 0 && object.leaf_spec !== null ? LeafOp.fromPartial(object.leaf_spec) : void 0;
    message.inner_spec = object.inner_spec !== void 0 && object.inner_spec !== null ? InnerSpec.fromPartial(object.inner_spec) : void 0;
    message.max_depth = object.max_depth ?? 0;
    message.min_depth = object.min_depth ?? 0;
    return message;
  }
};
var InnerSpec = {
  $type: "ics23.InnerSpec",
  encode(message, writer = new BinaryWriter()) {
    writer.uint32(10).fork();
    for (const v of message.child_order) {
      writer.int32(v);
    }
    writer.join();
    if (message.child_size !== 0) {
      writer.uint32(16).int32(message.child_size);
    }
    if (message.min_prefix_length !== 0) {
      writer.uint32(24).int32(message.min_prefix_length);
    }
    if (message.max_prefix_length !== 0) {
      writer.uint32(32).int32(message.max_prefix_length);
    }
    if (message.empty_child.length !== 0) {
      writer.uint32(42).bytes(message.empty_child);
    }
    if (message.hash !== 0) {
      writer.uint32(48).int32(message.hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseInnerSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.child_order.push(reader.int32());
            continue;
          }
          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.child_order.push(reader.int32());
            }
            continue;
          }
          break;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.child_size = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.min_prefix_length = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.max_prefix_length = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.empty_child = reader.bytes();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.hash = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      child_order: globalThis.Array.isArray(object == null ? void 0 : object.child_order) ? object.child_order.map((e) => globalThis.Number(e)) : [],
      child_size: isSet9(object.child_size) ? globalThis.Number(object.child_size) : 0,
      min_prefix_length: isSet9(object.min_prefix_length) ? globalThis.Number(object.min_prefix_length) : 0,
      max_prefix_length: isSet9(object.max_prefix_length) ? globalThis.Number(object.max_prefix_length) : 0,
      empty_child: isSet9(object.empty_child) ? bytesFromBase648(object.empty_child) : new Uint8Array(0),
      hash: isSet9(object.hash) ? hashOpFromJSON(object.hash) : 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.child_order) == null ? void 0 : _a.length) {
      obj.child_order = message.child_order.map((e) => Math.round(e));
    }
    if (message.child_size !== 0) {
      obj.child_size = Math.round(message.child_size);
    }
    if (message.min_prefix_length !== 0) {
      obj.min_prefix_length = Math.round(message.min_prefix_length);
    }
    if (message.max_prefix_length !== 0) {
      obj.max_prefix_length = Math.round(message.max_prefix_length);
    }
    if (message.empty_child.length !== 0) {
      obj.empty_child = base64FromBytes8(message.empty_child);
    }
    if (message.hash !== 0) {
      obj.hash = hashOpToJSON(message.hash);
    }
    return obj;
  },
  create(base) {
    return InnerSpec.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseInnerSpec();
    message.child_order = ((_a = object.child_order) == null ? void 0 : _a.map((e) => e)) || [];
    message.child_size = object.child_size ?? 0;
    message.min_prefix_length = object.min_prefix_length ?? 0;
    message.max_prefix_length = object.max_prefix_length ?? 0;
    message.empty_child = object.empty_child ?? new Uint8Array(0);
    message.hash = object.hash ?? 0;
    return message;
  }
};
var BatchProof = {
  $type: "ics23.BatchProof",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.entries) {
      BatchEntry.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBatchProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.entries.push(BatchEntry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      entries: globalThis.Array.isArray(object == null ? void 0 : object.entries) ? object.entries.map((e) => BatchEntry.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.entries) == null ? void 0 : _a.length) {
      obj.entries = message.entries.map((e) => BatchEntry.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return BatchProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseBatchProof();
    message.entries = ((_a = object.entries) == null ? void 0 : _a.map((e) => BatchEntry.fromPartial(e))) || [];
    return message;
  }
};
var BatchEntry = {
  $type: "ics23.BatchEntry",
  encode(message, writer = new BinaryWriter()) {
    if (message.exist !== void 0) {
      ExistenceProof.encode(message.exist, writer.uint32(10).fork()).join();
    }
    if (message.nonexist !== void 0) {
      NonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBatchEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.exist = ExistenceProof.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.nonexist = NonExistenceProof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      exist: isSet9(object.exist) ? ExistenceProof.fromJSON(object.exist) : void 0,
      nonexist: isSet9(object.nonexist) ? NonExistenceProof.fromJSON(object.nonexist) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.exist !== void 0) {
      obj.exist = ExistenceProof.toJSON(message.exist);
    }
    if (message.nonexist !== void 0) {
      obj.nonexist = NonExistenceProof.toJSON(message.nonexist);
    }
    return obj;
  },
  create(base) {
    return BatchEntry.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBatchEntry();
    message.exist = object.exist !== void 0 && object.exist !== null ? ExistenceProof.fromPartial(object.exist) : void 0;
    message.nonexist = object.nonexist !== void 0 && object.nonexist !== null ? NonExistenceProof.fromPartial(object.nonexist) : void 0;
    return message;
  }
};
var CompressedBatchProof = {
  $type: "ics23.CompressedBatchProof",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.entries) {
      CompressedBatchEntry.encode(v, writer.uint32(10).fork()).join();
    }
    for (const v of message.lookup_inners) {
      InnerOp.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCompressedBatchProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.entries.push(CompressedBatchEntry.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.lookup_inners.push(InnerOp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      entries: globalThis.Array.isArray(object == null ? void 0 : object.entries) ? object.entries.map((e) => CompressedBatchEntry.fromJSON(e)) : [],
      lookup_inners: globalThis.Array.isArray(object == null ? void 0 : object.lookup_inners) ? object.lookup_inners.map((e) => InnerOp.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if ((_a = message.entries) == null ? void 0 : _a.length) {
      obj.entries = message.entries.map((e) => CompressedBatchEntry.toJSON(e));
    }
    if ((_b = message.lookup_inners) == null ? void 0 : _b.length) {
      obj.lookup_inners = message.lookup_inners.map((e) => InnerOp.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return CompressedBatchProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseCompressedBatchProof();
    message.entries = ((_a = object.entries) == null ? void 0 : _a.map((e) => CompressedBatchEntry.fromPartial(e))) || [];
    message.lookup_inners = ((_b = object.lookup_inners) == null ? void 0 : _b.map((e) => InnerOp.fromPartial(e))) || [];
    return message;
  }
};
var CompressedBatchEntry = {
  $type: "ics23.CompressedBatchEntry",
  encode(message, writer = new BinaryWriter()) {
    if (message.exist !== void 0) {
      CompressedExistenceProof.encode(message.exist, writer.uint32(10).fork()).join();
    }
    if (message.nonexist !== void 0) {
      CompressedNonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCompressedBatchEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.exist = CompressedExistenceProof.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.nonexist = CompressedNonExistenceProof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      exist: isSet9(object.exist) ? CompressedExistenceProof.fromJSON(object.exist) : void 0,
      nonexist: isSet9(object.nonexist) ? CompressedNonExistenceProof.fromJSON(object.nonexist) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.exist !== void 0) {
      obj.exist = CompressedExistenceProof.toJSON(message.exist);
    }
    if (message.nonexist !== void 0) {
      obj.nonexist = CompressedNonExistenceProof.toJSON(message.nonexist);
    }
    return obj;
  },
  create(base) {
    return CompressedBatchEntry.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCompressedBatchEntry();
    message.exist = object.exist !== void 0 && object.exist !== null ? CompressedExistenceProof.fromPartial(object.exist) : void 0;
    message.nonexist = object.nonexist !== void 0 && object.nonexist !== null ? CompressedNonExistenceProof.fromPartial(object.nonexist) : void 0;
    return message;
  }
};
var CompressedExistenceProof = {
  $type: "ics23.CompressedExistenceProof",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    if (message.leaf !== void 0) {
      LeafOp.encode(message.leaf, writer.uint32(26).fork()).join();
    }
    writer.uint32(34).fork();
    for (const v of message.path) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCompressedExistenceProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.leaf = LeafOp.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag === 32) {
            message.path.push(reader.int32());
            continue;
          }
          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.path.push(reader.int32());
            }
            continue;
          }
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet9(object.key) ? bytesFromBase648(object.key) : new Uint8Array(0),
      value: isSet9(object.value) ? bytesFromBase648(object.value) : new Uint8Array(0),
      leaf: isSet9(object.leaf) ? LeafOp.fromJSON(object.leaf) : void 0,
      path: globalThis.Array.isArray(object == null ? void 0 : object.path) ? object.path.map((e) => globalThis.Number(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes8(message.key);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes8(message.value);
    }
    if (message.leaf !== void 0) {
      obj.leaf = LeafOp.toJSON(message.leaf);
    }
    if ((_a = message.path) == null ? void 0 : _a.length) {
      obj.path = message.path.map((e) => Math.round(e));
    }
    return obj;
  },
  create(base) {
    return CompressedExistenceProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseCompressedExistenceProof();
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    message.leaf = object.leaf !== void 0 && object.leaf !== null ? LeafOp.fromPartial(object.leaf) : void 0;
    message.path = ((_a = object.path) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var CompressedNonExistenceProof = {
  $type: "ics23.CompressedNonExistenceProof",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.left !== void 0) {
      CompressedExistenceProof.encode(message.left, writer.uint32(18).fork()).join();
    }
    if (message.right !== void 0) {
      CompressedExistenceProof.encode(message.right, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCompressedNonExistenceProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.left = CompressedExistenceProof.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.right = CompressedExistenceProof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet9(object.key) ? bytesFromBase648(object.key) : new Uint8Array(0),
      left: isSet9(object.left) ? CompressedExistenceProof.fromJSON(object.left) : void 0,
      right: isSet9(object.right) ? CompressedExistenceProof.fromJSON(object.right) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes8(message.key);
    }
    if (message.left !== void 0) {
      obj.left = CompressedExistenceProof.toJSON(message.left);
    }
    if (message.right !== void 0) {
      obj.right = CompressedExistenceProof.toJSON(message.right);
    }
    return obj;
  },
  create(base) {
    return CompressedNonExistenceProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCompressedNonExistenceProof();
    message.key = object.key ?? new Uint8Array(0);
    message.left = object.left !== void 0 && object.left !== null ? CompressedExistenceProof.fromPartial(object.left) : void 0;
    message.right = object.right !== void 0 && object.right !== null ? CompressedExistenceProof.fromPartial(object.right) : void 0;
    return message;
  }
};
function hashOpFromJSON(object) {
  switch (object) {
    case 0:
    case "NO_HASH":
      return HashOp.NO_HASH;
    case 1:
    case "SHA256":
      return HashOp.SHA256;
    case 2:
    case "SHA512":
      return HashOp.SHA512;
    case 3:
    case "KECCAK":
      return HashOp.KECCAK;
    case 4:
    case "RIPEMD160":
      return HashOp.RIPEMD160;
    case 5:
    case "BITCOIN":
      return HashOp.BITCOIN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HashOp.UNRECOGNIZED;
  }
}
function hashOpToJSON(object) {
  switch (object) {
    case HashOp.NO_HASH:
      return "NO_HASH";
    case HashOp.SHA256:
      return "SHA256";
    case HashOp.SHA512:
      return "SHA512";
    case HashOp.KECCAK:
      return "KECCAK";
    case HashOp.RIPEMD160:
      return "RIPEMD160";
    case HashOp.BITCOIN:
      return "BITCOIN";
    case HashOp.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function lengthOpFromJSON(object) {
  switch (object) {
    case 0:
    case "NO_PREFIX":
      return LengthOp.NO_PREFIX;
    case 1:
    case "VAR_PROTO":
      return LengthOp.VAR_PROTO;
    case 2:
    case "VAR_RLP":
      return LengthOp.VAR_RLP;
    case 3:
    case "FIXED32_BIG":
      return LengthOp.FIXED32_BIG;
    case 4:
    case "FIXED32_LITTLE":
      return LengthOp.FIXED32_LITTLE;
    case 5:
    case "FIXED64_BIG":
      return LengthOp.FIXED64_BIG;
    case 6:
    case "FIXED64_LITTLE":
      return LengthOp.FIXED64_LITTLE;
    case 7:
    case "REQUIRE_32_BYTES":
      return LengthOp.REQUIRE_32_BYTES;
    case 8:
    case "REQUIRE_64_BYTES":
      return LengthOp.REQUIRE_64_BYTES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LengthOp.UNRECOGNIZED;
  }
}
function lengthOpToJSON(object) {
  switch (object) {
    case LengthOp.NO_PREFIX:
      return "NO_PREFIX";
    case LengthOp.VAR_PROTO:
      return "VAR_PROTO";
    case LengthOp.VAR_RLP:
      return "VAR_RLP";
    case LengthOp.FIXED32_BIG:
      return "FIXED32_BIG";
    case LengthOp.FIXED32_LITTLE:
      return "FIXED32_LITTLE";
    case LengthOp.FIXED64_BIG:
      return "FIXED64_BIG";
    case LengthOp.FIXED64_LITTLE:
      return "FIXED64_LITTLE";
    case LengthOp.REQUIRE_32_BYTES:
      return "REQUIRE_32_BYTES";
    case LengthOp.REQUIRE_64_BYTES:
      return "REQUIRE_64_BYTES";
    case LengthOp.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function createBaseExistenceProof() {
  return { key: new Uint8Array(0), value: new Uint8Array(0), leaf: void 0, path: [] };
}
function createBaseNonExistenceProof() {
  return { key: new Uint8Array(0), left: void 0, right: void 0 };
}
function createBaseCommitmentProof() {
  return { exist: void 0, nonexist: void 0, batch: void 0, compressed: void 0 };
}
function createBaseLeafOp() {
  return { hash: 0, prehash_key: 0, prehash_value: 0, length: 0, prefix: new Uint8Array(0) };
}
function createBaseInnerOp() {
  return { hash: 0, prefix: new Uint8Array(0), suffix: new Uint8Array(0) };
}
function createBaseProofSpec() {
  return { leaf_spec: void 0, inner_spec: void 0, max_depth: 0, min_depth: 0 };
}
function createBaseInnerSpec() {
  return {
    child_order: [],
    child_size: 0,
    min_prefix_length: 0,
    max_prefix_length: 0,
    empty_child: new Uint8Array(0),
    hash: 0
  };
}
function createBaseBatchProof() {
  return { entries: [] };
}
function createBaseBatchEntry() {
  return { exist: void 0, nonexist: void 0 };
}
function createBaseCompressedBatchProof() {
  return { entries: [], lookup_inners: [] };
}
function createBaseCompressedBatchEntry() {
  return { exist: void 0, nonexist: void 0 };
}
function createBaseCompressedExistenceProof() {
  return { key: new Uint8Array(0), value: new Uint8Array(0), leaf: void 0, path: [] };
}
function createBaseCompressedNonExistenceProof() {
  return { key: new Uint8Array(0), left: void 0, right: void 0 };
}
function bytesFromBase648(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes8(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet9(value) {
  return value !== null && value !== void 0;
}
var registry9 = [
  ["/ics23.ExistenceProof", ExistenceProof],
  ["/ics23.NonExistenceProof", NonExistenceProof],
  ["/ics23.CommitmentProof", CommitmentProof],
  ["/ics23.LeafOp", LeafOp],
  ["/ics23.InnerOp", InnerOp],
  ["/ics23.ProofSpec", ProofSpec],
  ["/ics23.InnerSpec", InnerSpec],
  ["/ics23.BatchProof", BatchProof],
  ["/ics23.BatchEntry", BatchEntry],
  ["/ics23.CompressedBatchProof", CompressedBatchProof],
  ["/ics23.CompressedBatchEntry", CompressedBatchEntry],
  ["/ics23.CompressedExistenceProof", CompressedExistenceProof],
  ["/ics23.CompressedNonExistenceProof", CompressedNonExistenceProof]
];
var aminoConverters9 = {
  "/ics23.ExistenceProof": {
    aminoType: "ics23.ExistenceProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/ics23.NonExistenceProof": {
    aminoType: "ics23.NonExistenceProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/ics23.CommitmentProof": {
    aminoType: "ics23.CommitmentProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/ics23.LeafOp": {
    aminoType: "ics23.LeafOp",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/ics23.InnerOp": {
    aminoType: "ics23.InnerOp",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/ics23.ProofSpec": {
    aminoType: "ics23.ProofSpec",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/ics23.InnerSpec": {
    aminoType: "ics23.InnerSpec",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/ics23.BatchProof": {
    aminoType: "ics23.BatchProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/ics23.BatchEntry": {
    aminoType: "ics23.BatchEntry",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/ics23.CompressedBatchProof": {
    aminoType: "ics23.CompressedBatchProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/ics23.CompressedBatchEntry": {
    aminoType: "ics23.CompressedBatchEntry",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/ics23.CompressedExistenceProof": {
    aminoType: "ics23.CompressedExistenceProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/ics23.CompressedNonExistenceProof": {
    aminoType: "ics23.CompressedNonExistenceProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/accesscontrol/index.js
var accesscontrol_exports = {};
__export(accesscontrol_exports, {
  AccessOperation: () => AccessOperation,
  LegacyAccessOperationWithSelector: () => LegacyAccessOperationWithSelector,
  LegacyWasmDependencyMapping: () => LegacyWasmDependencyMapping,
  MessageDependencyMapping: () => MessageDependencyMapping,
  WasmAccessOperation: () => WasmAccessOperation,
  WasmAccessOperations: () => WasmAccessOperations,
  WasmContractReference: () => WasmContractReference,
  WasmContractReferences: () => WasmContractReferences,
  WasmDependencyMapping: () => WasmDependencyMapping,
  accessOperationSelectorTypeFromJSON: () => accessOperationSelectorTypeFromJSON,
  accessOperationSelectorTypeToJSON: () => accessOperationSelectorTypeToJSON,
  accessTypeFromJSON: () => accessTypeFromJSON,
  accessTypeToJSON: () => accessTypeToJSON,
  resourceTypeFromJSON: () => resourceTypeFromJSON,
  resourceTypeToJSON: () => resourceTypeToJSON,
  wasmMessageSubtypeFromJSON: () => wasmMessageSubtypeFromJSON,
  wasmMessageSubtypeToJSON: () => wasmMessageSubtypeToJSON
});

// node_modules/@sei-js/cosmos/dist/esm/types/cosmos/accesscontrol/constants.js
var AccessType;
(function(AccessType2) {
  AccessType2[AccessType2["UNKNOWN"] = 0] = "UNKNOWN";
  AccessType2[AccessType2["READ"] = 1] = "READ";
  AccessType2[AccessType2["WRITE"] = 2] = "WRITE";
  AccessType2[AccessType2["COMMIT"] = 3] = "COMMIT";
  AccessType2[AccessType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AccessType || (AccessType = {}));
var AccessOperationSelectorType;
(function(AccessOperationSelectorType2) {
  AccessOperationSelectorType2[AccessOperationSelectorType2["NONE"] = 0] = "NONE";
  AccessOperationSelectorType2[AccessOperationSelectorType2["JQ"] = 1] = "JQ";
  AccessOperationSelectorType2[AccessOperationSelectorType2["JQ_BECH32_ADDRESS"] = 2] = "JQ_BECH32_ADDRESS";
  AccessOperationSelectorType2[AccessOperationSelectorType2["JQ_LENGTH_PREFIXED_ADDRESS"] = 3] = "JQ_LENGTH_PREFIXED_ADDRESS";
  AccessOperationSelectorType2[AccessOperationSelectorType2["SENDER_BECH32_ADDRESS"] = 4] = "SENDER_BECH32_ADDRESS";
  AccessOperationSelectorType2[AccessOperationSelectorType2["SENDER_LENGTH_PREFIXED_ADDRESS"] = 5] = "SENDER_LENGTH_PREFIXED_ADDRESS";
  AccessOperationSelectorType2[AccessOperationSelectorType2["CONTRACT_ADDRESS"] = 6] = "CONTRACT_ADDRESS";
  AccessOperationSelectorType2[AccessOperationSelectorType2["JQ_MESSAGE_CONDITIONAL"] = 7] = "JQ_MESSAGE_CONDITIONAL";
  AccessOperationSelectorType2[AccessOperationSelectorType2["CONSTANT_STRING_TO_HEX"] = 8] = "CONSTANT_STRING_TO_HEX";
  AccessOperationSelectorType2[AccessOperationSelectorType2["CONTRACT_REFERENCE"] = 9] = "CONTRACT_REFERENCE";
  AccessOperationSelectorType2[AccessOperationSelectorType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AccessOperationSelectorType || (AccessOperationSelectorType = {}));
var ResourceType;
(function(ResourceType2) {
  ResourceType2[ResourceType2["ANY"] = 0] = "ANY";
  ResourceType2[ResourceType2["KV"] = 1] = "KV";
  ResourceType2[ResourceType2["Mem"] = 2] = "Mem";
  ResourceType2[ResourceType2["KV_BANK"] = 4] = "KV_BANK";
  ResourceType2[ResourceType2["KV_STAKING"] = 5] = "KV_STAKING";
  ResourceType2[ResourceType2["KV_WASM"] = 6] = "KV_WASM";
  ResourceType2[ResourceType2["KV_ORACLE"] = 7] = "KV_ORACLE";
  ResourceType2[ResourceType2["KV_EPOCH"] = 9] = "KV_EPOCH";
  ResourceType2[ResourceType2["KV_TOKENFACTORY"] = 10] = "KV_TOKENFACTORY";
  ResourceType2[ResourceType2["KV_ORACLE_VOTE_TARGETS"] = 11] = "KV_ORACLE_VOTE_TARGETS";
  ResourceType2[ResourceType2["KV_ORACLE_AGGREGATE_VOTES"] = 12] = "KV_ORACLE_AGGREGATE_VOTES";
  ResourceType2[ResourceType2["KV_ORACLE_FEEDERS"] = 13] = "KV_ORACLE_FEEDERS";
  ResourceType2[ResourceType2["KV_STAKING_DELEGATION"] = 14] = "KV_STAKING_DELEGATION";
  ResourceType2[ResourceType2["KV_STAKING_VALIDATOR"] = 15] = "KV_STAKING_VALIDATOR";
  ResourceType2[ResourceType2["KV_AUTH"] = 16] = "KV_AUTH";
  ResourceType2[ResourceType2["KV_AUTH_ADDRESS_STORE"] = 17] = "KV_AUTH_ADDRESS_STORE";
  ResourceType2[ResourceType2["KV_BANK_SUPPLY"] = 18] = "KV_BANK_SUPPLY";
  ResourceType2[ResourceType2["KV_BANK_DENOM"] = 19] = "KV_BANK_DENOM";
  ResourceType2[ResourceType2["KV_BANK_BALANCES"] = 20] = "KV_BANK_BALANCES";
  ResourceType2[ResourceType2["KV_TOKENFACTORY_DENOM"] = 21] = "KV_TOKENFACTORY_DENOM";
  ResourceType2[ResourceType2["KV_TOKENFACTORY_METADATA"] = 22] = "KV_TOKENFACTORY_METADATA";
  ResourceType2[ResourceType2["KV_TOKENFACTORY_ADMIN"] = 23] = "KV_TOKENFACTORY_ADMIN";
  ResourceType2[ResourceType2["KV_TOKENFACTORY_CREATOR"] = 24] = "KV_TOKENFACTORY_CREATOR";
  ResourceType2[ResourceType2["KV_ORACLE_EXCHANGE_RATE"] = 25] = "KV_ORACLE_EXCHANGE_RATE";
  ResourceType2[ResourceType2["KV_ORACLE_VOTE_PENALTY_COUNTER"] = 26] = "KV_ORACLE_VOTE_PENALTY_COUNTER";
  ResourceType2[ResourceType2["KV_ORACLE_PRICE_SNAPSHOT"] = 27] = "KV_ORACLE_PRICE_SNAPSHOT";
  ResourceType2[ResourceType2["KV_STAKING_VALIDATION_POWER"] = 28] = "KV_STAKING_VALIDATION_POWER";
  ResourceType2[ResourceType2["KV_STAKING_TOTAL_POWER"] = 29] = "KV_STAKING_TOTAL_POWER";
  ResourceType2[ResourceType2["KV_STAKING_VALIDATORS_CON_ADDR"] = 30] = "KV_STAKING_VALIDATORS_CON_ADDR";
  ResourceType2[ResourceType2["KV_STAKING_UNBONDING_DELEGATION"] = 31] = "KV_STAKING_UNBONDING_DELEGATION";
  ResourceType2[ResourceType2["KV_STAKING_UNBONDING_DELEGATION_VAL"] = 32] = "KV_STAKING_UNBONDING_DELEGATION_VAL";
  ResourceType2[ResourceType2["KV_STAKING_REDELEGATION"] = 33] = "KV_STAKING_REDELEGATION";
  ResourceType2[ResourceType2["KV_STAKING_REDELEGATION_VAL_SRC"] = 34] = "KV_STAKING_REDELEGATION_VAL_SRC";
  ResourceType2[ResourceType2["KV_STAKING_REDELEGATION_VAL_DST"] = 35] = "KV_STAKING_REDELEGATION_VAL_DST";
  ResourceType2[ResourceType2["KV_STAKING_REDELEGATION_QUEUE"] = 36] = "KV_STAKING_REDELEGATION_QUEUE";
  ResourceType2[ResourceType2["KV_STAKING_VALIDATOR_QUEUE"] = 37] = "KV_STAKING_VALIDATOR_QUEUE";
  ResourceType2[ResourceType2["KV_STAKING_HISTORICAL_INFO"] = 38] = "KV_STAKING_HISTORICAL_INFO";
  ResourceType2[ResourceType2["KV_STAKING_UNBONDING"] = 39] = "KV_STAKING_UNBONDING";
  ResourceType2[ResourceType2["KV_STAKING_VALIDATORS_BY_POWER"] = 41] = "KV_STAKING_VALIDATORS_BY_POWER";
  ResourceType2[ResourceType2["KV_DISTRIBUTION"] = 40] = "KV_DISTRIBUTION";
  ResourceType2[ResourceType2["KV_DISTRIBUTION_FEE_POOL"] = 42] = "KV_DISTRIBUTION_FEE_POOL";
  ResourceType2[ResourceType2["KV_DISTRIBUTION_PROPOSER_KEY"] = 43] = "KV_DISTRIBUTION_PROPOSER_KEY";
  ResourceType2[ResourceType2["KV_DISTRIBUTION_OUTSTANDING_REWARDS"] = 44] = "KV_DISTRIBUTION_OUTSTANDING_REWARDS";
  ResourceType2[ResourceType2["KV_DISTRIBUTION_DELEGATOR_WITHDRAW_ADDR"] = 45] = "KV_DISTRIBUTION_DELEGATOR_WITHDRAW_ADDR";
  ResourceType2[ResourceType2["KV_DISTRIBUTION_DELEGATOR_STARTING_INFO"] = 46] = "KV_DISTRIBUTION_DELEGATOR_STARTING_INFO";
  ResourceType2[ResourceType2["KV_DISTRIBUTION_VAL_HISTORICAL_REWARDS"] = 47] = "KV_DISTRIBUTION_VAL_HISTORICAL_REWARDS";
  ResourceType2[ResourceType2["KV_DISTRIBUTION_VAL_CURRENT_REWARDS"] = 48] = "KV_DISTRIBUTION_VAL_CURRENT_REWARDS";
  ResourceType2[ResourceType2["KV_DISTRIBUTION_VAL_ACCUM_COMMISSION"] = 49] = "KV_DISTRIBUTION_VAL_ACCUM_COMMISSION";
  ResourceType2[ResourceType2["KV_DISTRIBUTION_SLASH_EVENT"] = 50] = "KV_DISTRIBUTION_SLASH_EVENT";
  ResourceType2[ResourceType2["KV_ACCESSCONTROL"] = 71] = "KV_ACCESSCONTROL";
  ResourceType2[ResourceType2["KV_ACCESSCONTROL_WASM_DEPENDENCY_MAPPING"] = 72] = "KV_ACCESSCONTROL_WASM_DEPENDENCY_MAPPING";
  ResourceType2[ResourceType2["KV_WASM_CODE"] = 73] = "KV_WASM_CODE";
  ResourceType2[ResourceType2["KV_WASM_CONTRACT_ADDRESS"] = 74] = "KV_WASM_CONTRACT_ADDRESS";
  ResourceType2[ResourceType2["KV_WASM_CONTRACT_STORE"] = 75] = "KV_WASM_CONTRACT_STORE";
  ResourceType2[ResourceType2["KV_WASM_SEQUENCE_KEY"] = 76] = "KV_WASM_SEQUENCE_KEY";
  ResourceType2[ResourceType2["KV_WASM_CONTRACT_CODE_HISTORY"] = 77] = "KV_WASM_CONTRACT_CODE_HISTORY";
  ResourceType2[ResourceType2["KV_WASM_CONTRACT_BY_CODE_ID"] = 78] = "KV_WASM_CONTRACT_BY_CODE_ID";
  ResourceType2[ResourceType2["KV_WASM_PINNED_CODE_INDEX"] = 79] = "KV_WASM_PINNED_CODE_INDEX";
  ResourceType2[ResourceType2["KV_AUTH_GLOBAL_ACCOUNT_NUMBER"] = 80] = "KV_AUTH_GLOBAL_ACCOUNT_NUMBER";
  ResourceType2[ResourceType2["KV_AUTHZ"] = 81] = "KV_AUTHZ";
  ResourceType2[ResourceType2["KV_FEEGRANT"] = 82] = "KV_FEEGRANT";
  ResourceType2[ResourceType2["KV_FEEGRANT_ALLOWANCE"] = 83] = "KV_FEEGRANT_ALLOWANCE";
  ResourceType2[ResourceType2["KV_SLASHING"] = 84] = "KV_SLASHING";
  ResourceType2[ResourceType2["KV_SLASHING_VAL_SIGNING_INFO"] = 85] = "KV_SLASHING_VAL_SIGNING_INFO";
  ResourceType2[ResourceType2["KV_SLASHING_ADDR_PUBKEY_RELATION_KEY"] = 86] = "KV_SLASHING_ADDR_PUBKEY_RELATION_KEY";
  ResourceType2[ResourceType2["KV_BANK_DEFERRED"] = 93] = "KV_BANK_DEFERRED";
  ResourceType2[ResourceType2["KV_BANK_DEFERRED_MODULE_TX_INDEX"] = 95] = "KV_BANK_DEFERRED_MODULE_TX_INDEX";
  ResourceType2[ResourceType2["KV_EVM"] = 96] = "KV_EVM";
  ResourceType2[ResourceType2["KV_EVM_BALANCE"] = 97] = "KV_EVM_BALANCE";
  ResourceType2[ResourceType2["KV_EVM_TRANSIENT"] = 98] = "KV_EVM_TRANSIENT";
  ResourceType2[ResourceType2["KV_EVM_ACCOUNT_TRANSIENT"] = 99] = "KV_EVM_ACCOUNT_TRANSIENT";
  ResourceType2[ResourceType2["KV_EVM_MODULE_TRANSIENT"] = 100] = "KV_EVM_MODULE_TRANSIENT";
  ResourceType2[ResourceType2["KV_EVM_NONCE"] = 101] = "KV_EVM_NONCE";
  ResourceType2[ResourceType2["KV_EVM_RECEIPT"] = 102] = "KV_EVM_RECEIPT";
  ResourceType2[ResourceType2["KV_EVM_S2E"] = 103] = "KV_EVM_S2E";
  ResourceType2[ResourceType2["KV_EVM_E2S"] = 104] = "KV_EVM_E2S";
  ResourceType2[ResourceType2["KV_EVM_CODE_HASH"] = 105] = "KV_EVM_CODE_HASH";
  ResourceType2[ResourceType2["KV_EVM_CODE"] = 106] = "KV_EVM_CODE";
  ResourceType2[ResourceType2["KV_EVM_CODE_SIZE"] = 107] = "KV_EVM_CODE_SIZE";
  ResourceType2[ResourceType2["KV_BANK_WEI_BALANCE"] = 108] = "KV_BANK_WEI_BALANCE";
  ResourceType2[ResourceType2["KV_CT"] = 111] = "KV_CT";
  ResourceType2[ResourceType2["KV_CT_ACCOUNT"] = 112] = "KV_CT_ACCOUNT";
  ResourceType2[ResourceType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ResourceType || (ResourceType = {}));
var WasmMessageSubtype;
(function(WasmMessageSubtype2) {
  WasmMessageSubtype2[WasmMessageSubtype2["QUERY"] = 0] = "QUERY";
  WasmMessageSubtype2[WasmMessageSubtype2["EXECUTE"] = 1] = "EXECUTE";
  WasmMessageSubtype2[WasmMessageSubtype2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WasmMessageSubtype || (WasmMessageSubtype = {}));

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/accesscontrol/constants.js
function accessTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return AccessType.UNKNOWN;
    case 1:
    case "READ":
      return AccessType.READ;
    case 2:
    case "WRITE":
      return AccessType.WRITE;
    case 3:
    case "COMMIT":
      return AccessType.COMMIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AccessType.UNRECOGNIZED;
  }
}
function accessTypeToJSON(object) {
  switch (object) {
    case AccessType.UNKNOWN:
      return "UNKNOWN";
    case AccessType.READ:
      return "READ";
    case AccessType.WRITE:
      return "WRITE";
    case AccessType.COMMIT:
      return "COMMIT";
    case AccessType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function accessOperationSelectorTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "NONE":
      return AccessOperationSelectorType.NONE;
    case 1:
    case "JQ":
      return AccessOperationSelectorType.JQ;
    case 2:
    case "JQ_BECH32_ADDRESS":
      return AccessOperationSelectorType.JQ_BECH32_ADDRESS;
    case 3:
    case "JQ_LENGTH_PREFIXED_ADDRESS":
      return AccessOperationSelectorType.JQ_LENGTH_PREFIXED_ADDRESS;
    case 4:
    case "SENDER_BECH32_ADDRESS":
      return AccessOperationSelectorType.SENDER_BECH32_ADDRESS;
    case 5:
    case "SENDER_LENGTH_PREFIXED_ADDRESS":
      return AccessOperationSelectorType.SENDER_LENGTH_PREFIXED_ADDRESS;
    case 6:
    case "CONTRACT_ADDRESS":
      return AccessOperationSelectorType.CONTRACT_ADDRESS;
    case 7:
    case "JQ_MESSAGE_CONDITIONAL":
      return AccessOperationSelectorType.JQ_MESSAGE_CONDITIONAL;
    case 8:
    case "CONSTANT_STRING_TO_HEX":
      return AccessOperationSelectorType.CONSTANT_STRING_TO_HEX;
    case 9:
    case "CONTRACT_REFERENCE":
      return AccessOperationSelectorType.CONTRACT_REFERENCE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AccessOperationSelectorType.UNRECOGNIZED;
  }
}
function accessOperationSelectorTypeToJSON(object) {
  switch (object) {
    case AccessOperationSelectorType.NONE:
      return "NONE";
    case AccessOperationSelectorType.JQ:
      return "JQ";
    case AccessOperationSelectorType.JQ_BECH32_ADDRESS:
      return "JQ_BECH32_ADDRESS";
    case AccessOperationSelectorType.JQ_LENGTH_PREFIXED_ADDRESS:
      return "JQ_LENGTH_PREFIXED_ADDRESS";
    case AccessOperationSelectorType.SENDER_BECH32_ADDRESS:
      return "SENDER_BECH32_ADDRESS";
    case AccessOperationSelectorType.SENDER_LENGTH_PREFIXED_ADDRESS:
      return "SENDER_LENGTH_PREFIXED_ADDRESS";
    case AccessOperationSelectorType.CONTRACT_ADDRESS:
      return "CONTRACT_ADDRESS";
    case AccessOperationSelectorType.JQ_MESSAGE_CONDITIONAL:
      return "JQ_MESSAGE_CONDITIONAL";
    case AccessOperationSelectorType.CONSTANT_STRING_TO_HEX:
      return "CONSTANT_STRING_TO_HEX";
    case AccessOperationSelectorType.CONTRACT_REFERENCE:
      return "CONTRACT_REFERENCE";
    case AccessOperationSelectorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function resourceTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "ANY":
      return ResourceType.ANY;
    case 1:
    case "KV":
      return ResourceType.KV;
    case 2:
    case "Mem":
      return ResourceType.Mem;
    case 4:
    case "KV_BANK":
      return ResourceType.KV_BANK;
    case 5:
    case "KV_STAKING":
      return ResourceType.KV_STAKING;
    case 6:
    case "KV_WASM":
      return ResourceType.KV_WASM;
    case 7:
    case "KV_ORACLE":
      return ResourceType.KV_ORACLE;
    case 9:
    case "KV_EPOCH":
      return ResourceType.KV_EPOCH;
    case 10:
    case "KV_TOKENFACTORY":
      return ResourceType.KV_TOKENFACTORY;
    case 11:
    case "KV_ORACLE_VOTE_TARGETS":
      return ResourceType.KV_ORACLE_VOTE_TARGETS;
    case 12:
    case "KV_ORACLE_AGGREGATE_VOTES":
      return ResourceType.KV_ORACLE_AGGREGATE_VOTES;
    case 13:
    case "KV_ORACLE_FEEDERS":
      return ResourceType.KV_ORACLE_FEEDERS;
    case 14:
    case "KV_STAKING_DELEGATION":
      return ResourceType.KV_STAKING_DELEGATION;
    case 15:
    case "KV_STAKING_VALIDATOR":
      return ResourceType.KV_STAKING_VALIDATOR;
    case 16:
    case "KV_AUTH":
      return ResourceType.KV_AUTH;
    case 17:
    case "KV_AUTH_ADDRESS_STORE":
      return ResourceType.KV_AUTH_ADDRESS_STORE;
    case 18:
    case "KV_BANK_SUPPLY":
      return ResourceType.KV_BANK_SUPPLY;
    case 19:
    case "KV_BANK_DENOM":
      return ResourceType.KV_BANK_DENOM;
    case 20:
    case "KV_BANK_BALANCES":
      return ResourceType.KV_BANK_BALANCES;
    case 21:
    case "KV_TOKENFACTORY_DENOM":
      return ResourceType.KV_TOKENFACTORY_DENOM;
    case 22:
    case "KV_TOKENFACTORY_METADATA":
      return ResourceType.KV_TOKENFACTORY_METADATA;
    case 23:
    case "KV_TOKENFACTORY_ADMIN":
      return ResourceType.KV_TOKENFACTORY_ADMIN;
    case 24:
    case "KV_TOKENFACTORY_CREATOR":
      return ResourceType.KV_TOKENFACTORY_CREATOR;
    case 25:
    case "KV_ORACLE_EXCHANGE_RATE":
      return ResourceType.KV_ORACLE_EXCHANGE_RATE;
    case 26:
    case "KV_ORACLE_VOTE_PENALTY_COUNTER":
      return ResourceType.KV_ORACLE_VOTE_PENALTY_COUNTER;
    case 27:
    case "KV_ORACLE_PRICE_SNAPSHOT":
      return ResourceType.KV_ORACLE_PRICE_SNAPSHOT;
    case 28:
    case "KV_STAKING_VALIDATION_POWER":
      return ResourceType.KV_STAKING_VALIDATION_POWER;
    case 29:
    case "KV_STAKING_TOTAL_POWER":
      return ResourceType.KV_STAKING_TOTAL_POWER;
    case 30:
    case "KV_STAKING_VALIDATORS_CON_ADDR":
      return ResourceType.KV_STAKING_VALIDATORS_CON_ADDR;
    case 31:
    case "KV_STAKING_UNBONDING_DELEGATION":
      return ResourceType.KV_STAKING_UNBONDING_DELEGATION;
    case 32:
    case "KV_STAKING_UNBONDING_DELEGATION_VAL":
      return ResourceType.KV_STAKING_UNBONDING_DELEGATION_VAL;
    case 33:
    case "KV_STAKING_REDELEGATION":
      return ResourceType.KV_STAKING_REDELEGATION;
    case 34:
    case "KV_STAKING_REDELEGATION_VAL_SRC":
      return ResourceType.KV_STAKING_REDELEGATION_VAL_SRC;
    case 35:
    case "KV_STAKING_REDELEGATION_VAL_DST":
      return ResourceType.KV_STAKING_REDELEGATION_VAL_DST;
    case 36:
    case "KV_STAKING_REDELEGATION_QUEUE":
      return ResourceType.KV_STAKING_REDELEGATION_QUEUE;
    case 37:
    case "KV_STAKING_VALIDATOR_QUEUE":
      return ResourceType.KV_STAKING_VALIDATOR_QUEUE;
    case 38:
    case "KV_STAKING_HISTORICAL_INFO":
      return ResourceType.KV_STAKING_HISTORICAL_INFO;
    case 39:
    case "KV_STAKING_UNBONDING":
      return ResourceType.KV_STAKING_UNBONDING;
    case 41:
    case "KV_STAKING_VALIDATORS_BY_POWER":
      return ResourceType.KV_STAKING_VALIDATORS_BY_POWER;
    case 40:
    case "KV_DISTRIBUTION":
      return ResourceType.KV_DISTRIBUTION;
    case 42:
    case "KV_DISTRIBUTION_FEE_POOL":
      return ResourceType.KV_DISTRIBUTION_FEE_POOL;
    case 43:
    case "KV_DISTRIBUTION_PROPOSER_KEY":
      return ResourceType.KV_DISTRIBUTION_PROPOSER_KEY;
    case 44:
    case "KV_DISTRIBUTION_OUTSTANDING_REWARDS":
      return ResourceType.KV_DISTRIBUTION_OUTSTANDING_REWARDS;
    case 45:
    case "KV_DISTRIBUTION_DELEGATOR_WITHDRAW_ADDR":
      return ResourceType.KV_DISTRIBUTION_DELEGATOR_WITHDRAW_ADDR;
    case 46:
    case "KV_DISTRIBUTION_DELEGATOR_STARTING_INFO":
      return ResourceType.KV_DISTRIBUTION_DELEGATOR_STARTING_INFO;
    case 47:
    case "KV_DISTRIBUTION_VAL_HISTORICAL_REWARDS":
      return ResourceType.KV_DISTRIBUTION_VAL_HISTORICAL_REWARDS;
    case 48:
    case "KV_DISTRIBUTION_VAL_CURRENT_REWARDS":
      return ResourceType.KV_DISTRIBUTION_VAL_CURRENT_REWARDS;
    case 49:
    case "KV_DISTRIBUTION_VAL_ACCUM_COMMISSION":
      return ResourceType.KV_DISTRIBUTION_VAL_ACCUM_COMMISSION;
    case 50:
    case "KV_DISTRIBUTION_SLASH_EVENT":
      return ResourceType.KV_DISTRIBUTION_SLASH_EVENT;
    case 71:
    case "KV_ACCESSCONTROL":
      return ResourceType.KV_ACCESSCONTROL;
    case 72:
    case "KV_ACCESSCONTROL_WASM_DEPENDENCY_MAPPING":
      return ResourceType.KV_ACCESSCONTROL_WASM_DEPENDENCY_MAPPING;
    case 73:
    case "KV_WASM_CODE":
      return ResourceType.KV_WASM_CODE;
    case 74:
    case "KV_WASM_CONTRACT_ADDRESS":
      return ResourceType.KV_WASM_CONTRACT_ADDRESS;
    case 75:
    case "KV_WASM_CONTRACT_STORE":
      return ResourceType.KV_WASM_CONTRACT_STORE;
    case 76:
    case "KV_WASM_SEQUENCE_KEY":
      return ResourceType.KV_WASM_SEQUENCE_KEY;
    case 77:
    case "KV_WASM_CONTRACT_CODE_HISTORY":
      return ResourceType.KV_WASM_CONTRACT_CODE_HISTORY;
    case 78:
    case "KV_WASM_CONTRACT_BY_CODE_ID":
      return ResourceType.KV_WASM_CONTRACT_BY_CODE_ID;
    case 79:
    case "KV_WASM_PINNED_CODE_INDEX":
      return ResourceType.KV_WASM_PINNED_CODE_INDEX;
    case 80:
    case "KV_AUTH_GLOBAL_ACCOUNT_NUMBER":
      return ResourceType.KV_AUTH_GLOBAL_ACCOUNT_NUMBER;
    case 81:
    case "KV_AUTHZ":
      return ResourceType.KV_AUTHZ;
    case 82:
    case "KV_FEEGRANT":
      return ResourceType.KV_FEEGRANT;
    case 83:
    case "KV_FEEGRANT_ALLOWANCE":
      return ResourceType.KV_FEEGRANT_ALLOWANCE;
    case 84:
    case "KV_SLASHING":
      return ResourceType.KV_SLASHING;
    case 85:
    case "KV_SLASHING_VAL_SIGNING_INFO":
      return ResourceType.KV_SLASHING_VAL_SIGNING_INFO;
    case 86:
    case "KV_SLASHING_ADDR_PUBKEY_RELATION_KEY":
      return ResourceType.KV_SLASHING_ADDR_PUBKEY_RELATION_KEY;
    case 93:
    case "KV_BANK_DEFERRED":
      return ResourceType.KV_BANK_DEFERRED;
    case 95:
    case "KV_BANK_DEFERRED_MODULE_TX_INDEX":
      return ResourceType.KV_BANK_DEFERRED_MODULE_TX_INDEX;
    case 96:
    case "KV_EVM":
      return ResourceType.KV_EVM;
    case 97:
    case "KV_EVM_BALANCE":
      return ResourceType.KV_EVM_BALANCE;
    case 98:
    case "KV_EVM_TRANSIENT":
      return ResourceType.KV_EVM_TRANSIENT;
    case 99:
    case "KV_EVM_ACCOUNT_TRANSIENT":
      return ResourceType.KV_EVM_ACCOUNT_TRANSIENT;
    case 100:
    case "KV_EVM_MODULE_TRANSIENT":
      return ResourceType.KV_EVM_MODULE_TRANSIENT;
    case 101:
    case "KV_EVM_NONCE":
      return ResourceType.KV_EVM_NONCE;
    case 102:
    case "KV_EVM_RECEIPT":
      return ResourceType.KV_EVM_RECEIPT;
    case 103:
    case "KV_EVM_S2E":
      return ResourceType.KV_EVM_S2E;
    case 104:
    case "KV_EVM_E2S":
      return ResourceType.KV_EVM_E2S;
    case 105:
    case "KV_EVM_CODE_HASH":
      return ResourceType.KV_EVM_CODE_HASH;
    case 106:
    case "KV_EVM_CODE":
      return ResourceType.KV_EVM_CODE;
    case 107:
    case "KV_EVM_CODE_SIZE":
      return ResourceType.KV_EVM_CODE_SIZE;
    case 108:
    case "KV_BANK_WEI_BALANCE":
      return ResourceType.KV_BANK_WEI_BALANCE;
    case 111:
    case "KV_CT":
      return ResourceType.KV_CT;
    case 112:
    case "KV_CT_ACCOUNT":
      return ResourceType.KV_CT_ACCOUNT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResourceType.UNRECOGNIZED;
  }
}
function resourceTypeToJSON(object) {
  switch (object) {
    case ResourceType.ANY:
      return "ANY";
    case ResourceType.KV:
      return "KV";
    case ResourceType.Mem:
      return "Mem";
    case ResourceType.KV_BANK:
      return "KV_BANK";
    case ResourceType.KV_STAKING:
      return "KV_STAKING";
    case ResourceType.KV_WASM:
      return "KV_WASM";
    case ResourceType.KV_ORACLE:
      return "KV_ORACLE";
    case ResourceType.KV_EPOCH:
      return "KV_EPOCH";
    case ResourceType.KV_TOKENFACTORY:
      return "KV_TOKENFACTORY";
    case ResourceType.KV_ORACLE_VOTE_TARGETS:
      return "KV_ORACLE_VOTE_TARGETS";
    case ResourceType.KV_ORACLE_AGGREGATE_VOTES:
      return "KV_ORACLE_AGGREGATE_VOTES";
    case ResourceType.KV_ORACLE_FEEDERS:
      return "KV_ORACLE_FEEDERS";
    case ResourceType.KV_STAKING_DELEGATION:
      return "KV_STAKING_DELEGATION";
    case ResourceType.KV_STAKING_VALIDATOR:
      return "KV_STAKING_VALIDATOR";
    case ResourceType.KV_AUTH:
      return "KV_AUTH";
    case ResourceType.KV_AUTH_ADDRESS_STORE:
      return "KV_AUTH_ADDRESS_STORE";
    case ResourceType.KV_BANK_SUPPLY:
      return "KV_BANK_SUPPLY";
    case ResourceType.KV_BANK_DENOM:
      return "KV_BANK_DENOM";
    case ResourceType.KV_BANK_BALANCES:
      return "KV_BANK_BALANCES";
    case ResourceType.KV_TOKENFACTORY_DENOM:
      return "KV_TOKENFACTORY_DENOM";
    case ResourceType.KV_TOKENFACTORY_METADATA:
      return "KV_TOKENFACTORY_METADATA";
    case ResourceType.KV_TOKENFACTORY_ADMIN:
      return "KV_TOKENFACTORY_ADMIN";
    case ResourceType.KV_TOKENFACTORY_CREATOR:
      return "KV_TOKENFACTORY_CREATOR";
    case ResourceType.KV_ORACLE_EXCHANGE_RATE:
      return "KV_ORACLE_EXCHANGE_RATE";
    case ResourceType.KV_ORACLE_VOTE_PENALTY_COUNTER:
      return "KV_ORACLE_VOTE_PENALTY_COUNTER";
    case ResourceType.KV_ORACLE_PRICE_SNAPSHOT:
      return "KV_ORACLE_PRICE_SNAPSHOT";
    case ResourceType.KV_STAKING_VALIDATION_POWER:
      return "KV_STAKING_VALIDATION_POWER";
    case ResourceType.KV_STAKING_TOTAL_POWER:
      return "KV_STAKING_TOTAL_POWER";
    case ResourceType.KV_STAKING_VALIDATORS_CON_ADDR:
      return "KV_STAKING_VALIDATORS_CON_ADDR";
    case ResourceType.KV_STAKING_UNBONDING_DELEGATION:
      return "KV_STAKING_UNBONDING_DELEGATION";
    case ResourceType.KV_STAKING_UNBONDING_DELEGATION_VAL:
      return "KV_STAKING_UNBONDING_DELEGATION_VAL";
    case ResourceType.KV_STAKING_REDELEGATION:
      return "KV_STAKING_REDELEGATION";
    case ResourceType.KV_STAKING_REDELEGATION_VAL_SRC:
      return "KV_STAKING_REDELEGATION_VAL_SRC";
    case ResourceType.KV_STAKING_REDELEGATION_VAL_DST:
      return "KV_STAKING_REDELEGATION_VAL_DST";
    case ResourceType.KV_STAKING_REDELEGATION_QUEUE:
      return "KV_STAKING_REDELEGATION_QUEUE";
    case ResourceType.KV_STAKING_VALIDATOR_QUEUE:
      return "KV_STAKING_VALIDATOR_QUEUE";
    case ResourceType.KV_STAKING_HISTORICAL_INFO:
      return "KV_STAKING_HISTORICAL_INFO";
    case ResourceType.KV_STAKING_UNBONDING:
      return "KV_STAKING_UNBONDING";
    case ResourceType.KV_STAKING_VALIDATORS_BY_POWER:
      return "KV_STAKING_VALIDATORS_BY_POWER";
    case ResourceType.KV_DISTRIBUTION:
      return "KV_DISTRIBUTION";
    case ResourceType.KV_DISTRIBUTION_FEE_POOL:
      return "KV_DISTRIBUTION_FEE_POOL";
    case ResourceType.KV_DISTRIBUTION_PROPOSER_KEY:
      return "KV_DISTRIBUTION_PROPOSER_KEY";
    case ResourceType.KV_DISTRIBUTION_OUTSTANDING_REWARDS:
      return "KV_DISTRIBUTION_OUTSTANDING_REWARDS";
    case ResourceType.KV_DISTRIBUTION_DELEGATOR_WITHDRAW_ADDR:
      return "KV_DISTRIBUTION_DELEGATOR_WITHDRAW_ADDR";
    case ResourceType.KV_DISTRIBUTION_DELEGATOR_STARTING_INFO:
      return "KV_DISTRIBUTION_DELEGATOR_STARTING_INFO";
    case ResourceType.KV_DISTRIBUTION_VAL_HISTORICAL_REWARDS:
      return "KV_DISTRIBUTION_VAL_HISTORICAL_REWARDS";
    case ResourceType.KV_DISTRIBUTION_VAL_CURRENT_REWARDS:
      return "KV_DISTRIBUTION_VAL_CURRENT_REWARDS";
    case ResourceType.KV_DISTRIBUTION_VAL_ACCUM_COMMISSION:
      return "KV_DISTRIBUTION_VAL_ACCUM_COMMISSION";
    case ResourceType.KV_DISTRIBUTION_SLASH_EVENT:
      return "KV_DISTRIBUTION_SLASH_EVENT";
    case ResourceType.KV_ACCESSCONTROL:
      return "KV_ACCESSCONTROL";
    case ResourceType.KV_ACCESSCONTROL_WASM_DEPENDENCY_MAPPING:
      return "KV_ACCESSCONTROL_WASM_DEPENDENCY_MAPPING";
    case ResourceType.KV_WASM_CODE:
      return "KV_WASM_CODE";
    case ResourceType.KV_WASM_CONTRACT_ADDRESS:
      return "KV_WASM_CONTRACT_ADDRESS";
    case ResourceType.KV_WASM_CONTRACT_STORE:
      return "KV_WASM_CONTRACT_STORE";
    case ResourceType.KV_WASM_SEQUENCE_KEY:
      return "KV_WASM_SEQUENCE_KEY";
    case ResourceType.KV_WASM_CONTRACT_CODE_HISTORY:
      return "KV_WASM_CONTRACT_CODE_HISTORY";
    case ResourceType.KV_WASM_CONTRACT_BY_CODE_ID:
      return "KV_WASM_CONTRACT_BY_CODE_ID";
    case ResourceType.KV_WASM_PINNED_CODE_INDEX:
      return "KV_WASM_PINNED_CODE_INDEX";
    case ResourceType.KV_AUTH_GLOBAL_ACCOUNT_NUMBER:
      return "KV_AUTH_GLOBAL_ACCOUNT_NUMBER";
    case ResourceType.KV_AUTHZ:
      return "KV_AUTHZ";
    case ResourceType.KV_FEEGRANT:
      return "KV_FEEGRANT";
    case ResourceType.KV_FEEGRANT_ALLOWANCE:
      return "KV_FEEGRANT_ALLOWANCE";
    case ResourceType.KV_SLASHING:
      return "KV_SLASHING";
    case ResourceType.KV_SLASHING_VAL_SIGNING_INFO:
      return "KV_SLASHING_VAL_SIGNING_INFO";
    case ResourceType.KV_SLASHING_ADDR_PUBKEY_RELATION_KEY:
      return "KV_SLASHING_ADDR_PUBKEY_RELATION_KEY";
    case ResourceType.KV_BANK_DEFERRED:
      return "KV_BANK_DEFERRED";
    case ResourceType.KV_BANK_DEFERRED_MODULE_TX_INDEX:
      return "KV_BANK_DEFERRED_MODULE_TX_INDEX";
    case ResourceType.KV_EVM:
      return "KV_EVM";
    case ResourceType.KV_EVM_BALANCE:
      return "KV_EVM_BALANCE";
    case ResourceType.KV_EVM_TRANSIENT:
      return "KV_EVM_TRANSIENT";
    case ResourceType.KV_EVM_ACCOUNT_TRANSIENT:
      return "KV_EVM_ACCOUNT_TRANSIENT";
    case ResourceType.KV_EVM_MODULE_TRANSIENT:
      return "KV_EVM_MODULE_TRANSIENT";
    case ResourceType.KV_EVM_NONCE:
      return "KV_EVM_NONCE";
    case ResourceType.KV_EVM_RECEIPT:
      return "KV_EVM_RECEIPT";
    case ResourceType.KV_EVM_S2E:
      return "KV_EVM_S2E";
    case ResourceType.KV_EVM_E2S:
      return "KV_EVM_E2S";
    case ResourceType.KV_EVM_CODE_HASH:
      return "KV_EVM_CODE_HASH";
    case ResourceType.KV_EVM_CODE:
      return "KV_EVM_CODE";
    case ResourceType.KV_EVM_CODE_SIZE:
      return "KV_EVM_CODE_SIZE";
    case ResourceType.KV_BANK_WEI_BALANCE:
      return "KV_BANK_WEI_BALANCE";
    case ResourceType.KV_CT:
      return "KV_CT";
    case ResourceType.KV_CT_ACCOUNT:
      return "KV_CT_ACCOUNT";
    case ResourceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function wasmMessageSubtypeFromJSON(object) {
  switch (object) {
    case 0:
    case "QUERY":
      return WasmMessageSubtype.QUERY;
    case 1:
    case "EXECUTE":
      return WasmMessageSubtype.EXECUTE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WasmMessageSubtype.UNRECOGNIZED;
  }
}
function wasmMessageSubtypeToJSON(object) {
  switch (object) {
    case WasmMessageSubtype.QUERY:
      return "QUERY";
    case WasmMessageSubtype.EXECUTE:
      return "EXECUTE";
    case WasmMessageSubtype.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/accesscontrol/accesscontrol.js
var AccessOperation = {
  $type: "cosmos.accesscontrol.v1beta1.AccessOperation",
  encode(message, writer = new BinaryWriter()) {
    if (message.access_type !== 0) {
      writer.uint32(8).int32(message.access_type);
    }
    if (message.resource_type !== 0) {
      writer.uint32(16).int32(message.resource_type);
    }
    if (message.identifier_template !== "") {
      writer.uint32(26).string(message.identifier_template);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAccessOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.access_type = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.resource_type = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.identifier_template = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      access_type: isSet10(object.access_type) ? accessTypeFromJSON(object.access_type) : 0,
      resource_type: isSet10(object.resource_type) ? resourceTypeFromJSON(object.resource_type) : 0,
      identifier_template: isSet10(object.identifier_template) ? globalThis.String(object.identifier_template) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.access_type !== 0) {
      obj.access_type = accessTypeToJSON(message.access_type);
    }
    if (message.resource_type !== 0) {
      obj.resource_type = resourceTypeToJSON(message.resource_type);
    }
    if (message.identifier_template !== "") {
      obj.identifier_template = message.identifier_template;
    }
    return obj;
  },
  create(base) {
    return AccessOperation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAccessOperation();
    message.access_type = object.access_type ?? 0;
    message.resource_type = object.resource_type ?? 0;
    message.identifier_template = object.identifier_template ?? "";
    return message;
  }
};
var WasmAccessOperation = {
  $type: "cosmos.accesscontrol.v1beta1.WasmAccessOperation",
  encode(message, writer = new BinaryWriter()) {
    if (message.operation !== void 0) {
      AccessOperation.encode(message.operation, writer.uint32(10).fork()).join();
    }
    if (message.selector_type !== 0) {
      writer.uint32(16).int32(message.selector_type);
    }
    if (message.selector !== "") {
      writer.uint32(26).string(message.selector);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseWasmAccessOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.operation = AccessOperation.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.selector_type = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.selector = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      operation: isSet10(object.operation) ? AccessOperation.fromJSON(object.operation) : void 0,
      selector_type: isSet10(object.selector_type) ? accessOperationSelectorTypeFromJSON(object.selector_type) : 0,
      selector: isSet10(object.selector) ? globalThis.String(object.selector) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.operation !== void 0) {
      obj.operation = AccessOperation.toJSON(message.operation);
    }
    if (message.selector_type !== 0) {
      obj.selector_type = accessOperationSelectorTypeToJSON(message.selector_type);
    }
    if (message.selector !== "") {
      obj.selector = message.selector;
    }
    return obj;
  },
  create(base) {
    return WasmAccessOperation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseWasmAccessOperation();
    message.operation = object.operation !== void 0 && object.operation !== null ? AccessOperation.fromPartial(object.operation) : void 0;
    message.selector_type = object.selector_type ?? 0;
    message.selector = object.selector ?? "";
    return message;
  }
};
var WasmContractReference = {
  $type: "cosmos.accesscontrol.v1beta1.WasmContractReference",
  encode(message, writer = new BinaryWriter()) {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    if (message.message_type !== 0) {
      writer.uint32(16).int32(message.message_type);
    }
    if (message.message_name !== "") {
      writer.uint32(26).string(message.message_name);
    }
    if (message.json_translation_template !== "") {
      writer.uint32(34).string(message.json_translation_template);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseWasmContractReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.contract_address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.message_type = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.message_name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.json_translation_template = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      contract_address: isSet10(object.contract_address) ? globalThis.String(object.contract_address) : "",
      message_type: isSet10(object.message_type) ? wasmMessageSubtypeFromJSON(object.message_type) : 0,
      message_name: isSet10(object.message_name) ? globalThis.String(object.message_name) : "",
      json_translation_template: isSet10(object.json_translation_template) ? globalThis.String(object.json_translation_template) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    if (message.message_type !== 0) {
      obj.message_type = wasmMessageSubtypeToJSON(message.message_type);
    }
    if (message.message_name !== "") {
      obj.message_name = message.message_name;
    }
    if (message.json_translation_template !== "") {
      obj.json_translation_template = message.json_translation_template;
    }
    return obj;
  },
  create(base) {
    return WasmContractReference.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseWasmContractReference();
    message.contract_address = object.contract_address ?? "";
    message.message_type = object.message_type ?? 0;
    message.message_name = object.message_name ?? "";
    message.json_translation_template = object.json_translation_template ?? "";
    return message;
  }
};
var WasmContractReferences = {
  $type: "cosmos.accesscontrol.v1beta1.WasmContractReferences",
  encode(message, writer = new BinaryWriter()) {
    if (message.message_name !== "") {
      writer.uint32(10).string(message.message_name);
    }
    for (const v of message.contract_references) {
      WasmContractReference.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseWasmContractReferences();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message_name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.contract_references.push(WasmContractReference.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message_name: isSet10(object.message_name) ? globalThis.String(object.message_name) : "",
      contract_references: globalThis.Array.isArray(object == null ? void 0 : object.contract_references) ? object.contract_references.map((e) => WasmContractReference.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.message_name !== "") {
      obj.message_name = message.message_name;
    }
    if ((_a = message.contract_references) == null ? void 0 : _a.length) {
      obj.contract_references = message.contract_references.map((e) => WasmContractReference.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return WasmContractReferences.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseWasmContractReferences();
    message.message_name = object.message_name ?? "";
    message.contract_references = ((_a = object.contract_references) == null ? void 0 : _a.map((e) => WasmContractReference.fromPartial(e))) || [];
    return message;
  }
};
var WasmAccessOperations = {
  $type: "cosmos.accesscontrol.v1beta1.WasmAccessOperations",
  encode(message, writer = new BinaryWriter()) {
    if (message.message_name !== "") {
      writer.uint32(10).string(message.message_name);
    }
    for (const v of message.wasm_operations) {
      WasmAccessOperation.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseWasmAccessOperations();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message_name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.wasm_operations.push(WasmAccessOperation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message_name: isSet10(object.message_name) ? globalThis.String(object.message_name) : "",
      wasm_operations: globalThis.Array.isArray(object == null ? void 0 : object.wasm_operations) ? object.wasm_operations.map((e) => WasmAccessOperation.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.message_name !== "") {
      obj.message_name = message.message_name;
    }
    if ((_a = message.wasm_operations) == null ? void 0 : _a.length) {
      obj.wasm_operations = message.wasm_operations.map((e) => WasmAccessOperation.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return WasmAccessOperations.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseWasmAccessOperations();
    message.message_name = object.message_name ?? "";
    message.wasm_operations = ((_a = object.wasm_operations) == null ? void 0 : _a.map((e) => WasmAccessOperation.fromPartial(e))) || [];
    return message;
  }
};
var MessageDependencyMapping = {
  $type: "cosmos.accesscontrol.v1beta1.MessageDependencyMapping",
  encode(message, writer = new BinaryWriter()) {
    if (message.message_key !== "") {
      writer.uint32(10).string(message.message_key);
    }
    for (const v of message.access_ops) {
      AccessOperation.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.dynamic_enabled !== false) {
      writer.uint32(24).bool(message.dynamic_enabled);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMessageDependencyMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message_key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.access_ops.push(AccessOperation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.dynamic_enabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message_key: isSet10(object.message_key) ? globalThis.String(object.message_key) : "",
      access_ops: globalThis.Array.isArray(object == null ? void 0 : object.access_ops) ? object.access_ops.map((e) => AccessOperation.fromJSON(e)) : [],
      dynamic_enabled: isSet10(object.dynamic_enabled) ? globalThis.Boolean(object.dynamic_enabled) : false
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.message_key !== "") {
      obj.message_key = message.message_key;
    }
    if ((_a = message.access_ops) == null ? void 0 : _a.length) {
      obj.access_ops = message.access_ops.map((e) => AccessOperation.toJSON(e));
    }
    if (message.dynamic_enabled !== false) {
      obj.dynamic_enabled = message.dynamic_enabled;
    }
    return obj;
  },
  create(base) {
    return MessageDependencyMapping.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMessageDependencyMapping();
    message.message_key = object.message_key ?? "";
    message.access_ops = ((_a = object.access_ops) == null ? void 0 : _a.map((e) => AccessOperation.fromPartial(e))) || [];
    message.dynamic_enabled = object.dynamic_enabled ?? false;
    return message;
  }
};
var WasmDependencyMapping = {
  $type: "cosmos.accesscontrol.v1beta1.WasmDependencyMapping",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.base_access_ops) {
      WasmAccessOperation.encode(v, writer.uint32(10).fork()).join();
    }
    for (const v of message.query_access_ops) {
      WasmAccessOperations.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.execute_access_ops) {
      WasmAccessOperations.encode(v, writer.uint32(26).fork()).join();
    }
    for (const v of message.base_contract_references) {
      WasmContractReference.encode(v, writer.uint32(34).fork()).join();
    }
    for (const v of message.query_contract_references) {
      WasmContractReferences.encode(v, writer.uint32(42).fork()).join();
    }
    for (const v of message.execute_contract_references) {
      WasmContractReferences.encode(v, writer.uint32(50).fork()).join();
    }
    if (message.reset_reason !== "") {
      writer.uint32(58).string(message.reset_reason);
    }
    if (message.contract_address !== "") {
      writer.uint32(66).string(message.contract_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseWasmDependencyMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.base_access_ops.push(WasmAccessOperation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.query_access_ops.push(WasmAccessOperations.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.execute_access_ops.push(WasmAccessOperations.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.base_contract_references.push(WasmContractReference.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.query_contract_references.push(WasmContractReferences.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.execute_contract_references.push(WasmContractReferences.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.reset_reason = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.contract_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      base_access_ops: globalThis.Array.isArray(object == null ? void 0 : object.base_access_ops) ? object.base_access_ops.map((e) => WasmAccessOperation.fromJSON(e)) : [],
      query_access_ops: globalThis.Array.isArray(object == null ? void 0 : object.query_access_ops) ? object.query_access_ops.map((e) => WasmAccessOperations.fromJSON(e)) : [],
      execute_access_ops: globalThis.Array.isArray(object == null ? void 0 : object.execute_access_ops) ? object.execute_access_ops.map((e) => WasmAccessOperations.fromJSON(e)) : [],
      base_contract_references: globalThis.Array.isArray(object == null ? void 0 : object.base_contract_references) ? object.base_contract_references.map((e) => WasmContractReference.fromJSON(e)) : [],
      query_contract_references: globalThis.Array.isArray(object == null ? void 0 : object.query_contract_references) ? object.query_contract_references.map((e) => WasmContractReferences.fromJSON(e)) : [],
      execute_contract_references: globalThis.Array.isArray(object == null ? void 0 : object.execute_contract_references) ? object.execute_contract_references.map((e) => WasmContractReferences.fromJSON(e)) : [],
      reset_reason: isSet10(object.reset_reason) ? globalThis.String(object.reset_reason) : "",
      contract_address: isSet10(object.contract_address) ? globalThis.String(object.contract_address) : ""
    };
  },
  toJSON(message) {
    var _a, _b, _c, _d, _e, _f;
    const obj = {};
    if ((_a = message.base_access_ops) == null ? void 0 : _a.length) {
      obj.base_access_ops = message.base_access_ops.map((e) => WasmAccessOperation.toJSON(e));
    }
    if ((_b = message.query_access_ops) == null ? void 0 : _b.length) {
      obj.query_access_ops = message.query_access_ops.map((e) => WasmAccessOperations.toJSON(e));
    }
    if ((_c = message.execute_access_ops) == null ? void 0 : _c.length) {
      obj.execute_access_ops = message.execute_access_ops.map((e) => WasmAccessOperations.toJSON(e));
    }
    if ((_d = message.base_contract_references) == null ? void 0 : _d.length) {
      obj.base_contract_references = message.base_contract_references.map((e) => WasmContractReference.toJSON(e));
    }
    if ((_e = message.query_contract_references) == null ? void 0 : _e.length) {
      obj.query_contract_references = message.query_contract_references.map((e) => WasmContractReferences.toJSON(e));
    }
    if ((_f = message.execute_contract_references) == null ? void 0 : _f.length) {
      obj.execute_contract_references = message.execute_contract_references.map((e) => WasmContractReferences.toJSON(e));
    }
    if (message.reset_reason !== "") {
      obj.reset_reason = message.reset_reason;
    }
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    return obj;
  },
  create(base) {
    return WasmDependencyMapping.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e, _f;
    const message = createBaseWasmDependencyMapping();
    message.base_access_ops = ((_a = object.base_access_ops) == null ? void 0 : _a.map((e) => WasmAccessOperation.fromPartial(e))) || [];
    message.query_access_ops = ((_b = object.query_access_ops) == null ? void 0 : _b.map((e) => WasmAccessOperations.fromPartial(e))) || [];
    message.execute_access_ops = ((_c = object.execute_access_ops) == null ? void 0 : _c.map((e) => WasmAccessOperations.fromPartial(e))) || [];
    message.base_contract_references = ((_d = object.base_contract_references) == null ? void 0 : _d.map((e) => WasmContractReference.fromPartial(e))) || [];
    message.query_contract_references = ((_e = object.query_contract_references) == null ? void 0 : _e.map((e) => WasmContractReferences.fromPartial(e))) || [];
    message.execute_contract_references = ((_f = object.execute_contract_references) == null ? void 0 : _f.map((e) => WasmContractReferences.fromPartial(e))) || [];
    message.reset_reason = object.reset_reason ?? "";
    message.contract_address = object.contract_address ?? "";
    return message;
  }
};
function createBaseAccessOperation() {
  return { access_type: 0, resource_type: 0, identifier_template: "" };
}
function createBaseWasmAccessOperation() {
  return { operation: void 0, selector_type: 0, selector: "" };
}
function createBaseWasmContractReference() {
  return { contract_address: "", message_type: 0, message_name: "", json_translation_template: "" };
}
function createBaseWasmContractReferences() {
  return { message_name: "", contract_references: [] };
}
function createBaseWasmAccessOperations() {
  return { message_name: "", wasm_operations: [] };
}
function createBaseMessageDependencyMapping() {
  return { message_key: "", access_ops: [], dynamic_enabled: false };
}
function createBaseWasmDependencyMapping() {
  return {
    base_access_ops: [],
    query_access_ops: [],
    execute_access_ops: [],
    base_contract_references: [],
    query_contract_references: [],
    execute_contract_references: [],
    reset_reason: "",
    contract_address: ""
  };
}
function isSet10(value) {
  return value !== null && value !== void 0;
}
var registry10 = [
  ["/cosmos.accesscontrol.v1beta1.AccessOperation", AccessOperation],
  ["/cosmos.accesscontrol.v1beta1.WasmAccessOperation", WasmAccessOperation],
  ["/cosmos.accesscontrol.v1beta1.WasmContractReference", WasmContractReference],
  ["/cosmos.accesscontrol.v1beta1.WasmContractReferences", WasmContractReferences],
  ["/cosmos.accesscontrol.v1beta1.WasmAccessOperations", WasmAccessOperations],
  ["/cosmos.accesscontrol.v1beta1.MessageDependencyMapping", MessageDependencyMapping],
  ["/cosmos.accesscontrol.v1beta1.WasmDependencyMapping", WasmDependencyMapping]
];
var aminoConverters10 = {
  "/cosmos.accesscontrol.v1beta1.AccessOperation": {
    aminoType: "cosmos-sdk/AccessOperation",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol.v1beta1.WasmAccessOperation": {
    aminoType: "cosmos-sdk/WasmAccessOperation",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol.v1beta1.WasmContractReference": {
    aminoType: "cosmos-sdk/WasmContractReference",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol.v1beta1.WasmContractReferences": {
    aminoType: "cosmos-sdk/WasmContractReferences",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol.v1beta1.WasmAccessOperations": {
    aminoType: "cosmos-sdk/WasmAccessOperations",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol.v1beta1.MessageDependencyMapping": {
    aminoType: "cosmos-sdk/MessageDependencyMapping",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol.v1beta1.WasmDependencyMapping": {
    aminoType: "cosmos-sdk/WasmDependencyMapping",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/accesscontrol/legacy.js
var LegacyAccessOperationWithSelector = {
  $type: "cosmos.accesscontrol.v1beta1.LegacyAccessOperationWithSelector",
  encode(message, writer = new BinaryWriter()) {
    if (message.operation !== void 0) {
      AccessOperation.encode(message.operation, writer.uint32(10).fork()).join();
    }
    if (message.selector_type !== 0) {
      writer.uint32(16).int32(message.selector_type);
    }
    if (message.selector !== "") {
      writer.uint32(26).string(message.selector);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLegacyAccessOperationWithSelector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.operation = AccessOperation.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.selector_type = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.selector = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      operation: isSet11(object.operation) ? AccessOperation.fromJSON(object.operation) : void 0,
      selector_type: isSet11(object.selector_type) ? accessOperationSelectorTypeFromJSON(object.selector_type) : 0,
      selector: isSet11(object.selector) ? globalThis.String(object.selector) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.operation !== void 0) {
      obj.operation = AccessOperation.toJSON(message.operation);
    }
    if (message.selector_type !== 0) {
      obj.selector_type = accessOperationSelectorTypeToJSON(message.selector_type);
    }
    if (message.selector !== "") {
      obj.selector = message.selector;
    }
    return obj;
  },
  create(base) {
    return LegacyAccessOperationWithSelector.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseLegacyAccessOperationWithSelector();
    message.operation = object.operation !== void 0 && object.operation !== null ? AccessOperation.fromPartial(object.operation) : void 0;
    message.selector_type = object.selector_type ?? 0;
    message.selector = object.selector ?? "";
    return message;
  }
};
var LegacyWasmDependencyMapping = {
  $type: "cosmos.accesscontrol.v1beta1.LegacyWasmDependencyMapping",
  encode(message, writer = new BinaryWriter()) {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    for (const v of message.access_ops) {
      LegacyAccessOperationWithSelector.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.reset_reason !== "") {
      writer.uint32(26).string(message.reset_reason);
    }
    if (message.contract_address !== "") {
      writer.uint32(34).string(message.contract_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLegacyWasmDependencyMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.enabled = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.access_ops.push(LegacyAccessOperationWithSelector.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.reset_reason = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.contract_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      enabled: isSet11(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      access_ops: globalThis.Array.isArray(object == null ? void 0 : object.access_ops) ? object.access_ops.map((e) => LegacyAccessOperationWithSelector.fromJSON(e)) : [],
      reset_reason: isSet11(object.reset_reason) ? globalThis.String(object.reset_reason) : "",
      contract_address: isSet11(object.contract_address) ? globalThis.String(object.contract_address) : ""
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if ((_a = message.access_ops) == null ? void 0 : _a.length) {
      obj.access_ops = message.access_ops.map((e) => LegacyAccessOperationWithSelector.toJSON(e));
    }
    if (message.reset_reason !== "") {
      obj.reset_reason = message.reset_reason;
    }
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    return obj;
  },
  create(base) {
    return LegacyWasmDependencyMapping.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseLegacyWasmDependencyMapping();
    message.enabled = object.enabled ?? false;
    message.access_ops = ((_a = object.access_ops) == null ? void 0 : _a.map((e) => LegacyAccessOperationWithSelector.fromPartial(e))) || [];
    message.reset_reason = object.reset_reason ?? "";
    message.contract_address = object.contract_address ?? "";
    return message;
  }
};
function createBaseLegacyAccessOperationWithSelector() {
  return { operation: void 0, selector_type: 0, selector: "" };
}
function createBaseLegacyWasmDependencyMapping() {
  return { enabled: false, access_ops: [], reset_reason: "", contract_address: "" };
}
function isSet11(value) {
  return value !== null && value !== void 0;
}
var registry11 = [
  ["/cosmos.accesscontrol.v1beta1.LegacyAccessOperationWithSelector", LegacyAccessOperationWithSelector],
  ["/cosmos.accesscontrol.v1beta1.LegacyWasmDependencyMapping", LegacyWasmDependencyMapping]
];
var aminoConverters11 = {
  "/cosmos.accesscontrol.v1beta1.LegacyAccessOperationWithSelector": {
    aminoType: "cosmos-sdk/LegacyAccessOperationWithSelector",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol.v1beta1.LegacyWasmDependencyMapping": {
    aminoType: "cosmos-sdk/LegacyWasmDependencyMapping",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/accesscontrol_x/index.js
var accesscontrol_x_exports = {};
__export(accesscontrol_x_exports, {
  GenesisState: () => GenesisState2,
  ListResourceDependencyMappingRequest: () => ListResourceDependencyMappingRequest,
  ListResourceDependencyMappingResponse: () => ListResourceDependencyMappingResponse,
  ListWasmDependencyMappingRequest: () => ListWasmDependencyMappingRequest,
  ListWasmDependencyMappingResponse: () => ListWasmDependencyMappingResponse,
  MsgRegisterWasmDependency: () => MsgRegisterWasmDependency,
  MsgRegisterWasmDependencyResponse: () => MsgRegisterWasmDependencyResponse,
  MsgUpdateResourceDependencyMappingProposal: () => MsgUpdateResourceDependencyMappingProposal,
  MsgUpdateResourceDependencyMappingProposalJsonFile: () => MsgUpdateResourceDependencyMappingProposalJsonFile,
  MsgUpdateResourceDependencyMappingProposalResponse: () => MsgUpdateResourceDependencyMappingProposalResponse,
  MsgUpdateWasmDependencyMappingProposal: () => MsgUpdateWasmDependencyMappingProposal,
  MsgUpdateWasmDependencyMappingProposalJsonFile: () => MsgUpdateWasmDependencyMappingProposalJsonFile,
  Params: () => Params2,
  QueryParamsRequest: () => QueryParamsRequest,
  QueryParamsResponse: () => QueryParamsResponse,
  RegisterWasmDependencyJSONFile: () => RegisterWasmDependencyJSONFile,
  ResourceDependencyMappingFromMessageKeyRequest: () => ResourceDependencyMappingFromMessageKeyRequest,
  ResourceDependencyMappingFromMessageKeyResponse: () => ResourceDependencyMappingFromMessageKeyResponse,
  WasmDependencyMappingRequest: () => WasmDependencyMappingRequest,
  WasmDependencyMappingResponse: () => WasmDependencyMappingResponse
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/accesscontrol_x/genesis.js
var GenesisState2 = {
  $type: "cosmos.accesscontrol_x.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params2.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.message_dependency_mapping) {
      MessageDependencyMapping.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.wasm_dependency_mappings) {
      WasmDependencyMapping.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params2.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.message_dependency_mapping.push(MessageDependencyMapping.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.wasm_dependency_mappings.push(WasmDependencyMapping.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet12(object.params) ? Params2.fromJSON(object.params) : void 0,
      message_dependency_mapping: globalThis.Array.isArray(object == null ? void 0 : object.message_dependency_mapping) ? object.message_dependency_mapping.map((e) => MessageDependencyMapping.fromJSON(e)) : [],
      wasm_dependency_mappings: globalThis.Array.isArray(object == null ? void 0 : object.wasm_dependency_mappings) ? object.wasm_dependency_mappings.map((e) => WasmDependencyMapping.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params2.toJSON(message.params);
    }
    if ((_a = message.message_dependency_mapping) == null ? void 0 : _a.length) {
      obj.message_dependency_mapping = message.message_dependency_mapping.map((e) => MessageDependencyMapping.toJSON(e));
    }
    if ((_b = message.wasm_dependency_mappings) == null ? void 0 : _b.length) {
      obj.wasm_dependency_mappings = message.wasm_dependency_mappings.map((e) => WasmDependencyMapping.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseGenesisState2();
    message.params = object.params !== void 0 && object.params !== null ? Params2.fromPartial(object.params) : void 0;
    message.message_dependency_mapping = ((_a = object.message_dependency_mapping) == null ? void 0 : _a.map((e) => MessageDependencyMapping.fromPartial(e))) || [];
    message.wasm_dependency_mappings = ((_b = object.wasm_dependency_mappings) == null ? void 0 : _b.map((e) => WasmDependencyMapping.fromPartial(e))) || [];
    return message;
  }
};
var Params2 = {
  $type: "cosmos.accesscontrol_x.v1beta1.Params",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return Params2.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseParams2();
    return message;
  }
};
function createBaseGenesisState2() {
  return { params: void 0, message_dependency_mapping: [], wasm_dependency_mappings: [] };
}
function createBaseParams2() {
  return {};
}
function isSet12(value) {
  return value !== null && value !== void 0;
}
var registry12 = [
  ["/cosmos.accesscontrol_x.v1beta1.GenesisState", GenesisState2],
  ["/cosmos.accesscontrol_x.v1beta1.Params", Params2]
];
var aminoConverters12 = {
  "/cosmos.accesscontrol_x.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol_x.v1beta1.Params": {
    aminoType: "cosmos-sdk/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/accesscontrol_x/gov.js
var MsgUpdateResourceDependencyMappingProposal = {
  $type: "cosmos.accesscontrol.v1beta1.MsgUpdateResourceDependencyMappingProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.message_dependency_mapping) {
      MessageDependencyMapping.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateResourceDependencyMappingProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.message_dependency_mapping.push(MessageDependencyMapping.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet13(object.title) ? globalThis.String(object.title) : "",
      description: isSet13(object.description) ? globalThis.String(object.description) : "",
      message_dependency_mapping: globalThis.Array.isArray(object == null ? void 0 : object.message_dependency_mapping) ? object.message_dependency_mapping.map((e) => MessageDependencyMapping.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if ((_a = message.message_dependency_mapping) == null ? void 0 : _a.length) {
      obj.message_dependency_mapping = message.message_dependency_mapping.map((e) => MessageDependencyMapping.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return MsgUpdateResourceDependencyMappingProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgUpdateResourceDependencyMappingProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.message_dependency_mapping = ((_a = object.message_dependency_mapping) == null ? void 0 : _a.map((e) => MessageDependencyMapping.fromPartial(e))) || [];
    return message;
  }
};
var MsgUpdateResourceDependencyMappingProposalJsonFile = {
  $type: "cosmos.accesscontrol.v1beta1.MsgUpdateResourceDependencyMappingProposalJsonFile",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.deposit !== "") {
      writer.uint32(26).string(message.deposit);
    }
    for (const v of message.message_dependency_mapping) {
      MessageDependencyMapping.encode(v, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateResourceDependencyMappingProposalJsonFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.deposit = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.message_dependency_mapping.push(MessageDependencyMapping.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet13(object.title) ? globalThis.String(object.title) : "",
      description: isSet13(object.description) ? globalThis.String(object.description) : "",
      deposit: isSet13(object.deposit) ? globalThis.String(object.deposit) : "",
      message_dependency_mapping: globalThis.Array.isArray(object == null ? void 0 : object.message_dependency_mapping) ? object.message_dependency_mapping.map((e) => MessageDependencyMapping.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.deposit !== "") {
      obj.deposit = message.deposit;
    }
    if ((_a = message.message_dependency_mapping) == null ? void 0 : _a.length) {
      obj.message_dependency_mapping = message.message_dependency_mapping.map((e) => MessageDependencyMapping.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return MsgUpdateResourceDependencyMappingProposalJsonFile.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgUpdateResourceDependencyMappingProposalJsonFile();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.deposit = object.deposit ?? "";
    message.message_dependency_mapping = ((_a = object.message_dependency_mapping) == null ? void 0 : _a.map((e) => MessageDependencyMapping.fromPartial(e))) || [];
    return message;
  }
};
var MsgUpdateResourceDependencyMappingProposalResponse = {
  $type: "cosmos.accesscontrol.v1beta1.MsgUpdateResourceDependencyMappingProposalResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateResourceDependencyMappingProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgUpdateResourceDependencyMappingProposalResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgUpdateResourceDependencyMappingProposalResponse();
    return message;
  }
};
var MsgUpdateWasmDependencyMappingProposal = {
  $type: "cosmos.accesscontrol.v1beta1.MsgUpdateWasmDependencyMappingProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.contract_address !== "") {
      writer.uint32(26).string(message.contract_address);
    }
    if (message.wasm_dependency_mapping !== void 0) {
      WasmDependencyMapping.encode(message.wasm_dependency_mapping, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateWasmDependencyMappingProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.contract_address = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.wasm_dependency_mapping = WasmDependencyMapping.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet13(object.title) ? globalThis.String(object.title) : "",
      description: isSet13(object.description) ? globalThis.String(object.description) : "",
      contract_address: isSet13(object.contract_address) ? globalThis.String(object.contract_address) : "",
      wasm_dependency_mapping: isSet13(object.wasm_dependency_mapping) ? WasmDependencyMapping.fromJSON(object.wasm_dependency_mapping) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    if (message.wasm_dependency_mapping !== void 0) {
      obj.wasm_dependency_mapping = WasmDependencyMapping.toJSON(message.wasm_dependency_mapping);
    }
    return obj;
  },
  create(base) {
    return MsgUpdateWasmDependencyMappingProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgUpdateWasmDependencyMappingProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.contract_address = object.contract_address ?? "";
    message.wasm_dependency_mapping = object.wasm_dependency_mapping !== void 0 && object.wasm_dependency_mapping !== null ? WasmDependencyMapping.fromPartial(object.wasm_dependency_mapping) : void 0;
    return message;
  }
};
var MsgUpdateWasmDependencyMappingProposalJsonFile = {
  $type: "cosmos.accesscontrol.v1beta1.MsgUpdateWasmDependencyMappingProposalJsonFile",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.deposit !== "") {
      writer.uint32(26).string(message.deposit);
    }
    if (message.contract_address !== "") {
      writer.uint32(34).string(message.contract_address);
    }
    if (message.wasm_dependency_mapping !== void 0) {
      WasmDependencyMapping.encode(message.wasm_dependency_mapping, writer.uint32(42).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateWasmDependencyMappingProposalJsonFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.deposit = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.contract_address = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.wasm_dependency_mapping = WasmDependencyMapping.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet13(object.title) ? globalThis.String(object.title) : "",
      description: isSet13(object.description) ? globalThis.String(object.description) : "",
      deposit: isSet13(object.deposit) ? globalThis.String(object.deposit) : "",
      contract_address: isSet13(object.contract_address) ? globalThis.String(object.contract_address) : "",
      wasm_dependency_mapping: isSet13(object.wasm_dependency_mapping) ? WasmDependencyMapping.fromJSON(object.wasm_dependency_mapping) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.deposit !== "") {
      obj.deposit = message.deposit;
    }
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    if (message.wasm_dependency_mapping !== void 0) {
      obj.wasm_dependency_mapping = WasmDependencyMapping.toJSON(message.wasm_dependency_mapping);
    }
    return obj;
  },
  create(base) {
    return MsgUpdateWasmDependencyMappingProposalJsonFile.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgUpdateWasmDependencyMappingProposalJsonFile();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.deposit = object.deposit ?? "";
    message.contract_address = object.contract_address ?? "";
    message.wasm_dependency_mapping = object.wasm_dependency_mapping !== void 0 && object.wasm_dependency_mapping !== null ? WasmDependencyMapping.fromPartial(object.wasm_dependency_mapping) : void 0;
    return message;
  }
};
function createBaseMsgUpdateResourceDependencyMappingProposal() {
  return { title: "", description: "", message_dependency_mapping: [] };
}
function createBaseMsgUpdateResourceDependencyMappingProposalJsonFile() {
  return { title: "", description: "", deposit: "", message_dependency_mapping: [] };
}
function createBaseMsgUpdateResourceDependencyMappingProposalResponse() {
  return {};
}
function createBaseMsgUpdateWasmDependencyMappingProposal() {
  return { title: "", description: "", contract_address: "", wasm_dependency_mapping: void 0 };
}
function createBaseMsgUpdateWasmDependencyMappingProposalJsonFile() {
  return { title: "", description: "", deposit: "", contract_address: "", wasm_dependency_mapping: void 0 };
}
function isSet13(value) {
  return value !== null && value !== void 0;
}
var registry13 = [
  ["/cosmos.accesscontrol.v1beta1.MsgUpdateResourceDependencyMappingProposal", MsgUpdateResourceDependencyMappingProposal],
  ["/cosmos.accesscontrol.v1beta1.MsgUpdateResourceDependencyMappingProposalJsonFile", MsgUpdateResourceDependencyMappingProposalJsonFile],
  ["/cosmos.accesscontrol.v1beta1.MsgUpdateResourceDependencyMappingProposalResponse", MsgUpdateResourceDependencyMappingProposalResponse],
  ["/cosmos.accesscontrol.v1beta1.MsgUpdateWasmDependencyMappingProposal", MsgUpdateWasmDependencyMappingProposal],
  ["/cosmos.accesscontrol.v1beta1.MsgUpdateWasmDependencyMappingProposalJsonFile", MsgUpdateWasmDependencyMappingProposalJsonFile]
];
var aminoConverters13 = {
  "/cosmos.accesscontrol.v1beta1.MsgUpdateResourceDependencyMappingProposal": {
    aminoType: "cosmos-sdk/MsgUpdateResourceDependencyMappingProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol.v1beta1.MsgUpdateResourceDependencyMappingProposalJsonFile": {
    aminoType: "cosmos-sdk/MsgUpdateResourceDependencyMappingProposalJsonFile",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol.v1beta1.MsgUpdateResourceDependencyMappingProposalResponse": {
    aminoType: "cosmos-sdk/MsgUpdateResourceDependencyMappingProposalResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol.v1beta1.MsgUpdateWasmDependencyMappingProposal": {
    aminoType: "cosmos-sdk/MsgUpdateWasmDependencyMappingProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol.v1beta1.MsgUpdateWasmDependencyMappingProposalJsonFile": {
    aminoType: "cosmos-sdk/MsgUpdateWasmDependencyMappingProposalJsonFile",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/accesscontrol_x/query.js
var QueryParamsRequest = {
  $type: "cosmos.accesscontrol_x.v1beta1.QueryParamsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest();
    return message;
  }
};
var QueryParamsResponse = {
  $type: "cosmos.accesscontrol_x.v1beta1.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params2.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { params: isSet14(object.params) ? Params2.fromJSON(object.params) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params2.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse();
    message.params = object.params !== void 0 && object.params !== null ? Params2.fromPartial(object.params) : void 0;
    return message;
  }
};
var ResourceDependencyMappingFromMessageKeyRequest = {
  $type: "cosmos.accesscontrol_x.v1beta1.ResourceDependencyMappingFromMessageKeyRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.message_key !== "") {
      writer.uint32(10).string(message.message_key);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResourceDependencyMappingFromMessageKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message_key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { message_key: isSet14(object.message_key) ? globalThis.String(object.message_key) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.message_key !== "") {
      obj.message_key = message.message_key;
    }
    return obj;
  },
  create(base) {
    return ResourceDependencyMappingFromMessageKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResourceDependencyMappingFromMessageKeyRequest();
    message.message_key = object.message_key ?? "";
    return message;
  }
};
var ResourceDependencyMappingFromMessageKeyResponse = {
  $type: "cosmos.accesscontrol_x.v1beta1.ResourceDependencyMappingFromMessageKeyResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.message_dependency_mapping !== void 0) {
      MessageDependencyMapping.encode(message.message_dependency_mapping, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResourceDependencyMappingFromMessageKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message_dependency_mapping = MessageDependencyMapping.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message_dependency_mapping: isSet14(object.message_dependency_mapping) ? MessageDependencyMapping.fromJSON(object.message_dependency_mapping) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.message_dependency_mapping !== void 0) {
      obj.message_dependency_mapping = MessageDependencyMapping.toJSON(message.message_dependency_mapping);
    }
    return obj;
  },
  create(base) {
    return ResourceDependencyMappingFromMessageKeyResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResourceDependencyMappingFromMessageKeyResponse();
    message.message_dependency_mapping = object.message_dependency_mapping !== void 0 && object.message_dependency_mapping !== null ? MessageDependencyMapping.fromPartial(object.message_dependency_mapping) : void 0;
    return message;
  }
};
var WasmDependencyMappingRequest = {
  $type: "cosmos.accesscontrol_x.v1beta1.WasmDependencyMappingRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.contract_address !== "") {
      writer.uint32(10).string(message.contract_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseWasmDependencyMappingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.contract_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { contract_address: isSet14(object.contract_address) ? globalThis.String(object.contract_address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    return obj;
  },
  create(base) {
    return WasmDependencyMappingRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseWasmDependencyMappingRequest();
    message.contract_address = object.contract_address ?? "";
    return message;
  }
};
var WasmDependencyMappingResponse = {
  $type: "cosmos.accesscontrol_x.v1beta1.WasmDependencyMappingResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.wasm_dependency_mapping !== void 0) {
      WasmDependencyMapping.encode(message.wasm_dependency_mapping, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseWasmDependencyMappingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.wasm_dependency_mapping = WasmDependencyMapping.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      wasm_dependency_mapping: isSet14(object.wasm_dependency_mapping) ? WasmDependencyMapping.fromJSON(object.wasm_dependency_mapping) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.wasm_dependency_mapping !== void 0) {
      obj.wasm_dependency_mapping = WasmDependencyMapping.toJSON(message.wasm_dependency_mapping);
    }
    return obj;
  },
  create(base) {
    return WasmDependencyMappingResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseWasmDependencyMappingResponse();
    message.wasm_dependency_mapping = object.wasm_dependency_mapping !== void 0 && object.wasm_dependency_mapping !== null ? WasmDependencyMapping.fromPartial(object.wasm_dependency_mapping) : void 0;
    return message;
  }
};
var ListResourceDependencyMappingRequest = {
  $type: "cosmos.accesscontrol_x.v1beta1.ListResourceDependencyMappingRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseListResourceDependencyMappingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return ListResourceDependencyMappingRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseListResourceDependencyMappingRequest();
    return message;
  }
};
var ListResourceDependencyMappingResponse = {
  $type: "cosmos.accesscontrol_x.v1beta1.ListResourceDependencyMappingResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.message_dependency_mapping_list) {
      MessageDependencyMapping.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseListResourceDependencyMappingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message_dependency_mapping_list.push(MessageDependencyMapping.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message_dependency_mapping_list: globalThis.Array.isArray(object == null ? void 0 : object.message_dependency_mapping_list) ? object.message_dependency_mapping_list.map((e) => MessageDependencyMapping.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.message_dependency_mapping_list) == null ? void 0 : _a.length) {
      obj.message_dependency_mapping_list = message.message_dependency_mapping_list.map((e) => MessageDependencyMapping.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ListResourceDependencyMappingResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseListResourceDependencyMappingResponse();
    message.message_dependency_mapping_list = ((_a = object.message_dependency_mapping_list) == null ? void 0 : _a.map((e) => MessageDependencyMapping.fromPartial(e))) || [];
    return message;
  }
};
var ListWasmDependencyMappingRequest = {
  $type: "cosmos.accesscontrol_x.v1beta1.ListWasmDependencyMappingRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseListWasmDependencyMappingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return ListWasmDependencyMappingRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseListWasmDependencyMappingRequest();
    return message;
  }
};
var ListWasmDependencyMappingResponse = {
  $type: "cosmos.accesscontrol_x.v1beta1.ListWasmDependencyMappingResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.wasm_dependency_mapping_list) {
      WasmDependencyMapping.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseListWasmDependencyMappingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.wasm_dependency_mapping_list.push(WasmDependencyMapping.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      wasm_dependency_mapping_list: globalThis.Array.isArray(object == null ? void 0 : object.wasm_dependency_mapping_list) ? object.wasm_dependency_mapping_list.map((e) => WasmDependencyMapping.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.wasm_dependency_mapping_list) == null ? void 0 : _a.length) {
      obj.wasm_dependency_mapping_list = message.wasm_dependency_mapping_list.map((e) => WasmDependencyMapping.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ListWasmDependencyMappingResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseListWasmDependencyMappingResponse();
    message.wasm_dependency_mapping_list = ((_a = object.wasm_dependency_mapping_list) == null ? void 0 : _a.map((e) => WasmDependencyMapping.fromPartial(e))) || [];
    return message;
  }
};
function createBaseQueryParamsRequest() {
  return {};
}
function createBaseQueryParamsResponse() {
  return { params: void 0 };
}
function createBaseResourceDependencyMappingFromMessageKeyRequest() {
  return { message_key: "" };
}
function createBaseResourceDependencyMappingFromMessageKeyResponse() {
  return { message_dependency_mapping: void 0 };
}
function createBaseWasmDependencyMappingRequest() {
  return { contract_address: "" };
}
function createBaseWasmDependencyMappingResponse() {
  return { wasm_dependency_mapping: void 0 };
}
function createBaseListResourceDependencyMappingRequest() {
  return {};
}
function createBaseListResourceDependencyMappingResponse() {
  return { message_dependency_mapping_list: [] };
}
function createBaseListWasmDependencyMappingRequest() {
  return {};
}
function createBaseListWasmDependencyMappingResponse() {
  return { wasm_dependency_mapping_list: [] };
}
function isSet14(value) {
  return value !== null && value !== void 0;
}
var registry14 = [
  ["/cosmos.accesscontrol_x.v1beta1.QueryParamsRequest", QueryParamsRequest],
  ["/cosmos.accesscontrol_x.v1beta1.QueryParamsResponse", QueryParamsResponse],
  ["/cosmos.accesscontrol_x.v1beta1.ResourceDependencyMappingFromMessageKeyRequest", ResourceDependencyMappingFromMessageKeyRequest],
  ["/cosmos.accesscontrol_x.v1beta1.ResourceDependencyMappingFromMessageKeyResponse", ResourceDependencyMappingFromMessageKeyResponse],
  ["/cosmos.accesscontrol_x.v1beta1.WasmDependencyMappingRequest", WasmDependencyMappingRequest],
  ["/cosmos.accesscontrol_x.v1beta1.WasmDependencyMappingResponse", WasmDependencyMappingResponse],
  ["/cosmos.accesscontrol_x.v1beta1.ListResourceDependencyMappingRequest", ListResourceDependencyMappingRequest],
  ["/cosmos.accesscontrol_x.v1beta1.ListResourceDependencyMappingResponse", ListResourceDependencyMappingResponse],
  ["/cosmos.accesscontrol_x.v1beta1.ListWasmDependencyMappingRequest", ListWasmDependencyMappingRequest],
  ["/cosmos.accesscontrol_x.v1beta1.ListWasmDependencyMappingResponse", ListWasmDependencyMappingResponse]
];
var aminoConverters14 = {
  "/cosmos.accesscontrol_x.v1beta1.QueryParamsRequest": {
    aminoType: "cosmos-sdk/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol_x.v1beta1.QueryParamsResponse": {
    aminoType: "cosmos-sdk/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol_x.v1beta1.ResourceDependencyMappingFromMessageKeyRequest": {
    aminoType: "cosmos-sdk/ResourceDependencyMappingFromMessageKeyRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol_x.v1beta1.ResourceDependencyMappingFromMessageKeyResponse": {
    aminoType: "cosmos-sdk/ResourceDependencyMappingFromMessageKeyResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol_x.v1beta1.WasmDependencyMappingRequest": {
    aminoType: "cosmos-sdk/WasmDependencyMappingRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol_x.v1beta1.WasmDependencyMappingResponse": {
    aminoType: "cosmos-sdk/WasmDependencyMappingResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol_x.v1beta1.ListResourceDependencyMappingRequest": {
    aminoType: "cosmos-sdk/ListResourceDependencyMappingRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol_x.v1beta1.ListResourceDependencyMappingResponse": {
    aminoType: "cosmos-sdk/ListResourceDependencyMappingResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol_x.v1beta1.ListWasmDependencyMappingRequest": {
    aminoType: "cosmos-sdk/ListWasmDependencyMappingRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol_x.v1beta1.ListWasmDependencyMappingResponse": {
    aminoType: "cosmos-sdk/ListWasmDependencyMappingResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/accesscontrol_x/tx.js
var RegisterWasmDependencyJSONFile = {
  $type: "cosmos.accesscontrol_x.v1beta1.RegisterWasmDependencyJSONFile",
  encode(message, writer = new BinaryWriter()) {
    if (message.wasm_dependency_mapping !== void 0) {
      WasmDependencyMapping.encode(message.wasm_dependency_mapping, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRegisterWasmDependencyJSONFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.wasm_dependency_mapping = WasmDependencyMapping.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      wasm_dependency_mapping: isSet15(object.wasm_dependency_mapping) ? WasmDependencyMapping.fromJSON(object.wasm_dependency_mapping) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.wasm_dependency_mapping !== void 0) {
      obj.wasm_dependency_mapping = WasmDependencyMapping.toJSON(message.wasm_dependency_mapping);
    }
    return obj;
  },
  create(base) {
    return RegisterWasmDependencyJSONFile.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRegisterWasmDependencyJSONFile();
    message.wasm_dependency_mapping = object.wasm_dependency_mapping !== void 0 && object.wasm_dependency_mapping !== null ? WasmDependencyMapping.fromPartial(object.wasm_dependency_mapping) : void 0;
    return message;
  }
};
var MsgRegisterWasmDependency = {
  $type: "cosmos.accesscontrol_x.v1beta1.MsgRegisterWasmDependency",
  encode(message, writer = new BinaryWriter()) {
    if (message.from_address !== "") {
      writer.uint32(10).string(message.from_address);
    }
    if (message.wasm_dependency_mapping !== void 0) {
      WasmDependencyMapping.encode(message.wasm_dependency_mapping, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterWasmDependency();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.from_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.wasm_dependency_mapping = WasmDependencyMapping.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      from_address: isSet15(object.from_address) ? globalThis.String(object.from_address) : "",
      wasm_dependency_mapping: isSet15(object.wasm_dependency_mapping) ? WasmDependencyMapping.fromJSON(object.wasm_dependency_mapping) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.from_address !== "") {
      obj.from_address = message.from_address;
    }
    if (message.wasm_dependency_mapping !== void 0) {
      obj.wasm_dependency_mapping = WasmDependencyMapping.toJSON(message.wasm_dependency_mapping);
    }
    return obj;
  },
  create(base) {
    return MsgRegisterWasmDependency.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgRegisterWasmDependency();
    message.from_address = object.from_address ?? "";
    message.wasm_dependency_mapping = object.wasm_dependency_mapping !== void 0 && object.wasm_dependency_mapping !== null ? WasmDependencyMapping.fromPartial(object.wasm_dependency_mapping) : void 0;
    return message;
  }
};
var MsgRegisterWasmDependencyResponse = {
  $type: "cosmos.accesscontrol_x.v1beta1.MsgRegisterWasmDependencyResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterWasmDependencyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgRegisterWasmDependencyResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgRegisterWasmDependencyResponse();
    return message;
  }
};
function createBaseRegisterWasmDependencyJSONFile() {
  return { wasm_dependency_mapping: void 0 };
}
function createBaseMsgRegisterWasmDependency() {
  return { from_address: "", wasm_dependency_mapping: void 0 };
}
function createBaseMsgRegisterWasmDependencyResponse() {
  return {};
}
function isSet15(value) {
  return value !== null && value !== void 0;
}
var registry15 = [
  ["/cosmos.accesscontrol_x.v1beta1.RegisterWasmDependencyJSONFile", RegisterWasmDependencyJSONFile],
  ["/cosmos.accesscontrol_x.v1beta1.MsgRegisterWasmDependency", MsgRegisterWasmDependency],
  ["/cosmos.accesscontrol_x.v1beta1.MsgRegisterWasmDependencyResponse", MsgRegisterWasmDependencyResponse]
];
var aminoConverters15 = {
  "/cosmos.accesscontrol_x.v1beta1.RegisterWasmDependencyJSONFile": {
    aminoType: "cosmos-sdk/RegisterWasmDependencyJSONFile",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol_x.v1beta1.MsgRegisterWasmDependency": {
    aminoType: "cosmos-sdk/MsgRegisterWasmDependency",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.accesscontrol_x.v1beta1.MsgRegisterWasmDependencyResponse": {
    aminoType: "cosmos-sdk/MsgRegisterWasmDependencyResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/auth/v1beta1/index.js
var v1beta1_exports = {};
__export(v1beta1_exports, {
  BaseAccount: () => BaseAccount,
  GenesisState: () => GenesisState3,
  ModuleAccount: () => ModuleAccount,
  Params: () => Params3,
  QueryAccountRequest: () => QueryAccountRequest,
  QueryAccountResponse: () => QueryAccountResponse,
  QueryAccountsRequest: () => QueryAccountsRequest,
  QueryAccountsResponse: () => QueryAccountsResponse,
  QueryNextAccountNumberRequest: () => QueryNextAccountNumberRequest,
  QueryNextAccountNumberResponse: () => QueryNextAccountNumberResponse,
  QueryParamsRequest: () => QueryParamsRequest2,
  QueryParamsResponse: () => QueryParamsResponse2
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/google/protobuf/any.js
var Any = {
  $type: "google.protobuf.Any",
  encode(message, writer = new BinaryWriter()) {
    if (message.type_url !== "") {
      writer.uint32(10).string(message.type_url);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAny();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.type_url = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type_url: isSet16(object.type_url) ? globalThis.String(object.type_url) : "",
      value: isSet16(object.value) ? bytesFromBase649(object.value) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.type_url !== "") {
      obj.type_url = message.type_url;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes9(message.value);
    }
    return obj;
  },
  create(base) {
    return Any.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAny();
    message.type_url = object.type_url ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  }
};
function createBaseAny() {
  return { type_url: "", value: new Uint8Array(0) };
}
function bytesFromBase649(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes9(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet16(value) {
  return value !== null && value !== void 0;
}
var registry16 = [["/google.protobuf.Any", Any]];
var aminoConverters16 = {
  "/google.protobuf.Any": {
    aminoType: "google.protobuf.Any",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/auth/v1beta1/auth.js
var BaseAccount = {
  $type: "cosmos.auth.v1beta1.BaseAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.pub_key !== void 0) {
      Any.encode(message.pub_key, writer.uint32(18).fork()).join();
    }
    if (message.account_number !== 0) {
      writer.uint32(24).uint64(message.account_number);
    }
    if (message.sequence !== 0) {
      writer.uint32(32).uint64(message.sequence);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pub_key = Any.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.account_number = longToNumber6(reader.uint64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.sequence = longToNumber6(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet17(object.address) ? globalThis.String(object.address) : "",
      pub_key: isSet17(object.pub_key) ? Any.fromJSON(object.pub_key) : void 0,
      account_number: isSet17(object.account_number) ? globalThis.Number(object.account_number) : 0,
      sequence: isSet17(object.sequence) ? globalThis.Number(object.sequence) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.pub_key !== void 0) {
      obj.pub_key = Any.toJSON(message.pub_key);
    }
    if (message.account_number !== 0) {
      obj.account_number = Math.round(message.account_number);
    }
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    return obj;
  },
  create(base) {
    return BaseAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBaseAccount();
    message.address = object.address ?? "";
    message.pub_key = object.pub_key !== void 0 && object.pub_key !== null ? Any.fromPartial(object.pub_key) : void 0;
    message.account_number = object.account_number ?? 0;
    message.sequence = object.sequence ?? 0;
    return message;
  }
};
var ModuleAccount = {
  $type: "cosmos.auth.v1beta1.ModuleAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.base_account !== void 0) {
      BaseAccount.encode(message.base_account, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.permissions) {
      writer.uint32(26).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseModuleAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.base_account = BaseAccount.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.permissions.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      base_account: isSet17(object.base_account) ? BaseAccount.fromJSON(object.base_account) : void 0,
      name: isSet17(object.name) ? globalThis.String(object.name) : "",
      permissions: globalThis.Array.isArray(object == null ? void 0 : object.permissions) ? object.permissions.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.base_account !== void 0) {
      obj.base_account = BaseAccount.toJSON(message.base_account);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if ((_a = message.permissions) == null ? void 0 : _a.length) {
      obj.permissions = message.permissions;
    }
    return obj;
  },
  create(base) {
    return ModuleAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseModuleAccount();
    message.base_account = object.base_account !== void 0 && object.base_account !== null ? BaseAccount.fromPartial(object.base_account) : void 0;
    message.name = object.name ?? "";
    message.permissions = ((_a = object.permissions) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var Params3 = {
  $type: "cosmos.auth.v1beta1.Params",
  encode(message, writer = new BinaryWriter()) {
    if (message.max_memo_characters !== 0) {
      writer.uint32(8).uint64(message.max_memo_characters);
    }
    if (message.tx_sig_limit !== 0) {
      writer.uint32(16).uint64(message.tx_sig_limit);
    }
    if (message.tx_size_cost_per_byte !== 0) {
      writer.uint32(24).uint64(message.tx_size_cost_per_byte);
    }
    if (message.sig_verify_cost_ed25519 !== 0) {
      writer.uint32(32).uint64(message.sig_verify_cost_ed25519);
    }
    if (message.sig_verify_cost_secp256k1 !== 0) {
      writer.uint32(40).uint64(message.sig_verify_cost_secp256k1);
    }
    if (message.disable_seqno_check !== false) {
      writer.uint32(48).bool(message.disable_seqno_check);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.max_memo_characters = longToNumber6(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.tx_sig_limit = longToNumber6(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.tx_size_cost_per_byte = longToNumber6(reader.uint64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.sig_verify_cost_ed25519 = longToNumber6(reader.uint64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.sig_verify_cost_secp256k1 = longToNumber6(reader.uint64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.disable_seqno_check = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      max_memo_characters: isSet17(object.max_memo_characters) ? globalThis.Number(object.max_memo_characters) : 0,
      tx_sig_limit: isSet17(object.tx_sig_limit) ? globalThis.Number(object.tx_sig_limit) : 0,
      tx_size_cost_per_byte: isSet17(object.tx_size_cost_per_byte) ? globalThis.Number(object.tx_size_cost_per_byte) : 0,
      sig_verify_cost_ed25519: isSet17(object.sig_verify_cost_ed25519) ? globalThis.Number(object.sig_verify_cost_ed25519) : 0,
      sig_verify_cost_secp256k1: isSet17(object.sig_verify_cost_secp256k1) ? globalThis.Number(object.sig_verify_cost_secp256k1) : 0,
      disable_seqno_check: isSet17(object.disable_seqno_check) ? globalThis.Boolean(object.disable_seqno_check) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.max_memo_characters !== 0) {
      obj.max_memo_characters = Math.round(message.max_memo_characters);
    }
    if (message.tx_sig_limit !== 0) {
      obj.tx_sig_limit = Math.round(message.tx_sig_limit);
    }
    if (message.tx_size_cost_per_byte !== 0) {
      obj.tx_size_cost_per_byte = Math.round(message.tx_size_cost_per_byte);
    }
    if (message.sig_verify_cost_ed25519 !== 0) {
      obj.sig_verify_cost_ed25519 = Math.round(message.sig_verify_cost_ed25519);
    }
    if (message.sig_verify_cost_secp256k1 !== 0) {
      obj.sig_verify_cost_secp256k1 = Math.round(message.sig_verify_cost_secp256k1);
    }
    if (message.disable_seqno_check !== false) {
      obj.disable_seqno_check = message.disable_seqno_check;
    }
    return obj;
  },
  create(base) {
    return Params3.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseParams3();
    message.max_memo_characters = object.max_memo_characters ?? 0;
    message.tx_sig_limit = object.tx_sig_limit ?? 0;
    message.tx_size_cost_per_byte = object.tx_size_cost_per_byte ?? 0;
    message.sig_verify_cost_ed25519 = object.sig_verify_cost_ed25519 ?? 0;
    message.sig_verify_cost_secp256k1 = object.sig_verify_cost_secp256k1 ?? 0;
    message.disable_seqno_check = object.disable_seqno_check ?? false;
    return message;
  }
};
function createBaseBaseAccount() {
  return { address: "", pub_key: void 0, account_number: 0, sequence: 0 };
}
function createBaseModuleAccount() {
  return { base_account: void 0, name: "", permissions: [] };
}
function createBaseParams3() {
  return {
    max_memo_characters: 0,
    tx_sig_limit: 0,
    tx_size_cost_per_byte: 0,
    sig_verify_cost_ed25519: 0,
    sig_verify_cost_secp256k1: 0,
    disable_seqno_check: false
  };
}
function longToNumber6(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet17(value) {
  return value !== null && value !== void 0;
}
var registry17 = [
  ["/cosmos.auth.v1beta1.BaseAccount", BaseAccount],
  ["/cosmos.auth.v1beta1.ModuleAccount", ModuleAccount],
  ["/cosmos.auth.v1beta1.Params", Params3]
];
var aminoConverters17 = {
  "/cosmos.auth.v1beta1.BaseAccount": {
    aminoType: "cosmos-sdk/BaseAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.auth.v1beta1.ModuleAccount": {
    aminoType: "cosmos-sdk/ModuleAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.auth.v1beta1.Params": {
    aminoType: "cosmos-sdk/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/auth/v1beta1/genesis.js
var GenesisState3 = {
  $type: "cosmos.auth.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params3.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.accounts) {
      Any.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params3.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.accounts.push(Any.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet18(object.params) ? Params3.fromJSON(object.params) : void 0,
      accounts: globalThis.Array.isArray(object == null ? void 0 : object.accounts) ? object.accounts.map((e) => Any.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params3.toJSON(message.params);
    }
    if ((_a = message.accounts) == null ? void 0 : _a.length) {
      obj.accounts = message.accounts.map((e) => Any.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState3.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGenesisState3();
    message.params = object.params !== void 0 && object.params !== null ? Params3.fromPartial(object.params) : void 0;
    message.accounts = ((_a = object.accounts) == null ? void 0 : _a.map((e) => Any.fromPartial(e))) || [];
    return message;
  }
};
function createBaseGenesisState3() {
  return { params: void 0, accounts: [] };
}
function isSet18(value) {
  return value !== null && value !== void 0;
}
var registry18 = [["/cosmos.auth.v1beta1.GenesisState", GenesisState3]];
var aminoConverters18 = {
  "/cosmos.auth.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/auth/v1beta1/query.js
var QueryAccountsRequest = {
  $type: "cosmos.auth.v1beta1.QueryAccountsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { pagination: isSet19(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryAccountsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryAccountsRequest();
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryAccountsResponse = {
  $type: "cosmos.auth.v1beta1.QueryAccountsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.accounts) {
      Any.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.accounts.push(Any.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      accounts: globalThis.Array.isArray(object == null ? void 0 : object.accounts) ? object.accounts.map((e) => Any.fromJSON(e)) : [],
      pagination: isSet19(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.accounts) == null ? void 0 : _a.length) {
      obj.accounts = message.accounts.map((e) => Any.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryAccountsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryAccountsResponse();
    message.accounts = ((_a = object.accounts) == null ? void 0 : _a.map((e) => Any.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryAccountRequest = {
  $type: "cosmos.auth.v1beta1.QueryAccountRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { address: isSet19(object.address) ? globalThis.String(object.address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },
  create(base) {
    return QueryAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryAccountRequest();
    message.address = object.address ?? "";
    return message;
  }
};
var QueryAccountResponse = {
  $type: "cosmos.auth.v1beta1.QueryAccountResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.account !== void 0) {
      Any.encode(message.account, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.account = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { account: isSet19(object.account) ? Any.fromJSON(object.account) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.account !== void 0) {
      obj.account = Any.toJSON(message.account);
    }
    return obj;
  },
  create(base) {
    return QueryAccountResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryAccountResponse();
    message.account = object.account !== void 0 && object.account !== null ? Any.fromPartial(object.account) : void 0;
    return message;
  }
};
var QueryParamsRequest2 = {
  $type: "cosmos.auth.v1beta1.QueryParamsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryParamsRequest2.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest2();
    return message;
  }
};
var QueryParamsResponse2 = {
  $type: "cosmos.auth.v1beta1.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params3.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params3.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { params: isSet19(object.params) ? Params3.fromJSON(object.params) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params3.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse2();
    message.params = object.params !== void 0 && object.params !== null ? Params3.fromPartial(object.params) : void 0;
    return message;
  }
};
var QueryNextAccountNumberRequest = {
  $type: "cosmos.auth.v1beta1.QueryNextAccountNumberRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryNextAccountNumberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryNextAccountNumberRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryNextAccountNumberRequest();
    return message;
  }
};
var QueryNextAccountNumberResponse = {
  $type: "cosmos.auth.v1beta1.QueryNextAccountNumberResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.count !== 0) {
      writer.uint32(8).uint64(message.count);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryNextAccountNumberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.count = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { count: isSet19(object.count) ? globalThis.Number(object.count) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },
  create(base) {
    return QueryNextAccountNumberResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryNextAccountNumberResponse();
    message.count = object.count ?? 0;
    return message;
  }
};
function createBaseQueryAccountsRequest() {
  return { pagination: void 0 };
}
function createBaseQueryAccountsResponse() {
  return { accounts: [], pagination: void 0 };
}
function createBaseQueryAccountRequest() {
  return { address: "" };
}
function createBaseQueryAccountResponse() {
  return { account: void 0 };
}
function createBaseQueryParamsRequest2() {
  return {};
}
function createBaseQueryParamsResponse2() {
  return { params: void 0 };
}
function createBaseQueryNextAccountNumberRequest() {
  return {};
}
function createBaseQueryNextAccountNumberResponse() {
  return { count: 0 };
}
function longToNumber7(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet19(value) {
  return value !== null && value !== void 0;
}
var registry19 = [
  ["/cosmos.auth.v1beta1.QueryAccountsRequest", QueryAccountsRequest],
  ["/cosmos.auth.v1beta1.QueryAccountsResponse", QueryAccountsResponse],
  ["/cosmos.auth.v1beta1.QueryAccountRequest", QueryAccountRequest],
  ["/cosmos.auth.v1beta1.QueryAccountResponse", QueryAccountResponse],
  ["/cosmos.auth.v1beta1.QueryParamsRequest", QueryParamsRequest2],
  ["/cosmos.auth.v1beta1.QueryParamsResponse", QueryParamsResponse2],
  ["/cosmos.auth.v1beta1.QueryNextAccountNumberRequest", QueryNextAccountNumberRequest],
  ["/cosmos.auth.v1beta1.QueryNextAccountNumberResponse", QueryNextAccountNumberResponse]
];
var aminoConverters19 = {
  "/cosmos.auth.v1beta1.QueryAccountsRequest": {
    aminoType: "cosmos-sdk/QueryAccountsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.auth.v1beta1.QueryAccountsResponse": {
    aminoType: "cosmos-sdk/QueryAccountsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.auth.v1beta1.QueryAccountRequest": {
    aminoType: "cosmos-sdk/QueryAccountRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.auth.v1beta1.QueryAccountResponse": {
    aminoType: "cosmos-sdk/QueryAccountResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.auth.v1beta1.QueryParamsRequest": {
    aminoType: "cosmos-sdk/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.auth.v1beta1.QueryParamsResponse": {
    aminoType: "cosmos-sdk/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.auth.v1beta1.QueryNextAccountNumberRequest": {
    aminoType: "cosmos-sdk/QueryNextAccountNumberRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.auth.v1beta1.QueryNextAccountNumberResponse": {
    aminoType: "cosmos-sdk/QueryNextAccountNumberResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/authz/v1beta1/index.js
var v1beta1_exports2 = {};
__export(v1beta1_exports2, {
  EventGrant: () => EventGrant,
  EventRevoke: () => EventRevoke,
  GenericAuthorization: () => GenericAuthorization,
  GenesisState: () => GenesisState4,
  Grant: () => Grant,
  GrantAuthorization: () => GrantAuthorization,
  MsgExec: () => MsgExec,
  MsgExecResponse: () => MsgExecResponse,
  MsgGrant: () => MsgGrant,
  MsgGrantResponse: () => MsgGrantResponse,
  MsgRevoke: () => MsgRevoke,
  MsgRevokeResponse: () => MsgRevokeResponse,
  QueryGranteeGrantsRequest: () => QueryGranteeGrantsRequest,
  QueryGranteeGrantsResponse: () => QueryGranteeGrantsResponse,
  QueryGranterGrantsRequest: () => QueryGranterGrantsRequest,
  QueryGranterGrantsResponse: () => QueryGranterGrantsResponse,
  QueryGrantsRequest: () => QueryGrantsRequest,
  QueryGrantsResponse: () => QueryGrantsResponse
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/google/protobuf/timestamp.js
var Timestamp = {
  $type: "google.protobuf.Timestamp",
  encode(message, writer = new BinaryWriter()) {
    if (message.seconds !== 0) {
      writer.uint32(8).int64(message.seconds);
    }
    if (message.nanos !== 0) {
      writer.uint32(16).int32(message.nanos);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTimestamp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.seconds = longToNumber8(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.nanos = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      seconds: isSet20(object.seconds) ? globalThis.Number(object.seconds) : 0,
      nanos: isSet20(object.nanos) ? globalThis.Number(object.nanos) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.seconds !== 0) {
      obj.seconds = Math.round(message.seconds);
    }
    if (message.nanos !== 0) {
      obj.nanos = Math.round(message.nanos);
    }
    return obj;
  },
  create(base) {
    return Timestamp.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTimestamp();
    message.seconds = object.seconds ?? 0;
    message.nanos = object.nanos ?? 0;
    return message;
  }
};
function createBaseTimestamp() {
  return { seconds: 0, nanos: 0 };
}
function longToNumber8(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet20(value) {
  return value !== null && value !== void 0;
}
var registry20 = [["/google.protobuf.Timestamp", Timestamp]];
var aminoConverters20 = {
  "/google.protobuf.Timestamp": {
    aminoType: "google.protobuf.Timestamp",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/authz/v1beta1/authz.js
var GenericAuthorization = {
  $type: "cosmos.authz.v1beta1.GenericAuthorization",
  encode(message, writer = new BinaryWriter()) {
    if (message.msg !== "") {
      writer.uint32(10).string(message.msg);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenericAuthorization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.msg = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { msg: isSet21(object.msg) ? globalThis.String(object.msg) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    return obj;
  },
  create(base) {
    return GenericAuthorization.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGenericAuthorization();
    message.msg = object.msg ?? "";
    return message;
  }
};
var Grant = {
  $type: "cosmos.authz.v1beta1.Grant",
  encode(message, writer = new BinaryWriter()) {
    if (message.authorization !== void 0) {
      Any.encode(message.authorization, writer.uint32(10).fork()).join();
    }
    if (message.expiration !== void 0) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.authorization = Any.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      authorization: isSet21(object.authorization) ? Any.fromJSON(object.authorization) : void 0,
      expiration: isSet21(object.expiration) ? fromJsonTimestamp(object.expiration) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.authorization !== void 0) {
      obj.authorization = Any.toJSON(message.authorization);
    }
    if (message.expiration !== void 0) {
      obj.expiration = message.expiration.toISOString();
    }
    return obj;
  },
  create(base) {
    return Grant.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGrant();
    message.authorization = object.authorization !== void 0 && object.authorization !== null ? Any.fromPartial(object.authorization) : void 0;
    message.expiration = object.expiration ?? void 0;
    return message;
  }
};
var GrantAuthorization = {
  $type: "cosmos.authz.v1beta1.GrantAuthorization",
  encode(message, writer = new BinaryWriter()) {
    if (message.granter !== "") {
      writer.uint32(10).string(message.granter);
    }
    if (message.grantee !== "") {
      writer.uint32(18).string(message.grantee);
    }
    if (message.authorization !== void 0) {
      Any.encode(message.authorization, writer.uint32(26).fork()).join();
    }
    if (message.expiration !== void 0) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGrantAuthorization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.grantee = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.authorization = Any.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      granter: isSet21(object.granter) ? globalThis.String(object.granter) : "",
      grantee: isSet21(object.grantee) ? globalThis.String(object.grantee) : "",
      authorization: isSet21(object.authorization) ? Any.fromJSON(object.authorization) : void 0,
      expiration: isSet21(object.expiration) ? fromJsonTimestamp(object.expiration) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    if (message.authorization !== void 0) {
      obj.authorization = Any.toJSON(message.authorization);
    }
    if (message.expiration !== void 0) {
      obj.expiration = message.expiration.toISOString();
    }
    return obj;
  },
  create(base) {
    return GrantAuthorization.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGrantAuthorization();
    message.granter = object.granter ?? "";
    message.grantee = object.grantee ?? "";
    message.authorization = object.authorization !== void 0 && object.authorization !== null ? Any.fromPartial(object.authorization) : void 0;
    message.expiration = object.expiration ?? void 0;
    return message;
  }
};
function createBaseGenericAuthorization() {
  return { msg: "" };
}
function createBaseGrant() {
  return { authorization: void 0, expiration: void 0 };
}
function createBaseGrantAuthorization() {
  return { granter: "", grantee: "", authorization: void 0, expiration: void 0 };
}
function toTimestamp(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}
function isSet21(value) {
  return value !== null && value !== void 0;
}
var registry21 = [
  ["/cosmos.authz.v1beta1.GenericAuthorization", GenericAuthorization],
  ["/cosmos.authz.v1beta1.Grant", Grant],
  ["/cosmos.authz.v1beta1.GrantAuthorization", GrantAuthorization]
];
var aminoConverters21 = {
  "/cosmos.authz.v1beta1.GenericAuthorization": {
    aminoType: "cosmos-sdk/GenericAuthorization",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.Grant": {
    aminoType: "cosmos-sdk/Grant",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.GrantAuthorization": {
    aminoType: "cosmos-sdk/GrantAuthorization",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/authz/v1beta1/event.js
var EventGrant = {
  $type: "cosmos.authz.v1beta1.EventGrant",
  encode(message, writer = new BinaryWriter()) {
    if (message.msg_type_url !== "") {
      writer.uint32(18).string(message.msg_type_url);
    }
    if (message.granter !== "") {
      writer.uint32(26).string(message.granter);
    }
    if (message.grantee !== "") {
      writer.uint32(34).string(message.grantee);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEventGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }
          message.msg_type_url = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.grantee = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      msg_type_url: isSet22(object.msg_type_url) ? globalThis.String(object.msg_type_url) : "",
      granter: isSet22(object.granter) ? globalThis.String(object.granter) : "",
      grantee: isSet22(object.grantee) ? globalThis.String(object.grantee) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.msg_type_url !== "") {
      obj.msg_type_url = message.msg_type_url;
    }
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    return obj;
  },
  create(base) {
    return EventGrant.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEventGrant();
    message.msg_type_url = object.msg_type_url ?? "";
    message.granter = object.granter ?? "";
    message.grantee = object.grantee ?? "";
    return message;
  }
};
var EventRevoke = {
  $type: "cosmos.authz.v1beta1.EventRevoke",
  encode(message, writer = new BinaryWriter()) {
    if (message.msg_type_url !== "") {
      writer.uint32(18).string(message.msg_type_url);
    }
    if (message.granter !== "") {
      writer.uint32(26).string(message.granter);
    }
    if (message.grantee !== "") {
      writer.uint32(34).string(message.grantee);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEventRevoke();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }
          message.msg_type_url = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.grantee = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      msg_type_url: isSet22(object.msg_type_url) ? globalThis.String(object.msg_type_url) : "",
      granter: isSet22(object.granter) ? globalThis.String(object.granter) : "",
      grantee: isSet22(object.grantee) ? globalThis.String(object.grantee) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.msg_type_url !== "") {
      obj.msg_type_url = message.msg_type_url;
    }
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    return obj;
  },
  create(base) {
    return EventRevoke.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEventRevoke();
    message.msg_type_url = object.msg_type_url ?? "";
    message.granter = object.granter ?? "";
    message.grantee = object.grantee ?? "";
    return message;
  }
};
function createBaseEventGrant() {
  return { msg_type_url: "", granter: "", grantee: "" };
}
function createBaseEventRevoke() {
  return { msg_type_url: "", granter: "", grantee: "" };
}
function isSet22(value) {
  return value !== null && value !== void 0;
}
var registry22 = [
  ["/cosmos.authz.v1beta1.EventGrant", EventGrant],
  ["/cosmos.authz.v1beta1.EventRevoke", EventRevoke]
];
var aminoConverters22 = {
  "/cosmos.authz.v1beta1.EventGrant": {
    aminoType: "cosmos-sdk/EventGrant",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.EventRevoke": {
    aminoType: "cosmos-sdk/EventRevoke",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/authz/v1beta1/genesis.js
var GenesisState4 = {
  $type: "cosmos.authz.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.authorization) {
      GrantAuthorization.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState4();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.authorization.push(GrantAuthorization.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      authorization: globalThis.Array.isArray(object == null ? void 0 : object.authorization) ? object.authorization.map((e) => GrantAuthorization.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.authorization) == null ? void 0 : _a.length) {
      obj.authorization = message.authorization.map((e) => GrantAuthorization.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState4.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGenesisState4();
    message.authorization = ((_a = object.authorization) == null ? void 0 : _a.map((e) => GrantAuthorization.fromPartial(e))) || [];
    return message;
  }
};
function createBaseGenesisState4() {
  return { authorization: [] };
}
var registry23 = [["/cosmos.authz.v1beta1.GenesisState", GenesisState4]];
var aminoConverters23 = {
  "/cosmos.authz.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/authz/v1beta1/query.js
var QueryGrantsRequest = {
  $type: "cosmos.authz.v1beta1.QueryGrantsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.granter !== "") {
      writer.uint32(10).string(message.granter);
    }
    if (message.grantee !== "") {
      writer.uint32(18).string(message.grantee);
    }
    if (message.msg_type_url !== "") {
      writer.uint32(26).string(message.msg_type_url);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryGrantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.grantee = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.msg_type_url = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      granter: isSet23(object.granter) ? globalThis.String(object.granter) : "",
      grantee: isSet23(object.grantee) ? globalThis.String(object.grantee) : "",
      msg_type_url: isSet23(object.msg_type_url) ? globalThis.String(object.msg_type_url) : "",
      pagination: isSet23(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    if (message.msg_type_url !== "") {
      obj.msg_type_url = message.msg_type_url;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryGrantsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryGrantsRequest();
    message.granter = object.granter ?? "";
    message.grantee = object.grantee ?? "";
    message.msg_type_url = object.msg_type_url ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryGrantsResponse = {
  $type: "cosmos.authz.v1beta1.QueryGrantsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.grants) {
      Grant.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryGrantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.grants.push(Grant.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      grants: globalThis.Array.isArray(object == null ? void 0 : object.grants) ? object.grants.map((e) => Grant.fromJSON(e)) : [],
      pagination: isSet23(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.grants) == null ? void 0 : _a.length) {
      obj.grants = message.grants.map((e) => Grant.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryGrantsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryGrantsResponse();
    message.grants = ((_a = object.grants) == null ? void 0 : _a.map((e) => Grant.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryGranterGrantsRequest = {
  $type: "cosmos.authz.v1beta1.QueryGranterGrantsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.granter !== "") {
      writer.uint32(10).string(message.granter);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryGranterGrantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      granter: isSet23(object.granter) ? globalThis.String(object.granter) : "",
      pagination: isSet23(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryGranterGrantsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryGranterGrantsRequest();
    message.granter = object.granter ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryGranterGrantsResponse = {
  $type: "cosmos.authz.v1beta1.QueryGranterGrantsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.grants) {
      GrantAuthorization.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryGranterGrantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.grants.push(GrantAuthorization.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      grants: globalThis.Array.isArray(object == null ? void 0 : object.grants) ? object.grants.map((e) => GrantAuthorization.fromJSON(e)) : [],
      pagination: isSet23(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.grants) == null ? void 0 : _a.length) {
      obj.grants = message.grants.map((e) => GrantAuthorization.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryGranterGrantsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryGranterGrantsResponse();
    message.grants = ((_a = object.grants) == null ? void 0 : _a.map((e) => GrantAuthorization.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryGranteeGrantsRequest = {
  $type: "cosmos.authz.v1beta1.QueryGranteeGrantsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.grantee !== "") {
      writer.uint32(10).string(message.grantee);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryGranteeGrantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.grantee = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      grantee: isSet23(object.grantee) ? globalThis.String(object.grantee) : "",
      pagination: isSet23(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryGranteeGrantsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryGranteeGrantsRequest();
    message.grantee = object.grantee ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryGranteeGrantsResponse = {
  $type: "cosmos.authz.v1beta1.QueryGranteeGrantsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.grants) {
      GrantAuthorization.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryGranteeGrantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.grants.push(GrantAuthorization.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      grants: globalThis.Array.isArray(object == null ? void 0 : object.grants) ? object.grants.map((e) => GrantAuthorization.fromJSON(e)) : [],
      pagination: isSet23(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.grants) == null ? void 0 : _a.length) {
      obj.grants = message.grants.map((e) => GrantAuthorization.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryGranteeGrantsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryGranteeGrantsResponse();
    message.grants = ((_a = object.grants) == null ? void 0 : _a.map((e) => GrantAuthorization.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
function createBaseQueryGrantsRequest() {
  return { granter: "", grantee: "", msg_type_url: "", pagination: void 0 };
}
function createBaseQueryGrantsResponse() {
  return { grants: [], pagination: void 0 };
}
function createBaseQueryGranterGrantsRequest() {
  return { granter: "", pagination: void 0 };
}
function createBaseQueryGranterGrantsResponse() {
  return { grants: [], pagination: void 0 };
}
function createBaseQueryGranteeGrantsRequest() {
  return { grantee: "", pagination: void 0 };
}
function createBaseQueryGranteeGrantsResponse() {
  return { grants: [], pagination: void 0 };
}
function isSet23(value) {
  return value !== null && value !== void 0;
}
var registry24 = [
  ["/cosmos.authz.v1beta1.QueryGrantsRequest", QueryGrantsRequest],
  ["/cosmos.authz.v1beta1.QueryGrantsResponse", QueryGrantsResponse],
  ["/cosmos.authz.v1beta1.QueryGranterGrantsRequest", QueryGranterGrantsRequest],
  ["/cosmos.authz.v1beta1.QueryGranterGrantsResponse", QueryGranterGrantsResponse],
  ["/cosmos.authz.v1beta1.QueryGranteeGrantsRequest", QueryGranteeGrantsRequest],
  ["/cosmos.authz.v1beta1.QueryGranteeGrantsResponse", QueryGranteeGrantsResponse]
];
var aminoConverters24 = {
  "/cosmos.authz.v1beta1.QueryGrantsRequest": {
    aminoType: "cosmos-sdk/QueryGrantsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.QueryGrantsResponse": {
    aminoType: "cosmos-sdk/QueryGrantsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.QueryGranterGrantsRequest": {
    aminoType: "cosmos-sdk/QueryGranterGrantsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.QueryGranterGrantsResponse": {
    aminoType: "cosmos-sdk/QueryGranterGrantsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.QueryGranteeGrantsRequest": {
    aminoType: "cosmos-sdk/QueryGranteeGrantsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.QueryGranteeGrantsResponse": {
    aminoType: "cosmos-sdk/QueryGranteeGrantsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/authz/v1beta1/tx.js
var MsgGrant = {
  $type: "cosmos.authz.v1beta1.MsgGrant",
  encode(message, writer = new BinaryWriter()) {
    if (message.granter !== "") {
      writer.uint32(10).string(message.granter);
    }
    if (message.grantee !== "") {
      writer.uint32(18).string(message.grantee);
    }
    if (message.grant !== void 0) {
      Grant.encode(message.grant, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.grantee = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.grant = Grant.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      granter: isSet24(object.granter) ? globalThis.String(object.granter) : "",
      grantee: isSet24(object.grantee) ? globalThis.String(object.grantee) : "",
      grant: isSet24(object.grant) ? Grant.fromJSON(object.grant) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    if (message.grant !== void 0) {
      obj.grant = Grant.toJSON(message.grant);
    }
    return obj;
  },
  create(base) {
    return MsgGrant.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgGrant();
    message.granter = object.granter ?? "";
    message.grantee = object.grantee ?? "";
    message.grant = object.grant !== void 0 && object.grant !== null ? Grant.fromPartial(object.grant) : void 0;
    return message;
  }
};
var MsgExecResponse = {
  $type: "cosmos.authz.v1beta1.MsgExecResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.results) {
      writer.uint32(10).bytes(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgExecResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.results.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      results: globalThis.Array.isArray(object == null ? void 0 : object.results) ? object.results.map((e) => bytesFromBase6410(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.results) == null ? void 0 : _a.length) {
      obj.results = message.results.map((e) => base64FromBytes10(e));
    }
    return obj;
  },
  create(base) {
    return MsgExecResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgExecResponse();
    message.results = ((_a = object.results) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var MsgExec = {
  $type: "cosmos.authz.v1beta1.MsgExec",
  encode(message, writer = new BinaryWriter()) {
    if (message.grantee !== "") {
      writer.uint32(10).string(message.grantee);
    }
    for (const v of message.msgs) {
      Any.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgExec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.grantee = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.msgs.push(Any.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      grantee: isSet24(object.grantee) ? globalThis.String(object.grantee) : "",
      msgs: globalThis.Array.isArray(object == null ? void 0 : object.msgs) ? object.msgs.map((e) => Any.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    if ((_a = message.msgs) == null ? void 0 : _a.length) {
      obj.msgs = message.msgs.map((e) => Any.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return MsgExec.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgExec();
    message.grantee = object.grantee ?? "";
    message.msgs = ((_a = object.msgs) == null ? void 0 : _a.map((e) => Any.fromPartial(e))) || [];
    return message;
  }
};
var MsgGrantResponse = {
  $type: "cosmos.authz.v1beta1.MsgGrantResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgGrantResponse();
    return message;
  }
};
var MsgRevoke = {
  $type: "cosmos.authz.v1beta1.MsgRevoke",
  encode(message, writer = new BinaryWriter()) {
    if (message.granter !== "") {
      writer.uint32(10).string(message.granter);
    }
    if (message.grantee !== "") {
      writer.uint32(18).string(message.grantee);
    }
    if (message.msg_type_url !== "") {
      writer.uint32(26).string(message.msg_type_url);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgRevoke();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.grantee = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.msg_type_url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      granter: isSet24(object.granter) ? globalThis.String(object.granter) : "",
      grantee: isSet24(object.grantee) ? globalThis.String(object.grantee) : "",
      msg_type_url: isSet24(object.msg_type_url) ? globalThis.String(object.msg_type_url) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    if (message.msg_type_url !== "") {
      obj.msg_type_url = message.msg_type_url;
    }
    return obj;
  },
  create(base) {
    return MsgRevoke.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgRevoke();
    message.granter = object.granter ?? "";
    message.grantee = object.grantee ?? "";
    message.msg_type_url = object.msg_type_url ?? "";
    return message;
  }
};
var MsgRevokeResponse = {
  $type: "cosmos.authz.v1beta1.MsgRevokeResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgRevokeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgRevokeResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgRevokeResponse();
    return message;
  }
};
function createBaseMsgGrant() {
  return { granter: "", grantee: "", grant: void 0 };
}
function createBaseMsgExecResponse() {
  return { results: [] };
}
function createBaseMsgExec() {
  return { grantee: "", msgs: [] };
}
function createBaseMsgGrantResponse() {
  return {};
}
function createBaseMsgRevoke() {
  return { granter: "", grantee: "", msg_type_url: "" };
}
function createBaseMsgRevokeResponse() {
  return {};
}
function bytesFromBase6410(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes10(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet24(value) {
  return value !== null && value !== void 0;
}
var registry25 = [
  ["/cosmos.authz.v1beta1.MsgGrant", MsgGrant],
  ["/cosmos.authz.v1beta1.MsgExecResponse", MsgExecResponse],
  ["/cosmos.authz.v1beta1.MsgExec", MsgExec],
  ["/cosmos.authz.v1beta1.MsgGrantResponse", MsgGrantResponse],
  ["/cosmos.authz.v1beta1.MsgRevoke", MsgRevoke],
  ["/cosmos.authz.v1beta1.MsgRevokeResponse", MsgRevokeResponse]
];
var aminoConverters25 = {
  "/cosmos.authz.v1beta1.MsgGrant": {
    aminoType: "cosmos-sdk/MsgGrant",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.MsgExecResponse": {
    aminoType: "cosmos-sdk/MsgExecResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.MsgExec": {
    aminoType: "cosmos-sdk/MsgExec",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.MsgGrantResponse": {
    aminoType: "cosmos-sdk/MsgGrantResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.MsgRevoke": {
    aminoType: "cosmos-sdk/MsgRevoke",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.authz.v1beta1.MsgRevokeResponse": {
    aminoType: "cosmos-sdk/MsgRevokeResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/bank/v1beta1/index.js
var v1beta1_exports3 = {};
__export(v1beta1_exports3, {
  AllowList: () => AllowList,
  Balance: () => Balance,
  DenomUnit: () => DenomUnit,
  GenesisState: () => GenesisState5,
  Input: () => Input,
  Metadata: () => Metadata,
  MsgMultiSend: () => MsgMultiSend,
  MsgMultiSendResponse: () => MsgMultiSendResponse,
  MsgSend: () => MsgSend,
  MsgSendResponse: () => MsgSendResponse,
  Output: () => Output,
  Params: () => Params4,
  QueryAllBalancesRequest: () => QueryAllBalancesRequest,
  QueryAllBalancesResponse: () => QueryAllBalancesResponse,
  QueryBalanceRequest: () => QueryBalanceRequest,
  QueryBalanceResponse: () => QueryBalanceResponse,
  QueryDenomMetadataRequest: () => QueryDenomMetadataRequest,
  QueryDenomMetadataResponse: () => QueryDenomMetadataResponse,
  QueryDenomsMetadataRequest: () => QueryDenomsMetadataRequest,
  QueryDenomsMetadataResponse: () => QueryDenomsMetadataResponse,
  QueryParamsRequest: () => QueryParamsRequest3,
  QueryParamsResponse: () => QueryParamsResponse3,
  QuerySpendableBalancesRequest: () => QuerySpendableBalancesRequest,
  QuerySpendableBalancesResponse: () => QuerySpendableBalancesResponse,
  QuerySupplyOfRequest: () => QuerySupplyOfRequest,
  QuerySupplyOfResponse: () => QuerySupplyOfResponse,
  QueryTotalSupplyRequest: () => QueryTotalSupplyRequest,
  QueryTotalSupplyResponse: () => QueryTotalSupplyResponse,
  SendAuthorization: () => SendAuthorization,
  SendEnabled: () => SendEnabled,
  Supply: () => Supply,
  WeiBalance: () => WeiBalance
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/v1beta1/coin.js
var Coin = {
  $type: "cosmos.base.v1beta1.Coin",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.amount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denom: isSet25(object.denom) ? globalThis.String(object.denom) : "",
      amount: isSet25(object.amount) ? globalThis.String(object.amount) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },
  create(base) {
    return Coin.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCoin();
    message.denom = object.denom ?? "";
    message.amount = object.amount ?? "";
    return message;
  }
};
var DecCoin = {
  $type: "cosmos.base.v1beta1.DecCoin",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDecCoin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.amount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denom: isSet25(object.denom) ? globalThis.String(object.denom) : "",
      amount: isSet25(object.amount) ? globalThis.String(object.amount) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },
  create(base) {
    return DecCoin.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDecCoin();
    message.denom = object.denom ?? "";
    message.amount = object.amount ?? "";
    return message;
  }
};
var IntProto = {
  $type: "cosmos.base.v1beta1.IntProto",
  encode(message, writer = new BinaryWriter()) {
    if (message.int !== "") {
      writer.uint32(10).string(message.int);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseIntProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.int = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { int: isSet25(object.int) ? globalThis.String(object.int) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.int !== "") {
      obj.int = message.int;
    }
    return obj;
  },
  create(base) {
    return IntProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseIntProto();
    message.int = object.int ?? "";
    return message;
  }
};
var DecProto = {
  $type: "cosmos.base.v1beta1.DecProto",
  encode(message, writer = new BinaryWriter()) {
    if (message.dec !== "") {
      writer.uint32(10).string(message.dec);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDecProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.dec = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { dec: isSet25(object.dec) ? globalThis.String(object.dec) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.dec !== "") {
      obj.dec = message.dec;
    }
    return obj;
  },
  create(base) {
    return DecProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDecProto();
    message.dec = object.dec ?? "";
    return message;
  }
};
function createBaseCoin() {
  return { denom: "", amount: "" };
}
function createBaseDecCoin() {
  return { denom: "", amount: "" };
}
function createBaseIntProto() {
  return { int: "" };
}
function createBaseDecProto() {
  return { dec: "" };
}
function isSet25(value) {
  return value !== null && value !== void 0;
}
var registry26 = [
  ["/cosmos.base.v1beta1.Coin", Coin],
  ["/cosmos.base.v1beta1.DecCoin", DecCoin],
  ["/cosmos.base.v1beta1.IntProto", IntProto],
  ["/cosmos.base.v1beta1.DecProto", DecProto]
];
var aminoConverters26 = {
  "/cosmos.base.v1beta1.Coin": {
    aminoType: "cosmos-sdk/Coin",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.v1beta1.DecCoin": {
    aminoType: "cosmos-sdk/DecCoin",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.v1beta1.IntProto": {
    aminoType: "cosmos-sdk/IntProto",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.v1beta1.DecProto": {
    aminoType: "cosmos-sdk/DecProto",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/bank/v1beta1/authz.js
var SendAuthorization = {
  $type: "cosmos.bank.v1beta1.SendAuthorization",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.spend_limit) {
      Coin.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSendAuthorization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.spend_limit.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      spend_limit: globalThis.Array.isArray(object == null ? void 0 : object.spend_limit) ? object.spend_limit.map((e) => Coin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.spend_limit) == null ? void 0 : _a.length) {
      obj.spend_limit = message.spend_limit.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return SendAuthorization.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseSendAuthorization();
    message.spend_limit = ((_a = object.spend_limit) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    return message;
  }
};
function createBaseSendAuthorization() {
  return { spend_limit: [] };
}
var registry27 = [["/cosmos.bank.v1beta1.SendAuthorization", SendAuthorization]];
var aminoConverters27 = {
  "/cosmos.bank.v1beta1.SendAuthorization": {
    aminoType: "cosmos-sdk/SendAuthorization",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/bank/v1beta1/bank.js
var Params4 = {
  $type: "cosmos.bank.v1beta1.Params",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.send_enabled) {
      SendEnabled.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.default_send_enabled !== false) {
      writer.uint32(16).bool(message.default_send_enabled);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams4();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.send_enabled.push(SendEnabled.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.default_send_enabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      send_enabled: globalThis.Array.isArray(object == null ? void 0 : object.send_enabled) ? object.send_enabled.map((e) => SendEnabled.fromJSON(e)) : [],
      default_send_enabled: isSet26(object.default_send_enabled) ? globalThis.Boolean(object.default_send_enabled) : false
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.send_enabled) == null ? void 0 : _a.length) {
      obj.send_enabled = message.send_enabled.map((e) => SendEnabled.toJSON(e));
    }
    if (message.default_send_enabled !== false) {
      obj.default_send_enabled = message.default_send_enabled;
    }
    return obj;
  },
  create(base) {
    return Params4.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseParams4();
    message.send_enabled = ((_a = object.send_enabled) == null ? void 0 : _a.map((e) => SendEnabled.fromPartial(e))) || [];
    message.default_send_enabled = object.default_send_enabled ?? false;
    return message;
  }
};
var SendEnabled = {
  $type: "cosmos.bank.v1beta1.SendEnabled",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.enabled !== false) {
      writer.uint32(16).bool(message.enabled);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSendEnabled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.enabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denom: isSet26(object.denom) ? globalThis.String(object.denom) : "",
      enabled: isSet26(object.enabled) ? globalThis.Boolean(object.enabled) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },
  create(base) {
    return SendEnabled.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSendEnabled();
    message.denom = object.denom ?? "";
    message.enabled = object.enabled ?? false;
    return message;
  }
};
var Input = {
  $type: "cosmos.bank.v1beta1.Input",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.coins) {
      Coin.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.coins.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet26(object.address) ? globalThis.String(object.address) : "",
      coins: globalThis.Array.isArray(object == null ? void 0 : object.coins) ? object.coins.map((e) => Coin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if ((_a = message.coins) == null ? void 0 : _a.length) {
      obj.coins = message.coins.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Input.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseInput();
    message.address = object.address ?? "";
    message.coins = ((_a = object.coins) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    return message;
  }
};
var Output = {
  $type: "cosmos.bank.v1beta1.Output",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.coins) {
      Coin.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.coins.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet26(object.address) ? globalThis.String(object.address) : "",
      coins: globalThis.Array.isArray(object == null ? void 0 : object.coins) ? object.coins.map((e) => Coin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if ((_a = message.coins) == null ? void 0 : _a.length) {
      obj.coins = message.coins.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Output.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseOutput();
    message.address = object.address ?? "";
    message.coins = ((_a = object.coins) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    return message;
  }
};
var Supply = {
  $type: "cosmos.bank.v1beta1.Supply",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.total) {
      Coin.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSupply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.total.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { total: globalThis.Array.isArray(object == null ? void 0 : object.total) ? object.total.map((e) => Coin.fromJSON(e)) : [] };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.total) == null ? void 0 : _a.length) {
      obj.total = message.total.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Supply.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseSupply();
    message.total = ((_a = object.total) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    return message;
  }
};
var DenomUnit = {
  $type: "cosmos.bank.v1beta1.DenomUnit",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.exponent !== 0) {
      writer.uint32(16).uint32(message.exponent);
    }
    for (const v of message.aliases) {
      writer.uint32(26).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDenomUnit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.exponent = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.aliases.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denom: isSet26(object.denom) ? globalThis.String(object.denom) : "",
      exponent: isSet26(object.exponent) ? globalThis.Number(object.exponent) : 0,
      aliases: globalThis.Array.isArray(object == null ? void 0 : object.aliases) ? object.aliases.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.exponent !== 0) {
      obj.exponent = Math.round(message.exponent);
    }
    if ((_a = message.aliases) == null ? void 0 : _a.length) {
      obj.aliases = message.aliases;
    }
    return obj;
  },
  create(base) {
    return DenomUnit.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseDenomUnit();
    message.denom = object.denom ?? "";
    message.exponent = object.exponent ?? 0;
    message.aliases = ((_a = object.aliases) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var Metadata = {
  $type: "cosmos.bank.v1beta1.Metadata",
  encode(message, writer = new BinaryWriter()) {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    for (const v of message.denom_units) {
      DenomUnit.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.base !== "") {
      writer.uint32(26).string(message.base);
    }
    if (message.display !== "") {
      writer.uint32(34).string(message.display);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    if (message.symbol !== "") {
      writer.uint32(50).string(message.symbol);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.description = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom_units.push(DenomUnit.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.base = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.display = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.name = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.symbol = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      description: isSet26(object.description) ? globalThis.String(object.description) : "",
      denom_units: globalThis.Array.isArray(object == null ? void 0 : object.denom_units) ? object.denom_units.map((e) => DenomUnit.fromJSON(e)) : [],
      base: isSet26(object.base) ? globalThis.String(object.base) : "",
      display: isSet26(object.display) ? globalThis.String(object.display) : "",
      name: isSet26(object.name) ? globalThis.String(object.name) : "",
      symbol: isSet26(object.symbol) ? globalThis.String(object.symbol) : ""
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    if ((_a = message.denom_units) == null ? void 0 : _a.length) {
      obj.denom_units = message.denom_units.map((e) => DenomUnit.toJSON(e));
    }
    if (message.base !== "") {
      obj.base = message.base;
    }
    if (message.display !== "") {
      obj.display = message.display;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    return obj;
  },
  create(base) {
    return Metadata.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMetadata();
    message.description = object.description ?? "";
    message.denom_units = ((_a = object.denom_units) == null ? void 0 : _a.map((e) => DenomUnit.fromPartial(e))) || [];
    message.base = object.base ?? "";
    message.display = object.display ?? "";
    message.name = object.name ?? "";
    message.symbol = object.symbol ?? "";
    return message;
  }
};
var AllowList = {
  $type: "cosmos.bank.v1beta1.AllowList",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.addresses) {
      writer.uint32(10).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAllowList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.addresses.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      addresses: globalThis.Array.isArray(object == null ? void 0 : object.addresses) ? object.addresses.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.addresses) == null ? void 0 : _a.length) {
      obj.addresses = message.addresses;
    }
    return obj;
  },
  create(base) {
    return AllowList.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseAllowList();
    message.addresses = ((_a = object.addresses) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
function createBaseParams4() {
  return { send_enabled: [], default_send_enabled: false };
}
function createBaseSendEnabled() {
  return { denom: "", enabled: false };
}
function createBaseInput() {
  return { address: "", coins: [] };
}
function createBaseOutput() {
  return { address: "", coins: [] };
}
function createBaseSupply() {
  return { total: [] };
}
function createBaseDenomUnit() {
  return { denom: "", exponent: 0, aliases: [] };
}
function createBaseMetadata() {
  return { description: "", denom_units: [], base: "", display: "", name: "", symbol: "" };
}
function createBaseAllowList() {
  return { addresses: [] };
}
function isSet26(value) {
  return value !== null && value !== void 0;
}
var registry28 = [
  ["/cosmos.bank.v1beta1.Params", Params4],
  ["/cosmos.bank.v1beta1.SendEnabled", SendEnabled],
  ["/cosmos.bank.v1beta1.Input", Input],
  ["/cosmos.bank.v1beta1.Output", Output],
  ["/cosmos.bank.v1beta1.Supply", Supply],
  ["/cosmos.bank.v1beta1.DenomUnit", DenomUnit],
  ["/cosmos.bank.v1beta1.Metadata", Metadata],
  ["/cosmos.bank.v1beta1.AllowList", AllowList]
];
var aminoConverters28 = {
  "/cosmos.bank.v1beta1.Params": {
    aminoType: "cosmos-sdk/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.SendEnabled": {
    aminoType: "cosmos-sdk/SendEnabled",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.Input": {
    aminoType: "cosmos-sdk/Input",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.Output": {
    aminoType: "cosmos-sdk/Output",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.Supply": {
    aminoType: "cosmos-sdk/Supply",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.DenomUnit": {
    aminoType: "cosmos-sdk/DenomUnit",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.Metadata": {
    aminoType: "cosmos-sdk/Metadata",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.AllowList": {
    aminoType: "cosmos-sdk/AllowList",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/bank/v1beta1/genesis.js
var GenesisState5 = {
  $type: "cosmos.bank.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params4.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.balances) {
      Balance.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.supply) {
      Coin.encode(v, writer.uint32(26).fork()).join();
    }
    for (const v of message.denom_metadata) {
      Metadata.encode(v, writer.uint32(34).fork()).join();
    }
    for (const v of message.wei_balances) {
      WeiBalance.encode(v, writer.uint32(42).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState5();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params4.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.balances.push(Balance.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.supply.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.denom_metadata.push(Metadata.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.wei_balances.push(WeiBalance.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet27(object.params) ? Params4.fromJSON(object.params) : void 0,
      balances: globalThis.Array.isArray(object == null ? void 0 : object.balances) ? object.balances.map((e) => Balance.fromJSON(e)) : [],
      supply: globalThis.Array.isArray(object == null ? void 0 : object.supply) ? object.supply.map((e) => Coin.fromJSON(e)) : [],
      denom_metadata: globalThis.Array.isArray(object == null ? void 0 : object.denom_metadata) ? object.denom_metadata.map((e) => Metadata.fromJSON(e)) : [],
      wei_balances: globalThis.Array.isArray(object == null ? void 0 : object.wei_balances) ? object.wei_balances.map((e) => WeiBalance.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b, _c, _d;
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params4.toJSON(message.params);
    }
    if ((_a = message.balances) == null ? void 0 : _a.length) {
      obj.balances = message.balances.map((e) => Balance.toJSON(e));
    }
    if ((_b = message.supply) == null ? void 0 : _b.length) {
      obj.supply = message.supply.map((e) => Coin.toJSON(e));
    }
    if ((_c = message.denom_metadata) == null ? void 0 : _c.length) {
      obj.denom_metadata = message.denom_metadata.map((e) => Metadata.toJSON(e));
    }
    if ((_d = message.wei_balances) == null ? void 0 : _d.length) {
      obj.wei_balances = message.wei_balances.map((e) => WeiBalance.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState5.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c, _d;
    const message = createBaseGenesisState5();
    message.params = object.params !== void 0 && object.params !== null ? Params4.fromPartial(object.params) : void 0;
    message.balances = ((_a = object.balances) == null ? void 0 : _a.map((e) => Balance.fromPartial(e))) || [];
    message.supply = ((_b = object.supply) == null ? void 0 : _b.map((e) => Coin.fromPartial(e))) || [];
    message.denom_metadata = ((_c = object.denom_metadata) == null ? void 0 : _c.map((e) => Metadata.fromPartial(e))) || [];
    message.wei_balances = ((_d = object.wei_balances) == null ? void 0 : _d.map((e) => WeiBalance.fromPartial(e))) || [];
    return message;
  }
};
var Balance = {
  $type: "cosmos.bank.v1beta1.Balance",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.coins) {
      Coin.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBalance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.coins.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet27(object.address) ? globalThis.String(object.address) : "",
      coins: globalThis.Array.isArray(object == null ? void 0 : object.coins) ? object.coins.map((e) => Coin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if ((_a = message.coins) == null ? void 0 : _a.length) {
      obj.coins = message.coins.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Balance.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseBalance();
    message.address = object.address ?? "";
    message.coins = ((_a = object.coins) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    return message;
  }
};
var WeiBalance = {
  $type: "cosmos.bank.v1beta1.WeiBalance",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseWeiBalance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.amount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet27(object.address) ? globalThis.String(object.address) : "",
      amount: isSet27(object.amount) ? globalThis.String(object.amount) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },
  create(base) {
    return WeiBalance.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseWeiBalance();
    message.address = object.address ?? "";
    message.amount = object.amount ?? "";
    return message;
  }
};
function createBaseGenesisState5() {
  return { params: void 0, balances: [], supply: [], denom_metadata: [], wei_balances: [] };
}
function createBaseBalance() {
  return { address: "", coins: [] };
}
function createBaseWeiBalance() {
  return { address: "", amount: "" };
}
function isSet27(value) {
  return value !== null && value !== void 0;
}
var registry29 = [
  ["/cosmos.bank.v1beta1.GenesisState", GenesisState5],
  ["/cosmos.bank.v1beta1.Balance", Balance],
  ["/cosmos.bank.v1beta1.WeiBalance", WeiBalance]
];
var aminoConverters29 = {
  "/cosmos.bank.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.Balance": {
    aminoType: "cosmos-sdk/Balance",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.WeiBalance": {
    aminoType: "cosmos-sdk/WeiBalance",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/bank/v1beta1/query.js
var QueryBalanceRequest = {
  $type: "cosmos.bank.v1beta1.QueryBalanceRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryBalanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet28(object.address) ? globalThis.String(object.address) : "",
      denom: isSet28(object.denom) ? globalThis.String(object.denom) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },
  create(base) {
    return QueryBalanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryBalanceRequest();
    message.address = object.address ?? "";
    message.denom = object.denom ?? "";
    return message;
  }
};
var QueryBalanceResponse = {
  $type: "cosmos.bank.v1beta1.QueryBalanceResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.balance !== void 0) {
      Coin.encode(message.balance, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryBalanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.balance = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { balance: isSet28(object.balance) ? Coin.fromJSON(object.balance) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.balance !== void 0) {
      obj.balance = Coin.toJSON(message.balance);
    }
    return obj;
  },
  create(base) {
    return QueryBalanceResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryBalanceResponse();
    message.balance = object.balance !== void 0 && object.balance !== null ? Coin.fromPartial(object.balance) : void 0;
    return message;
  }
};
var QueryAllBalancesRequest = {
  $type: "cosmos.bank.v1beta1.QueryAllBalancesRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAllBalancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet28(object.address) ? globalThis.String(object.address) : "",
      pagination: isSet28(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryAllBalancesRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryAllBalancesRequest();
    message.address = object.address ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryAllBalancesResponse = {
  $type: "cosmos.bank.v1beta1.QueryAllBalancesResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.balances) {
      Coin.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAllBalancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.balances.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      balances: globalThis.Array.isArray(object == null ? void 0 : object.balances) ? object.balances.map((e) => Coin.fromJSON(e)) : [],
      pagination: isSet28(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.balances) == null ? void 0 : _a.length) {
      obj.balances = message.balances.map((e) => Coin.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryAllBalancesResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryAllBalancesResponse();
    message.balances = ((_a = object.balances) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QuerySpendableBalancesRequest = {
  $type: "cosmos.bank.v1beta1.QuerySpendableBalancesRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQuerySpendableBalancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet28(object.address) ? globalThis.String(object.address) : "",
      pagination: isSet28(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QuerySpendableBalancesRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQuerySpendableBalancesRequest();
    message.address = object.address ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QuerySpendableBalancesResponse = {
  $type: "cosmos.bank.v1beta1.QuerySpendableBalancesResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.balances) {
      Coin.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQuerySpendableBalancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.balances.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      balances: globalThis.Array.isArray(object == null ? void 0 : object.balances) ? object.balances.map((e) => Coin.fromJSON(e)) : [],
      pagination: isSet28(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.balances) == null ? void 0 : _a.length) {
      obj.balances = message.balances.map((e) => Coin.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QuerySpendableBalancesResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQuerySpendableBalancesResponse();
    message.balances = ((_a = object.balances) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryTotalSupplyRequest = {
  $type: "cosmos.bank.v1beta1.QueryTotalSupplyRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryTotalSupplyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { pagination: isSet28(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryTotalSupplyRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryTotalSupplyRequest();
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryTotalSupplyResponse = {
  $type: "cosmos.bank.v1beta1.QueryTotalSupplyResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.supply) {
      Coin.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryTotalSupplyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.supply.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      supply: globalThis.Array.isArray(object == null ? void 0 : object.supply) ? object.supply.map((e) => Coin.fromJSON(e)) : [],
      pagination: isSet28(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.supply) == null ? void 0 : _a.length) {
      obj.supply = message.supply.map((e) => Coin.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryTotalSupplyResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryTotalSupplyResponse();
    message.supply = ((_a = object.supply) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QuerySupplyOfRequest = {
  $type: "cosmos.bank.v1beta1.QuerySupplyOfRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQuerySupplyOfRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { denom: isSet28(object.denom) ? globalThis.String(object.denom) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },
  create(base) {
    return QuerySupplyOfRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQuerySupplyOfRequest();
    message.denom = object.denom ?? "";
    return message;
  }
};
var QuerySupplyOfResponse = {
  $type: "cosmos.bank.v1beta1.QuerySupplyOfResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.amount !== void 0) {
      Coin.encode(message.amount, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQuerySupplyOfResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.amount = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { amount: isSet28(object.amount) ? Coin.fromJSON(object.amount) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.amount !== void 0) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },
  create(base) {
    return QuerySupplyOfResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQuerySupplyOfResponse();
    message.amount = object.amount !== void 0 && object.amount !== null ? Coin.fromPartial(object.amount) : void 0;
    return message;
  }
};
var QueryParamsRequest3 = {
  $type: "cosmos.bank.v1beta1.QueryParamsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryParamsRequest3.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest3();
    return message;
  }
};
var QueryParamsResponse3 = {
  $type: "cosmos.bank.v1beta1.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params4.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params4.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { params: isSet28(object.params) ? Params4.fromJSON(object.params) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params4.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse3.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse3();
    message.params = object.params !== void 0 && object.params !== null ? Params4.fromPartial(object.params) : void 0;
    return message;
  }
};
var QueryDenomsMetadataRequest = {
  $type: "cosmos.bank.v1beta1.QueryDenomsMetadataRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDenomsMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { pagination: isSet28(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryDenomsMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDenomsMetadataRequest();
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryDenomsMetadataResponse = {
  $type: "cosmos.bank.v1beta1.QueryDenomsMetadataResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.metadatas) {
      Metadata.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDenomsMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.metadatas.push(Metadata.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      metadatas: globalThis.Array.isArray(object == null ? void 0 : object.metadatas) ? object.metadatas.map((e) => Metadata.fromJSON(e)) : [],
      pagination: isSet28(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.metadatas) == null ? void 0 : _a.length) {
      obj.metadatas = message.metadatas.map((e) => Metadata.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryDenomsMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryDenomsMetadataResponse();
    message.metadatas = ((_a = object.metadatas) == null ? void 0 : _a.map((e) => Metadata.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryDenomMetadataRequest = {
  $type: "cosmos.bank.v1beta1.QueryDenomMetadataRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDenomMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { denom: isSet28(object.denom) ? globalThis.String(object.denom) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },
  create(base) {
    return QueryDenomMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDenomMetadataRequest();
    message.denom = object.denom ?? "";
    return message;
  }
};
var QueryDenomMetadataResponse = {
  $type: "cosmos.bank.v1beta1.QueryDenomMetadataResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.metadata !== void 0) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDenomMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { metadata: isSet28(object.metadata) ? Metadata.fromJSON(object.metadata) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.metadata !== void 0) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },
  create(base) {
    return QueryDenomMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDenomMetadataResponse();
    message.metadata = object.metadata !== void 0 && object.metadata !== null ? Metadata.fromPartial(object.metadata) : void 0;
    return message;
  }
};
function createBaseQueryBalanceRequest() {
  return { address: "", denom: "" };
}
function createBaseQueryBalanceResponse() {
  return { balance: void 0 };
}
function createBaseQueryAllBalancesRequest() {
  return { address: "", pagination: void 0 };
}
function createBaseQueryAllBalancesResponse() {
  return { balances: [], pagination: void 0 };
}
function createBaseQuerySpendableBalancesRequest() {
  return { address: "", pagination: void 0 };
}
function createBaseQuerySpendableBalancesResponse() {
  return { balances: [], pagination: void 0 };
}
function createBaseQueryTotalSupplyRequest() {
  return { pagination: void 0 };
}
function createBaseQueryTotalSupplyResponse() {
  return { supply: [], pagination: void 0 };
}
function createBaseQuerySupplyOfRequest() {
  return { denom: "" };
}
function createBaseQuerySupplyOfResponse() {
  return { amount: void 0 };
}
function createBaseQueryParamsRequest3() {
  return {};
}
function createBaseQueryParamsResponse3() {
  return { params: void 0 };
}
function createBaseQueryDenomsMetadataRequest() {
  return { pagination: void 0 };
}
function createBaseQueryDenomsMetadataResponse() {
  return { metadatas: [], pagination: void 0 };
}
function createBaseQueryDenomMetadataRequest() {
  return { denom: "" };
}
function createBaseQueryDenomMetadataResponse() {
  return { metadata: void 0 };
}
function isSet28(value) {
  return value !== null && value !== void 0;
}
var registry30 = [
  ["/cosmos.bank.v1beta1.QueryBalanceRequest", QueryBalanceRequest],
  ["/cosmos.bank.v1beta1.QueryBalanceResponse", QueryBalanceResponse],
  ["/cosmos.bank.v1beta1.QueryAllBalancesRequest", QueryAllBalancesRequest],
  ["/cosmos.bank.v1beta1.QueryAllBalancesResponse", QueryAllBalancesResponse],
  ["/cosmos.bank.v1beta1.QuerySpendableBalancesRequest", QuerySpendableBalancesRequest],
  ["/cosmos.bank.v1beta1.QuerySpendableBalancesResponse", QuerySpendableBalancesResponse],
  ["/cosmos.bank.v1beta1.QueryTotalSupplyRequest", QueryTotalSupplyRequest],
  ["/cosmos.bank.v1beta1.QueryTotalSupplyResponse", QueryTotalSupplyResponse],
  ["/cosmos.bank.v1beta1.QuerySupplyOfRequest", QuerySupplyOfRequest],
  ["/cosmos.bank.v1beta1.QuerySupplyOfResponse", QuerySupplyOfResponse],
  ["/cosmos.bank.v1beta1.QueryParamsRequest", QueryParamsRequest3],
  ["/cosmos.bank.v1beta1.QueryParamsResponse", QueryParamsResponse3],
  ["/cosmos.bank.v1beta1.QueryDenomsMetadataRequest", QueryDenomsMetadataRequest],
  ["/cosmos.bank.v1beta1.QueryDenomsMetadataResponse", QueryDenomsMetadataResponse],
  ["/cosmos.bank.v1beta1.QueryDenomMetadataRequest", QueryDenomMetadataRequest],
  ["/cosmos.bank.v1beta1.QueryDenomMetadataResponse", QueryDenomMetadataResponse]
];
var aminoConverters30 = {
  "/cosmos.bank.v1beta1.QueryBalanceRequest": {
    aminoType: "cosmos-sdk/QueryBalanceRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QueryBalanceResponse": {
    aminoType: "cosmos-sdk/QueryBalanceResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QueryAllBalancesRequest": {
    aminoType: "cosmos-sdk/QueryAllBalancesRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QueryAllBalancesResponse": {
    aminoType: "cosmos-sdk/QueryAllBalancesResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QuerySpendableBalancesRequest": {
    aminoType: "cosmos-sdk/QuerySpendableBalancesRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QuerySpendableBalancesResponse": {
    aminoType: "cosmos-sdk/QuerySpendableBalancesResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QueryTotalSupplyRequest": {
    aminoType: "cosmos-sdk/QueryTotalSupplyRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QueryTotalSupplyResponse": {
    aminoType: "cosmos-sdk/QueryTotalSupplyResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QuerySupplyOfRequest": {
    aminoType: "cosmos-sdk/QuerySupplyOfRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QuerySupplyOfResponse": {
    aminoType: "cosmos-sdk/QuerySupplyOfResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QueryParamsRequest": {
    aminoType: "cosmos-sdk/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QueryParamsResponse": {
    aminoType: "cosmos-sdk/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QueryDenomsMetadataRequest": {
    aminoType: "cosmos-sdk/QueryDenomsMetadataRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QueryDenomsMetadataResponse": {
    aminoType: "cosmos-sdk/QueryDenomsMetadataResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QueryDenomMetadataRequest": {
    aminoType: "cosmos-sdk/QueryDenomMetadataRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.QueryDenomMetadataResponse": {
    aminoType: "cosmos-sdk/QueryDenomMetadataResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/bank/v1beta1/tx.js
var MsgSend = {
  $type: "cosmos.bank.v1beta1.MsgSend",
  encode(message, writer = new BinaryWriter()) {
    if (message.from_address !== "") {
      writer.uint32(10).string(message.from_address);
    }
    if (message.to_address !== "") {
      writer.uint32(18).string(message.to_address);
    }
    for (const v of message.amount) {
      Coin.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgSend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.from_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.to_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      from_address: isSet29(object.from_address) ? globalThis.String(object.from_address) : "",
      to_address: isSet29(object.to_address) ? globalThis.String(object.to_address) : "",
      amount: globalThis.Array.isArray(object == null ? void 0 : object.amount) ? object.amount.map((e) => Coin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.from_address !== "") {
      obj.from_address = message.from_address;
    }
    if (message.to_address !== "") {
      obj.to_address = message.to_address;
    }
    if ((_a = message.amount) == null ? void 0 : _a.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return MsgSend.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgSend();
    message.from_address = object.from_address ?? "";
    message.to_address = object.to_address ?? "";
    message.amount = ((_a = object.amount) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    return message;
  }
};
var MsgSendResponse = {
  $type: "cosmos.bank.v1beta1.MsgSendResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgSendResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgSendResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgSendResponse();
    return message;
  }
};
var MsgMultiSend = {
  $type: "cosmos.bank.v1beta1.MsgMultiSend",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.inputs) {
      Input.encode(v, writer.uint32(10).fork()).join();
    }
    for (const v of message.outputs) {
      Output.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgMultiSend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.inputs.push(Input.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.outputs.push(Output.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      inputs: globalThis.Array.isArray(object == null ? void 0 : object.inputs) ? object.inputs.map((e) => Input.fromJSON(e)) : [],
      outputs: globalThis.Array.isArray(object == null ? void 0 : object.outputs) ? object.outputs.map((e) => Output.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if ((_a = message.inputs) == null ? void 0 : _a.length) {
      obj.inputs = message.inputs.map((e) => Input.toJSON(e));
    }
    if ((_b = message.outputs) == null ? void 0 : _b.length) {
      obj.outputs = message.outputs.map((e) => Output.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return MsgMultiSend.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseMsgMultiSend();
    message.inputs = ((_a = object.inputs) == null ? void 0 : _a.map((e) => Input.fromPartial(e))) || [];
    message.outputs = ((_b = object.outputs) == null ? void 0 : _b.map((e) => Output.fromPartial(e))) || [];
    return message;
  }
};
var MsgMultiSendResponse = {
  $type: "cosmos.bank.v1beta1.MsgMultiSendResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgMultiSendResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgMultiSendResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgMultiSendResponse();
    return message;
  }
};
function createBaseMsgSend() {
  return { from_address: "", to_address: "", amount: [] };
}
function createBaseMsgSendResponse() {
  return {};
}
function createBaseMsgMultiSend() {
  return { inputs: [], outputs: [] };
}
function createBaseMsgMultiSendResponse() {
  return {};
}
function isSet29(value) {
  return value !== null && value !== void 0;
}
var registry31 = [
  ["/cosmos.bank.v1beta1.MsgSend", MsgSend],
  ["/cosmos.bank.v1beta1.MsgSendResponse", MsgSendResponse],
  ["/cosmos.bank.v1beta1.MsgMultiSend", MsgMultiSend],
  ["/cosmos.bank.v1beta1.MsgMultiSendResponse", MsgMultiSendResponse]
];
var aminoConverters31 = {
  "/cosmos.bank.v1beta1.MsgSend": {
    aminoType: "cosmos-sdk/MsgSend",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.MsgSendResponse": {
    aminoType: "cosmos-sdk/MsgSendResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.MsgMultiSend": {
    aminoType: "cosmos-sdk/MsgMultiSend",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.bank.v1beta1.MsgMultiSendResponse": {
    aminoType: "cosmos-sdk/MsgMultiSendResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/abci/v1beta1/index.js
var v1beta1_exports4 = {};
__export(v1beta1_exports4, {
  ABCIMessageLog: () => ABCIMessageLog,
  Attribute: () => Attribute,
  GasInfo: () => GasInfo,
  MsgData: () => MsgData,
  Result: () => Result,
  SearchTxsResult: () => SearchTxsResult,
  SimulationResponse: () => SimulationResponse,
  StringEvent: () => StringEvent,
  TxMsgData: () => TxMsgData,
  TxResponse: () => TxResponse,
  aminoConverters: () => aminoConverters37,
  registry: () => registry37
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/crypto/keys.js
var PublicKey = {
  $type: "tendermint.crypto.PublicKey",
  encode(message, writer = new BinaryWriter()) {
    if (message.ed25519 !== void 0) {
      writer.uint32(10).bytes(message.ed25519);
    }
    if (message.secp256k1 !== void 0) {
      writer.uint32(18).bytes(message.secp256k1);
    }
    if (message.sr25519 !== void 0) {
      writer.uint32(26).bytes(message.sr25519);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePublicKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.ed25519 = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.secp256k1 = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.sr25519 = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      ed25519: isSet30(object.ed25519) ? bytesFromBase6411(object.ed25519) : void 0,
      secp256k1: isSet30(object.secp256k1) ? bytesFromBase6411(object.secp256k1) : void 0,
      sr25519: isSet30(object.sr25519) ? bytesFromBase6411(object.sr25519) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.ed25519 !== void 0) {
      obj.ed25519 = base64FromBytes11(message.ed25519);
    }
    if (message.secp256k1 !== void 0) {
      obj.secp256k1 = base64FromBytes11(message.secp256k1);
    }
    if (message.sr25519 !== void 0) {
      obj.sr25519 = base64FromBytes11(message.sr25519);
    }
    return obj;
  },
  create(base) {
    return PublicKey.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePublicKey();
    message.ed25519 = object.ed25519 ?? void 0;
    message.secp256k1 = object.secp256k1 ?? void 0;
    message.sr25519 = object.sr25519 ?? void 0;
    return message;
  }
};
function createBasePublicKey() {
  return { ed25519: void 0, secp256k1: void 0, sr25519: void 0 };
}
function bytesFromBase6411(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes11(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet30(value) {
  return value !== null && value !== void 0;
}
var registry32 = [["/tendermint.crypto.PublicKey", PublicKey]];
var aminoConverters32 = {
  "/tendermint.crypto.PublicKey": {
    aminoType: "tendermint.crypto.PublicKey",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/crypto/proof.js
var Proof = {
  $type: "tendermint.crypto.Proof",
  encode(message, writer = new BinaryWriter()) {
    if (message.total !== 0) {
      writer.uint32(8).int64(message.total);
    }
    if (message.index !== 0) {
      writer.uint32(16).int64(message.index);
    }
    if (message.leaf_hash.length !== 0) {
      writer.uint32(26).bytes(message.leaf_hash);
    }
    for (const v of message.aunts) {
      writer.uint32(34).bytes(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.total = longToNumber9(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.index = longToNumber9(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.leaf_hash = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.aunts.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      total: isSet31(object.total) ? globalThis.Number(object.total) : 0,
      index: isSet31(object.index) ? globalThis.Number(object.index) : 0,
      leaf_hash: isSet31(object.leaf_hash) ? bytesFromBase6412(object.leaf_hash) : new Uint8Array(0),
      aunts: globalThis.Array.isArray(object == null ? void 0 : object.aunts) ? object.aunts.map((e) => bytesFromBase6412(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.leaf_hash.length !== 0) {
      obj.leaf_hash = base64FromBytes12(message.leaf_hash);
    }
    if ((_a = message.aunts) == null ? void 0 : _a.length) {
      obj.aunts = message.aunts.map((e) => base64FromBytes12(e));
    }
    return obj;
  },
  create(base) {
    return Proof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseProof();
    message.total = object.total ?? 0;
    message.index = object.index ?? 0;
    message.leaf_hash = object.leaf_hash ?? new Uint8Array(0);
    message.aunts = ((_a = object.aunts) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var ValueOp = {
  $type: "tendermint.crypto.ValueOp",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.proof !== void 0) {
      Proof.encode(message.proof, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValueOp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.proof = Proof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet31(object.key) ? bytesFromBase6412(object.key) : new Uint8Array(0),
      proof: isSet31(object.proof) ? Proof.fromJSON(object.proof) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes12(message.key);
    }
    if (message.proof !== void 0) {
      obj.proof = Proof.toJSON(message.proof);
    }
    return obj;
  },
  create(base) {
    return ValueOp.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValueOp();
    message.key = object.key ?? new Uint8Array(0);
    message.proof = object.proof !== void 0 && object.proof !== null ? Proof.fromPartial(object.proof) : void 0;
    return message;
  }
};
var DominoOp = {
  $type: "tendermint.crypto.DominoOp",
  encode(message, writer = new BinaryWriter()) {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.input !== "") {
      writer.uint32(18).string(message.input);
    }
    if (message.output !== "") {
      writer.uint32(26).string(message.output);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDominoOp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.input = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.output = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet31(object.key) ? globalThis.String(object.key) : "",
      input: isSet31(object.input) ? globalThis.String(object.input) : "",
      output: isSet31(object.output) ? globalThis.String(object.output) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.input !== "") {
      obj.input = message.input;
    }
    if (message.output !== "") {
      obj.output = message.output;
    }
    return obj;
  },
  create(base) {
    return DominoOp.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDominoOp();
    message.key = object.key ?? "";
    message.input = object.input ?? "";
    message.output = object.output ?? "";
    return message;
  }
};
var ProofOp = {
  $type: "tendermint.crypto.ProofOp",
  encode(message, writer = new BinaryWriter()) {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.key.length !== 0) {
      writer.uint32(18).bytes(message.key);
    }
    if (message.data.length !== 0) {
      writer.uint32(26).bytes(message.data);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseProofOp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet31(object.type) ? globalThis.String(object.type) : "",
      key: isSet31(object.key) ? bytesFromBase6412(object.key) : new Uint8Array(0),
      data: isSet31(object.data) ? bytesFromBase6412(object.data) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.key.length !== 0) {
      obj.key = base64FromBytes12(message.key);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes12(message.data);
    }
    return obj;
  },
  create(base) {
    return ProofOp.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseProofOp();
    message.type = object.type ?? "";
    message.key = object.key ?? new Uint8Array(0);
    message.data = object.data ?? new Uint8Array(0);
    return message;
  }
};
var ProofOps = {
  $type: "tendermint.crypto.ProofOps",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.ops) {
      ProofOp.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseProofOps();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.ops.push(ProofOp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { ops: globalThis.Array.isArray(object == null ? void 0 : object.ops) ? object.ops.map((e) => ProofOp.fromJSON(e)) : [] };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.ops) == null ? void 0 : _a.length) {
      obj.ops = message.ops.map((e) => ProofOp.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ProofOps.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseProofOps();
    message.ops = ((_a = object.ops) == null ? void 0 : _a.map((e) => ProofOp.fromPartial(e))) || [];
    return message;
  }
};
function createBaseProof() {
  return { total: 0, index: 0, leaf_hash: new Uint8Array(0), aunts: [] };
}
function createBaseValueOp() {
  return { key: new Uint8Array(0), proof: void 0 };
}
function createBaseDominoOp() {
  return { key: "", input: "", output: "" };
}
function createBaseProofOp() {
  return { type: "", key: new Uint8Array(0), data: new Uint8Array(0) };
}
function createBaseProofOps() {
  return { ops: [] };
}
function bytesFromBase6412(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes12(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber9(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet31(value) {
  return value !== null && value !== void 0;
}
var registry33 = [
  ["/tendermint.crypto.Proof", Proof],
  ["/tendermint.crypto.ValueOp", ValueOp],
  ["/tendermint.crypto.DominoOp", DominoOp],
  ["/tendermint.crypto.ProofOp", ProofOp],
  ["/tendermint.crypto.ProofOps", ProofOps]
];
var aminoConverters33 = {
  "/tendermint.crypto.Proof": {
    aminoType: "tendermint.crypto.Proof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.crypto.ValueOp": {
    aminoType: "tendermint.crypto.ValueOp",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.crypto.DominoOp": {
    aminoType: "tendermint.crypto.DominoOp",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.crypto.ProofOp": {
    aminoType: "tendermint.crypto.ProofOp",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.crypto.ProofOps": {
    aminoType: "tendermint.crypto.ProofOps",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/google/protobuf/duration.js
var Duration = {
  $type: "google.protobuf.Duration",
  encode(message, writer = new BinaryWriter()) {
    if (message.seconds !== 0) {
      writer.uint32(8).int64(message.seconds);
    }
    if (message.nanos !== 0) {
      writer.uint32(16).int32(message.nanos);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDuration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.seconds = longToNumber10(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.nanos = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      seconds: isSet32(object.seconds) ? globalThis.Number(object.seconds) : 0,
      nanos: isSet32(object.nanos) ? globalThis.Number(object.nanos) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.seconds !== 0) {
      obj.seconds = Math.round(message.seconds);
    }
    if (message.nanos !== 0) {
      obj.nanos = Math.round(message.nanos);
    }
    return obj;
  },
  create(base) {
    return Duration.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDuration();
    message.seconds = object.seconds ?? 0;
    message.nanos = object.nanos ?? 0;
    return message;
  }
};
function createBaseDuration() {
  return { seconds: 0, nanos: 0 };
}
function longToNumber10(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet32(value) {
  return value !== null && value !== void 0;
}
var registry34 = [["/google.protobuf.Duration", Duration]];
var aminoConverters34 = {
  "/google.protobuf.Duration": {
    aminoType: "google.protobuf.Duration",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/types/params.js
var ConsensusParams = {
  $type: "tendermint.types.ConsensusParams",
  encode(message, writer = new BinaryWriter()) {
    if (message.block !== void 0) {
      BlockParams.encode(message.block, writer.uint32(10).fork()).join();
    }
    if (message.evidence !== void 0) {
      EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).join();
    }
    if (message.validator !== void 0) {
      ValidatorParams.encode(message.validator, writer.uint32(26).fork()).join();
    }
    if (message.version !== void 0) {
      VersionParams.encode(message.version, writer.uint32(34).fork()).join();
    }
    if (message.synchrony !== void 0) {
      SynchronyParams.encode(message.synchrony, writer.uint32(42).fork()).join();
    }
    if (message.timeout !== void 0) {
      TimeoutParams.encode(message.timeout, writer.uint32(50).fork()).join();
    }
    if (message.abci !== void 0) {
      ABCIParams.encode(message.abci, writer.uint32(58).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseConsensusParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.block = BlockParams.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.evidence = EvidenceParams.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.validator = ValidatorParams.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.version = VersionParams.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.synchrony = SynchronyParams.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.timeout = TimeoutParams.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.abci = ABCIParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      block: isSet33(object.block) ? BlockParams.fromJSON(object.block) : void 0,
      evidence: isSet33(object.evidence) ? EvidenceParams.fromJSON(object.evidence) : void 0,
      validator: isSet33(object.validator) ? ValidatorParams.fromJSON(object.validator) : void 0,
      version: isSet33(object.version) ? VersionParams.fromJSON(object.version) : void 0,
      synchrony: isSet33(object.synchrony) ? SynchronyParams.fromJSON(object.synchrony) : void 0,
      timeout: isSet33(object.timeout) ? TimeoutParams.fromJSON(object.timeout) : void 0,
      abci: isSet33(object.abci) ? ABCIParams.fromJSON(object.abci) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.block !== void 0) {
      obj.block = BlockParams.toJSON(message.block);
    }
    if (message.evidence !== void 0) {
      obj.evidence = EvidenceParams.toJSON(message.evidence);
    }
    if (message.validator !== void 0) {
      obj.validator = ValidatorParams.toJSON(message.validator);
    }
    if (message.version !== void 0) {
      obj.version = VersionParams.toJSON(message.version);
    }
    if (message.synchrony !== void 0) {
      obj.synchrony = SynchronyParams.toJSON(message.synchrony);
    }
    if (message.timeout !== void 0) {
      obj.timeout = TimeoutParams.toJSON(message.timeout);
    }
    if (message.abci !== void 0) {
      obj.abci = ABCIParams.toJSON(message.abci);
    }
    return obj;
  },
  create(base) {
    return ConsensusParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseConsensusParams();
    message.block = object.block !== void 0 && object.block !== null ? BlockParams.fromPartial(object.block) : void 0;
    message.evidence = object.evidence !== void 0 && object.evidence !== null ? EvidenceParams.fromPartial(object.evidence) : void 0;
    message.validator = object.validator !== void 0 && object.validator !== null ? ValidatorParams.fromPartial(object.validator) : void 0;
    message.version = object.version !== void 0 && object.version !== null ? VersionParams.fromPartial(object.version) : void 0;
    message.synchrony = object.synchrony !== void 0 && object.synchrony !== null ? SynchronyParams.fromPartial(object.synchrony) : void 0;
    message.timeout = object.timeout !== void 0 && object.timeout !== null ? TimeoutParams.fromPartial(object.timeout) : void 0;
    message.abci = object.abci !== void 0 && object.abci !== null ? ABCIParams.fromPartial(object.abci) : void 0;
    return message;
  }
};
var BlockParams = {
  $type: "tendermint.types.BlockParams",
  encode(message, writer = new BinaryWriter()) {
    if (message.max_bytes !== 0) {
      writer.uint32(8).int64(message.max_bytes);
    }
    if (message.max_gas !== 0) {
      writer.uint32(16).int64(message.max_gas);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBlockParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.max_bytes = longToNumber11(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.max_gas = longToNumber11(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      max_bytes: isSet33(object.max_bytes) ? globalThis.Number(object.max_bytes) : 0,
      max_gas: isSet33(object.max_gas) ? globalThis.Number(object.max_gas) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.max_bytes !== 0) {
      obj.max_bytes = Math.round(message.max_bytes);
    }
    if (message.max_gas !== 0) {
      obj.max_gas = Math.round(message.max_gas);
    }
    return obj;
  },
  create(base) {
    return BlockParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBlockParams();
    message.max_bytes = object.max_bytes ?? 0;
    message.max_gas = object.max_gas ?? 0;
    return message;
  }
};
var EvidenceParams = {
  $type: "tendermint.types.EvidenceParams",
  encode(message, writer = new BinaryWriter()) {
    if (message.max_age_num_blocks !== 0) {
      writer.uint32(8).int64(message.max_age_num_blocks);
    }
    if (message.max_age_duration !== void 0) {
      Duration.encode(message.max_age_duration, writer.uint32(18).fork()).join();
    }
    if (message.max_bytes !== 0) {
      writer.uint32(24).int64(message.max_bytes);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEvidenceParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.max_age_num_blocks = longToNumber11(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.max_age_duration = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.max_bytes = longToNumber11(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      max_age_num_blocks: isSet33(object.max_age_num_blocks) ? globalThis.Number(object.max_age_num_blocks) : 0,
      max_age_duration: isSet33(object.max_age_duration) ? Duration.fromJSON(object.max_age_duration) : void 0,
      max_bytes: isSet33(object.max_bytes) ? globalThis.Number(object.max_bytes) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.max_age_num_blocks !== 0) {
      obj.max_age_num_blocks = Math.round(message.max_age_num_blocks);
    }
    if (message.max_age_duration !== void 0) {
      obj.max_age_duration = Duration.toJSON(message.max_age_duration);
    }
    if (message.max_bytes !== 0) {
      obj.max_bytes = Math.round(message.max_bytes);
    }
    return obj;
  },
  create(base) {
    return EvidenceParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEvidenceParams();
    message.max_age_num_blocks = object.max_age_num_blocks ?? 0;
    message.max_age_duration = object.max_age_duration !== void 0 && object.max_age_duration !== null ? Duration.fromPartial(object.max_age_duration) : void 0;
    message.max_bytes = object.max_bytes ?? 0;
    return message;
  }
};
var ValidatorParams = {
  $type: "tendermint.types.ValidatorParams",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.pub_key_types) {
      writer.uint32(10).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pub_key_types.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pub_key_types: globalThis.Array.isArray(object == null ? void 0 : object.pub_key_types) ? object.pub_key_types.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.pub_key_types) == null ? void 0 : _a.length) {
      obj.pub_key_types = message.pub_key_types;
    }
    return obj;
  },
  create(base) {
    return ValidatorParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseValidatorParams();
    message.pub_key_types = ((_a = object.pub_key_types) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var VersionParams = {
  $type: "tendermint.types.VersionParams",
  encode(message, writer = new BinaryWriter()) {
    if (message.app_version !== 0) {
      writer.uint32(8).uint64(message.app_version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVersionParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.app_version = longToNumber11(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { app_version: isSet33(object.app_version) ? globalThis.Number(object.app_version) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.app_version !== 0) {
      obj.app_version = Math.round(message.app_version);
    }
    return obj;
  },
  create(base) {
    return VersionParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseVersionParams();
    message.app_version = object.app_version ?? 0;
    return message;
  }
};
var HashedParams = {
  $type: "tendermint.types.HashedParams",
  encode(message, writer = new BinaryWriter()) {
    if (message.block_max_bytes !== 0) {
      writer.uint32(8).int64(message.block_max_bytes);
    }
    if (message.block_max_gas !== 0) {
      writer.uint32(16).int64(message.block_max_gas);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseHashedParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.block_max_bytes = longToNumber11(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.block_max_gas = longToNumber11(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      block_max_bytes: isSet33(object.block_max_bytes) ? globalThis.Number(object.block_max_bytes) : 0,
      block_max_gas: isSet33(object.block_max_gas) ? globalThis.Number(object.block_max_gas) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.block_max_bytes !== 0) {
      obj.block_max_bytes = Math.round(message.block_max_bytes);
    }
    if (message.block_max_gas !== 0) {
      obj.block_max_gas = Math.round(message.block_max_gas);
    }
    return obj;
  },
  create(base) {
    return HashedParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseHashedParams();
    message.block_max_bytes = object.block_max_bytes ?? 0;
    message.block_max_gas = object.block_max_gas ?? 0;
    return message;
  }
};
var SynchronyParams = {
  $type: "tendermint.types.SynchronyParams",
  encode(message, writer = new BinaryWriter()) {
    if (message.message_delay !== void 0) {
      Duration.encode(message.message_delay, writer.uint32(10).fork()).join();
    }
    if (message.precision !== void 0) {
      Duration.encode(message.precision, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSynchronyParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message_delay = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.precision = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message_delay: isSet33(object.message_delay) ? Duration.fromJSON(object.message_delay) : void 0,
      precision: isSet33(object.precision) ? Duration.fromJSON(object.precision) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.message_delay !== void 0) {
      obj.message_delay = Duration.toJSON(message.message_delay);
    }
    if (message.precision !== void 0) {
      obj.precision = Duration.toJSON(message.precision);
    }
    return obj;
  },
  create(base) {
    return SynchronyParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSynchronyParams();
    message.message_delay = object.message_delay !== void 0 && object.message_delay !== null ? Duration.fromPartial(object.message_delay) : void 0;
    message.precision = object.precision !== void 0 && object.precision !== null ? Duration.fromPartial(object.precision) : void 0;
    return message;
  }
};
var TimeoutParams = {
  $type: "tendermint.types.TimeoutParams",
  encode(message, writer = new BinaryWriter()) {
    if (message.propose !== void 0) {
      Duration.encode(message.propose, writer.uint32(10).fork()).join();
    }
    if (message.propose_delta !== void 0) {
      Duration.encode(message.propose_delta, writer.uint32(18).fork()).join();
    }
    if (message.vote !== void 0) {
      Duration.encode(message.vote, writer.uint32(26).fork()).join();
    }
    if (message.vote_delta !== void 0) {
      Duration.encode(message.vote_delta, writer.uint32(34).fork()).join();
    }
    if (message.commit !== void 0) {
      Duration.encode(message.commit, writer.uint32(42).fork()).join();
    }
    if (message.bypass_commit_timeout !== false) {
      writer.uint32(48).bool(message.bypass_commit_timeout);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTimeoutParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.propose = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.propose_delta = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.vote = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.vote_delta = Duration.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.commit = Duration.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.bypass_commit_timeout = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      propose: isSet33(object.propose) ? Duration.fromJSON(object.propose) : void 0,
      propose_delta: isSet33(object.propose_delta) ? Duration.fromJSON(object.propose_delta) : void 0,
      vote: isSet33(object.vote) ? Duration.fromJSON(object.vote) : void 0,
      vote_delta: isSet33(object.vote_delta) ? Duration.fromJSON(object.vote_delta) : void 0,
      commit: isSet33(object.commit) ? Duration.fromJSON(object.commit) : void 0,
      bypass_commit_timeout: isSet33(object.bypass_commit_timeout) ? globalThis.Boolean(object.bypass_commit_timeout) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.propose !== void 0) {
      obj.propose = Duration.toJSON(message.propose);
    }
    if (message.propose_delta !== void 0) {
      obj.propose_delta = Duration.toJSON(message.propose_delta);
    }
    if (message.vote !== void 0) {
      obj.vote = Duration.toJSON(message.vote);
    }
    if (message.vote_delta !== void 0) {
      obj.vote_delta = Duration.toJSON(message.vote_delta);
    }
    if (message.commit !== void 0) {
      obj.commit = Duration.toJSON(message.commit);
    }
    if (message.bypass_commit_timeout !== false) {
      obj.bypass_commit_timeout = message.bypass_commit_timeout;
    }
    return obj;
  },
  create(base) {
    return TimeoutParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTimeoutParams();
    message.propose = object.propose !== void 0 && object.propose !== null ? Duration.fromPartial(object.propose) : void 0;
    message.propose_delta = object.propose_delta !== void 0 && object.propose_delta !== null ? Duration.fromPartial(object.propose_delta) : void 0;
    message.vote = object.vote !== void 0 && object.vote !== null ? Duration.fromPartial(object.vote) : void 0;
    message.vote_delta = object.vote_delta !== void 0 && object.vote_delta !== null ? Duration.fromPartial(object.vote_delta) : void 0;
    message.commit = object.commit !== void 0 && object.commit !== null ? Duration.fromPartial(object.commit) : void 0;
    message.bypass_commit_timeout = object.bypass_commit_timeout ?? false;
    return message;
  }
};
var ABCIParams = {
  $type: "tendermint.types.ABCIParams",
  encode(message, writer = new BinaryWriter()) {
    if (message.vote_extensions_enable_height !== 0) {
      writer.uint32(8).int64(message.vote_extensions_enable_height);
    }
    if (message.recheck_tx !== false) {
      writer.uint32(16).bool(message.recheck_tx);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseABCIParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.vote_extensions_enable_height = longToNumber11(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.recheck_tx = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      vote_extensions_enable_height: isSet33(object.vote_extensions_enable_height) ? globalThis.Number(object.vote_extensions_enable_height) : 0,
      recheck_tx: isSet33(object.recheck_tx) ? globalThis.Boolean(object.recheck_tx) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.vote_extensions_enable_height !== 0) {
      obj.vote_extensions_enable_height = Math.round(message.vote_extensions_enable_height);
    }
    if (message.recheck_tx !== false) {
      obj.recheck_tx = message.recheck_tx;
    }
    return obj;
  },
  create(base) {
    return ABCIParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseABCIParams();
    message.vote_extensions_enable_height = object.vote_extensions_enable_height ?? 0;
    message.recheck_tx = object.recheck_tx ?? false;
    return message;
  }
};
function createBaseConsensusParams() {
  return {
    block: void 0,
    evidence: void 0,
    validator: void 0,
    version: void 0,
    synchrony: void 0,
    timeout: void 0,
    abci: void 0
  };
}
function createBaseBlockParams() {
  return { max_bytes: 0, max_gas: 0 };
}
function createBaseEvidenceParams() {
  return { max_age_num_blocks: 0, max_age_duration: void 0, max_bytes: 0 };
}
function createBaseValidatorParams() {
  return { pub_key_types: [] };
}
function createBaseVersionParams() {
  return { app_version: 0 };
}
function createBaseHashedParams() {
  return { block_max_bytes: 0, block_max_gas: 0 };
}
function createBaseSynchronyParams() {
  return { message_delay: void 0, precision: void 0 };
}
function createBaseTimeoutParams() {
  return {
    propose: void 0,
    propose_delta: void 0,
    vote: void 0,
    vote_delta: void 0,
    commit: void 0,
    bypass_commit_timeout: false
  };
}
function createBaseABCIParams() {
  return { vote_extensions_enable_height: 0, recheck_tx: false };
}
function longToNumber11(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet33(value) {
  return value !== null && value !== void 0;
}
var registry35 = [
  ["/tendermint.types.ConsensusParams", ConsensusParams],
  ["/tendermint.types.BlockParams", BlockParams],
  ["/tendermint.types.EvidenceParams", EvidenceParams],
  ["/tendermint.types.ValidatorParams", ValidatorParams],
  ["/tendermint.types.VersionParams", VersionParams],
  ["/tendermint.types.HashedParams", HashedParams],
  ["/tendermint.types.SynchronyParams", SynchronyParams],
  ["/tendermint.types.TimeoutParams", TimeoutParams],
  ["/tendermint.types.ABCIParams", ABCIParams]
];
var aminoConverters35 = {
  "/tendermint.types.ConsensusParams": {
    aminoType: "tendermint.types.ConsensusParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.BlockParams": {
    aminoType: "tendermint.types.BlockParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.EvidenceParams": {
    aminoType: "tendermint.types.EvidenceParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.ValidatorParams": {
    aminoType: "tendermint.types.ValidatorParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.VersionParams": {
    aminoType: "tendermint.types.VersionParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.HashedParams": {
    aminoType: "tendermint.types.HashedParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.SynchronyParams": {
    aminoType: "tendermint.types.SynchronyParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.TimeoutParams": {
    aminoType: "tendermint.types.TimeoutParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.ABCIParams": {
    aminoType: "tendermint.types.ABCIParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/types/tendermint/abci/types.js
var CheckTxType;
(function(CheckTxType2) {
  CheckTxType2[CheckTxType2["NEW"] = 0] = "NEW";
  CheckTxType2[CheckTxType2["RECHECK"] = 1] = "RECHECK";
  CheckTxType2[CheckTxType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CheckTxType || (CheckTxType = {}));
var MisbehaviorType;
(function(MisbehaviorType2) {
  MisbehaviorType2[MisbehaviorType2["UNKNOWN"] = 0] = "UNKNOWN";
  MisbehaviorType2[MisbehaviorType2["DUPLICATE_VOTE"] = 1] = "DUPLICATE_VOTE";
  MisbehaviorType2[MisbehaviorType2["LIGHT_CLIENT_ATTACK"] = 2] = "LIGHT_CLIENT_ATTACK";
  MisbehaviorType2[MisbehaviorType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MisbehaviorType || (MisbehaviorType = {}));
var ResponseOfferSnapshotResult;
(function(ResponseOfferSnapshotResult2) {
  ResponseOfferSnapshotResult2[ResponseOfferSnapshotResult2["UNKNOWN"] = 0] = "UNKNOWN";
  ResponseOfferSnapshotResult2[ResponseOfferSnapshotResult2["ACCEPT"] = 1] = "ACCEPT";
  ResponseOfferSnapshotResult2[ResponseOfferSnapshotResult2["ABORT"] = 2] = "ABORT";
  ResponseOfferSnapshotResult2[ResponseOfferSnapshotResult2["REJECT"] = 3] = "REJECT";
  ResponseOfferSnapshotResult2[ResponseOfferSnapshotResult2["REJECT_FORMAT"] = 4] = "REJECT_FORMAT";
  ResponseOfferSnapshotResult2[ResponseOfferSnapshotResult2["REJECT_SENDER"] = 5] = "REJECT_SENDER";
  ResponseOfferSnapshotResult2[ResponseOfferSnapshotResult2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ResponseOfferSnapshotResult || (ResponseOfferSnapshotResult = {}));
var ResponseApplySnapshotChunkResult;
(function(ResponseApplySnapshotChunkResult2) {
  ResponseApplySnapshotChunkResult2[ResponseApplySnapshotChunkResult2["UNKNOWN"] = 0] = "UNKNOWN";
  ResponseApplySnapshotChunkResult2[ResponseApplySnapshotChunkResult2["ACCEPT"] = 1] = "ACCEPT";
  ResponseApplySnapshotChunkResult2[ResponseApplySnapshotChunkResult2["ABORT"] = 2] = "ABORT";
  ResponseApplySnapshotChunkResult2[ResponseApplySnapshotChunkResult2["RETRY"] = 3] = "RETRY";
  ResponseApplySnapshotChunkResult2[ResponseApplySnapshotChunkResult2["RETRY_SNAPSHOT"] = 4] = "RETRY_SNAPSHOT";
  ResponseApplySnapshotChunkResult2[ResponseApplySnapshotChunkResult2["REJECT_SNAPSHOT"] = 5] = "REJECT_SNAPSHOT";
  ResponseApplySnapshotChunkResult2[ResponseApplySnapshotChunkResult2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ResponseApplySnapshotChunkResult || (ResponseApplySnapshotChunkResult = {}));
var ResponseProcessProposalProposalStatus;
(function(ResponseProcessProposalProposalStatus2) {
  ResponseProcessProposalProposalStatus2[ResponseProcessProposalProposalStatus2["UNKNOWN"] = 0] = "UNKNOWN";
  ResponseProcessProposalProposalStatus2[ResponseProcessProposalProposalStatus2["ACCEPT"] = 1] = "ACCEPT";
  ResponseProcessProposalProposalStatus2[ResponseProcessProposalProposalStatus2["REJECT"] = 2] = "REJECT";
  ResponseProcessProposalProposalStatus2[ResponseProcessProposalProposalStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ResponseProcessProposalProposalStatus || (ResponseProcessProposalProposalStatus = {}));
var ResponseVerifyVoteExtensionVerifyStatus;
(function(ResponseVerifyVoteExtensionVerifyStatus2) {
  ResponseVerifyVoteExtensionVerifyStatus2[ResponseVerifyVoteExtensionVerifyStatus2["UNKNOWN"] = 0] = "UNKNOWN";
  ResponseVerifyVoteExtensionVerifyStatus2[ResponseVerifyVoteExtensionVerifyStatus2["ACCEPT"] = 1] = "ACCEPT";
  ResponseVerifyVoteExtensionVerifyStatus2[ResponseVerifyVoteExtensionVerifyStatus2["REJECT"] = 2] = "REJECT";
  ResponseVerifyVoteExtensionVerifyStatus2[ResponseVerifyVoteExtensionVerifyStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ResponseVerifyVoteExtensionVerifyStatus || (ResponseVerifyVoteExtensionVerifyStatus = {}));
var TxRecordTxAction;
(function(TxRecordTxAction2) {
  TxRecordTxAction2[TxRecordTxAction2["UNKNOWN"] = 0] = "UNKNOWN";
  TxRecordTxAction2[TxRecordTxAction2["UNMODIFIED"] = 1] = "UNMODIFIED";
  TxRecordTxAction2[TxRecordTxAction2["ADDED"] = 2] = "ADDED";
  TxRecordTxAction2[TxRecordTxAction2["REMOVED"] = 3] = "REMOVED";
  TxRecordTxAction2[TxRecordTxAction2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TxRecordTxAction || (TxRecordTxAction = {}));

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/abci/types.js
var Request = {
  $type: "tendermint.abci.Request",
  encode(message, writer = new BinaryWriter()) {
    if (message.echo !== void 0) {
      RequestEcho.encode(message.echo, writer.uint32(10).fork()).join();
    }
    if (message.flush !== void 0) {
      RequestFlush.encode(message.flush, writer.uint32(18).fork()).join();
    }
    if (message.info !== void 0) {
      RequestInfo.encode(message.info, writer.uint32(26).fork()).join();
    }
    if (message.init_chain !== void 0) {
      RequestInitChain.encode(message.init_chain, writer.uint32(34).fork()).join();
    }
    if (message.query !== void 0) {
      RequestQuery.encode(message.query, writer.uint32(42).fork()).join();
    }
    if (message.check_tx !== void 0) {
      RequestCheckTx.encode(message.check_tx, writer.uint32(58).fork()).join();
    }
    if (message.commit !== void 0) {
      RequestCommit.encode(message.commit, writer.uint32(82).fork()).join();
    }
    if (message.list_snapshots !== void 0) {
      RequestListSnapshots.encode(message.list_snapshots, writer.uint32(90).fork()).join();
    }
    if (message.offer_snapshot !== void 0) {
      RequestOfferSnapshot.encode(message.offer_snapshot, writer.uint32(98).fork()).join();
    }
    if (message.load_snapshot_chunk !== void 0) {
      RequestLoadSnapshotChunk.encode(message.load_snapshot_chunk, writer.uint32(106).fork()).join();
    }
    if (message.apply_snapshot_chunk !== void 0) {
      RequestApplySnapshotChunk.encode(message.apply_snapshot_chunk, writer.uint32(114).fork()).join();
    }
    if (message.prepare_proposal !== void 0) {
      RequestPrepareProposal.encode(message.prepare_proposal, writer.uint32(122).fork()).join();
    }
    if (message.process_proposal !== void 0) {
      RequestProcessProposal.encode(message.process_proposal, writer.uint32(130).fork()).join();
    }
    if (message.extend_vote !== void 0) {
      RequestExtendVote.encode(message.extend_vote, writer.uint32(138).fork()).join();
    }
    if (message.verify_vote_extension !== void 0) {
      RequestVerifyVoteExtension.encode(message.verify_vote_extension, writer.uint32(146).fork()).join();
    }
    if (message.finalize_block !== void 0) {
      RequestFinalizeBlock.encode(message.finalize_block, writer.uint32(154).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.echo = RequestEcho.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.flush = RequestFlush.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.info = RequestInfo.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.init_chain = RequestInitChain.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.query = RequestQuery.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.check_tx = RequestCheckTx.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.commit = RequestCommit.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.list_snapshots = RequestListSnapshots.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }
          message.offer_snapshot = RequestOfferSnapshot.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }
          message.load_snapshot_chunk = RequestLoadSnapshotChunk.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }
          message.apply_snapshot_chunk = RequestApplySnapshotChunk.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }
          message.prepare_proposal = RequestPrepareProposal.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }
          message.process_proposal = RequestProcessProposal.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }
          message.extend_vote = RequestExtendVote.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }
          message.verify_vote_extension = RequestVerifyVoteExtension.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }
          message.finalize_block = RequestFinalizeBlock.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      echo: isSet34(object.echo) ? RequestEcho.fromJSON(object.echo) : void 0,
      flush: isSet34(object.flush) ? RequestFlush.fromJSON(object.flush) : void 0,
      info: isSet34(object.info) ? RequestInfo.fromJSON(object.info) : void 0,
      init_chain: isSet34(object.init_chain) ? RequestInitChain.fromJSON(object.init_chain) : void 0,
      query: isSet34(object.query) ? RequestQuery.fromJSON(object.query) : void 0,
      check_tx: isSet34(object.check_tx) ? RequestCheckTx.fromJSON(object.check_tx) : void 0,
      commit: isSet34(object.commit) ? RequestCommit.fromJSON(object.commit) : void 0,
      list_snapshots: isSet34(object.list_snapshots) ? RequestListSnapshots.fromJSON(object.list_snapshots) : void 0,
      offer_snapshot: isSet34(object.offer_snapshot) ? RequestOfferSnapshot.fromJSON(object.offer_snapshot) : void 0,
      load_snapshot_chunk: isSet34(object.load_snapshot_chunk) ? RequestLoadSnapshotChunk.fromJSON(object.load_snapshot_chunk) : void 0,
      apply_snapshot_chunk: isSet34(object.apply_snapshot_chunk) ? RequestApplySnapshotChunk.fromJSON(object.apply_snapshot_chunk) : void 0,
      prepare_proposal: isSet34(object.prepare_proposal) ? RequestPrepareProposal.fromJSON(object.prepare_proposal) : void 0,
      process_proposal: isSet34(object.process_proposal) ? RequestProcessProposal.fromJSON(object.process_proposal) : void 0,
      extend_vote: isSet34(object.extend_vote) ? RequestExtendVote.fromJSON(object.extend_vote) : void 0,
      verify_vote_extension: isSet34(object.verify_vote_extension) ? RequestVerifyVoteExtension.fromJSON(object.verify_vote_extension) : void 0,
      finalize_block: isSet34(object.finalize_block) ? RequestFinalizeBlock.fromJSON(object.finalize_block) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.echo !== void 0) {
      obj.echo = RequestEcho.toJSON(message.echo);
    }
    if (message.flush !== void 0) {
      obj.flush = RequestFlush.toJSON(message.flush);
    }
    if (message.info !== void 0) {
      obj.info = RequestInfo.toJSON(message.info);
    }
    if (message.init_chain !== void 0) {
      obj.init_chain = RequestInitChain.toJSON(message.init_chain);
    }
    if (message.query !== void 0) {
      obj.query = RequestQuery.toJSON(message.query);
    }
    if (message.check_tx !== void 0) {
      obj.check_tx = RequestCheckTx.toJSON(message.check_tx);
    }
    if (message.commit !== void 0) {
      obj.commit = RequestCommit.toJSON(message.commit);
    }
    if (message.list_snapshots !== void 0) {
      obj.list_snapshots = RequestListSnapshots.toJSON(message.list_snapshots);
    }
    if (message.offer_snapshot !== void 0) {
      obj.offer_snapshot = RequestOfferSnapshot.toJSON(message.offer_snapshot);
    }
    if (message.load_snapshot_chunk !== void 0) {
      obj.load_snapshot_chunk = RequestLoadSnapshotChunk.toJSON(message.load_snapshot_chunk);
    }
    if (message.apply_snapshot_chunk !== void 0) {
      obj.apply_snapshot_chunk = RequestApplySnapshotChunk.toJSON(message.apply_snapshot_chunk);
    }
    if (message.prepare_proposal !== void 0) {
      obj.prepare_proposal = RequestPrepareProposal.toJSON(message.prepare_proposal);
    }
    if (message.process_proposal !== void 0) {
      obj.process_proposal = RequestProcessProposal.toJSON(message.process_proposal);
    }
    if (message.extend_vote !== void 0) {
      obj.extend_vote = RequestExtendVote.toJSON(message.extend_vote);
    }
    if (message.verify_vote_extension !== void 0) {
      obj.verify_vote_extension = RequestVerifyVoteExtension.toJSON(message.verify_vote_extension);
    }
    if (message.finalize_block !== void 0) {
      obj.finalize_block = RequestFinalizeBlock.toJSON(message.finalize_block);
    }
    return obj;
  },
  create(base) {
    return Request.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRequest();
    message.echo = object.echo !== void 0 && object.echo !== null ? RequestEcho.fromPartial(object.echo) : void 0;
    message.flush = object.flush !== void 0 && object.flush !== null ? RequestFlush.fromPartial(object.flush) : void 0;
    message.info = object.info !== void 0 && object.info !== null ? RequestInfo.fromPartial(object.info) : void 0;
    message.init_chain = object.init_chain !== void 0 && object.init_chain !== null ? RequestInitChain.fromPartial(object.init_chain) : void 0;
    message.query = object.query !== void 0 && object.query !== null ? RequestQuery.fromPartial(object.query) : void 0;
    message.check_tx = object.check_tx !== void 0 && object.check_tx !== null ? RequestCheckTx.fromPartial(object.check_tx) : void 0;
    message.commit = object.commit !== void 0 && object.commit !== null ? RequestCommit.fromPartial(object.commit) : void 0;
    message.list_snapshots = object.list_snapshots !== void 0 && object.list_snapshots !== null ? RequestListSnapshots.fromPartial(object.list_snapshots) : void 0;
    message.offer_snapshot = object.offer_snapshot !== void 0 && object.offer_snapshot !== null ? RequestOfferSnapshot.fromPartial(object.offer_snapshot) : void 0;
    message.load_snapshot_chunk = object.load_snapshot_chunk !== void 0 && object.load_snapshot_chunk !== null ? RequestLoadSnapshotChunk.fromPartial(object.load_snapshot_chunk) : void 0;
    message.apply_snapshot_chunk = object.apply_snapshot_chunk !== void 0 && object.apply_snapshot_chunk !== null ? RequestApplySnapshotChunk.fromPartial(object.apply_snapshot_chunk) : void 0;
    message.prepare_proposal = object.prepare_proposal !== void 0 && object.prepare_proposal !== null ? RequestPrepareProposal.fromPartial(object.prepare_proposal) : void 0;
    message.process_proposal = object.process_proposal !== void 0 && object.process_proposal !== null ? RequestProcessProposal.fromPartial(object.process_proposal) : void 0;
    message.extend_vote = object.extend_vote !== void 0 && object.extend_vote !== null ? RequestExtendVote.fromPartial(object.extend_vote) : void 0;
    message.verify_vote_extension = object.verify_vote_extension !== void 0 && object.verify_vote_extension !== null ? RequestVerifyVoteExtension.fromPartial(object.verify_vote_extension) : void 0;
    message.finalize_block = object.finalize_block !== void 0 && object.finalize_block !== null ? RequestFinalizeBlock.fromPartial(object.finalize_block) : void 0;
    return message;
  }
};
var RequestEcho = {
  $type: "tendermint.abci.RequestEcho",
  encode(message, writer = new BinaryWriter()) {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestEcho();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { message: isSet34(object.message) ? globalThis.String(object.message) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },
  create(base) {
    return RequestEcho.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRequestEcho();
    message.message = object.message ?? "";
    return message;
  }
};
var RequestFlush = {
  $type: "tendermint.abci.RequestFlush",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestFlush();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return RequestFlush.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseRequestFlush();
    return message;
  }
};
var RequestInfo = {
  $type: "tendermint.abci.RequestInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.block_version !== 0) {
      writer.uint32(16).uint64(message.block_version);
    }
    if (message.p2p_version !== 0) {
      writer.uint32(24).uint64(message.p2p_version);
    }
    if (message.abci_version !== "") {
      writer.uint32(34).string(message.abci_version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.version = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.block_version = longToNumber12(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.p2p_version = longToNumber12(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.abci_version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      version: isSet34(object.version) ? globalThis.String(object.version) : "",
      block_version: isSet34(object.block_version) ? globalThis.Number(object.block_version) : 0,
      p2p_version: isSet34(object.p2p_version) ? globalThis.Number(object.p2p_version) : 0,
      abci_version: isSet34(object.abci_version) ? globalThis.String(object.abci_version) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.block_version !== 0) {
      obj.block_version = Math.round(message.block_version);
    }
    if (message.p2p_version !== 0) {
      obj.p2p_version = Math.round(message.p2p_version);
    }
    if (message.abci_version !== "") {
      obj.abci_version = message.abci_version;
    }
    return obj;
  },
  create(base) {
    return RequestInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRequestInfo();
    message.version = object.version ?? "";
    message.block_version = object.block_version ?? 0;
    message.p2p_version = object.p2p_version ?? 0;
    message.abci_version = object.abci_version ?? "";
    return message;
  }
};
var RequestInitChain = {
  $type: "tendermint.abci.RequestInitChain",
  encode(message, writer = new BinaryWriter()) {
    if (message.time !== void 0) {
      Timestamp.encode(toTimestamp2(message.time), writer.uint32(10).fork()).join();
    }
    if (message.chain_id !== "") {
      writer.uint32(18).string(message.chain_id);
    }
    if (message.consensus_params !== void 0) {
      ConsensusParams.encode(message.consensus_params, writer.uint32(26).fork()).join();
    }
    for (const v of message.validators) {
      ValidatorUpdate.encode(v, writer.uint32(34).fork()).join();
    }
    if (message.app_state_bytes.length !== 0) {
      writer.uint32(42).bytes(message.app_state_bytes);
    }
    if (message.initial_height !== 0) {
      writer.uint32(48).int64(message.initial_height);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestInitChain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.time = fromTimestamp2(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.chain_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.consensus_params = ConsensusParams.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.validators.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.app_state_bytes = reader.bytes();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.initial_height = longToNumber12(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      time: isSet34(object.time) ? fromJsonTimestamp2(object.time) : void 0,
      chain_id: isSet34(object.chain_id) ? globalThis.String(object.chain_id) : "",
      consensus_params: isSet34(object.consensus_params) ? ConsensusParams.fromJSON(object.consensus_params) : void 0,
      validators: globalThis.Array.isArray(object == null ? void 0 : object.validators) ? object.validators.map((e) => ValidatorUpdate.fromJSON(e)) : [],
      app_state_bytes: isSet34(object.app_state_bytes) ? bytesFromBase6413(object.app_state_bytes) : new Uint8Array(0),
      initial_height: isSet34(object.initial_height) ? globalThis.Number(object.initial_height) : 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.time !== void 0) {
      obj.time = message.time.toISOString();
    }
    if (message.chain_id !== "") {
      obj.chain_id = message.chain_id;
    }
    if (message.consensus_params !== void 0) {
      obj.consensus_params = ConsensusParams.toJSON(message.consensus_params);
    }
    if ((_a = message.validators) == null ? void 0 : _a.length) {
      obj.validators = message.validators.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.app_state_bytes.length !== 0) {
      obj.app_state_bytes = base64FromBytes13(message.app_state_bytes);
    }
    if (message.initial_height !== 0) {
      obj.initial_height = Math.round(message.initial_height);
    }
    return obj;
  },
  create(base) {
    return RequestInitChain.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseRequestInitChain();
    message.time = object.time ?? void 0;
    message.chain_id = object.chain_id ?? "";
    message.consensus_params = object.consensus_params !== void 0 && object.consensus_params !== null ? ConsensusParams.fromPartial(object.consensus_params) : void 0;
    message.validators = ((_a = object.validators) == null ? void 0 : _a.map((e) => ValidatorUpdate.fromPartial(e))) || [];
    message.app_state_bytes = object.app_state_bytes ?? new Uint8Array(0);
    message.initial_height = object.initial_height ?? 0;
    return message;
  }
};
var RequestQuery = {
  $type: "tendermint.abci.RequestQuery",
  encode(message, writer = new BinaryWriter()) {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.height !== 0) {
      writer.uint32(24).int64(message.height);
    }
    if (message.prove !== false) {
      writer.uint32(32).bool(message.prove);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.path = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.height = longToNumber12(reader.int64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.prove = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      data: isSet34(object.data) ? bytesFromBase6413(object.data) : new Uint8Array(0),
      path: isSet34(object.path) ? globalThis.String(object.path) : "",
      height: isSet34(object.height) ? globalThis.Number(object.height) : 0,
      prove: isSet34(object.prove) ? globalThis.Boolean(object.prove) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes13(message.data);
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.prove !== false) {
      obj.prove = message.prove;
    }
    return obj;
  },
  create(base) {
    return RequestQuery.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRequestQuery();
    message.data = object.data ?? new Uint8Array(0);
    message.path = object.path ?? "";
    message.height = object.height ?? 0;
    message.prove = object.prove ?? false;
    return message;
  }
};
var RequestCheckTx = {
  $type: "tendermint.abci.RequestCheckTx",
  encode(message, writer = new BinaryWriter()) {
    if (message.tx.length !== 0) {
      writer.uint32(10).bytes(message.tx);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestCheckTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.tx = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.type = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      tx: isSet34(object.tx) ? bytesFromBase6413(object.tx) : new Uint8Array(0),
      type: isSet34(object.type) ? checkTxTypeFromJSON(object.type) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.tx.length !== 0) {
      obj.tx = base64FromBytes13(message.tx);
    }
    if (message.type !== 0) {
      obj.type = checkTxTypeToJSON(message.type);
    }
    return obj;
  },
  create(base) {
    return RequestCheckTx.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRequestCheckTx();
    message.tx = object.tx ?? new Uint8Array(0);
    message.type = object.type ?? 0;
    return message;
  }
};
var RequestCommit = {
  $type: "tendermint.abci.RequestCommit",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestCommit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return RequestCommit.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseRequestCommit();
    return message;
  }
};
var RequestListSnapshots = {
  $type: "tendermint.abci.RequestListSnapshots",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestListSnapshots();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return RequestListSnapshots.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseRequestListSnapshots();
    return message;
  }
};
var RequestOfferSnapshot = {
  $type: "tendermint.abci.RequestOfferSnapshot",
  encode(message, writer = new BinaryWriter()) {
    if (message.snapshot !== void 0) {
      Snapshot.encode(message.snapshot, writer.uint32(10).fork()).join();
    }
    if (message.app_hash.length !== 0) {
      writer.uint32(18).bytes(message.app_hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestOfferSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.snapshot = Snapshot.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.app_hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      snapshot: isSet34(object.snapshot) ? Snapshot.fromJSON(object.snapshot) : void 0,
      app_hash: isSet34(object.app_hash) ? bytesFromBase6413(object.app_hash) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.snapshot !== void 0) {
      obj.snapshot = Snapshot.toJSON(message.snapshot);
    }
    if (message.app_hash.length !== 0) {
      obj.app_hash = base64FromBytes13(message.app_hash);
    }
    return obj;
  },
  create(base) {
    return RequestOfferSnapshot.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRequestOfferSnapshot();
    message.snapshot = object.snapshot !== void 0 && object.snapshot !== null ? Snapshot.fromPartial(object.snapshot) : void 0;
    message.app_hash = object.app_hash ?? new Uint8Array(0);
    return message;
  }
};
var RequestLoadSnapshotChunk = {
  $type: "tendermint.abci.RequestLoadSnapshotChunk",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).uint64(message.height);
    }
    if (message.format !== 0) {
      writer.uint32(16).uint32(message.format);
    }
    if (message.chunk !== 0) {
      writer.uint32(24).uint32(message.chunk);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestLoadSnapshotChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber12(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.format = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.chunk = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet34(object.height) ? globalThis.Number(object.height) : 0,
      format: isSet34(object.format) ? globalThis.Number(object.format) : 0,
      chunk: isSet34(object.chunk) ? globalThis.Number(object.chunk) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.format !== 0) {
      obj.format = Math.round(message.format);
    }
    if (message.chunk !== 0) {
      obj.chunk = Math.round(message.chunk);
    }
    return obj;
  },
  create(base) {
    return RequestLoadSnapshotChunk.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRequestLoadSnapshotChunk();
    message.height = object.height ?? 0;
    message.format = object.format ?? 0;
    message.chunk = object.chunk ?? 0;
    return message;
  }
};
var RequestApplySnapshotChunk = {
  $type: "tendermint.abci.RequestApplySnapshotChunk",
  encode(message, writer = new BinaryWriter()) {
    if (message.index !== 0) {
      writer.uint32(8).uint32(message.index);
    }
    if (message.chunk.length !== 0) {
      writer.uint32(18).bytes(message.chunk);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestApplySnapshotChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.index = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.chunk = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.sender = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      index: isSet34(object.index) ? globalThis.Number(object.index) : 0,
      chunk: isSet34(object.chunk) ? bytesFromBase6413(object.chunk) : new Uint8Array(0),
      sender: isSet34(object.sender) ? globalThis.String(object.sender) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.chunk.length !== 0) {
      obj.chunk = base64FromBytes13(message.chunk);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    return obj;
  },
  create(base) {
    return RequestApplySnapshotChunk.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRequestApplySnapshotChunk();
    message.index = object.index ?? 0;
    message.chunk = object.chunk ?? new Uint8Array(0);
    message.sender = object.sender ?? "";
    return message;
  }
};
var RequestPrepareProposal = {
  $type: "tendermint.abci.RequestPrepareProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.max_tx_bytes !== 0) {
      writer.uint32(8).int64(message.max_tx_bytes);
    }
    for (const v of message.txs) {
      writer.uint32(18).bytes(v);
    }
    if (message.local_last_commit !== void 0) {
      ExtendedCommitInfo.encode(message.local_last_commit, writer.uint32(26).fork()).join();
    }
    for (const v of message.byzantine_validators) {
      Misbehavior.encode(v, writer.uint32(34).fork()).join();
    }
    if (message.height !== 0) {
      writer.uint32(40).int64(message.height);
    }
    if (message.time !== void 0) {
      Timestamp.encode(toTimestamp2(message.time), writer.uint32(50).fork()).join();
    }
    if (message.next_validators_hash.length !== 0) {
      writer.uint32(58).bytes(message.next_validators_hash);
    }
    if (message.proposer_address.length !== 0) {
      writer.uint32(66).bytes(message.proposer_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestPrepareProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.max_tx_bytes = longToNumber12(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.txs.push(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.local_last_commit = ExtendedCommitInfo.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.byzantine_validators.push(Misbehavior.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.height = longToNumber12(reader.int64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.time = fromTimestamp2(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.next_validators_hash = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.proposer_address = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      max_tx_bytes: isSet34(object.max_tx_bytes) ? globalThis.Number(object.max_tx_bytes) : 0,
      txs: globalThis.Array.isArray(object == null ? void 0 : object.txs) ? object.txs.map((e) => bytesFromBase6413(e)) : [],
      local_last_commit: isSet34(object.local_last_commit) ? ExtendedCommitInfo.fromJSON(object.local_last_commit) : void 0,
      byzantine_validators: globalThis.Array.isArray(object == null ? void 0 : object.byzantine_validators) ? object.byzantine_validators.map((e) => Misbehavior.fromJSON(e)) : [],
      height: isSet34(object.height) ? globalThis.Number(object.height) : 0,
      time: isSet34(object.time) ? fromJsonTimestamp2(object.time) : void 0,
      next_validators_hash: isSet34(object.next_validators_hash) ? bytesFromBase6413(object.next_validators_hash) : new Uint8Array(0),
      proposer_address: isSet34(object.proposer_address) ? bytesFromBase6413(object.proposer_address) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if (message.max_tx_bytes !== 0) {
      obj.max_tx_bytes = Math.round(message.max_tx_bytes);
    }
    if ((_a = message.txs) == null ? void 0 : _a.length) {
      obj.txs = message.txs.map((e) => base64FromBytes13(e));
    }
    if (message.local_last_commit !== void 0) {
      obj.local_last_commit = ExtendedCommitInfo.toJSON(message.local_last_commit);
    }
    if ((_b = message.byzantine_validators) == null ? void 0 : _b.length) {
      obj.byzantine_validators = message.byzantine_validators.map((e) => Misbehavior.toJSON(e));
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.time !== void 0) {
      obj.time = message.time.toISOString();
    }
    if (message.next_validators_hash.length !== 0) {
      obj.next_validators_hash = base64FromBytes13(message.next_validators_hash);
    }
    if (message.proposer_address.length !== 0) {
      obj.proposer_address = base64FromBytes13(message.proposer_address);
    }
    return obj;
  },
  create(base) {
    return RequestPrepareProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseRequestPrepareProposal();
    message.max_tx_bytes = object.max_tx_bytes ?? 0;
    message.txs = ((_a = object.txs) == null ? void 0 : _a.map((e) => e)) || [];
    message.local_last_commit = object.local_last_commit !== void 0 && object.local_last_commit !== null ? ExtendedCommitInfo.fromPartial(object.local_last_commit) : void 0;
    message.byzantine_validators = ((_b = object.byzantine_validators) == null ? void 0 : _b.map((e) => Misbehavior.fromPartial(e))) || [];
    message.height = object.height ?? 0;
    message.time = object.time ?? void 0;
    message.next_validators_hash = object.next_validators_hash ?? new Uint8Array(0);
    message.proposer_address = object.proposer_address ?? new Uint8Array(0);
    return message;
  }
};
var RequestProcessProposal = {
  $type: "tendermint.abci.RequestProcessProposal",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.txs) {
      writer.uint32(10).bytes(v);
    }
    if (message.proposed_last_commit !== void 0) {
      CommitInfo.encode(message.proposed_last_commit, writer.uint32(18).fork()).join();
    }
    for (const v of message.byzantine_validators) {
      Misbehavior.encode(v, writer.uint32(26).fork()).join();
    }
    if (message.hash.length !== 0) {
      writer.uint32(34).bytes(message.hash);
    }
    if (message.height !== 0) {
      writer.uint32(40).int64(message.height);
    }
    if (message.time !== void 0) {
      Timestamp.encode(toTimestamp2(message.time), writer.uint32(50).fork()).join();
    }
    if (message.next_validators_hash.length !== 0) {
      writer.uint32(58).bytes(message.next_validators_hash);
    }
    if (message.proposer_address.length !== 0) {
      writer.uint32(66).bytes(message.proposer_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestProcessProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.txs.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.proposed_last_commit = CommitInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.byzantine_validators.push(Misbehavior.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.hash = reader.bytes();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.height = longToNumber12(reader.int64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.time = fromTimestamp2(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.next_validators_hash = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.proposer_address = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      txs: globalThis.Array.isArray(object == null ? void 0 : object.txs) ? object.txs.map((e) => bytesFromBase6413(e)) : [],
      proposed_last_commit: isSet34(object.proposed_last_commit) ? CommitInfo.fromJSON(object.proposed_last_commit) : void 0,
      byzantine_validators: globalThis.Array.isArray(object == null ? void 0 : object.byzantine_validators) ? object.byzantine_validators.map((e) => Misbehavior.fromJSON(e)) : [],
      hash: isSet34(object.hash) ? bytesFromBase6413(object.hash) : new Uint8Array(0),
      height: isSet34(object.height) ? globalThis.Number(object.height) : 0,
      time: isSet34(object.time) ? fromJsonTimestamp2(object.time) : void 0,
      next_validators_hash: isSet34(object.next_validators_hash) ? bytesFromBase6413(object.next_validators_hash) : new Uint8Array(0),
      proposer_address: isSet34(object.proposer_address) ? bytesFromBase6413(object.proposer_address) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if ((_a = message.txs) == null ? void 0 : _a.length) {
      obj.txs = message.txs.map((e) => base64FromBytes13(e));
    }
    if (message.proposed_last_commit !== void 0) {
      obj.proposed_last_commit = CommitInfo.toJSON(message.proposed_last_commit);
    }
    if ((_b = message.byzantine_validators) == null ? void 0 : _b.length) {
      obj.byzantine_validators = message.byzantine_validators.map((e) => Misbehavior.toJSON(e));
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes13(message.hash);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.time !== void 0) {
      obj.time = message.time.toISOString();
    }
    if (message.next_validators_hash.length !== 0) {
      obj.next_validators_hash = base64FromBytes13(message.next_validators_hash);
    }
    if (message.proposer_address.length !== 0) {
      obj.proposer_address = base64FromBytes13(message.proposer_address);
    }
    return obj;
  },
  create(base) {
    return RequestProcessProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseRequestProcessProposal();
    message.txs = ((_a = object.txs) == null ? void 0 : _a.map((e) => e)) || [];
    message.proposed_last_commit = object.proposed_last_commit !== void 0 && object.proposed_last_commit !== null ? CommitInfo.fromPartial(object.proposed_last_commit) : void 0;
    message.byzantine_validators = ((_b = object.byzantine_validators) == null ? void 0 : _b.map((e) => Misbehavior.fromPartial(e))) || [];
    message.hash = object.hash ?? new Uint8Array(0);
    message.height = object.height ?? 0;
    message.time = object.time ?? void 0;
    message.next_validators_hash = object.next_validators_hash ?? new Uint8Array(0);
    message.proposer_address = object.proposer_address ?? new Uint8Array(0);
    return message;
  }
};
var RequestExtendVote = {
  $type: "tendermint.abci.RequestExtendVote",
  encode(message, writer = new BinaryWriter()) {
    if (message.hash.length !== 0) {
      writer.uint32(10).bytes(message.hash);
    }
    if (message.height !== 0) {
      writer.uint32(16).int64(message.height);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestExtendVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.hash = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.height = longToNumber12(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      hash: isSet34(object.hash) ? bytesFromBase6413(object.hash) : new Uint8Array(0),
      height: isSet34(object.height) ? globalThis.Number(object.height) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes13(message.hash);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },
  create(base) {
    return RequestExtendVote.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRequestExtendVote();
    message.hash = object.hash ?? new Uint8Array(0);
    message.height = object.height ?? 0;
    return message;
  }
};
var RequestVerifyVoteExtension = {
  $type: "tendermint.abci.RequestVerifyVoteExtension",
  encode(message, writer = new BinaryWriter()) {
    if (message.hash.length !== 0) {
      writer.uint32(10).bytes(message.hash);
    }
    if (message.validator_address.length !== 0) {
      writer.uint32(18).bytes(message.validator_address);
    }
    if (message.height !== 0) {
      writer.uint32(24).int64(message.height);
    }
    if (message.vote_extension.length !== 0) {
      writer.uint32(34).bytes(message.vote_extension);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestVerifyVoteExtension();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.hash = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.height = longToNumber12(reader.int64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.vote_extension = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      hash: isSet34(object.hash) ? bytesFromBase6413(object.hash) : new Uint8Array(0),
      validator_address: isSet34(object.validator_address) ? bytesFromBase6413(object.validator_address) : new Uint8Array(0),
      height: isSet34(object.height) ? globalThis.Number(object.height) : 0,
      vote_extension: isSet34(object.vote_extension) ? bytesFromBase6413(object.vote_extension) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes13(message.hash);
    }
    if (message.validator_address.length !== 0) {
      obj.validator_address = base64FromBytes13(message.validator_address);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.vote_extension.length !== 0) {
      obj.vote_extension = base64FromBytes13(message.vote_extension);
    }
    return obj;
  },
  create(base) {
    return RequestVerifyVoteExtension.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRequestVerifyVoteExtension();
    message.hash = object.hash ?? new Uint8Array(0);
    message.validator_address = object.validator_address ?? new Uint8Array(0);
    message.height = object.height ?? 0;
    message.vote_extension = object.vote_extension ?? new Uint8Array(0);
    return message;
  }
};
var RequestFinalizeBlock = {
  $type: "tendermint.abci.RequestFinalizeBlock",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.txs) {
      writer.uint32(10).bytes(v);
    }
    if (message.decided_last_commit !== void 0) {
      CommitInfo.encode(message.decided_last_commit, writer.uint32(18).fork()).join();
    }
    for (const v of message.byzantine_validators) {
      Misbehavior.encode(v, writer.uint32(26).fork()).join();
    }
    if (message.hash.length !== 0) {
      writer.uint32(34).bytes(message.hash);
    }
    if (message.height !== 0) {
      writer.uint32(40).int64(message.height);
    }
    if (message.time !== void 0) {
      Timestamp.encode(toTimestamp2(message.time), writer.uint32(50).fork()).join();
    }
    if (message.next_validators_hash.length !== 0) {
      writer.uint32(58).bytes(message.next_validators_hash);
    }
    if (message.proposer_address.length !== 0) {
      writer.uint32(66).bytes(message.proposer_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRequestFinalizeBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.txs.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.decided_last_commit = CommitInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.byzantine_validators.push(Misbehavior.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.hash = reader.bytes();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.height = longToNumber12(reader.int64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.time = fromTimestamp2(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.next_validators_hash = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.proposer_address = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      txs: globalThis.Array.isArray(object == null ? void 0 : object.txs) ? object.txs.map((e) => bytesFromBase6413(e)) : [],
      decided_last_commit: isSet34(object.decided_last_commit) ? CommitInfo.fromJSON(object.decided_last_commit) : void 0,
      byzantine_validators: globalThis.Array.isArray(object == null ? void 0 : object.byzantine_validators) ? object.byzantine_validators.map((e) => Misbehavior.fromJSON(e)) : [],
      hash: isSet34(object.hash) ? bytesFromBase6413(object.hash) : new Uint8Array(0),
      height: isSet34(object.height) ? globalThis.Number(object.height) : 0,
      time: isSet34(object.time) ? fromJsonTimestamp2(object.time) : void 0,
      next_validators_hash: isSet34(object.next_validators_hash) ? bytesFromBase6413(object.next_validators_hash) : new Uint8Array(0),
      proposer_address: isSet34(object.proposer_address) ? bytesFromBase6413(object.proposer_address) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if ((_a = message.txs) == null ? void 0 : _a.length) {
      obj.txs = message.txs.map((e) => base64FromBytes13(e));
    }
    if (message.decided_last_commit !== void 0) {
      obj.decided_last_commit = CommitInfo.toJSON(message.decided_last_commit);
    }
    if ((_b = message.byzantine_validators) == null ? void 0 : _b.length) {
      obj.byzantine_validators = message.byzantine_validators.map((e) => Misbehavior.toJSON(e));
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes13(message.hash);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.time !== void 0) {
      obj.time = message.time.toISOString();
    }
    if (message.next_validators_hash.length !== 0) {
      obj.next_validators_hash = base64FromBytes13(message.next_validators_hash);
    }
    if (message.proposer_address.length !== 0) {
      obj.proposer_address = base64FromBytes13(message.proposer_address);
    }
    return obj;
  },
  create(base) {
    return RequestFinalizeBlock.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseRequestFinalizeBlock();
    message.txs = ((_a = object.txs) == null ? void 0 : _a.map((e) => e)) || [];
    message.decided_last_commit = object.decided_last_commit !== void 0 && object.decided_last_commit !== null ? CommitInfo.fromPartial(object.decided_last_commit) : void 0;
    message.byzantine_validators = ((_b = object.byzantine_validators) == null ? void 0 : _b.map((e) => Misbehavior.fromPartial(e))) || [];
    message.hash = object.hash ?? new Uint8Array(0);
    message.height = object.height ?? 0;
    message.time = object.time ?? void 0;
    message.next_validators_hash = object.next_validators_hash ?? new Uint8Array(0);
    message.proposer_address = object.proposer_address ?? new Uint8Array(0);
    return message;
  }
};
var Response = {
  $type: "tendermint.abci.Response",
  encode(message, writer = new BinaryWriter()) {
    if (message.exception !== void 0) {
      ResponseException.encode(message.exception, writer.uint32(10).fork()).join();
    }
    if (message.echo !== void 0) {
      ResponseEcho.encode(message.echo, writer.uint32(18).fork()).join();
    }
    if (message.flush !== void 0) {
      ResponseFlush.encode(message.flush, writer.uint32(26).fork()).join();
    }
    if (message.info !== void 0) {
      ResponseInfo.encode(message.info, writer.uint32(34).fork()).join();
    }
    if (message.init_chain !== void 0) {
      ResponseInitChain.encode(message.init_chain, writer.uint32(42).fork()).join();
    }
    if (message.query !== void 0) {
      ResponseQuery.encode(message.query, writer.uint32(50).fork()).join();
    }
    if (message.check_tx !== void 0) {
      ResponseCheckTx.encode(message.check_tx, writer.uint32(66).fork()).join();
    }
    if (message.commit !== void 0) {
      ResponseCommit.encode(message.commit, writer.uint32(90).fork()).join();
    }
    if (message.list_snapshots !== void 0) {
      ResponseListSnapshots.encode(message.list_snapshots, writer.uint32(98).fork()).join();
    }
    if (message.offer_snapshot !== void 0) {
      ResponseOfferSnapshot.encode(message.offer_snapshot, writer.uint32(106).fork()).join();
    }
    if (message.load_snapshot_chunk !== void 0) {
      ResponseLoadSnapshotChunk.encode(message.load_snapshot_chunk, writer.uint32(114).fork()).join();
    }
    if (message.apply_snapshot_chunk !== void 0) {
      ResponseApplySnapshotChunk.encode(message.apply_snapshot_chunk, writer.uint32(122).fork()).join();
    }
    if (message.prepare_proposal !== void 0) {
      ResponsePrepareProposal.encode(message.prepare_proposal, writer.uint32(130).fork()).join();
    }
    if (message.process_proposal !== void 0) {
      ResponseProcessProposal.encode(message.process_proposal, writer.uint32(138).fork()).join();
    }
    if (message.extend_vote !== void 0) {
      ResponseExtendVote.encode(message.extend_vote, writer.uint32(146).fork()).join();
    }
    if (message.verify_vote_extension !== void 0) {
      ResponseVerifyVoteExtension.encode(message.verify_vote_extension, writer.uint32(154).fork()).join();
    }
    if (message.finalize_block !== void 0) {
      ResponseFinalizeBlock.encode(message.finalize_block, writer.uint32(162).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.exception = ResponseException.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.echo = ResponseEcho.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.flush = ResponseFlush.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.info = ResponseInfo.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.init_chain = ResponseInitChain.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.query = ResponseQuery.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.check_tx = ResponseCheckTx.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.commit = ResponseCommit.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }
          message.list_snapshots = ResponseListSnapshots.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }
          message.offer_snapshot = ResponseOfferSnapshot.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }
          message.load_snapshot_chunk = ResponseLoadSnapshotChunk.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }
          message.apply_snapshot_chunk = ResponseApplySnapshotChunk.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }
          message.prepare_proposal = ResponsePrepareProposal.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }
          message.process_proposal = ResponseProcessProposal.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }
          message.extend_vote = ResponseExtendVote.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }
          message.verify_vote_extension = ResponseVerifyVoteExtension.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }
          message.finalize_block = ResponseFinalizeBlock.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      exception: isSet34(object.exception) ? ResponseException.fromJSON(object.exception) : void 0,
      echo: isSet34(object.echo) ? ResponseEcho.fromJSON(object.echo) : void 0,
      flush: isSet34(object.flush) ? ResponseFlush.fromJSON(object.flush) : void 0,
      info: isSet34(object.info) ? ResponseInfo.fromJSON(object.info) : void 0,
      init_chain: isSet34(object.init_chain) ? ResponseInitChain.fromJSON(object.init_chain) : void 0,
      query: isSet34(object.query) ? ResponseQuery.fromJSON(object.query) : void 0,
      check_tx: isSet34(object.check_tx) ? ResponseCheckTx.fromJSON(object.check_tx) : void 0,
      commit: isSet34(object.commit) ? ResponseCommit.fromJSON(object.commit) : void 0,
      list_snapshots: isSet34(object.list_snapshots) ? ResponseListSnapshots.fromJSON(object.list_snapshots) : void 0,
      offer_snapshot: isSet34(object.offer_snapshot) ? ResponseOfferSnapshot.fromJSON(object.offer_snapshot) : void 0,
      load_snapshot_chunk: isSet34(object.load_snapshot_chunk) ? ResponseLoadSnapshotChunk.fromJSON(object.load_snapshot_chunk) : void 0,
      apply_snapshot_chunk: isSet34(object.apply_snapshot_chunk) ? ResponseApplySnapshotChunk.fromJSON(object.apply_snapshot_chunk) : void 0,
      prepare_proposal: isSet34(object.prepare_proposal) ? ResponsePrepareProposal.fromJSON(object.prepare_proposal) : void 0,
      process_proposal: isSet34(object.process_proposal) ? ResponseProcessProposal.fromJSON(object.process_proposal) : void 0,
      extend_vote: isSet34(object.extend_vote) ? ResponseExtendVote.fromJSON(object.extend_vote) : void 0,
      verify_vote_extension: isSet34(object.verify_vote_extension) ? ResponseVerifyVoteExtension.fromJSON(object.verify_vote_extension) : void 0,
      finalize_block: isSet34(object.finalize_block) ? ResponseFinalizeBlock.fromJSON(object.finalize_block) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.exception !== void 0) {
      obj.exception = ResponseException.toJSON(message.exception);
    }
    if (message.echo !== void 0) {
      obj.echo = ResponseEcho.toJSON(message.echo);
    }
    if (message.flush !== void 0) {
      obj.flush = ResponseFlush.toJSON(message.flush);
    }
    if (message.info !== void 0) {
      obj.info = ResponseInfo.toJSON(message.info);
    }
    if (message.init_chain !== void 0) {
      obj.init_chain = ResponseInitChain.toJSON(message.init_chain);
    }
    if (message.query !== void 0) {
      obj.query = ResponseQuery.toJSON(message.query);
    }
    if (message.check_tx !== void 0) {
      obj.check_tx = ResponseCheckTx.toJSON(message.check_tx);
    }
    if (message.commit !== void 0) {
      obj.commit = ResponseCommit.toJSON(message.commit);
    }
    if (message.list_snapshots !== void 0) {
      obj.list_snapshots = ResponseListSnapshots.toJSON(message.list_snapshots);
    }
    if (message.offer_snapshot !== void 0) {
      obj.offer_snapshot = ResponseOfferSnapshot.toJSON(message.offer_snapshot);
    }
    if (message.load_snapshot_chunk !== void 0) {
      obj.load_snapshot_chunk = ResponseLoadSnapshotChunk.toJSON(message.load_snapshot_chunk);
    }
    if (message.apply_snapshot_chunk !== void 0) {
      obj.apply_snapshot_chunk = ResponseApplySnapshotChunk.toJSON(message.apply_snapshot_chunk);
    }
    if (message.prepare_proposal !== void 0) {
      obj.prepare_proposal = ResponsePrepareProposal.toJSON(message.prepare_proposal);
    }
    if (message.process_proposal !== void 0) {
      obj.process_proposal = ResponseProcessProposal.toJSON(message.process_proposal);
    }
    if (message.extend_vote !== void 0) {
      obj.extend_vote = ResponseExtendVote.toJSON(message.extend_vote);
    }
    if (message.verify_vote_extension !== void 0) {
      obj.verify_vote_extension = ResponseVerifyVoteExtension.toJSON(message.verify_vote_extension);
    }
    if (message.finalize_block !== void 0) {
      obj.finalize_block = ResponseFinalizeBlock.toJSON(message.finalize_block);
    }
    return obj;
  },
  create(base) {
    return Response.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResponse();
    message.exception = object.exception !== void 0 && object.exception !== null ? ResponseException.fromPartial(object.exception) : void 0;
    message.echo = object.echo !== void 0 && object.echo !== null ? ResponseEcho.fromPartial(object.echo) : void 0;
    message.flush = object.flush !== void 0 && object.flush !== null ? ResponseFlush.fromPartial(object.flush) : void 0;
    message.info = object.info !== void 0 && object.info !== null ? ResponseInfo.fromPartial(object.info) : void 0;
    message.init_chain = object.init_chain !== void 0 && object.init_chain !== null ? ResponseInitChain.fromPartial(object.init_chain) : void 0;
    message.query = object.query !== void 0 && object.query !== null ? ResponseQuery.fromPartial(object.query) : void 0;
    message.check_tx = object.check_tx !== void 0 && object.check_tx !== null ? ResponseCheckTx.fromPartial(object.check_tx) : void 0;
    message.commit = object.commit !== void 0 && object.commit !== null ? ResponseCommit.fromPartial(object.commit) : void 0;
    message.list_snapshots = object.list_snapshots !== void 0 && object.list_snapshots !== null ? ResponseListSnapshots.fromPartial(object.list_snapshots) : void 0;
    message.offer_snapshot = object.offer_snapshot !== void 0 && object.offer_snapshot !== null ? ResponseOfferSnapshot.fromPartial(object.offer_snapshot) : void 0;
    message.load_snapshot_chunk = object.load_snapshot_chunk !== void 0 && object.load_snapshot_chunk !== null ? ResponseLoadSnapshotChunk.fromPartial(object.load_snapshot_chunk) : void 0;
    message.apply_snapshot_chunk = object.apply_snapshot_chunk !== void 0 && object.apply_snapshot_chunk !== null ? ResponseApplySnapshotChunk.fromPartial(object.apply_snapshot_chunk) : void 0;
    message.prepare_proposal = object.prepare_proposal !== void 0 && object.prepare_proposal !== null ? ResponsePrepareProposal.fromPartial(object.prepare_proposal) : void 0;
    message.process_proposal = object.process_proposal !== void 0 && object.process_proposal !== null ? ResponseProcessProposal.fromPartial(object.process_proposal) : void 0;
    message.extend_vote = object.extend_vote !== void 0 && object.extend_vote !== null ? ResponseExtendVote.fromPartial(object.extend_vote) : void 0;
    message.verify_vote_extension = object.verify_vote_extension !== void 0 && object.verify_vote_extension !== null ? ResponseVerifyVoteExtension.fromPartial(object.verify_vote_extension) : void 0;
    message.finalize_block = object.finalize_block !== void 0 && object.finalize_block !== null ? ResponseFinalizeBlock.fromPartial(object.finalize_block) : void 0;
    return message;
  }
};
var ResponseException = {
  $type: "tendermint.abci.ResponseException",
  encode(message, writer = new BinaryWriter()) {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseException();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { error: isSet34(object.error) ? globalThis.String(object.error) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },
  create(base) {
    return ResponseException.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResponseException();
    message.error = object.error ?? "";
    return message;
  }
};
var ResponseEcho = {
  $type: "tendermint.abci.ResponseEcho",
  encode(message, writer = new BinaryWriter()) {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseEcho();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { message: isSet34(object.message) ? globalThis.String(object.message) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },
  create(base) {
    return ResponseEcho.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResponseEcho();
    message.message = object.message ?? "";
    return message;
  }
};
var ResponseFlush = {
  $type: "tendermint.abci.ResponseFlush",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseFlush();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return ResponseFlush.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseResponseFlush();
    return message;
  }
};
var ResponseInfo = {
  $type: "tendermint.abci.ResponseInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.app_version !== 0) {
      writer.uint32(24).uint64(message.app_version);
    }
    if (message.last_block_height !== 0) {
      writer.uint32(32).int64(message.last_block_height);
    }
    if (message.last_block_app_hash.length !== 0) {
      writer.uint32(42).bytes(message.last_block_app_hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.data = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.app_version = longToNumber12(reader.uint64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.last_block_height = longToNumber12(reader.int64());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.last_block_app_hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      data: isSet34(object.data) ? globalThis.String(object.data) : "",
      version: isSet34(object.version) ? globalThis.String(object.version) : "",
      app_version: isSet34(object.app_version) ? globalThis.Number(object.app_version) : 0,
      last_block_height: isSet34(object.last_block_height) ? globalThis.Number(object.last_block_height) : 0,
      last_block_app_hash: isSet34(object.last_block_app_hash) ? bytesFromBase6413(object.last_block_app_hash) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.app_version !== 0) {
      obj.app_version = Math.round(message.app_version);
    }
    if (message.last_block_height !== 0) {
      obj.last_block_height = Math.round(message.last_block_height);
    }
    if (message.last_block_app_hash.length !== 0) {
      obj.last_block_app_hash = base64FromBytes13(message.last_block_app_hash);
    }
    return obj;
  },
  create(base) {
    return ResponseInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResponseInfo();
    message.data = object.data ?? "";
    message.version = object.version ?? "";
    message.app_version = object.app_version ?? 0;
    message.last_block_height = object.last_block_height ?? 0;
    message.last_block_app_hash = object.last_block_app_hash ?? new Uint8Array(0);
    return message;
  }
};
var ResponseInitChain = {
  $type: "tendermint.abci.ResponseInitChain",
  encode(message, writer = new BinaryWriter()) {
    if (message.consensus_params !== void 0) {
      ConsensusParams.encode(message.consensus_params, writer.uint32(10).fork()).join();
    }
    for (const v of message.validators) {
      ValidatorUpdate.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.app_hash.length !== 0) {
      writer.uint32(26).bytes(message.app_hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseInitChain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.consensus_params = ConsensusParams.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validators.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.app_hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      consensus_params: isSet34(object.consensus_params) ? ConsensusParams.fromJSON(object.consensus_params) : void 0,
      validators: globalThis.Array.isArray(object == null ? void 0 : object.validators) ? object.validators.map((e) => ValidatorUpdate.fromJSON(e)) : [],
      app_hash: isSet34(object.app_hash) ? bytesFromBase6413(object.app_hash) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.consensus_params !== void 0) {
      obj.consensus_params = ConsensusParams.toJSON(message.consensus_params);
    }
    if ((_a = message.validators) == null ? void 0 : _a.length) {
      obj.validators = message.validators.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.app_hash.length !== 0) {
      obj.app_hash = base64FromBytes13(message.app_hash);
    }
    return obj;
  },
  create(base) {
    return ResponseInitChain.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseResponseInitChain();
    message.consensus_params = object.consensus_params !== void 0 && object.consensus_params !== null ? ConsensusParams.fromPartial(object.consensus_params) : void 0;
    message.validators = ((_a = object.validators) == null ? void 0 : _a.map((e) => ValidatorUpdate.fromPartial(e))) || [];
    message.app_hash = object.app_hash ?? new Uint8Array(0);
    return message;
  }
};
var ResponseQuery = {
  $type: "tendermint.abci.ResponseQuery",
  encode(message, writer = new BinaryWriter()) {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.log !== "") {
      writer.uint32(26).string(message.log);
    }
    if (message.info !== "") {
      writer.uint32(34).string(message.info);
    }
    if (message.index !== 0) {
      writer.uint32(40).int64(message.index);
    }
    if (message.key.length !== 0) {
      writer.uint32(50).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(58).bytes(message.value);
    }
    if (message.proof_ops !== void 0) {
      ProofOps.encode(message.proof_ops, writer.uint32(66).fork()).join();
    }
    if (message.height !== 0) {
      writer.uint32(72).int64(message.height);
    }
    if (message.codespace !== "") {
      writer.uint32(82).string(message.codespace);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.code = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.log = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.info = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.index = longToNumber12(reader.int64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.value = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.proof_ops = ProofOps.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }
          message.height = longToNumber12(reader.int64());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.codespace = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      code: isSet34(object.code) ? globalThis.Number(object.code) : 0,
      log: isSet34(object.log) ? globalThis.String(object.log) : "",
      info: isSet34(object.info) ? globalThis.String(object.info) : "",
      index: isSet34(object.index) ? globalThis.Number(object.index) : 0,
      key: isSet34(object.key) ? bytesFromBase6413(object.key) : new Uint8Array(0),
      value: isSet34(object.value) ? bytesFromBase6413(object.value) : new Uint8Array(0),
      proof_ops: isSet34(object.proof_ops) ? ProofOps.fromJSON(object.proof_ops) : void 0,
      height: isSet34(object.height) ? globalThis.Number(object.height) : 0,
      codespace: isSet34(object.codespace) ? globalThis.String(object.codespace) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.log !== "") {
      obj.log = message.log;
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.key.length !== 0) {
      obj.key = base64FromBytes13(message.key);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes13(message.value);
    }
    if (message.proof_ops !== void 0) {
      obj.proof_ops = ProofOps.toJSON(message.proof_ops);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.codespace !== "") {
      obj.codespace = message.codespace;
    }
    return obj;
  },
  create(base) {
    return ResponseQuery.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResponseQuery();
    message.code = object.code ?? 0;
    message.log = object.log ?? "";
    message.info = object.info ?? "";
    message.index = object.index ?? 0;
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    message.proof_ops = object.proof_ops !== void 0 && object.proof_ops !== null ? ProofOps.fromPartial(object.proof_ops) : void 0;
    message.height = object.height ?? 0;
    message.codespace = object.codespace ?? "";
    return message;
  }
};
var ResponseCheckTx = {
  $type: "tendermint.abci.ResponseCheckTx",
  encode(message, writer = new BinaryWriter()) {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    if (message.gas_wanted !== 0) {
      writer.uint32(40).int64(message.gas_wanted);
    }
    if (message.codespace !== "") {
      writer.uint32(66).string(message.codespace);
    }
    if (message.sender !== "") {
      writer.uint32(74).string(message.sender);
    }
    if (message.priority !== 0) {
      writer.uint32(80).int64(message.priority);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseCheckTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.code = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.gas_wanted = longToNumber12(reader.int64());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.codespace = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }
          message.priority = longToNumber12(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      code: isSet34(object.code) ? globalThis.Number(object.code) : 0,
      data: isSet34(object.data) ? bytesFromBase6413(object.data) : new Uint8Array(0),
      gas_wanted: isSet34(object.gas_wanted) ? globalThis.Number(object.gas_wanted) : 0,
      codespace: isSet34(object.codespace) ? globalThis.String(object.codespace) : "",
      sender: isSet34(object.sender) ? globalThis.String(object.sender) : "",
      priority: isSet34(object.priority) ? globalThis.Number(object.priority) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes13(message.data);
    }
    if (message.gas_wanted !== 0) {
      obj.gas_wanted = Math.round(message.gas_wanted);
    }
    if (message.codespace !== "") {
      obj.codespace = message.codespace;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },
  create(base) {
    return ResponseCheckTx.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResponseCheckTx();
    message.code = object.code ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    message.gas_wanted = object.gas_wanted ?? 0;
    message.codespace = object.codespace ?? "";
    message.sender = object.sender ?? "";
    message.priority = object.priority ?? 0;
    return message;
  }
};
var ResponseDeliverTx = {
  $type: "tendermint.abci.ResponseDeliverTx",
  encode(message, writer = new BinaryWriter()) {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    if (message.log !== "") {
      writer.uint32(26).string(message.log);
    }
    if (message.info !== "") {
      writer.uint32(34).string(message.info);
    }
    if (message.gas_wanted !== 0) {
      writer.uint32(40).int64(message.gas_wanted);
    }
    if (message.gas_used !== 0) {
      writer.uint32(48).int64(message.gas_used);
    }
    for (const v of message.events) {
      Event.encode(v, writer.uint32(58).fork()).join();
    }
    if (message.codespace !== "") {
      writer.uint32(66).string(message.codespace);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseDeliverTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.code = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.log = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.info = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.gas_wanted = longToNumber12(reader.int64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.gas_used = longToNumber12(reader.int64());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.codespace = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      code: isSet34(object.code) ? globalThis.Number(object.code) : 0,
      data: isSet34(object.data) ? bytesFromBase6413(object.data) : new Uint8Array(0),
      log: isSet34(object.log) ? globalThis.String(object.log) : "",
      info: isSet34(object.info) ? globalThis.String(object.info) : "",
      gas_wanted: isSet34(object.gas_wanted) ? globalThis.Number(object.gas_wanted) : 0,
      gas_used: isSet34(object.gas_used) ? globalThis.Number(object.gas_used) : 0,
      events: globalThis.Array.isArray(object == null ? void 0 : object.events) ? object.events.map((e) => Event.fromJSON(e)) : [],
      codespace: isSet34(object.codespace) ? globalThis.String(object.codespace) : ""
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes13(message.data);
    }
    if (message.log !== "") {
      obj.log = message.log;
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    if (message.gas_wanted !== 0) {
      obj.gas_wanted = Math.round(message.gas_wanted);
    }
    if (message.gas_used !== 0) {
      obj.gas_used = Math.round(message.gas_used);
    }
    if ((_a = message.events) == null ? void 0 : _a.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if (message.codespace !== "") {
      obj.codespace = message.codespace;
    }
    return obj;
  },
  create(base) {
    return ResponseDeliverTx.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseResponseDeliverTx();
    message.code = object.code ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    message.log = object.log ?? "";
    message.info = object.info ?? "";
    message.gas_wanted = object.gas_wanted ?? 0;
    message.gas_used = object.gas_used ?? 0;
    message.events = ((_a = object.events) == null ? void 0 : _a.map((e) => Event.fromPartial(e))) || [];
    message.codespace = object.codespace ?? "";
    return message;
  }
};
var ResponseCommit = {
  $type: "tendermint.abci.ResponseCommit",
  encode(message, writer = new BinaryWriter()) {
    if (message.retain_height !== 0) {
      writer.uint32(24).int64(message.retain_height);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseCommit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }
          message.retain_height = longToNumber12(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { retain_height: isSet34(object.retain_height) ? globalThis.Number(object.retain_height) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.retain_height !== 0) {
      obj.retain_height = Math.round(message.retain_height);
    }
    return obj;
  },
  create(base) {
    return ResponseCommit.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResponseCommit();
    message.retain_height = object.retain_height ?? 0;
    return message;
  }
};
var ResponseListSnapshots = {
  $type: "tendermint.abci.ResponseListSnapshots",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.snapshots) {
      Snapshot.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseListSnapshots();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.snapshots.push(Snapshot.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      snapshots: globalThis.Array.isArray(object == null ? void 0 : object.snapshots) ? object.snapshots.map((e) => Snapshot.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.snapshots) == null ? void 0 : _a.length) {
      obj.snapshots = message.snapshots.map((e) => Snapshot.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ResponseListSnapshots.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseResponseListSnapshots();
    message.snapshots = ((_a = object.snapshots) == null ? void 0 : _a.map((e) => Snapshot.fromPartial(e))) || [];
    return message;
  }
};
var ResponseOfferSnapshot = {
  $type: "tendermint.abci.ResponseOfferSnapshot",
  encode(message, writer = new BinaryWriter()) {
    if (message.result !== 0) {
      writer.uint32(8).int32(message.result);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseOfferSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.result = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { result: isSet34(object.result) ? responseOfferSnapshotResultFromJSON(object.result) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.result !== 0) {
      obj.result = responseOfferSnapshotResultToJSON(message.result);
    }
    return obj;
  },
  create(base) {
    return ResponseOfferSnapshot.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResponseOfferSnapshot();
    message.result = object.result ?? 0;
    return message;
  }
};
var ResponseLoadSnapshotChunk = {
  $type: "tendermint.abci.ResponseLoadSnapshotChunk",
  encode(message, writer = new BinaryWriter()) {
    if (message.chunk.length !== 0) {
      writer.uint32(10).bytes(message.chunk);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseLoadSnapshotChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.chunk = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { chunk: isSet34(object.chunk) ? bytesFromBase6413(object.chunk) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.chunk.length !== 0) {
      obj.chunk = base64FromBytes13(message.chunk);
    }
    return obj;
  },
  create(base) {
    return ResponseLoadSnapshotChunk.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResponseLoadSnapshotChunk();
    message.chunk = object.chunk ?? new Uint8Array(0);
    return message;
  }
};
var ResponseApplySnapshotChunk = {
  $type: "tendermint.abci.ResponseApplySnapshotChunk",
  encode(message, writer = new BinaryWriter()) {
    if (message.result !== 0) {
      writer.uint32(8).int32(message.result);
    }
    writer.uint32(18).fork();
    for (const v of message.refetch_chunks) {
      writer.uint32(v);
    }
    writer.join();
    for (const v of message.reject_senders) {
      writer.uint32(26).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseApplySnapshotChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.result = reader.int32();
          continue;
        case 2:
          if (tag === 16) {
            message.refetch_chunks.push(reader.uint32());
            continue;
          }
          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.refetch_chunks.push(reader.uint32());
            }
            continue;
          }
          break;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.reject_senders.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      result: isSet34(object.result) ? responseApplySnapshotChunkResultFromJSON(object.result) : 0,
      refetch_chunks: globalThis.Array.isArray(object == null ? void 0 : object.refetch_chunks) ? object.refetch_chunks.map((e) => globalThis.Number(e)) : [],
      reject_senders: globalThis.Array.isArray(object == null ? void 0 : object.reject_senders) ? object.reject_senders.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if (message.result !== 0) {
      obj.result = responseApplySnapshotChunkResultToJSON(message.result);
    }
    if ((_a = message.refetch_chunks) == null ? void 0 : _a.length) {
      obj.refetch_chunks = message.refetch_chunks.map((e) => Math.round(e));
    }
    if ((_b = message.reject_senders) == null ? void 0 : _b.length) {
      obj.reject_senders = message.reject_senders;
    }
    return obj;
  },
  create(base) {
    return ResponseApplySnapshotChunk.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseResponseApplySnapshotChunk();
    message.result = object.result ?? 0;
    message.refetch_chunks = ((_a = object.refetch_chunks) == null ? void 0 : _a.map((e) => e)) || [];
    message.reject_senders = ((_b = object.reject_senders) == null ? void 0 : _b.map((e) => e)) || [];
    return message;
  }
};
var ResponsePrepareProposal = {
  $type: "tendermint.abci.ResponsePrepareProposal",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.tx_records) {
      TxRecord.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.app_hash.length !== 0) {
      writer.uint32(18).bytes(message.app_hash);
    }
    for (const v of message.tx_results) {
      ExecTxResult.encode(v, writer.uint32(26).fork()).join();
    }
    for (const v of message.validator_updates) {
      ValidatorUpdate.encode(v, writer.uint32(34).fork()).join();
    }
    if (message.consensus_param_updates !== void 0) {
      ConsensusParams.encode(message.consensus_param_updates, writer.uint32(42).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponsePrepareProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.tx_records.push(TxRecord.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.app_hash = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.tx_results.push(ExecTxResult.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.validator_updates.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.consensus_param_updates = ConsensusParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      tx_records: globalThis.Array.isArray(object == null ? void 0 : object.tx_records) ? object.tx_records.map((e) => TxRecord.fromJSON(e)) : [],
      app_hash: isSet34(object.app_hash) ? bytesFromBase6413(object.app_hash) : new Uint8Array(0),
      tx_results: globalThis.Array.isArray(object == null ? void 0 : object.tx_results) ? object.tx_results.map((e) => ExecTxResult.fromJSON(e)) : [],
      validator_updates: globalThis.Array.isArray(object == null ? void 0 : object.validator_updates) ? object.validator_updates.map((e) => ValidatorUpdate.fromJSON(e)) : [],
      consensus_param_updates: isSet34(object.consensus_param_updates) ? ConsensusParams.fromJSON(object.consensus_param_updates) : void 0
    };
  },
  toJSON(message) {
    var _a, _b, _c;
    const obj = {};
    if ((_a = message.tx_records) == null ? void 0 : _a.length) {
      obj.tx_records = message.tx_records.map((e) => TxRecord.toJSON(e));
    }
    if (message.app_hash.length !== 0) {
      obj.app_hash = base64FromBytes13(message.app_hash);
    }
    if ((_b = message.tx_results) == null ? void 0 : _b.length) {
      obj.tx_results = message.tx_results.map((e) => ExecTxResult.toJSON(e));
    }
    if ((_c = message.validator_updates) == null ? void 0 : _c.length) {
      obj.validator_updates = message.validator_updates.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.consensus_param_updates !== void 0) {
      obj.consensus_param_updates = ConsensusParams.toJSON(message.consensus_param_updates);
    }
    return obj;
  },
  create(base) {
    return ResponsePrepareProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseResponsePrepareProposal();
    message.tx_records = ((_a = object.tx_records) == null ? void 0 : _a.map((e) => TxRecord.fromPartial(e))) || [];
    message.app_hash = object.app_hash ?? new Uint8Array(0);
    message.tx_results = ((_b = object.tx_results) == null ? void 0 : _b.map((e) => ExecTxResult.fromPartial(e))) || [];
    message.validator_updates = ((_c = object.validator_updates) == null ? void 0 : _c.map((e) => ValidatorUpdate.fromPartial(e))) || [];
    message.consensus_param_updates = object.consensus_param_updates !== void 0 && object.consensus_param_updates !== null ? ConsensusParams.fromPartial(object.consensus_param_updates) : void 0;
    return message;
  }
};
var ResponseProcessProposal = {
  $type: "tendermint.abci.ResponseProcessProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.app_hash.length !== 0) {
      writer.uint32(18).bytes(message.app_hash);
    }
    for (const v of message.tx_results) {
      ExecTxResult.encode(v, writer.uint32(26).fork()).join();
    }
    for (const v of message.validator_updates) {
      ValidatorUpdate.encode(v, writer.uint32(34).fork()).join();
    }
    if (message.consensus_param_updates !== void 0) {
      ConsensusParams.encode(message.consensus_param_updates, writer.uint32(42).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseProcessProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.status = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.app_hash = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.tx_results.push(ExecTxResult.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.validator_updates.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.consensus_param_updates = ConsensusParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      status: isSet34(object.status) ? responseProcessProposalProposalStatusFromJSON(object.status) : 0,
      app_hash: isSet34(object.app_hash) ? bytesFromBase6413(object.app_hash) : new Uint8Array(0),
      tx_results: globalThis.Array.isArray(object == null ? void 0 : object.tx_results) ? object.tx_results.map((e) => ExecTxResult.fromJSON(e)) : [],
      validator_updates: globalThis.Array.isArray(object == null ? void 0 : object.validator_updates) ? object.validator_updates.map((e) => ValidatorUpdate.fromJSON(e)) : [],
      consensus_param_updates: isSet34(object.consensus_param_updates) ? ConsensusParams.fromJSON(object.consensus_param_updates) : void 0
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if (message.status !== 0) {
      obj.status = responseProcessProposalProposalStatusToJSON(message.status);
    }
    if (message.app_hash.length !== 0) {
      obj.app_hash = base64FromBytes13(message.app_hash);
    }
    if ((_a = message.tx_results) == null ? void 0 : _a.length) {
      obj.tx_results = message.tx_results.map((e) => ExecTxResult.toJSON(e));
    }
    if ((_b = message.validator_updates) == null ? void 0 : _b.length) {
      obj.validator_updates = message.validator_updates.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.consensus_param_updates !== void 0) {
      obj.consensus_param_updates = ConsensusParams.toJSON(message.consensus_param_updates);
    }
    return obj;
  },
  create(base) {
    return ResponseProcessProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseResponseProcessProposal();
    message.status = object.status ?? 0;
    message.app_hash = object.app_hash ?? new Uint8Array(0);
    message.tx_results = ((_a = object.tx_results) == null ? void 0 : _a.map((e) => ExecTxResult.fromPartial(e))) || [];
    message.validator_updates = ((_b = object.validator_updates) == null ? void 0 : _b.map((e) => ValidatorUpdate.fromPartial(e))) || [];
    message.consensus_param_updates = object.consensus_param_updates !== void 0 && object.consensus_param_updates !== null ? ConsensusParams.fromPartial(object.consensus_param_updates) : void 0;
    return message;
  }
};
var ResponseExtendVote = {
  $type: "tendermint.abci.ResponseExtendVote",
  encode(message, writer = new BinaryWriter()) {
    if (message.vote_extension.length !== 0) {
      writer.uint32(10).bytes(message.vote_extension);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseExtendVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.vote_extension = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      vote_extension: isSet34(object.vote_extension) ? bytesFromBase6413(object.vote_extension) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.vote_extension.length !== 0) {
      obj.vote_extension = base64FromBytes13(message.vote_extension);
    }
    return obj;
  },
  create(base) {
    return ResponseExtendVote.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResponseExtendVote();
    message.vote_extension = object.vote_extension ?? new Uint8Array(0);
    return message;
  }
};
var ResponseVerifyVoteExtension = {
  $type: "tendermint.abci.ResponseVerifyVoteExtension",
  encode(message, writer = new BinaryWriter()) {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseVerifyVoteExtension();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.status = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { status: isSet34(object.status) ? responseVerifyVoteExtensionVerifyStatusFromJSON(object.status) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.status !== 0) {
      obj.status = responseVerifyVoteExtensionVerifyStatusToJSON(message.status);
    }
    return obj;
  },
  create(base) {
    return ResponseVerifyVoteExtension.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseResponseVerifyVoteExtension();
    message.status = object.status ?? 0;
    return message;
  }
};
var ResponseFinalizeBlock = {
  $type: "tendermint.abci.ResponseFinalizeBlock",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.events) {
      Event.encode(v, writer.uint32(10).fork()).join();
    }
    for (const v of message.tx_results) {
      ExecTxResult.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.validator_updates) {
      ValidatorUpdate.encode(v, writer.uint32(26).fork()).join();
    }
    if (message.consensus_param_updates !== void 0) {
      ConsensusParams.encode(message.consensus_param_updates, writer.uint32(34).fork()).join();
    }
    if (message.app_hash.length !== 0) {
      writer.uint32(42).bytes(message.app_hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResponseFinalizeBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.tx_results.push(ExecTxResult.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.validator_updates.push(ValidatorUpdate.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.consensus_param_updates = ConsensusParams.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.app_hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      events: globalThis.Array.isArray(object == null ? void 0 : object.events) ? object.events.map((e) => Event.fromJSON(e)) : [],
      tx_results: globalThis.Array.isArray(object == null ? void 0 : object.tx_results) ? object.tx_results.map((e) => ExecTxResult.fromJSON(e)) : [],
      validator_updates: globalThis.Array.isArray(object == null ? void 0 : object.validator_updates) ? object.validator_updates.map((e) => ValidatorUpdate.fromJSON(e)) : [],
      consensus_param_updates: isSet34(object.consensus_param_updates) ? ConsensusParams.fromJSON(object.consensus_param_updates) : void 0,
      app_hash: isSet34(object.app_hash) ? bytesFromBase6413(object.app_hash) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    var _a, _b, _c;
    const obj = {};
    if ((_a = message.events) == null ? void 0 : _a.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if ((_b = message.tx_results) == null ? void 0 : _b.length) {
      obj.tx_results = message.tx_results.map((e) => ExecTxResult.toJSON(e));
    }
    if ((_c = message.validator_updates) == null ? void 0 : _c.length) {
      obj.validator_updates = message.validator_updates.map((e) => ValidatorUpdate.toJSON(e));
    }
    if (message.consensus_param_updates !== void 0) {
      obj.consensus_param_updates = ConsensusParams.toJSON(message.consensus_param_updates);
    }
    if (message.app_hash.length !== 0) {
      obj.app_hash = base64FromBytes13(message.app_hash);
    }
    return obj;
  },
  create(base) {
    return ResponseFinalizeBlock.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseResponseFinalizeBlock();
    message.events = ((_a = object.events) == null ? void 0 : _a.map((e) => Event.fromPartial(e))) || [];
    message.tx_results = ((_b = object.tx_results) == null ? void 0 : _b.map((e) => ExecTxResult.fromPartial(e))) || [];
    message.validator_updates = ((_c = object.validator_updates) == null ? void 0 : _c.map((e) => ValidatorUpdate.fromPartial(e))) || [];
    message.consensus_param_updates = object.consensus_param_updates !== void 0 && object.consensus_param_updates !== null ? ConsensusParams.fromPartial(object.consensus_param_updates) : void 0;
    message.app_hash = object.app_hash ?? new Uint8Array(0);
    return message;
  }
};
var CommitInfo = {
  $type: "tendermint.abci.CommitInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.round !== 0) {
      writer.uint32(8).int32(message.round);
    }
    for (const v of message.votes) {
      VoteInfo.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCommitInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.round = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.votes.push(VoteInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      round: isSet34(object.round) ? globalThis.Number(object.round) : 0,
      votes: globalThis.Array.isArray(object == null ? void 0 : object.votes) ? object.votes.map((e) => VoteInfo.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.round !== 0) {
      obj.round = Math.round(message.round);
    }
    if ((_a = message.votes) == null ? void 0 : _a.length) {
      obj.votes = message.votes.map((e) => VoteInfo.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return CommitInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseCommitInfo();
    message.round = object.round ?? 0;
    message.votes = ((_a = object.votes) == null ? void 0 : _a.map((e) => VoteInfo.fromPartial(e))) || [];
    return message;
  }
};
var ExtendedCommitInfo = {
  $type: "tendermint.abci.ExtendedCommitInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.round !== 0) {
      writer.uint32(8).int32(message.round);
    }
    for (const v of message.votes) {
      ExtendedVoteInfo.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseExtendedCommitInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.round = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.votes.push(ExtendedVoteInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      round: isSet34(object.round) ? globalThis.Number(object.round) : 0,
      votes: globalThis.Array.isArray(object == null ? void 0 : object.votes) ? object.votes.map((e) => ExtendedVoteInfo.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.round !== 0) {
      obj.round = Math.round(message.round);
    }
    if ((_a = message.votes) == null ? void 0 : _a.length) {
      obj.votes = message.votes.map((e) => ExtendedVoteInfo.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ExtendedCommitInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseExtendedCommitInfo();
    message.round = object.round ?? 0;
    message.votes = ((_a = object.votes) == null ? void 0 : _a.map((e) => ExtendedVoteInfo.fromPartial(e))) || [];
    return message;
  }
};
var Event = {
  $type: "tendermint.abci.Event",
  encode(message, writer = new BinaryWriter()) {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    for (const v of message.attributes) {
      EventAttribute.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.attributes.push(EventAttribute.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet34(object.type) ? globalThis.String(object.type) : "",
      attributes: globalThis.Array.isArray(object == null ? void 0 : object.attributes) ? object.attributes.map((e) => EventAttribute.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if ((_a = message.attributes) == null ? void 0 : _a.length) {
      obj.attributes = message.attributes.map((e) => EventAttribute.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Event.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseEvent();
    message.type = object.type ?? "";
    message.attributes = ((_a = object.attributes) == null ? void 0 : _a.map((e) => EventAttribute.fromPartial(e))) || [];
    return message;
  }
};
var EventAttribute = {
  $type: "tendermint.abci.EventAttribute",
  encode(message, writer = new BinaryWriter()) {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.index !== false) {
      writer.uint32(24).bool(message.index);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEventAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.index = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet34(object.key) ? globalThis.String(object.key) : "",
      value: isSet34(object.value) ? globalThis.String(object.value) : "",
      index: isSet34(object.index) ? globalThis.Boolean(object.index) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.index !== false) {
      obj.index = message.index;
    }
    return obj;
  },
  create(base) {
    return EventAttribute.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEventAttribute();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    message.index = object.index ?? false;
    return message;
  }
};
var ExecTxResult = {
  $type: "tendermint.abci.ExecTxResult",
  encode(message, writer = new BinaryWriter()) {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    if (message.log !== "") {
      writer.uint32(26).string(message.log);
    }
    if (message.info !== "") {
      writer.uint32(34).string(message.info);
    }
    if (message.gas_wanted !== 0) {
      writer.uint32(40).int64(message.gas_wanted);
    }
    if (message.gas_used !== 0) {
      writer.uint32(48).int64(message.gas_used);
    }
    for (const v of message.events) {
      Event.encode(v, writer.uint32(58).fork()).join();
    }
    if (message.codespace !== "") {
      writer.uint32(66).string(message.codespace);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseExecTxResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.code = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.log = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.info = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.gas_wanted = longToNumber12(reader.int64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.gas_used = longToNumber12(reader.int64());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.codespace = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      code: isSet34(object.code) ? globalThis.Number(object.code) : 0,
      data: isSet34(object.data) ? bytesFromBase6413(object.data) : new Uint8Array(0),
      log: isSet34(object.log) ? globalThis.String(object.log) : "",
      info: isSet34(object.info) ? globalThis.String(object.info) : "",
      gas_wanted: isSet34(object.gas_wanted) ? globalThis.Number(object.gas_wanted) : 0,
      gas_used: isSet34(object.gas_used) ? globalThis.Number(object.gas_used) : 0,
      events: globalThis.Array.isArray(object == null ? void 0 : object.events) ? object.events.map((e) => Event.fromJSON(e)) : [],
      codespace: isSet34(object.codespace) ? globalThis.String(object.codespace) : ""
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes13(message.data);
    }
    if (message.log !== "") {
      obj.log = message.log;
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    if (message.gas_wanted !== 0) {
      obj.gas_wanted = Math.round(message.gas_wanted);
    }
    if (message.gas_used !== 0) {
      obj.gas_used = Math.round(message.gas_used);
    }
    if ((_a = message.events) == null ? void 0 : _a.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if (message.codespace !== "") {
      obj.codespace = message.codespace;
    }
    return obj;
  },
  create(base) {
    return ExecTxResult.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseExecTxResult();
    message.code = object.code ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    message.log = object.log ?? "";
    message.info = object.info ?? "";
    message.gas_wanted = object.gas_wanted ?? 0;
    message.gas_used = object.gas_used ?? 0;
    message.events = ((_a = object.events) == null ? void 0 : _a.map((e) => Event.fromPartial(e))) || [];
    message.codespace = object.codespace ?? "";
    return message;
  }
};
var TxResult = {
  $type: "tendermint.abci.TxResult",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    if (message.index !== 0) {
      writer.uint32(16).uint32(message.index);
    }
    if (message.tx.length !== 0) {
      writer.uint32(26).bytes(message.tx);
    }
    if (message.result !== void 0) {
      ExecTxResult.encode(message.result, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTxResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber12(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.index = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.tx = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.result = ExecTxResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet34(object.height) ? globalThis.Number(object.height) : 0,
      index: isSet34(object.index) ? globalThis.Number(object.index) : 0,
      tx: isSet34(object.tx) ? bytesFromBase6413(object.tx) : new Uint8Array(0),
      result: isSet34(object.result) ? ExecTxResult.fromJSON(object.result) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.tx.length !== 0) {
      obj.tx = base64FromBytes13(message.tx);
    }
    if (message.result !== void 0) {
      obj.result = ExecTxResult.toJSON(message.result);
    }
    return obj;
  },
  create(base) {
    return TxResult.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTxResult();
    message.height = object.height ?? 0;
    message.index = object.index ?? 0;
    message.tx = object.tx ?? new Uint8Array(0);
    message.result = object.result !== void 0 && object.result !== null ? ExecTxResult.fromPartial(object.result) : void 0;
    return message;
  }
};
var TxRecord = {
  $type: "tendermint.abci.TxRecord",
  encode(message, writer = new BinaryWriter()) {
    if (message.action !== 0) {
      writer.uint32(8).int32(message.action);
    }
    if (message.tx.length !== 0) {
      writer.uint32(18).bytes(message.tx);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTxRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.action = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.tx = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      action: isSet34(object.action) ? txRecordTxActionFromJSON(object.action) : 0,
      tx: isSet34(object.tx) ? bytesFromBase6413(object.tx) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.action !== 0) {
      obj.action = txRecordTxActionToJSON(message.action);
    }
    if (message.tx.length !== 0) {
      obj.tx = base64FromBytes13(message.tx);
    }
    return obj;
  },
  create(base) {
    return TxRecord.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTxRecord();
    message.action = object.action ?? 0;
    message.tx = object.tx ?? new Uint8Array(0);
    return message;
  }
};
var Validator = {
  $type: "tendermint.abci.Validator",
  encode(message, writer = new BinaryWriter()) {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    if (message.power !== 0) {
      writer.uint32(24).int64(message.power);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.power = longToNumber12(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet34(object.address) ? bytesFromBase6413(object.address) : new Uint8Array(0),
      power: isSet34(object.power) ? globalThis.Number(object.power) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address.length !== 0) {
      obj.address = base64FromBytes13(message.address);
    }
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    return obj;
  },
  create(base) {
    return Validator.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidator();
    message.address = object.address ?? new Uint8Array(0);
    message.power = object.power ?? 0;
    return message;
  }
};
var ValidatorUpdate = {
  $type: "tendermint.abci.ValidatorUpdate",
  encode(message, writer = new BinaryWriter()) {
    if (message.pub_key !== void 0) {
      PublicKey.encode(message.pub_key, writer.uint32(10).fork()).join();
    }
    if (message.power !== 0) {
      writer.uint32(16).int64(message.power);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pub_key = PublicKey.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.power = longToNumber12(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pub_key: isSet34(object.pub_key) ? PublicKey.fromJSON(object.pub_key) : void 0,
      power: isSet34(object.power) ? globalThis.Number(object.power) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pub_key !== void 0) {
      obj.pub_key = PublicKey.toJSON(message.pub_key);
    }
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    return obj;
  },
  create(base) {
    return ValidatorUpdate.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidatorUpdate();
    message.pub_key = object.pub_key !== void 0 && object.pub_key !== null ? PublicKey.fromPartial(object.pub_key) : void 0;
    message.power = object.power ?? 0;
    return message;
  }
};
var VoteInfo = {
  $type: "tendermint.abci.VoteInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator !== void 0) {
      Validator.encode(message.validator, writer.uint32(10).fork()).join();
    }
    if (message.signed_last_block !== false) {
      writer.uint32(16).bool(message.signed_last_block);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVoteInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator = Validator.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.signed_last_block = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator: isSet34(object.validator) ? Validator.fromJSON(object.validator) : void 0,
      signed_last_block: isSet34(object.signed_last_block) ? globalThis.Boolean(object.signed_last_block) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator !== void 0) {
      obj.validator = Validator.toJSON(message.validator);
    }
    if (message.signed_last_block !== false) {
      obj.signed_last_block = message.signed_last_block;
    }
    return obj;
  },
  create(base) {
    return VoteInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseVoteInfo();
    message.validator = object.validator !== void 0 && object.validator !== null ? Validator.fromPartial(object.validator) : void 0;
    message.signed_last_block = object.signed_last_block ?? false;
    return message;
  }
};
var ExtendedVoteInfo = {
  $type: "tendermint.abci.ExtendedVoteInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator !== void 0) {
      Validator.encode(message.validator, writer.uint32(10).fork()).join();
    }
    if (message.signed_last_block !== false) {
      writer.uint32(16).bool(message.signed_last_block);
    }
    if (message.vote_extension.length !== 0) {
      writer.uint32(26).bytes(message.vote_extension);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseExtendedVoteInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator = Validator.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.signed_last_block = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.vote_extension = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator: isSet34(object.validator) ? Validator.fromJSON(object.validator) : void 0,
      signed_last_block: isSet34(object.signed_last_block) ? globalThis.Boolean(object.signed_last_block) : false,
      vote_extension: isSet34(object.vote_extension) ? bytesFromBase6413(object.vote_extension) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator !== void 0) {
      obj.validator = Validator.toJSON(message.validator);
    }
    if (message.signed_last_block !== false) {
      obj.signed_last_block = message.signed_last_block;
    }
    if (message.vote_extension.length !== 0) {
      obj.vote_extension = base64FromBytes13(message.vote_extension);
    }
    return obj;
  },
  create(base) {
    return ExtendedVoteInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseExtendedVoteInfo();
    message.validator = object.validator !== void 0 && object.validator !== null ? Validator.fromPartial(object.validator) : void 0;
    message.signed_last_block = object.signed_last_block ?? false;
    message.vote_extension = object.vote_extension ?? new Uint8Array(0);
    return message;
  }
};
var Misbehavior = {
  $type: "tendermint.abci.Misbehavior",
  encode(message, writer = new BinaryWriter()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.validator !== void 0) {
      Validator.encode(message.validator, writer.uint32(18).fork()).join();
    }
    if (message.height !== 0) {
      writer.uint32(24).int64(message.height);
    }
    if (message.time !== void 0) {
      Timestamp.encode(toTimestamp2(message.time), writer.uint32(34).fork()).join();
    }
    if (message.total_voting_power !== 0) {
      writer.uint32(40).int64(message.total_voting_power);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMisbehavior();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator = Validator.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.height = longToNumber12(reader.int64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.time = fromTimestamp2(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.total_voting_power = longToNumber12(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet34(object.type) ? misbehaviorTypeFromJSON(object.type) : 0,
      validator: isSet34(object.validator) ? Validator.fromJSON(object.validator) : void 0,
      height: isSet34(object.height) ? globalThis.Number(object.height) : 0,
      time: isSet34(object.time) ? fromJsonTimestamp2(object.time) : void 0,
      total_voting_power: isSet34(object.total_voting_power) ? globalThis.Number(object.total_voting_power) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.type !== 0) {
      obj.type = misbehaviorTypeToJSON(message.type);
    }
    if (message.validator !== void 0) {
      obj.validator = Validator.toJSON(message.validator);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.time !== void 0) {
      obj.time = message.time.toISOString();
    }
    if (message.total_voting_power !== 0) {
      obj.total_voting_power = Math.round(message.total_voting_power);
    }
    return obj;
  },
  create(base) {
    return Misbehavior.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMisbehavior();
    message.type = object.type ?? 0;
    message.validator = object.validator !== void 0 && object.validator !== null ? Validator.fromPartial(object.validator) : void 0;
    message.height = object.height ?? 0;
    message.time = object.time ?? void 0;
    message.total_voting_power = object.total_voting_power ?? 0;
    return message;
  }
};
var Snapshot = {
  $type: "tendermint.abci.Snapshot",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).uint64(message.height);
    }
    if (message.format !== 0) {
      writer.uint32(16).uint32(message.format);
    }
    if (message.chunks !== 0) {
      writer.uint32(24).uint32(message.chunks);
    }
    if (message.hash.length !== 0) {
      writer.uint32(34).bytes(message.hash);
    }
    if (message.metadata.length !== 0) {
      writer.uint32(42).bytes(message.metadata);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber12(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.format = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.chunks = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.hash = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.metadata = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet34(object.height) ? globalThis.Number(object.height) : 0,
      format: isSet34(object.format) ? globalThis.Number(object.format) : 0,
      chunks: isSet34(object.chunks) ? globalThis.Number(object.chunks) : 0,
      hash: isSet34(object.hash) ? bytesFromBase6413(object.hash) : new Uint8Array(0),
      metadata: isSet34(object.metadata) ? bytesFromBase6413(object.metadata) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.format !== 0) {
      obj.format = Math.round(message.format);
    }
    if (message.chunks !== 0) {
      obj.chunks = Math.round(message.chunks);
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes13(message.hash);
    }
    if (message.metadata.length !== 0) {
      obj.metadata = base64FromBytes13(message.metadata);
    }
    return obj;
  },
  create(base) {
    return Snapshot.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSnapshot();
    message.height = object.height ?? 0;
    message.format = object.format ?? 0;
    message.chunks = object.chunks ?? 0;
    message.hash = object.hash ?? new Uint8Array(0);
    message.metadata = object.metadata ?? new Uint8Array(0);
    return message;
  }
};
function checkTxTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "NEW":
      return CheckTxType.NEW;
    case 1:
    case "RECHECK":
      return CheckTxType.RECHECK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CheckTxType.UNRECOGNIZED;
  }
}
function checkTxTypeToJSON(object) {
  switch (object) {
    case CheckTxType.NEW:
      return "NEW";
    case CheckTxType.RECHECK:
      return "RECHECK";
    case CheckTxType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function misbehaviorTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return MisbehaviorType.UNKNOWN;
    case 1:
    case "DUPLICATE_VOTE":
      return MisbehaviorType.DUPLICATE_VOTE;
    case 2:
    case "LIGHT_CLIENT_ATTACK":
      return MisbehaviorType.LIGHT_CLIENT_ATTACK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MisbehaviorType.UNRECOGNIZED;
  }
}
function misbehaviorTypeToJSON(object) {
  switch (object) {
    case MisbehaviorType.UNKNOWN:
      return "UNKNOWN";
    case MisbehaviorType.DUPLICATE_VOTE:
      return "DUPLICATE_VOTE";
    case MisbehaviorType.LIGHT_CLIENT_ATTACK:
      return "LIGHT_CLIENT_ATTACK";
    case MisbehaviorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function responseOfferSnapshotResultFromJSON(object) {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ResponseOfferSnapshotResult.UNKNOWN;
    case 1:
    case "ACCEPT":
      return ResponseOfferSnapshotResult.ACCEPT;
    case 2:
    case "ABORT":
      return ResponseOfferSnapshotResult.ABORT;
    case 3:
    case "REJECT":
      return ResponseOfferSnapshotResult.REJECT;
    case 4:
    case "REJECT_FORMAT":
      return ResponseOfferSnapshotResult.REJECT_FORMAT;
    case 5:
    case "REJECT_SENDER":
      return ResponseOfferSnapshotResult.REJECT_SENDER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResponseOfferSnapshotResult.UNRECOGNIZED;
  }
}
function responseOfferSnapshotResultToJSON(object) {
  switch (object) {
    case ResponseOfferSnapshotResult.UNKNOWN:
      return "UNKNOWN";
    case ResponseOfferSnapshotResult.ACCEPT:
      return "ACCEPT";
    case ResponseOfferSnapshotResult.ABORT:
      return "ABORT";
    case ResponseOfferSnapshotResult.REJECT:
      return "REJECT";
    case ResponseOfferSnapshotResult.REJECT_FORMAT:
      return "REJECT_FORMAT";
    case ResponseOfferSnapshotResult.REJECT_SENDER:
      return "REJECT_SENDER";
    case ResponseOfferSnapshotResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function responseApplySnapshotChunkResultFromJSON(object) {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ResponseApplySnapshotChunkResult.UNKNOWN;
    case 1:
    case "ACCEPT":
      return ResponseApplySnapshotChunkResult.ACCEPT;
    case 2:
    case "ABORT":
      return ResponseApplySnapshotChunkResult.ABORT;
    case 3:
    case "RETRY":
      return ResponseApplySnapshotChunkResult.RETRY;
    case 4:
    case "RETRY_SNAPSHOT":
      return ResponseApplySnapshotChunkResult.RETRY_SNAPSHOT;
    case 5:
    case "REJECT_SNAPSHOT":
      return ResponseApplySnapshotChunkResult.REJECT_SNAPSHOT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResponseApplySnapshotChunkResult.UNRECOGNIZED;
  }
}
function responseApplySnapshotChunkResultToJSON(object) {
  switch (object) {
    case ResponseApplySnapshotChunkResult.UNKNOWN:
      return "UNKNOWN";
    case ResponseApplySnapshotChunkResult.ACCEPT:
      return "ACCEPT";
    case ResponseApplySnapshotChunkResult.ABORT:
      return "ABORT";
    case ResponseApplySnapshotChunkResult.RETRY:
      return "RETRY";
    case ResponseApplySnapshotChunkResult.RETRY_SNAPSHOT:
      return "RETRY_SNAPSHOT";
    case ResponseApplySnapshotChunkResult.REJECT_SNAPSHOT:
      return "REJECT_SNAPSHOT";
    case ResponseApplySnapshotChunkResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function responseProcessProposalProposalStatusFromJSON(object) {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ResponseProcessProposalProposalStatus.UNKNOWN;
    case 1:
    case "ACCEPT":
      return ResponseProcessProposalProposalStatus.ACCEPT;
    case 2:
    case "REJECT":
      return ResponseProcessProposalProposalStatus.REJECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResponseProcessProposalProposalStatus.UNRECOGNIZED;
  }
}
function responseProcessProposalProposalStatusToJSON(object) {
  switch (object) {
    case ResponseProcessProposalProposalStatus.UNKNOWN:
      return "UNKNOWN";
    case ResponseProcessProposalProposalStatus.ACCEPT:
      return "ACCEPT";
    case ResponseProcessProposalProposalStatus.REJECT:
      return "REJECT";
    case ResponseProcessProposalProposalStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function responseVerifyVoteExtensionVerifyStatusFromJSON(object) {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ResponseVerifyVoteExtensionVerifyStatus.UNKNOWN;
    case 1:
    case "ACCEPT":
      return ResponseVerifyVoteExtensionVerifyStatus.ACCEPT;
    case 2:
    case "REJECT":
      return ResponseVerifyVoteExtensionVerifyStatus.REJECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResponseVerifyVoteExtensionVerifyStatus.UNRECOGNIZED;
  }
}
function responseVerifyVoteExtensionVerifyStatusToJSON(object) {
  switch (object) {
    case ResponseVerifyVoteExtensionVerifyStatus.UNKNOWN:
      return "UNKNOWN";
    case ResponseVerifyVoteExtensionVerifyStatus.ACCEPT:
      return "ACCEPT";
    case ResponseVerifyVoteExtensionVerifyStatus.REJECT:
      return "REJECT";
    case ResponseVerifyVoteExtensionVerifyStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function txRecordTxActionFromJSON(object) {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return TxRecordTxAction.UNKNOWN;
    case 1:
    case "UNMODIFIED":
      return TxRecordTxAction.UNMODIFIED;
    case 2:
    case "ADDED":
      return TxRecordTxAction.ADDED;
    case 3:
    case "REMOVED":
      return TxRecordTxAction.REMOVED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TxRecordTxAction.UNRECOGNIZED;
  }
}
function txRecordTxActionToJSON(object) {
  switch (object) {
    case TxRecordTxAction.UNKNOWN:
      return "UNKNOWN";
    case TxRecordTxAction.UNMODIFIED:
      return "UNMODIFIED";
    case TxRecordTxAction.ADDED:
      return "ADDED";
    case TxRecordTxAction.REMOVED:
      return "REMOVED";
    case TxRecordTxAction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function createBaseRequest() {
  return {
    echo: void 0,
    flush: void 0,
    info: void 0,
    init_chain: void 0,
    query: void 0,
    check_tx: void 0,
    commit: void 0,
    list_snapshots: void 0,
    offer_snapshot: void 0,
    load_snapshot_chunk: void 0,
    apply_snapshot_chunk: void 0,
    prepare_proposal: void 0,
    process_proposal: void 0,
    extend_vote: void 0,
    verify_vote_extension: void 0,
    finalize_block: void 0
  };
}
function createBaseRequestEcho() {
  return { message: "" };
}
function createBaseRequestFlush() {
  return {};
}
function createBaseRequestInfo() {
  return { version: "", block_version: 0, p2p_version: 0, abci_version: "" };
}
function createBaseRequestInitChain() {
  return {
    time: void 0,
    chain_id: "",
    consensus_params: void 0,
    validators: [],
    app_state_bytes: new Uint8Array(0),
    initial_height: 0
  };
}
function createBaseRequestQuery() {
  return { data: new Uint8Array(0), path: "", height: 0, prove: false };
}
function createBaseRequestCheckTx() {
  return { tx: new Uint8Array(0), type: 0 };
}
function createBaseRequestCommit() {
  return {};
}
function createBaseRequestListSnapshots() {
  return {};
}
function createBaseRequestOfferSnapshot() {
  return { snapshot: void 0, app_hash: new Uint8Array(0) };
}
function createBaseRequestLoadSnapshotChunk() {
  return { height: 0, format: 0, chunk: 0 };
}
function createBaseRequestApplySnapshotChunk() {
  return { index: 0, chunk: new Uint8Array(0), sender: "" };
}
function createBaseRequestPrepareProposal() {
  return {
    max_tx_bytes: 0,
    txs: [],
    local_last_commit: void 0,
    byzantine_validators: [],
    height: 0,
    time: void 0,
    next_validators_hash: new Uint8Array(0),
    proposer_address: new Uint8Array(0)
  };
}
function createBaseRequestProcessProposal() {
  return {
    txs: [],
    proposed_last_commit: void 0,
    byzantine_validators: [],
    hash: new Uint8Array(0),
    height: 0,
    time: void 0,
    next_validators_hash: new Uint8Array(0),
    proposer_address: new Uint8Array(0)
  };
}
function createBaseRequestExtendVote() {
  return { hash: new Uint8Array(0), height: 0 };
}
function createBaseRequestVerifyVoteExtension() {
  return {
    hash: new Uint8Array(0),
    validator_address: new Uint8Array(0),
    height: 0,
    vote_extension: new Uint8Array(0)
  };
}
function createBaseRequestFinalizeBlock() {
  return {
    txs: [],
    decided_last_commit: void 0,
    byzantine_validators: [],
    hash: new Uint8Array(0),
    height: 0,
    time: void 0,
    next_validators_hash: new Uint8Array(0),
    proposer_address: new Uint8Array(0)
  };
}
function createBaseResponse() {
  return {
    exception: void 0,
    echo: void 0,
    flush: void 0,
    info: void 0,
    init_chain: void 0,
    query: void 0,
    check_tx: void 0,
    commit: void 0,
    list_snapshots: void 0,
    offer_snapshot: void 0,
    load_snapshot_chunk: void 0,
    apply_snapshot_chunk: void 0,
    prepare_proposal: void 0,
    process_proposal: void 0,
    extend_vote: void 0,
    verify_vote_extension: void 0,
    finalize_block: void 0
  };
}
function createBaseResponseException() {
  return { error: "" };
}
function createBaseResponseEcho() {
  return { message: "" };
}
function createBaseResponseFlush() {
  return {};
}
function createBaseResponseInfo() {
  return { data: "", version: "", app_version: 0, last_block_height: 0, last_block_app_hash: new Uint8Array(0) };
}
function createBaseResponseInitChain() {
  return { consensus_params: void 0, validators: [], app_hash: new Uint8Array(0) };
}
function createBaseResponseQuery() {
  return {
    code: 0,
    log: "",
    info: "",
    index: 0,
    key: new Uint8Array(0),
    value: new Uint8Array(0),
    proof_ops: void 0,
    height: 0,
    codespace: ""
  };
}
function createBaseResponseCheckTx() {
  return { code: 0, data: new Uint8Array(0), gas_wanted: 0, codespace: "", sender: "", priority: 0 };
}
function createBaseResponseDeliverTx() {
  return { code: 0, data: new Uint8Array(0), log: "", info: "", gas_wanted: 0, gas_used: 0, events: [], codespace: "" };
}
function createBaseResponseCommit() {
  return { retain_height: 0 };
}
function createBaseResponseListSnapshots() {
  return { snapshots: [] };
}
function createBaseResponseOfferSnapshot() {
  return { result: 0 };
}
function createBaseResponseLoadSnapshotChunk() {
  return { chunk: new Uint8Array(0) };
}
function createBaseResponseApplySnapshotChunk() {
  return { result: 0, refetch_chunks: [], reject_senders: [] };
}
function createBaseResponsePrepareProposal() {
  return {
    tx_records: [],
    app_hash: new Uint8Array(0),
    tx_results: [],
    validator_updates: [],
    consensus_param_updates: void 0
  };
}
function createBaseResponseProcessProposal() {
  return {
    status: 0,
    app_hash: new Uint8Array(0),
    tx_results: [],
    validator_updates: [],
    consensus_param_updates: void 0
  };
}
function createBaseResponseExtendVote() {
  return { vote_extension: new Uint8Array(0) };
}
function createBaseResponseVerifyVoteExtension() {
  return { status: 0 };
}
function createBaseResponseFinalizeBlock() {
  return {
    events: [],
    tx_results: [],
    validator_updates: [],
    consensus_param_updates: void 0,
    app_hash: new Uint8Array(0)
  };
}
function createBaseCommitInfo() {
  return { round: 0, votes: [] };
}
function createBaseExtendedCommitInfo() {
  return { round: 0, votes: [] };
}
function createBaseEvent() {
  return { type: "", attributes: [] };
}
function createBaseEventAttribute() {
  return { key: "", value: "", index: false };
}
function createBaseExecTxResult() {
  return { code: 0, data: new Uint8Array(0), log: "", info: "", gas_wanted: 0, gas_used: 0, events: [], codespace: "" };
}
function createBaseTxResult() {
  return { height: 0, index: 0, tx: new Uint8Array(0), result: void 0 };
}
function createBaseTxRecord() {
  return { action: 0, tx: new Uint8Array(0) };
}
function createBaseValidator() {
  return { address: new Uint8Array(0), power: 0 };
}
function createBaseValidatorUpdate() {
  return { pub_key: void 0, power: 0 };
}
function createBaseVoteInfo() {
  return { validator: void 0, signed_last_block: false };
}
function createBaseExtendedVoteInfo() {
  return { validator: void 0, signed_last_block: false, vote_extension: new Uint8Array(0) };
}
function createBaseMisbehavior() {
  return { type: 0, validator: void 0, height: 0, time: void 0, total_voting_power: 0 };
}
function createBaseSnapshot() {
  return { height: 0, format: 0, chunks: 0, hash: new Uint8Array(0), metadata: new Uint8Array(0) };
}
function bytesFromBase6413(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes13(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function toTimestamp2(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp2(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp2(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp2(Timestamp.fromJSON(o));
  }
}
function longToNumber12(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet34(value) {
  return value !== null && value !== void 0;
}
var registry36 = [
  ["/tendermint.abci.Request", Request],
  ["/tendermint.abci.RequestEcho", RequestEcho],
  ["/tendermint.abci.RequestFlush", RequestFlush],
  ["/tendermint.abci.RequestInfo", RequestInfo],
  ["/tendermint.abci.RequestInitChain", RequestInitChain],
  ["/tendermint.abci.RequestQuery", RequestQuery],
  ["/tendermint.abci.RequestCheckTx", RequestCheckTx],
  ["/tendermint.abci.RequestCommit", RequestCommit],
  ["/tendermint.abci.RequestListSnapshots", RequestListSnapshots],
  ["/tendermint.abci.RequestOfferSnapshot", RequestOfferSnapshot],
  ["/tendermint.abci.RequestLoadSnapshotChunk", RequestLoadSnapshotChunk],
  ["/tendermint.abci.RequestApplySnapshotChunk", RequestApplySnapshotChunk],
  ["/tendermint.abci.RequestPrepareProposal", RequestPrepareProposal],
  ["/tendermint.abci.RequestProcessProposal", RequestProcessProposal],
  ["/tendermint.abci.RequestExtendVote", RequestExtendVote],
  ["/tendermint.abci.RequestVerifyVoteExtension", RequestVerifyVoteExtension],
  ["/tendermint.abci.RequestFinalizeBlock", RequestFinalizeBlock],
  ["/tendermint.abci.Response", Response],
  ["/tendermint.abci.ResponseException", ResponseException],
  ["/tendermint.abci.ResponseEcho", ResponseEcho],
  ["/tendermint.abci.ResponseFlush", ResponseFlush],
  ["/tendermint.abci.ResponseInfo", ResponseInfo],
  ["/tendermint.abci.ResponseInitChain", ResponseInitChain],
  ["/tendermint.abci.ResponseQuery", ResponseQuery],
  ["/tendermint.abci.ResponseCheckTx", ResponseCheckTx],
  ["/tendermint.abci.ResponseDeliverTx", ResponseDeliverTx],
  ["/tendermint.abci.ResponseCommit", ResponseCommit],
  ["/tendermint.abci.ResponseListSnapshots", ResponseListSnapshots],
  ["/tendermint.abci.ResponseOfferSnapshot", ResponseOfferSnapshot],
  ["/tendermint.abci.ResponseLoadSnapshotChunk", ResponseLoadSnapshotChunk],
  ["/tendermint.abci.ResponseApplySnapshotChunk", ResponseApplySnapshotChunk],
  ["/tendermint.abci.ResponsePrepareProposal", ResponsePrepareProposal],
  ["/tendermint.abci.ResponseProcessProposal", ResponseProcessProposal],
  ["/tendermint.abci.ResponseExtendVote", ResponseExtendVote],
  ["/tendermint.abci.ResponseVerifyVoteExtension", ResponseVerifyVoteExtension],
  ["/tendermint.abci.ResponseFinalizeBlock", ResponseFinalizeBlock],
  ["/tendermint.abci.CommitInfo", CommitInfo],
  ["/tendermint.abci.ExtendedCommitInfo", ExtendedCommitInfo],
  ["/tendermint.abci.Event", Event],
  ["/tendermint.abci.EventAttribute", EventAttribute],
  ["/tendermint.abci.ExecTxResult", ExecTxResult],
  ["/tendermint.abci.TxResult", TxResult],
  ["/tendermint.abci.TxRecord", TxRecord],
  ["/tendermint.abci.Validator", Validator],
  ["/tendermint.abci.ValidatorUpdate", ValidatorUpdate],
  ["/tendermint.abci.VoteInfo", VoteInfo],
  ["/tendermint.abci.ExtendedVoteInfo", ExtendedVoteInfo],
  ["/tendermint.abci.Misbehavior", Misbehavior],
  ["/tendermint.abci.Snapshot", Snapshot]
];
var aminoConverters36 = {
  "/tendermint.abci.Request": {
    aminoType: "tendermint.abci.Request",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestEcho": {
    aminoType: "tendermint.abci.RequestEcho",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestFlush": {
    aminoType: "tendermint.abci.RequestFlush",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestInfo": {
    aminoType: "tendermint.abci.RequestInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestInitChain": {
    aminoType: "tendermint.abci.RequestInitChain",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestQuery": {
    aminoType: "tendermint.abci.RequestQuery",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestCheckTx": {
    aminoType: "tendermint.abci.RequestCheckTx",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestCommit": {
    aminoType: "tendermint.abci.RequestCommit",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestListSnapshots": {
    aminoType: "tendermint.abci.RequestListSnapshots",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestOfferSnapshot": {
    aminoType: "tendermint.abci.RequestOfferSnapshot",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestLoadSnapshotChunk": {
    aminoType: "tendermint.abci.RequestLoadSnapshotChunk",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestApplySnapshotChunk": {
    aminoType: "tendermint.abci.RequestApplySnapshotChunk",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestPrepareProposal": {
    aminoType: "tendermint.abci.RequestPrepareProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestProcessProposal": {
    aminoType: "tendermint.abci.RequestProcessProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestExtendVote": {
    aminoType: "tendermint.abci.RequestExtendVote",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestVerifyVoteExtension": {
    aminoType: "tendermint.abci.RequestVerifyVoteExtension",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.RequestFinalizeBlock": {
    aminoType: "tendermint.abci.RequestFinalizeBlock",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.Response": {
    aminoType: "tendermint.abci.Response",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseException": {
    aminoType: "tendermint.abci.ResponseException",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseEcho": {
    aminoType: "tendermint.abci.ResponseEcho",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseFlush": {
    aminoType: "tendermint.abci.ResponseFlush",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseInfo": {
    aminoType: "tendermint.abci.ResponseInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseInitChain": {
    aminoType: "tendermint.abci.ResponseInitChain",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseQuery": {
    aminoType: "tendermint.abci.ResponseQuery",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseCheckTx": {
    aminoType: "tendermint.abci.ResponseCheckTx",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseDeliverTx": {
    aminoType: "tendermint.abci.ResponseDeliverTx",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseCommit": {
    aminoType: "tendermint.abci.ResponseCommit",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseListSnapshots": {
    aminoType: "tendermint.abci.ResponseListSnapshots",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseOfferSnapshot": {
    aminoType: "tendermint.abci.ResponseOfferSnapshot",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseLoadSnapshotChunk": {
    aminoType: "tendermint.abci.ResponseLoadSnapshotChunk",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseApplySnapshotChunk": {
    aminoType: "tendermint.abci.ResponseApplySnapshotChunk",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponsePrepareProposal": {
    aminoType: "tendermint.abci.ResponsePrepareProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseProcessProposal": {
    aminoType: "tendermint.abci.ResponseProcessProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseExtendVote": {
    aminoType: "tendermint.abci.ResponseExtendVote",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseVerifyVoteExtension": {
    aminoType: "tendermint.abci.ResponseVerifyVoteExtension",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ResponseFinalizeBlock": {
    aminoType: "tendermint.abci.ResponseFinalizeBlock",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.CommitInfo": {
    aminoType: "tendermint.abci.CommitInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ExtendedCommitInfo": {
    aminoType: "tendermint.abci.ExtendedCommitInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.Event": {
    aminoType: "tendermint.abci.Event",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.EventAttribute": {
    aminoType: "tendermint.abci.EventAttribute",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ExecTxResult": {
    aminoType: "tendermint.abci.ExecTxResult",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.TxResult": {
    aminoType: "tendermint.abci.TxResult",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.TxRecord": {
    aminoType: "tendermint.abci.TxRecord",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.Validator": {
    aminoType: "tendermint.abci.Validator",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ValidatorUpdate": {
    aminoType: "tendermint.abci.ValidatorUpdate",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.VoteInfo": {
    aminoType: "tendermint.abci.VoteInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.ExtendedVoteInfo": {
    aminoType: "tendermint.abci.ExtendedVoteInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.Misbehavior": {
    aminoType: "tendermint.abci.Misbehavior",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.abci.Snapshot": {
    aminoType: "tendermint.abci.Snapshot",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/abci/v1beta1/abci.js
var TxResponse = {
  $type: "cosmos.base.abci.v1beta1.TxResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    if (message.txhash !== "") {
      writer.uint32(18).string(message.txhash);
    }
    if (message.codespace !== "") {
      writer.uint32(26).string(message.codespace);
    }
    if (message.code !== 0) {
      writer.uint32(32).uint32(message.code);
    }
    if (message.data !== "") {
      writer.uint32(42).string(message.data);
    }
    if (message.raw_log !== "") {
      writer.uint32(50).string(message.raw_log);
    }
    for (const v of message.logs) {
      ABCIMessageLog.encode(v, writer.uint32(58).fork()).join();
    }
    if (message.info !== "") {
      writer.uint32(66).string(message.info);
    }
    if (message.gas_wanted !== 0) {
      writer.uint32(72).int64(message.gas_wanted);
    }
    if (message.gas_used !== 0) {
      writer.uint32(80).int64(message.gas_used);
    }
    if (message.tx !== void 0) {
      Any.encode(message.tx, writer.uint32(90).fork()).join();
    }
    if (message.timestamp !== "") {
      writer.uint32(98).string(message.timestamp);
    }
    for (const v of message.events) {
      Event.encode(v, writer.uint32(106).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber13(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.txhash = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.codespace = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.code = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.data = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.raw_log = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.logs.push(ABCIMessageLog.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.info = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }
          message.gas_wanted = longToNumber13(reader.int64());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }
          message.gas_used = longToNumber13(reader.int64());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.tx = Any.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }
          message.timestamp = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }
          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet35(object.height) ? globalThis.Number(object.height) : 0,
      txhash: isSet35(object.txhash) ? globalThis.String(object.txhash) : "",
      codespace: isSet35(object.codespace) ? globalThis.String(object.codespace) : "",
      code: isSet35(object.code) ? globalThis.Number(object.code) : 0,
      data: isSet35(object.data) ? globalThis.String(object.data) : "",
      raw_log: isSet35(object.raw_log) ? globalThis.String(object.raw_log) : "",
      logs: globalThis.Array.isArray(object == null ? void 0 : object.logs) ? object.logs.map((e) => ABCIMessageLog.fromJSON(e)) : [],
      info: isSet35(object.info) ? globalThis.String(object.info) : "",
      gas_wanted: isSet35(object.gas_wanted) ? globalThis.Number(object.gas_wanted) : 0,
      gas_used: isSet35(object.gas_used) ? globalThis.Number(object.gas_used) : 0,
      tx: isSet35(object.tx) ? Any.fromJSON(object.tx) : void 0,
      timestamp: isSet35(object.timestamp) ? globalThis.String(object.timestamp) : "",
      events: globalThis.Array.isArray(object == null ? void 0 : object.events) ? object.events.map((e) => Event.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.txhash !== "") {
      obj.txhash = message.txhash;
    }
    if (message.codespace !== "") {
      obj.codespace = message.codespace;
    }
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.raw_log !== "") {
      obj.raw_log = message.raw_log;
    }
    if ((_a = message.logs) == null ? void 0 : _a.length) {
      obj.logs = message.logs.map((e) => ABCIMessageLog.toJSON(e));
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    if (message.gas_wanted !== 0) {
      obj.gas_wanted = Math.round(message.gas_wanted);
    }
    if (message.gas_used !== 0) {
      obj.gas_used = Math.round(message.gas_used);
    }
    if (message.tx !== void 0) {
      obj.tx = Any.toJSON(message.tx);
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if ((_b = message.events) == null ? void 0 : _b.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return TxResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseTxResponse();
    message.height = object.height ?? 0;
    message.txhash = object.txhash ?? "";
    message.codespace = object.codespace ?? "";
    message.code = object.code ?? 0;
    message.data = object.data ?? "";
    message.raw_log = object.raw_log ?? "";
    message.logs = ((_a = object.logs) == null ? void 0 : _a.map((e) => ABCIMessageLog.fromPartial(e))) || [];
    message.info = object.info ?? "";
    message.gas_wanted = object.gas_wanted ?? 0;
    message.gas_used = object.gas_used ?? 0;
    message.tx = object.tx !== void 0 && object.tx !== null ? Any.fromPartial(object.tx) : void 0;
    message.timestamp = object.timestamp ?? "";
    message.events = ((_b = object.events) == null ? void 0 : _b.map((e) => Event.fromPartial(e))) || [];
    return message;
  }
};
var ABCIMessageLog = {
  $type: "cosmos.base.abci.v1beta1.ABCIMessageLog",
  encode(message, writer = new BinaryWriter()) {
    if (message.msg_index !== 0) {
      writer.uint32(8).uint32(message.msg_index);
    }
    if (message.log !== "") {
      writer.uint32(18).string(message.log);
    }
    for (const v of message.events) {
      StringEvent.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseABCIMessageLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.msg_index = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.log = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.events.push(StringEvent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      msg_index: isSet35(object.msg_index) ? globalThis.Number(object.msg_index) : 0,
      log: isSet35(object.log) ? globalThis.String(object.log) : "",
      events: globalThis.Array.isArray(object == null ? void 0 : object.events) ? object.events.map((e) => StringEvent.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.msg_index !== 0) {
      obj.msg_index = Math.round(message.msg_index);
    }
    if (message.log !== "") {
      obj.log = message.log;
    }
    if ((_a = message.events) == null ? void 0 : _a.length) {
      obj.events = message.events.map((e) => StringEvent.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ABCIMessageLog.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseABCIMessageLog();
    message.msg_index = object.msg_index ?? 0;
    message.log = object.log ?? "";
    message.events = ((_a = object.events) == null ? void 0 : _a.map((e) => StringEvent.fromPartial(e))) || [];
    return message;
  }
};
var StringEvent = {
  $type: "cosmos.base.abci.v1beta1.StringEvent",
  encode(message, writer = new BinaryWriter()) {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    for (const v of message.attributes) {
      Attribute.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseStringEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet35(object.type) ? globalThis.String(object.type) : "",
      attributes: globalThis.Array.isArray(object == null ? void 0 : object.attributes) ? object.attributes.map((e) => Attribute.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if ((_a = message.attributes) == null ? void 0 : _a.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return StringEvent.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseStringEvent();
    message.type = object.type ?? "";
    message.attributes = ((_a = object.attributes) == null ? void 0 : _a.map((e) => Attribute.fromPartial(e))) || [];
    return message;
  }
};
var Attribute = {
  $type: "cosmos.base.abci.v1beta1.Attribute",
  encode(message, writer = new BinaryWriter()) {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet35(object.key) ? globalThis.String(object.key) : "",
      value: isSet35(object.value) ? globalThis.String(object.value) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
  create(base) {
    return Attribute.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAttribute();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  }
};
var GasInfo = {
  $type: "cosmos.base.abci.v1beta1.GasInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.gas_wanted !== 0) {
      writer.uint32(8).uint64(message.gas_wanted);
    }
    if (message.gas_used !== 0) {
      writer.uint32(16).uint64(message.gas_used);
    }
    if (message.gas_estimate !== 0) {
      writer.uint32(24).uint64(message.gas_estimate);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGasInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.gas_wanted = longToNumber13(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.gas_used = longToNumber13(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.gas_estimate = longToNumber13(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      gas_wanted: isSet35(object.gas_wanted) ? globalThis.Number(object.gas_wanted) : 0,
      gas_used: isSet35(object.gas_used) ? globalThis.Number(object.gas_used) : 0,
      gas_estimate: isSet35(object.gas_estimate) ? globalThis.Number(object.gas_estimate) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.gas_wanted !== 0) {
      obj.gas_wanted = Math.round(message.gas_wanted);
    }
    if (message.gas_used !== 0) {
      obj.gas_used = Math.round(message.gas_used);
    }
    if (message.gas_estimate !== 0) {
      obj.gas_estimate = Math.round(message.gas_estimate);
    }
    return obj;
  },
  create(base) {
    return GasInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGasInfo();
    message.gas_wanted = object.gas_wanted ?? 0;
    message.gas_used = object.gas_used ?? 0;
    message.gas_estimate = object.gas_estimate ?? 0;
    return message;
  }
};
var Result = {
  $type: "cosmos.base.abci.v1beta1.Result",
  encode(message, writer = new BinaryWriter()) {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    if (message.log !== "") {
      writer.uint32(18).string(message.log);
    }
    for (const v of message.events) {
      Event.encode(v, writer.uint32(26).fork()).join();
    }
    if (message.evmError !== "") {
      writer.uint32(34).string(message.evmError);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.log = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.evmError = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      data: isSet35(object.data) ? bytesFromBase6414(object.data) : new Uint8Array(0),
      log: isSet35(object.log) ? globalThis.String(object.log) : "",
      events: globalThis.Array.isArray(object == null ? void 0 : object.events) ? object.events.map((e) => Event.fromJSON(e)) : [],
      evmError: isSet35(object.evmError) ? globalThis.String(object.evmError) : ""
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes14(message.data);
    }
    if (message.log !== "") {
      obj.log = message.log;
    }
    if ((_a = message.events) == null ? void 0 : _a.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if (message.evmError !== "") {
      obj.evmError = message.evmError;
    }
    return obj;
  },
  create(base) {
    return Result.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseResult();
    message.data = object.data ?? new Uint8Array(0);
    message.log = object.log ?? "";
    message.events = ((_a = object.events) == null ? void 0 : _a.map((e) => Event.fromPartial(e))) || [];
    message.evmError = object.evmError ?? "";
    return message;
  }
};
var SimulationResponse = {
  $type: "cosmos.base.abci.v1beta1.SimulationResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.gas_info !== void 0) {
      GasInfo.encode(message.gas_info, writer.uint32(10).fork()).join();
    }
    if (message.result !== void 0) {
      Result.encode(message.result, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSimulationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.gas_info = GasInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.result = Result.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      gas_info: isSet35(object.gas_info) ? GasInfo.fromJSON(object.gas_info) : void 0,
      result: isSet35(object.result) ? Result.fromJSON(object.result) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.gas_info !== void 0) {
      obj.gas_info = GasInfo.toJSON(message.gas_info);
    }
    if (message.result !== void 0) {
      obj.result = Result.toJSON(message.result);
    }
    return obj;
  },
  create(base) {
    return SimulationResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSimulationResponse();
    message.gas_info = object.gas_info !== void 0 && object.gas_info !== null ? GasInfo.fromPartial(object.gas_info) : void 0;
    message.result = object.result !== void 0 && object.result !== null ? Result.fromPartial(object.result) : void 0;
    return message;
  }
};
var MsgData = {
  $type: "cosmos.base.abci.v1beta1.MsgData",
  encode(message, writer = new BinaryWriter()) {
    if (message.msg_type !== "") {
      writer.uint32(10).string(message.msg_type);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.msg_type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      msg_type: isSet35(object.msg_type) ? globalThis.String(object.msg_type) : "",
      data: isSet35(object.data) ? bytesFromBase6414(object.data) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.msg_type !== "") {
      obj.msg_type = message.msg_type;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes14(message.data);
    }
    return obj;
  },
  create(base) {
    return MsgData.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgData();
    message.msg_type = object.msg_type ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  }
};
var TxMsgData = {
  $type: "cosmos.base.abci.v1beta1.TxMsgData",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.data) {
      MsgData.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTxMsgData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.data.push(MsgData.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { data: globalThis.Array.isArray(object == null ? void 0 : object.data) ? object.data.map((e) => MsgData.fromJSON(e)) : [] };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.data) == null ? void 0 : _a.length) {
      obj.data = message.data.map((e) => MsgData.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return TxMsgData.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseTxMsgData();
    message.data = ((_a = object.data) == null ? void 0 : _a.map((e) => MsgData.fromPartial(e))) || [];
    return message;
  }
};
var SearchTxsResult = {
  $type: "cosmos.base.abci.v1beta1.SearchTxsResult",
  encode(message, writer = new BinaryWriter()) {
    if (message.total_count !== 0) {
      writer.uint32(8).uint64(message.total_count);
    }
    if (message.count !== 0) {
      writer.uint32(16).uint64(message.count);
    }
    if (message.page_number !== 0) {
      writer.uint32(24).uint64(message.page_number);
    }
    if (message.page_total !== 0) {
      writer.uint32(32).uint64(message.page_total);
    }
    if (message.limit !== 0) {
      writer.uint32(40).uint64(message.limit);
    }
    for (const v of message.txs) {
      TxResponse.encode(v, writer.uint32(50).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSearchTxsResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.total_count = longToNumber13(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.count = longToNumber13(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.page_number = longToNumber13(reader.uint64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.page_total = longToNumber13(reader.uint64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.limit = longToNumber13(reader.uint64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.txs.push(TxResponse.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      total_count: isSet35(object.total_count) ? globalThis.Number(object.total_count) : 0,
      count: isSet35(object.count) ? globalThis.Number(object.count) : 0,
      page_number: isSet35(object.page_number) ? globalThis.Number(object.page_number) : 0,
      page_total: isSet35(object.page_total) ? globalThis.Number(object.page_total) : 0,
      limit: isSet35(object.limit) ? globalThis.Number(object.limit) : 0,
      txs: globalThis.Array.isArray(object == null ? void 0 : object.txs) ? object.txs.map((e) => TxResponse.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.total_count !== 0) {
      obj.total_count = Math.round(message.total_count);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.page_number !== 0) {
      obj.page_number = Math.round(message.page_number);
    }
    if (message.page_total !== 0) {
      obj.page_total = Math.round(message.page_total);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if ((_a = message.txs) == null ? void 0 : _a.length) {
      obj.txs = message.txs.map((e) => TxResponse.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return SearchTxsResult.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseSearchTxsResult();
    message.total_count = object.total_count ?? 0;
    message.count = object.count ?? 0;
    message.page_number = object.page_number ?? 0;
    message.page_total = object.page_total ?? 0;
    message.limit = object.limit ?? 0;
    message.txs = ((_a = object.txs) == null ? void 0 : _a.map((e) => TxResponse.fromPartial(e))) || [];
    return message;
  }
};
function createBaseTxResponse() {
  return {
    height: 0,
    txhash: "",
    codespace: "",
    code: 0,
    data: "",
    raw_log: "",
    logs: [],
    info: "",
    gas_wanted: 0,
    gas_used: 0,
    tx: void 0,
    timestamp: "",
    events: []
  };
}
function createBaseABCIMessageLog() {
  return { msg_index: 0, log: "", events: [] };
}
function createBaseStringEvent() {
  return { type: "", attributes: [] };
}
function createBaseAttribute() {
  return { key: "", value: "" };
}
function createBaseGasInfo() {
  return { gas_wanted: 0, gas_used: 0, gas_estimate: 0 };
}
function createBaseResult() {
  return { data: new Uint8Array(0), log: "", events: [], evmError: "" };
}
function createBaseSimulationResponse() {
  return { gas_info: void 0, result: void 0 };
}
function createBaseMsgData() {
  return { msg_type: "", data: new Uint8Array(0) };
}
function createBaseTxMsgData() {
  return { data: [] };
}
function createBaseSearchTxsResult() {
  return { total_count: 0, count: 0, page_number: 0, page_total: 0, limit: 0, txs: [] };
}
function bytesFromBase6414(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes14(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber13(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet35(value) {
  return value !== null && value !== void 0;
}
var registry37 = [
  ["/cosmos.base.abci.v1beta1.TxResponse", TxResponse],
  ["/cosmos.base.abci.v1beta1.ABCIMessageLog", ABCIMessageLog],
  ["/cosmos.base.abci.v1beta1.StringEvent", StringEvent],
  ["/cosmos.base.abci.v1beta1.Attribute", Attribute],
  ["/cosmos.base.abci.v1beta1.GasInfo", GasInfo],
  ["/cosmos.base.abci.v1beta1.Result", Result],
  ["/cosmos.base.abci.v1beta1.SimulationResponse", SimulationResponse],
  ["/cosmos.base.abci.v1beta1.MsgData", MsgData],
  ["/cosmos.base.abci.v1beta1.TxMsgData", TxMsgData],
  ["/cosmos.base.abci.v1beta1.SearchTxsResult", SearchTxsResult]
];
var aminoConverters37 = {
  "/cosmos.base.abci.v1beta1.TxResponse": {
    aminoType: "cosmos-sdk/TxResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.abci.v1beta1.ABCIMessageLog": {
    aminoType: "cosmos-sdk/ABCIMessageLog",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.abci.v1beta1.StringEvent": {
    aminoType: "cosmos-sdk/StringEvent",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.abci.v1beta1.Attribute": {
    aminoType: "cosmos-sdk/Attribute",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.abci.v1beta1.GasInfo": {
    aminoType: "cosmos-sdk/GasInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.abci.v1beta1.Result": {
    aminoType: "cosmos-sdk/Result",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.abci.v1beta1.SimulationResponse": {
    aminoType: "cosmos-sdk/SimulationResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.abci.v1beta1.MsgData": {
    aminoType: "cosmos-sdk/MsgData",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.abci.v1beta1.TxMsgData": {
    aminoType: "cosmos-sdk/TxMsgData",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.abci.v1beta1.SearchTxsResult": {
    aminoType: "cosmos-sdk/SearchTxsResult",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/kv/v1beta1/index.js
var v1beta1_exports5 = {};
__export(v1beta1_exports5, {
  Pair: () => Pair,
  Pairs: () => Pairs,
  aminoConverters: () => aminoConverters38,
  registry: () => registry38
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/kv/v1beta1/kv.js
var Pairs = {
  $type: "cosmos.base.kv.v1beta1.Pairs",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.pairs) {
      Pair.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePairs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pairs.push(Pair.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { pairs: globalThis.Array.isArray(object == null ? void 0 : object.pairs) ? object.pairs.map((e) => Pair.fromJSON(e)) : [] };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.pairs) == null ? void 0 : _a.length) {
      obj.pairs = message.pairs.map((e) => Pair.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Pairs.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBasePairs();
    message.pairs = ((_a = object.pairs) == null ? void 0 : _a.map((e) => Pair.fromPartial(e))) || [];
    return message;
  }
};
var Pair = {
  $type: "cosmos.base.kv.v1beta1.Pair",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet36(object.key) ? bytesFromBase6415(object.key) : new Uint8Array(0),
      value: isSet36(object.value) ? bytesFromBase6415(object.value) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes15(message.key);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes15(message.value);
    }
    return obj;
  },
  create(base) {
    return Pair.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePair();
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    return message;
  }
};
function createBasePairs() {
  return { pairs: [] };
}
function createBasePair() {
  return { key: new Uint8Array(0), value: new Uint8Array(0) };
}
function bytesFromBase6415(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes15(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet36(value) {
  return value !== null && value !== void 0;
}
var registry38 = [
  ["/cosmos.base.kv.v1beta1.Pairs", Pairs],
  ["/cosmos.base.kv.v1beta1.Pair", Pair]
];
var aminoConverters38 = {
  "/cosmos.base.kv.v1beta1.Pairs": {
    aminoType: "cosmos-sdk/Pairs",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.kv.v1beta1.Pair": {
    aminoType: "cosmos-sdk/Pair",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/query/v1beta1/index.js
var v1beta1_exports6 = {};
__export(v1beta1_exports6, {
  PageRequest: () => PageRequest,
  PageResponse: () => PageResponse,
  aminoConverters: () => aminoConverters5,
  registry: () => registry5
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/reflection/v1beta1/index.js
var v1beta1_exports7 = {};
__export(v1beta1_exports7, {
  ListAllInterfacesRequest: () => ListAllInterfacesRequest,
  ListAllInterfacesResponse: () => ListAllInterfacesResponse,
  ListImplementationsRequest: () => ListImplementationsRequest,
  ListImplementationsResponse: () => ListImplementationsResponse,
  aminoConverters: () => aminoConverters39,
  registry: () => registry39
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/reflection/v1beta1/reflection.js
var ListAllInterfacesRequest = {
  $type: "cosmos.base.reflection.v1beta1.ListAllInterfacesRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseListAllInterfacesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return ListAllInterfacesRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseListAllInterfacesRequest();
    return message;
  }
};
var ListAllInterfacesResponse = {
  $type: "cosmos.base.reflection.v1beta1.ListAllInterfacesResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.interface_names) {
      writer.uint32(10).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseListAllInterfacesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.interface_names.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      interface_names: globalThis.Array.isArray(object == null ? void 0 : object.interface_names) ? object.interface_names.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.interface_names) == null ? void 0 : _a.length) {
      obj.interface_names = message.interface_names;
    }
    return obj;
  },
  create(base) {
    return ListAllInterfacesResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseListAllInterfacesResponse();
    message.interface_names = ((_a = object.interface_names) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var ListImplementationsRequest = {
  $type: "cosmos.base.reflection.v1beta1.ListImplementationsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.interface_name !== "") {
      writer.uint32(10).string(message.interface_name);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseListImplementationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.interface_name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { interface_name: isSet37(object.interface_name) ? globalThis.String(object.interface_name) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.interface_name !== "") {
      obj.interface_name = message.interface_name;
    }
    return obj;
  },
  create(base) {
    return ListImplementationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseListImplementationsRequest();
    message.interface_name = object.interface_name ?? "";
    return message;
  }
};
var ListImplementationsResponse = {
  $type: "cosmos.base.reflection.v1beta1.ListImplementationsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.implementation_message_names) {
      writer.uint32(10).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseListImplementationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.implementation_message_names.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      implementation_message_names: globalThis.Array.isArray(object == null ? void 0 : object.implementation_message_names) ? object.implementation_message_names.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.implementation_message_names) == null ? void 0 : _a.length) {
      obj.implementation_message_names = message.implementation_message_names;
    }
    return obj;
  },
  create(base) {
    return ListImplementationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseListImplementationsResponse();
    message.implementation_message_names = ((_a = object.implementation_message_names) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
function createBaseListAllInterfacesRequest() {
  return {};
}
function createBaseListAllInterfacesResponse() {
  return { interface_names: [] };
}
function createBaseListImplementationsRequest() {
  return { interface_name: "" };
}
function createBaseListImplementationsResponse() {
  return { implementation_message_names: [] };
}
function isSet37(value) {
  return value !== null && value !== void 0;
}
var registry39 = [
  ["/cosmos.base.reflection.v1beta1.ListAllInterfacesRequest", ListAllInterfacesRequest],
  ["/cosmos.base.reflection.v1beta1.ListAllInterfacesResponse", ListAllInterfacesResponse],
  ["/cosmos.base.reflection.v1beta1.ListImplementationsRequest", ListImplementationsRequest],
  ["/cosmos.base.reflection.v1beta1.ListImplementationsResponse", ListImplementationsResponse]
];
var aminoConverters39 = {
  "/cosmos.base.reflection.v1beta1.ListAllInterfacesRequest": {
    aminoType: "cosmos-sdk/ListAllInterfacesRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v1beta1.ListAllInterfacesResponse": {
    aminoType: "cosmos-sdk/ListAllInterfacesResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v1beta1.ListImplementationsRequest": {
    aminoType: "cosmos-sdk/ListImplementationsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v1beta1.ListImplementationsResponse": {
    aminoType: "cosmos-sdk/ListImplementationsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/reflection/v2alpha1/index.js
var v2alpha1_exports = {};
__export(v2alpha1_exports, {
  AppDescriptor: () => AppDescriptor,
  AuthnDescriptor: () => AuthnDescriptor,
  ChainDescriptor: () => ChainDescriptor,
  CodecDescriptor: () => CodecDescriptor,
  ConfigurationDescriptor: () => ConfigurationDescriptor,
  GetAuthnDescriptorRequest: () => GetAuthnDescriptorRequest,
  GetAuthnDescriptorResponse: () => GetAuthnDescriptorResponse,
  GetChainDescriptorRequest: () => GetChainDescriptorRequest,
  GetChainDescriptorResponse: () => GetChainDescriptorResponse,
  GetCodecDescriptorRequest: () => GetCodecDescriptorRequest,
  GetCodecDescriptorResponse: () => GetCodecDescriptorResponse,
  GetConfigurationDescriptorRequest: () => GetConfigurationDescriptorRequest,
  GetConfigurationDescriptorResponse: () => GetConfigurationDescriptorResponse,
  GetQueryServicesDescriptorRequest: () => GetQueryServicesDescriptorRequest,
  GetQueryServicesDescriptorResponse: () => GetQueryServicesDescriptorResponse,
  GetTxDescriptorRequest: () => GetTxDescriptorRequest,
  GetTxDescriptorResponse: () => GetTxDescriptorResponse,
  InterfaceAcceptingMessageDescriptor: () => InterfaceAcceptingMessageDescriptor,
  InterfaceDescriptor: () => InterfaceDescriptor,
  InterfaceImplementerDescriptor: () => InterfaceImplementerDescriptor,
  MsgDescriptor: () => MsgDescriptor,
  QueryMethodDescriptor: () => QueryMethodDescriptor,
  QueryServiceDescriptor: () => QueryServiceDescriptor,
  QueryServicesDescriptor: () => QueryServicesDescriptor,
  SigningModeDescriptor: () => SigningModeDescriptor,
  TxDescriptor: () => TxDescriptor,
  aminoConverters: () => aminoConverters40,
  registry: () => registry40
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/reflection/v2alpha1/reflection.js
var AppDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.AppDescriptor",
  encode(message, writer = new BinaryWriter()) {
    if (message.authn !== void 0) {
      AuthnDescriptor.encode(message.authn, writer.uint32(10).fork()).join();
    }
    if (message.chain !== void 0) {
      ChainDescriptor.encode(message.chain, writer.uint32(18).fork()).join();
    }
    if (message.codec !== void 0) {
      CodecDescriptor.encode(message.codec, writer.uint32(26).fork()).join();
    }
    if (message.configuration !== void 0) {
      ConfigurationDescriptor.encode(message.configuration, writer.uint32(34).fork()).join();
    }
    if (message.query_services !== void 0) {
      QueryServicesDescriptor.encode(message.query_services, writer.uint32(42).fork()).join();
    }
    if (message.tx !== void 0) {
      TxDescriptor.encode(message.tx, writer.uint32(50).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAppDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.authn = AuthnDescriptor.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.chain = ChainDescriptor.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.codec = CodecDescriptor.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.configuration = ConfigurationDescriptor.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.query_services = QueryServicesDescriptor.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.tx = TxDescriptor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      authn: isSet38(object.authn) ? AuthnDescriptor.fromJSON(object.authn) : void 0,
      chain: isSet38(object.chain) ? ChainDescriptor.fromJSON(object.chain) : void 0,
      codec: isSet38(object.codec) ? CodecDescriptor.fromJSON(object.codec) : void 0,
      configuration: isSet38(object.configuration) ? ConfigurationDescriptor.fromJSON(object.configuration) : void 0,
      query_services: isSet38(object.query_services) ? QueryServicesDescriptor.fromJSON(object.query_services) : void 0,
      tx: isSet38(object.tx) ? TxDescriptor.fromJSON(object.tx) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.authn !== void 0) {
      obj.authn = AuthnDescriptor.toJSON(message.authn);
    }
    if (message.chain !== void 0) {
      obj.chain = ChainDescriptor.toJSON(message.chain);
    }
    if (message.codec !== void 0) {
      obj.codec = CodecDescriptor.toJSON(message.codec);
    }
    if (message.configuration !== void 0) {
      obj.configuration = ConfigurationDescriptor.toJSON(message.configuration);
    }
    if (message.query_services !== void 0) {
      obj.query_services = QueryServicesDescriptor.toJSON(message.query_services);
    }
    if (message.tx !== void 0) {
      obj.tx = TxDescriptor.toJSON(message.tx);
    }
    return obj;
  },
  create(base) {
    return AppDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAppDescriptor();
    message.authn = object.authn !== void 0 && object.authn !== null ? AuthnDescriptor.fromPartial(object.authn) : void 0;
    message.chain = object.chain !== void 0 && object.chain !== null ? ChainDescriptor.fromPartial(object.chain) : void 0;
    message.codec = object.codec !== void 0 && object.codec !== null ? CodecDescriptor.fromPartial(object.codec) : void 0;
    message.configuration = object.configuration !== void 0 && object.configuration !== null ? ConfigurationDescriptor.fromPartial(object.configuration) : void 0;
    message.query_services = object.query_services !== void 0 && object.query_services !== null ? QueryServicesDescriptor.fromPartial(object.query_services) : void 0;
    message.tx = object.tx !== void 0 && object.tx !== null ? TxDescriptor.fromPartial(object.tx) : void 0;
    return message;
  }
};
var TxDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.TxDescriptor",
  encode(message, writer = new BinaryWriter()) {
    if (message.fullname !== "") {
      writer.uint32(10).string(message.fullname);
    }
    for (const v of message.msgs) {
      MsgDescriptor.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTxDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.fullname = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.msgs.push(MsgDescriptor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fullname: isSet38(object.fullname) ? globalThis.String(object.fullname) : "",
      msgs: globalThis.Array.isArray(object == null ? void 0 : object.msgs) ? object.msgs.map((e) => MsgDescriptor.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.fullname !== "") {
      obj.fullname = message.fullname;
    }
    if ((_a = message.msgs) == null ? void 0 : _a.length) {
      obj.msgs = message.msgs.map((e) => MsgDescriptor.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return TxDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseTxDescriptor();
    message.fullname = object.fullname ?? "";
    message.msgs = ((_a = object.msgs) == null ? void 0 : _a.map((e) => MsgDescriptor.fromPartial(e))) || [];
    return message;
  }
};
var AuthnDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.AuthnDescriptor",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.sign_modes) {
      SigningModeDescriptor.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAuthnDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sign_modes.push(SigningModeDescriptor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sign_modes: globalThis.Array.isArray(object == null ? void 0 : object.sign_modes) ? object.sign_modes.map((e) => SigningModeDescriptor.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.sign_modes) == null ? void 0 : _a.length) {
      obj.sign_modes = message.sign_modes.map((e) => SigningModeDescriptor.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return AuthnDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseAuthnDescriptor();
    message.sign_modes = ((_a = object.sign_modes) == null ? void 0 : _a.map((e) => SigningModeDescriptor.fromPartial(e))) || [];
    return message;
  }
};
var SigningModeDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.SigningModeDescriptor",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.number !== 0) {
      writer.uint32(16).int32(message.number);
    }
    if (message.authn_info_provider_method_fullname !== "") {
      writer.uint32(26).string(message.authn_info_provider_method_fullname);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSigningModeDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.number = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.authn_info_provider_method_fullname = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet38(object.name) ? globalThis.String(object.name) : "",
      number: isSet38(object.number) ? globalThis.Number(object.number) : 0,
      authn_info_provider_method_fullname: isSet38(object.authn_info_provider_method_fullname) ? globalThis.String(object.authn_info_provider_method_fullname) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (message.authn_info_provider_method_fullname !== "") {
      obj.authn_info_provider_method_fullname = message.authn_info_provider_method_fullname;
    }
    return obj;
  },
  create(base) {
    return SigningModeDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSigningModeDescriptor();
    message.name = object.name ?? "";
    message.number = object.number ?? 0;
    message.authn_info_provider_method_fullname = object.authn_info_provider_method_fullname ?? "";
    return message;
  }
};
var ChainDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.ChainDescriptor",
  encode(message, writer = new BinaryWriter()) {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseChainDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet38(object.id) ? globalThis.String(object.id) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return ChainDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseChainDescriptor();
    message.id = object.id ?? "";
    return message;
  }
};
var CodecDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.CodecDescriptor",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.interfaces) {
      InterfaceDescriptor.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCodecDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.interfaces.push(InterfaceDescriptor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      interfaces: globalThis.Array.isArray(object == null ? void 0 : object.interfaces) ? object.interfaces.map((e) => InterfaceDescriptor.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.interfaces) == null ? void 0 : _a.length) {
      obj.interfaces = message.interfaces.map((e) => InterfaceDescriptor.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return CodecDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseCodecDescriptor();
    message.interfaces = ((_a = object.interfaces) == null ? void 0 : _a.map((e) => InterfaceDescriptor.fromPartial(e))) || [];
    return message;
  }
};
var InterfaceDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.InterfaceDescriptor",
  encode(message, writer = new BinaryWriter()) {
    if (message.fullname !== "") {
      writer.uint32(10).string(message.fullname);
    }
    for (const v of message.interface_accepting_messages) {
      InterfaceAcceptingMessageDescriptor.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.interface_implementers) {
      InterfaceImplementerDescriptor.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseInterfaceDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.fullname = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.interface_accepting_messages.push(InterfaceAcceptingMessageDescriptor.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.interface_implementers.push(InterfaceImplementerDescriptor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fullname: isSet38(object.fullname) ? globalThis.String(object.fullname) : "",
      interface_accepting_messages: globalThis.Array.isArray(object == null ? void 0 : object.interface_accepting_messages) ? object.interface_accepting_messages.map((e) => InterfaceAcceptingMessageDescriptor.fromJSON(e)) : [],
      interface_implementers: globalThis.Array.isArray(object == null ? void 0 : object.interface_implementers) ? object.interface_implementers.map((e) => InterfaceImplementerDescriptor.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if (message.fullname !== "") {
      obj.fullname = message.fullname;
    }
    if ((_a = message.interface_accepting_messages) == null ? void 0 : _a.length) {
      obj.interface_accepting_messages = message.interface_accepting_messages.map((e) => InterfaceAcceptingMessageDescriptor.toJSON(e));
    }
    if ((_b = message.interface_implementers) == null ? void 0 : _b.length) {
      obj.interface_implementers = message.interface_implementers.map((e) => InterfaceImplementerDescriptor.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return InterfaceDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseInterfaceDescriptor();
    message.fullname = object.fullname ?? "";
    message.interface_accepting_messages = ((_a = object.interface_accepting_messages) == null ? void 0 : _a.map((e) => InterfaceAcceptingMessageDescriptor.fromPartial(e))) || [];
    message.interface_implementers = ((_b = object.interface_implementers) == null ? void 0 : _b.map((e) => InterfaceImplementerDescriptor.fromPartial(e))) || [];
    return message;
  }
};
var InterfaceImplementerDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor",
  encode(message, writer = new BinaryWriter()) {
    if (message.fullname !== "") {
      writer.uint32(10).string(message.fullname);
    }
    if (message.type_url !== "") {
      writer.uint32(18).string(message.type_url);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseInterfaceImplementerDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.fullname = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.type_url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fullname: isSet38(object.fullname) ? globalThis.String(object.fullname) : "",
      type_url: isSet38(object.type_url) ? globalThis.String(object.type_url) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.fullname !== "") {
      obj.fullname = message.fullname;
    }
    if (message.type_url !== "") {
      obj.type_url = message.type_url;
    }
    return obj;
  },
  create(base) {
    return InterfaceImplementerDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseInterfaceImplementerDescriptor();
    message.fullname = object.fullname ?? "";
    message.type_url = object.type_url ?? "";
    return message;
  }
};
var InterfaceAcceptingMessageDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor",
  encode(message, writer = new BinaryWriter()) {
    if (message.fullname !== "") {
      writer.uint32(10).string(message.fullname);
    }
    for (const v of message.field_descriptor_names) {
      writer.uint32(18).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseInterfaceAcceptingMessageDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.fullname = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.field_descriptor_names.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fullname: isSet38(object.fullname) ? globalThis.String(object.fullname) : "",
      field_descriptor_names: globalThis.Array.isArray(object == null ? void 0 : object.field_descriptor_names) ? object.field_descriptor_names.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.fullname !== "") {
      obj.fullname = message.fullname;
    }
    if ((_a = message.field_descriptor_names) == null ? void 0 : _a.length) {
      obj.field_descriptor_names = message.field_descriptor_names;
    }
    return obj;
  },
  create(base) {
    return InterfaceAcceptingMessageDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseInterfaceAcceptingMessageDescriptor();
    message.fullname = object.fullname ?? "";
    message.field_descriptor_names = ((_a = object.field_descriptor_names) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var ConfigurationDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.ConfigurationDescriptor",
  encode(message, writer = new BinaryWriter()) {
    if (message.bech32_account_address_prefix !== "") {
      writer.uint32(10).string(message.bech32_account_address_prefix);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseConfigurationDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.bech32_account_address_prefix = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      bech32_account_address_prefix: isSet38(object.bech32_account_address_prefix) ? globalThis.String(object.bech32_account_address_prefix) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.bech32_account_address_prefix !== "") {
      obj.bech32_account_address_prefix = message.bech32_account_address_prefix;
    }
    return obj;
  },
  create(base) {
    return ConfigurationDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseConfigurationDescriptor();
    message.bech32_account_address_prefix = object.bech32_account_address_prefix ?? "";
    return message;
  }
};
var MsgDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.MsgDescriptor",
  encode(message, writer = new BinaryWriter()) {
    if (message.msg_type_url !== "") {
      writer.uint32(10).string(message.msg_type_url);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.msg_type_url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { msg_type_url: isSet38(object.msg_type_url) ? globalThis.String(object.msg_type_url) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.msg_type_url !== "") {
      obj.msg_type_url = message.msg_type_url;
    }
    return obj;
  },
  create(base) {
    return MsgDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgDescriptor();
    message.msg_type_url = object.msg_type_url ?? "";
    return message;
  }
};
var GetAuthnDescriptorRequest = {
  $type: "cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetAuthnDescriptorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return GetAuthnDescriptorRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseGetAuthnDescriptorRequest();
    return message;
  }
};
var GetAuthnDescriptorResponse = {
  $type: "cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.authn !== void 0) {
      AuthnDescriptor.encode(message.authn, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetAuthnDescriptorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.authn = AuthnDescriptor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { authn: isSet38(object.authn) ? AuthnDescriptor.fromJSON(object.authn) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.authn !== void 0) {
      obj.authn = AuthnDescriptor.toJSON(message.authn);
    }
    return obj;
  },
  create(base) {
    return GetAuthnDescriptorResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetAuthnDescriptorResponse();
    message.authn = object.authn !== void 0 && object.authn !== null ? AuthnDescriptor.fromPartial(object.authn) : void 0;
    return message;
  }
};
var GetChainDescriptorRequest = {
  $type: "cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetChainDescriptorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return GetChainDescriptorRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseGetChainDescriptorRequest();
    return message;
  }
};
var GetChainDescriptorResponse = {
  $type: "cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.chain !== void 0) {
      ChainDescriptor.encode(message.chain, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetChainDescriptorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.chain = ChainDescriptor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { chain: isSet38(object.chain) ? ChainDescriptor.fromJSON(object.chain) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.chain !== void 0) {
      obj.chain = ChainDescriptor.toJSON(message.chain);
    }
    return obj;
  },
  create(base) {
    return GetChainDescriptorResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetChainDescriptorResponse();
    message.chain = object.chain !== void 0 && object.chain !== null ? ChainDescriptor.fromPartial(object.chain) : void 0;
    return message;
  }
};
var GetCodecDescriptorRequest = {
  $type: "cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetCodecDescriptorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return GetCodecDescriptorRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseGetCodecDescriptorRequest();
    return message;
  }
};
var GetCodecDescriptorResponse = {
  $type: "cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.codec !== void 0) {
      CodecDescriptor.encode(message.codec, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetCodecDescriptorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.codec = CodecDescriptor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { codec: isSet38(object.codec) ? CodecDescriptor.fromJSON(object.codec) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.codec !== void 0) {
      obj.codec = CodecDescriptor.toJSON(message.codec);
    }
    return obj;
  },
  create(base) {
    return GetCodecDescriptorResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetCodecDescriptorResponse();
    message.codec = object.codec !== void 0 && object.codec !== null ? CodecDescriptor.fromPartial(object.codec) : void 0;
    return message;
  }
};
var GetConfigurationDescriptorRequest = {
  $type: "cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetConfigurationDescriptorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return GetConfigurationDescriptorRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseGetConfigurationDescriptorRequest();
    return message;
  }
};
var GetConfigurationDescriptorResponse = {
  $type: "cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.config !== void 0) {
      ConfigurationDescriptor.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetConfigurationDescriptorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.config = ConfigurationDescriptor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { config: isSet38(object.config) ? ConfigurationDescriptor.fromJSON(object.config) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.config !== void 0) {
      obj.config = ConfigurationDescriptor.toJSON(message.config);
    }
    return obj;
  },
  create(base) {
    return GetConfigurationDescriptorResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetConfigurationDescriptorResponse();
    message.config = object.config !== void 0 && object.config !== null ? ConfigurationDescriptor.fromPartial(object.config) : void 0;
    return message;
  }
};
var GetQueryServicesDescriptorRequest = {
  $type: "cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetQueryServicesDescriptorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return GetQueryServicesDescriptorRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseGetQueryServicesDescriptorRequest();
    return message;
  }
};
var GetQueryServicesDescriptorResponse = {
  $type: "cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.queries !== void 0) {
      QueryServicesDescriptor.encode(message.queries, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetQueryServicesDescriptorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.queries = QueryServicesDescriptor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { queries: isSet38(object.queries) ? QueryServicesDescriptor.fromJSON(object.queries) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.queries !== void 0) {
      obj.queries = QueryServicesDescriptor.toJSON(message.queries);
    }
    return obj;
  },
  create(base) {
    return GetQueryServicesDescriptorResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetQueryServicesDescriptorResponse();
    message.queries = object.queries !== void 0 && object.queries !== null ? QueryServicesDescriptor.fromPartial(object.queries) : void 0;
    return message;
  }
};
var GetTxDescriptorRequest = {
  $type: "cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetTxDescriptorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return GetTxDescriptorRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseGetTxDescriptorRequest();
    return message;
  }
};
var GetTxDescriptorResponse = {
  $type: "cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.tx !== void 0) {
      TxDescriptor.encode(message.tx, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetTxDescriptorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.tx = TxDescriptor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { tx: isSet38(object.tx) ? TxDescriptor.fromJSON(object.tx) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.tx !== void 0) {
      obj.tx = TxDescriptor.toJSON(message.tx);
    }
    return obj;
  },
  create(base) {
    return GetTxDescriptorResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetTxDescriptorResponse();
    message.tx = object.tx !== void 0 && object.tx !== null ? TxDescriptor.fromPartial(object.tx) : void 0;
    return message;
  }
};
var QueryServicesDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.QueryServicesDescriptor",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.query_services) {
      QueryServiceDescriptor.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryServicesDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.query_services.push(QueryServiceDescriptor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      query_services: globalThis.Array.isArray(object == null ? void 0 : object.query_services) ? object.query_services.map((e) => QueryServiceDescriptor.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.query_services) == null ? void 0 : _a.length) {
      obj.query_services = message.query_services.map((e) => QueryServiceDescriptor.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return QueryServicesDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryServicesDescriptor();
    message.query_services = ((_a = object.query_services) == null ? void 0 : _a.map((e) => QueryServiceDescriptor.fromPartial(e))) || [];
    return message;
  }
};
var QueryServiceDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.QueryServiceDescriptor",
  encode(message, writer = new BinaryWriter()) {
    if (message.fullname !== "") {
      writer.uint32(10).string(message.fullname);
    }
    if (message.is_module !== false) {
      writer.uint32(16).bool(message.is_module);
    }
    for (const v of message.methods) {
      QueryMethodDescriptor.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.fullname = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.is_module = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.methods.push(QueryMethodDescriptor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fullname: isSet38(object.fullname) ? globalThis.String(object.fullname) : "",
      is_module: isSet38(object.is_module) ? globalThis.Boolean(object.is_module) : false,
      methods: globalThis.Array.isArray(object == null ? void 0 : object.methods) ? object.methods.map((e) => QueryMethodDescriptor.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.fullname !== "") {
      obj.fullname = message.fullname;
    }
    if (message.is_module !== false) {
      obj.is_module = message.is_module;
    }
    if ((_a = message.methods) == null ? void 0 : _a.length) {
      obj.methods = message.methods.map((e) => QueryMethodDescriptor.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return QueryServiceDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryServiceDescriptor();
    message.fullname = object.fullname ?? "";
    message.is_module = object.is_module ?? false;
    message.methods = ((_a = object.methods) == null ? void 0 : _a.map((e) => QueryMethodDescriptor.fromPartial(e))) || [];
    return message;
  }
};
var QueryMethodDescriptor = {
  $type: "cosmos.base.reflection.v2alpha1.QueryMethodDescriptor",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.full_query_path !== "") {
      writer.uint32(18).string(message.full_query_path);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryMethodDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.full_query_path = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet38(object.name) ? globalThis.String(object.name) : "",
      full_query_path: isSet38(object.full_query_path) ? globalThis.String(object.full_query_path) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.full_query_path !== "") {
      obj.full_query_path = message.full_query_path;
    }
    return obj;
  },
  create(base) {
    return QueryMethodDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryMethodDescriptor();
    message.name = object.name ?? "";
    message.full_query_path = object.full_query_path ?? "";
    return message;
  }
};
function createBaseAppDescriptor() {
  return {
    authn: void 0,
    chain: void 0,
    codec: void 0,
    configuration: void 0,
    query_services: void 0,
    tx: void 0
  };
}
function createBaseTxDescriptor() {
  return { fullname: "", msgs: [] };
}
function createBaseAuthnDescriptor() {
  return { sign_modes: [] };
}
function createBaseSigningModeDescriptor() {
  return { name: "", number: 0, authn_info_provider_method_fullname: "" };
}
function createBaseChainDescriptor() {
  return { id: "" };
}
function createBaseCodecDescriptor() {
  return { interfaces: [] };
}
function createBaseInterfaceDescriptor() {
  return { fullname: "", interface_accepting_messages: [], interface_implementers: [] };
}
function createBaseInterfaceImplementerDescriptor() {
  return { fullname: "", type_url: "" };
}
function createBaseInterfaceAcceptingMessageDescriptor() {
  return { fullname: "", field_descriptor_names: [] };
}
function createBaseConfigurationDescriptor() {
  return { bech32_account_address_prefix: "" };
}
function createBaseMsgDescriptor() {
  return { msg_type_url: "" };
}
function createBaseGetAuthnDescriptorRequest() {
  return {};
}
function createBaseGetAuthnDescriptorResponse() {
  return { authn: void 0 };
}
function createBaseGetChainDescriptorRequest() {
  return {};
}
function createBaseGetChainDescriptorResponse() {
  return { chain: void 0 };
}
function createBaseGetCodecDescriptorRequest() {
  return {};
}
function createBaseGetCodecDescriptorResponse() {
  return { codec: void 0 };
}
function createBaseGetConfigurationDescriptorRequest() {
  return {};
}
function createBaseGetConfigurationDescriptorResponse() {
  return { config: void 0 };
}
function createBaseGetQueryServicesDescriptorRequest() {
  return {};
}
function createBaseGetQueryServicesDescriptorResponse() {
  return { queries: void 0 };
}
function createBaseGetTxDescriptorRequest() {
  return {};
}
function createBaseGetTxDescriptorResponse() {
  return { tx: void 0 };
}
function createBaseQueryServicesDescriptor() {
  return { query_services: [] };
}
function createBaseQueryServiceDescriptor() {
  return { fullname: "", is_module: false, methods: [] };
}
function createBaseQueryMethodDescriptor() {
  return { name: "", full_query_path: "" };
}
function isSet38(value) {
  return value !== null && value !== void 0;
}
var registry40 = [
  ["/cosmos.base.reflection.v2alpha1.AppDescriptor", AppDescriptor],
  ["/cosmos.base.reflection.v2alpha1.TxDescriptor", TxDescriptor],
  ["/cosmos.base.reflection.v2alpha1.AuthnDescriptor", AuthnDescriptor],
  ["/cosmos.base.reflection.v2alpha1.SigningModeDescriptor", SigningModeDescriptor],
  ["/cosmos.base.reflection.v2alpha1.ChainDescriptor", ChainDescriptor],
  ["/cosmos.base.reflection.v2alpha1.CodecDescriptor", CodecDescriptor],
  ["/cosmos.base.reflection.v2alpha1.InterfaceDescriptor", InterfaceDescriptor],
  ["/cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor", InterfaceImplementerDescriptor],
  ["/cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor", InterfaceAcceptingMessageDescriptor],
  ["/cosmos.base.reflection.v2alpha1.ConfigurationDescriptor", ConfigurationDescriptor],
  ["/cosmos.base.reflection.v2alpha1.MsgDescriptor", MsgDescriptor],
  ["/cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest", GetAuthnDescriptorRequest],
  ["/cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse", GetAuthnDescriptorResponse],
  ["/cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest", GetChainDescriptorRequest],
  ["/cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse", GetChainDescriptorResponse],
  ["/cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest", GetCodecDescriptorRequest],
  ["/cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse", GetCodecDescriptorResponse],
  ["/cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest", GetConfigurationDescriptorRequest],
  ["/cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse", GetConfigurationDescriptorResponse],
  ["/cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest", GetQueryServicesDescriptorRequest],
  ["/cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse", GetQueryServicesDescriptorResponse],
  ["/cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest", GetTxDescriptorRequest],
  ["/cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse", GetTxDescriptorResponse],
  ["/cosmos.base.reflection.v2alpha1.QueryServicesDescriptor", QueryServicesDescriptor],
  ["/cosmos.base.reflection.v2alpha1.QueryServiceDescriptor", QueryServiceDescriptor],
  ["/cosmos.base.reflection.v2alpha1.QueryMethodDescriptor", QueryMethodDescriptor]
];
var aminoConverters40 = {
  "/cosmos.base.reflection.v2alpha1.AppDescriptor": {
    aminoType: "cosmos-sdk/AppDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.TxDescriptor": {
    aminoType: "cosmos-sdk/TxDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.AuthnDescriptor": {
    aminoType: "cosmos-sdk/AuthnDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.SigningModeDescriptor": {
    aminoType: "cosmos-sdk/SigningModeDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.ChainDescriptor": {
    aminoType: "cosmos-sdk/ChainDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.CodecDescriptor": {
    aminoType: "cosmos-sdk/CodecDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.InterfaceDescriptor": {
    aminoType: "cosmos-sdk/InterfaceDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor": {
    aminoType: "cosmos-sdk/InterfaceImplementerDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor": {
    aminoType: "cosmos-sdk/InterfaceAcceptingMessageDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.ConfigurationDescriptor": {
    aminoType: "cosmos-sdk/ConfigurationDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.MsgDescriptor": {
    aminoType: "cosmos-sdk/MsgDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest": {
    aminoType: "cosmos-sdk/GetAuthnDescriptorRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse": {
    aminoType: "cosmos-sdk/GetAuthnDescriptorResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest": {
    aminoType: "cosmos-sdk/GetChainDescriptorRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse": {
    aminoType: "cosmos-sdk/GetChainDescriptorResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest": {
    aminoType: "cosmos-sdk/GetCodecDescriptorRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse": {
    aminoType: "cosmos-sdk/GetCodecDescriptorResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest": {
    aminoType: "cosmos-sdk/GetConfigurationDescriptorRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse": {
    aminoType: "cosmos-sdk/GetConfigurationDescriptorResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest": {
    aminoType: "cosmos-sdk/GetQueryServicesDescriptorRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse": {
    aminoType: "cosmos-sdk/GetQueryServicesDescriptorResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest": {
    aminoType: "cosmos-sdk/GetTxDescriptorRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse": {
    aminoType: "cosmos-sdk/GetTxDescriptorResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.QueryServicesDescriptor": {
    aminoType: "cosmos-sdk/QueryServicesDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.QueryServiceDescriptor": {
    aminoType: "cosmos-sdk/QueryServiceDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.reflection.v2alpha1.QueryMethodDescriptor": {
    aminoType: "cosmos-sdk/QueryMethodDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/snapshots/v1beta1/index.js
var v1beta1_exports8 = {};
__export(v1beta1_exports8, {
  Metadata: () => Metadata2,
  Snapshot: () => Snapshot2,
  SnapshotExtensionMeta: () => SnapshotExtensionMeta,
  SnapshotExtensionPayload: () => SnapshotExtensionPayload,
  SnapshotIAVLItem: () => SnapshotIAVLItem,
  SnapshotItem: () => SnapshotItem,
  SnapshotStoreItem: () => SnapshotStoreItem,
  aminoConverters: () => aminoConverters41,
  registry: () => registry41
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/snapshots/v1beta1/snapshot.js
var Snapshot2 = {
  $type: "cosmos.base.snapshots.v1beta1.Snapshot",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).uint64(message.height);
    }
    if (message.format !== 0) {
      writer.uint32(16).uint32(message.format);
    }
    if (message.chunks !== 0) {
      writer.uint32(24).uint32(message.chunks);
    }
    if (message.hash.length !== 0) {
      writer.uint32(34).bytes(message.hash);
    }
    if (message.metadata !== void 0) {
      Metadata2.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSnapshot2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber14(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.format = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.chunks = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.hash = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.metadata = Metadata2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet39(object.height) ? globalThis.Number(object.height) : 0,
      format: isSet39(object.format) ? globalThis.Number(object.format) : 0,
      chunks: isSet39(object.chunks) ? globalThis.Number(object.chunks) : 0,
      hash: isSet39(object.hash) ? bytesFromBase6416(object.hash) : new Uint8Array(0),
      metadata: isSet39(object.metadata) ? Metadata2.fromJSON(object.metadata) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.format !== 0) {
      obj.format = Math.round(message.format);
    }
    if (message.chunks !== 0) {
      obj.chunks = Math.round(message.chunks);
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes16(message.hash);
    }
    if (message.metadata !== void 0) {
      obj.metadata = Metadata2.toJSON(message.metadata);
    }
    return obj;
  },
  create(base) {
    return Snapshot2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSnapshot2();
    message.height = object.height ?? 0;
    message.format = object.format ?? 0;
    message.chunks = object.chunks ?? 0;
    message.hash = object.hash ?? new Uint8Array(0);
    message.metadata = object.metadata !== void 0 && object.metadata !== null ? Metadata2.fromPartial(object.metadata) : void 0;
    return message;
  }
};
var Metadata2 = {
  $type: "cosmos.base.snapshots.v1beta1.Metadata",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.chunk_hashes) {
      writer.uint32(10).bytes(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMetadata2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.chunk_hashes.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      chunk_hashes: globalThis.Array.isArray(object == null ? void 0 : object.chunk_hashes) ? object.chunk_hashes.map((e) => bytesFromBase6416(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.chunk_hashes) == null ? void 0 : _a.length) {
      obj.chunk_hashes = message.chunk_hashes.map((e) => base64FromBytes16(e));
    }
    return obj;
  },
  create(base) {
    return Metadata2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMetadata2();
    message.chunk_hashes = ((_a = object.chunk_hashes) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var SnapshotItem = {
  $type: "cosmos.base.snapshots.v1beta1.SnapshotItem",
  encode(message, writer = new BinaryWriter()) {
    if (message.store !== void 0) {
      SnapshotStoreItem.encode(message.store, writer.uint32(10).fork()).join();
    }
    if (message.iavl !== void 0) {
      SnapshotIAVLItem.encode(message.iavl, writer.uint32(18).fork()).join();
    }
    if (message.extension !== void 0) {
      SnapshotExtensionMeta.encode(message.extension, writer.uint32(26).fork()).join();
    }
    if (message.extension_payload !== void 0) {
      SnapshotExtensionPayload.encode(message.extension_payload, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSnapshotItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.store = SnapshotStoreItem.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.iavl = SnapshotIAVLItem.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.extension = SnapshotExtensionMeta.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.extension_payload = SnapshotExtensionPayload.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      store: isSet39(object.store) ? SnapshotStoreItem.fromJSON(object.store) : void 0,
      iavl: isSet39(object.iavl) ? SnapshotIAVLItem.fromJSON(object.iavl) : void 0,
      extension: isSet39(object.extension) ? SnapshotExtensionMeta.fromJSON(object.extension) : void 0,
      extension_payload: isSet39(object.extension_payload) ? SnapshotExtensionPayload.fromJSON(object.extension_payload) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.store !== void 0) {
      obj.store = SnapshotStoreItem.toJSON(message.store);
    }
    if (message.iavl !== void 0) {
      obj.iavl = SnapshotIAVLItem.toJSON(message.iavl);
    }
    if (message.extension !== void 0) {
      obj.extension = SnapshotExtensionMeta.toJSON(message.extension);
    }
    if (message.extension_payload !== void 0) {
      obj.extension_payload = SnapshotExtensionPayload.toJSON(message.extension_payload);
    }
    return obj;
  },
  create(base) {
    return SnapshotItem.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSnapshotItem();
    message.store = object.store !== void 0 && object.store !== null ? SnapshotStoreItem.fromPartial(object.store) : void 0;
    message.iavl = object.iavl !== void 0 && object.iavl !== null ? SnapshotIAVLItem.fromPartial(object.iavl) : void 0;
    message.extension = object.extension !== void 0 && object.extension !== null ? SnapshotExtensionMeta.fromPartial(object.extension) : void 0;
    message.extension_payload = object.extension_payload !== void 0 && object.extension_payload !== null ? SnapshotExtensionPayload.fromPartial(object.extension_payload) : void 0;
    return message;
  }
};
var SnapshotStoreItem = {
  $type: "cosmos.base.snapshots.v1beta1.SnapshotStoreItem",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSnapshotStoreItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { name: isSet39(object.name) ? globalThis.String(object.name) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },
  create(base) {
    return SnapshotStoreItem.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSnapshotStoreItem();
    message.name = object.name ?? "";
    return message;
  }
};
var SnapshotIAVLItem = {
  $type: "cosmos.base.snapshots.v1beta1.SnapshotIAVLItem",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    if (message.version !== 0) {
      writer.uint32(24).int64(message.version);
    }
    if (message.height !== 0) {
      writer.uint32(32).int32(message.height);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSnapshotIAVLItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.version = longToNumber14(reader.int64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.height = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet39(object.key) ? bytesFromBase6416(object.key) : new Uint8Array(0),
      value: isSet39(object.value) ? bytesFromBase6416(object.value) : new Uint8Array(0),
      version: isSet39(object.version) ? globalThis.Number(object.version) : 0,
      height: isSet39(object.height) ? globalThis.Number(object.height) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes16(message.key);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes16(message.value);
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },
  create(base) {
    return SnapshotIAVLItem.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSnapshotIAVLItem();
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    message.version = object.version ?? 0;
    message.height = object.height ?? 0;
    return message;
  }
};
var SnapshotExtensionMeta = {
  $type: "cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.format !== 0) {
      writer.uint32(16).uint32(message.format);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSnapshotExtensionMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.format = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet39(object.name) ? globalThis.String(object.name) : "",
      format: isSet39(object.format) ? globalThis.Number(object.format) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.format !== 0) {
      obj.format = Math.round(message.format);
    }
    return obj;
  },
  create(base) {
    return SnapshotExtensionMeta.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSnapshotExtensionMeta();
    message.name = object.name ?? "";
    message.format = object.format ?? 0;
    return message;
  }
};
var SnapshotExtensionPayload = {
  $type: "cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload",
  encode(message, writer = new BinaryWriter()) {
    if (message.payload.length !== 0) {
      writer.uint32(10).bytes(message.payload);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSnapshotExtensionPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.payload = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { payload: isSet39(object.payload) ? bytesFromBase6416(object.payload) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes16(message.payload);
    }
    return obj;
  },
  create(base) {
    return SnapshotExtensionPayload.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSnapshotExtensionPayload();
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  }
};
function createBaseSnapshot2() {
  return { height: 0, format: 0, chunks: 0, hash: new Uint8Array(0), metadata: void 0 };
}
function createBaseMetadata2() {
  return { chunk_hashes: [] };
}
function createBaseSnapshotItem() {
  return { store: void 0, iavl: void 0, extension: void 0, extension_payload: void 0 };
}
function createBaseSnapshotStoreItem() {
  return { name: "" };
}
function createBaseSnapshotIAVLItem() {
  return { key: new Uint8Array(0), value: new Uint8Array(0), version: 0, height: 0 };
}
function createBaseSnapshotExtensionMeta() {
  return { name: "", format: 0 };
}
function createBaseSnapshotExtensionPayload() {
  return { payload: new Uint8Array(0) };
}
function bytesFromBase6416(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes16(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber14(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet39(value) {
  return value !== null && value !== void 0;
}
var registry41 = [
  ["/cosmos.base.snapshots.v1beta1.Snapshot", Snapshot2],
  ["/cosmos.base.snapshots.v1beta1.Metadata", Metadata2],
  ["/cosmos.base.snapshots.v1beta1.SnapshotItem", SnapshotItem],
  ["/cosmos.base.snapshots.v1beta1.SnapshotStoreItem", SnapshotStoreItem],
  ["/cosmos.base.snapshots.v1beta1.SnapshotIAVLItem", SnapshotIAVLItem],
  ["/cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta", SnapshotExtensionMeta],
  ["/cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload", SnapshotExtensionPayload]
];
var aminoConverters41 = {
  "/cosmos.base.snapshots.v1beta1.Snapshot": {
    aminoType: "cosmos-sdk/Snapshot",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.snapshots.v1beta1.Metadata": {
    aminoType: "cosmos-sdk/Metadata",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.snapshots.v1beta1.SnapshotItem": {
    aminoType: "cosmos-sdk/SnapshotItem",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.snapshots.v1beta1.SnapshotStoreItem": {
    aminoType: "cosmos-sdk/SnapshotStoreItem",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.snapshots.v1beta1.SnapshotIAVLItem": {
    aminoType: "cosmos-sdk/SnapshotIAVLItem",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta": {
    aminoType: "cosmos-sdk/SnapshotExtensionMeta",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload": {
    aminoType: "cosmos-sdk/SnapshotExtensionPayload",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/store/v1beta1/index.js
var v1beta1_exports9 = {};
__export(v1beta1_exports9, {
  CommitID: () => CommitID,
  CommitInfo: () => CommitInfo2,
  StoreInfo: () => StoreInfo,
  StoreKVPair: () => StoreKVPair
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/store/v1beta1/commit_info.js
var CommitInfo2 = {
  $type: "cosmos.base.store.v1beta1.CommitInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.version !== 0) {
      writer.uint32(8).int64(message.version);
    }
    for (const v of message.store_infos) {
      StoreInfo.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCommitInfo2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.version = longToNumber15(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.store_infos.push(StoreInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      version: isSet40(object.version) ? globalThis.Number(object.version) : 0,
      store_infos: globalThis.Array.isArray(object == null ? void 0 : object.store_infos) ? object.store_infos.map((e) => StoreInfo.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if ((_a = message.store_infos) == null ? void 0 : _a.length) {
      obj.store_infos = message.store_infos.map((e) => StoreInfo.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return CommitInfo2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseCommitInfo2();
    message.version = object.version ?? 0;
    message.store_infos = ((_a = object.store_infos) == null ? void 0 : _a.map((e) => StoreInfo.fromPartial(e))) || [];
    return message;
  }
};
var StoreInfo = {
  $type: "cosmos.base.store.v1beta1.StoreInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.commit_id !== void 0) {
      CommitID.encode(message.commit_id, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseStoreInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.commit_id = CommitID.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet40(object.name) ? globalThis.String(object.name) : "",
      commit_id: isSet40(object.commit_id) ? CommitID.fromJSON(object.commit_id) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.commit_id !== void 0) {
      obj.commit_id = CommitID.toJSON(message.commit_id);
    }
    return obj;
  },
  create(base) {
    return StoreInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseStoreInfo();
    message.name = object.name ?? "";
    message.commit_id = object.commit_id !== void 0 && object.commit_id !== null ? CommitID.fromPartial(object.commit_id) : void 0;
    return message;
  }
};
var CommitID = {
  $type: "cosmos.base.store.v1beta1.CommitID",
  encode(message, writer = new BinaryWriter()) {
    if (message.version !== 0) {
      writer.uint32(8).int64(message.version);
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCommitID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.version = longToNumber15(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      version: isSet40(object.version) ? globalThis.Number(object.version) : 0,
      hash: isSet40(object.hash) ? bytesFromBase6417(object.hash) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes17(message.hash);
    }
    return obj;
  },
  create(base) {
    return CommitID.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCommitID();
    message.version = object.version ?? 0;
    message.hash = object.hash ?? new Uint8Array(0);
    return message;
  }
};
function createBaseCommitInfo2() {
  return { version: 0, store_infos: [] };
}
function createBaseStoreInfo() {
  return { name: "", commit_id: void 0 };
}
function createBaseCommitID() {
  return { version: 0, hash: new Uint8Array(0) };
}
function bytesFromBase6417(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes17(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber15(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet40(value) {
  return value !== null && value !== void 0;
}
var registry42 = [
  ["/cosmos.base.store.v1beta1.CommitInfo", CommitInfo2],
  ["/cosmos.base.store.v1beta1.StoreInfo", StoreInfo],
  ["/cosmos.base.store.v1beta1.CommitID", CommitID]
];
var aminoConverters42 = {
  "/cosmos.base.store.v1beta1.CommitInfo": {
    aminoType: "cosmos-sdk/CommitInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.store.v1beta1.StoreInfo": {
    aminoType: "cosmos-sdk/StoreInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.store.v1beta1.CommitID": {
    aminoType: "cosmos-sdk/CommitID",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/store/v1beta1/listening.js
var StoreKVPair = {
  $type: "cosmos.base.store.v1beta1.StoreKVPair",
  encode(message, writer = new BinaryWriter()) {
    if (message.store_key !== "") {
      writer.uint32(10).string(message.store_key);
    }
    if (message.delete !== false) {
      writer.uint32(16).bool(message.delete);
    }
    if (message.key.length !== 0) {
      writer.uint32(26).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(34).bytes(message.value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseStoreKVPair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.store_key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.delete = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      store_key: isSet41(object.store_key) ? globalThis.String(object.store_key) : "",
      delete: isSet41(object.delete) ? globalThis.Boolean(object.delete) : false,
      key: isSet41(object.key) ? bytesFromBase6418(object.key) : new Uint8Array(0),
      value: isSet41(object.value) ? bytesFromBase6418(object.value) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.store_key !== "") {
      obj.store_key = message.store_key;
    }
    if (message.delete !== false) {
      obj.delete = message.delete;
    }
    if (message.key.length !== 0) {
      obj.key = base64FromBytes18(message.key);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes18(message.value);
    }
    return obj;
  },
  create(base) {
    return StoreKVPair.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseStoreKVPair();
    message.store_key = object.store_key ?? "";
    message.delete = object.delete ?? false;
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    return message;
  }
};
function createBaseStoreKVPair() {
  return { store_key: "", delete: false, key: new Uint8Array(0), value: new Uint8Array(0) };
}
function bytesFromBase6418(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes18(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet41(value) {
  return value !== null && value !== void 0;
}
var registry43 = [["/cosmos.base.store.v1beta1.StoreKVPair", StoreKVPair]];
var aminoConverters43 = {
  "/cosmos.base.store.v1beta1.StoreKVPair": {
    aminoType: "cosmos-sdk/StoreKVPair",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/tendermint/v1beta1/index.js
var v1beta1_exports10 = {};
__export(v1beta1_exports10, {
  GetBlockByHeightRequest: () => GetBlockByHeightRequest,
  GetBlockByHeightResponse: () => GetBlockByHeightResponse,
  GetLatestBlockRequest: () => GetLatestBlockRequest,
  GetLatestBlockResponse: () => GetLatestBlockResponse,
  GetLatestValidatorSetRequest: () => GetLatestValidatorSetRequest,
  GetLatestValidatorSetResponse: () => GetLatestValidatorSetResponse,
  GetNodeInfoRequest: () => GetNodeInfoRequest,
  GetNodeInfoResponse: () => GetNodeInfoResponse,
  GetSyncingRequest: () => GetSyncingRequest,
  GetSyncingResponse: () => GetSyncingResponse,
  GetValidatorSetByHeightRequest: () => GetValidatorSetByHeightRequest,
  GetValidatorSetByHeightResponse: () => GetValidatorSetByHeightResponse,
  Module: () => Module,
  Validator: () => Validator3,
  VersionInfo: () => VersionInfo,
  aminoConverters: () => aminoConverters50,
  registry: () => registry50
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/p2p/types.js
var ProtocolVersion = {
  $type: "tendermint.p2p.ProtocolVersion",
  encode(message, writer = new BinaryWriter()) {
    if (message.p2p !== 0) {
      writer.uint32(8).uint64(message.p2p);
    }
    if (message.block !== 0) {
      writer.uint32(16).uint64(message.block);
    }
    if (message.app !== 0) {
      writer.uint32(24).uint64(message.app);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseProtocolVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.p2p = longToNumber16(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.block = longToNumber16(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.app = longToNumber16(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      p2p: isSet42(object.p2p) ? globalThis.Number(object.p2p) : 0,
      block: isSet42(object.block) ? globalThis.Number(object.block) : 0,
      app: isSet42(object.app) ? globalThis.Number(object.app) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.p2p !== 0) {
      obj.p2p = Math.round(message.p2p);
    }
    if (message.block !== 0) {
      obj.block = Math.round(message.block);
    }
    if (message.app !== 0) {
      obj.app = Math.round(message.app);
    }
    return obj;
  },
  create(base) {
    return ProtocolVersion.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseProtocolVersion();
    message.p2p = object.p2p ?? 0;
    message.block = object.block ?? 0;
    message.app = object.app ?? 0;
    return message;
  }
};
var NodeInfo = {
  $type: "tendermint.p2p.NodeInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.protocol_version !== void 0) {
      ProtocolVersion.encode(message.protocol_version, writer.uint32(10).fork()).join();
    }
    if (message.node_id !== "") {
      writer.uint32(18).string(message.node_id);
    }
    if (message.listen_addr !== "") {
      writer.uint32(26).string(message.listen_addr);
    }
    if (message.network !== "") {
      writer.uint32(34).string(message.network);
    }
    if (message.version !== "") {
      writer.uint32(42).string(message.version);
    }
    if (message.channels.length !== 0) {
      writer.uint32(50).bytes(message.channels);
    }
    if (message.moniker !== "") {
      writer.uint32(58).string(message.moniker);
    }
    if (message.other !== void 0) {
      NodeInfoOther.encode(message.other, writer.uint32(66).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseNodeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.protocol_version = ProtocolVersion.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.node_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.listen_addr = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.network = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.version = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.channels = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.moniker = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.other = NodeInfoOther.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      protocol_version: isSet42(object.protocol_version) ? ProtocolVersion.fromJSON(object.protocol_version) : void 0,
      node_id: isSet42(object.node_id) ? globalThis.String(object.node_id) : "",
      listen_addr: isSet42(object.listen_addr) ? globalThis.String(object.listen_addr) : "",
      network: isSet42(object.network) ? globalThis.String(object.network) : "",
      version: isSet42(object.version) ? globalThis.String(object.version) : "",
      channels: isSet42(object.channels) ? bytesFromBase6419(object.channels) : new Uint8Array(0),
      moniker: isSet42(object.moniker) ? globalThis.String(object.moniker) : "",
      other: isSet42(object.other) ? NodeInfoOther.fromJSON(object.other) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.protocol_version !== void 0) {
      obj.protocol_version = ProtocolVersion.toJSON(message.protocol_version);
    }
    if (message.node_id !== "") {
      obj.node_id = message.node_id;
    }
    if (message.listen_addr !== "") {
      obj.listen_addr = message.listen_addr;
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.channels.length !== 0) {
      obj.channels = base64FromBytes19(message.channels);
    }
    if (message.moniker !== "") {
      obj.moniker = message.moniker;
    }
    if (message.other !== void 0) {
      obj.other = NodeInfoOther.toJSON(message.other);
    }
    return obj;
  },
  create(base) {
    return NodeInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseNodeInfo();
    message.protocol_version = object.protocol_version !== void 0 && object.protocol_version !== null ? ProtocolVersion.fromPartial(object.protocol_version) : void 0;
    message.node_id = object.node_id ?? "";
    message.listen_addr = object.listen_addr ?? "";
    message.network = object.network ?? "";
    message.version = object.version ?? "";
    message.channels = object.channels ?? new Uint8Array(0);
    message.moniker = object.moniker ?? "";
    message.other = object.other !== void 0 && object.other !== null ? NodeInfoOther.fromPartial(object.other) : void 0;
    return message;
  }
};
var NodeInfoOther = {
  $type: "tendermint.p2p.NodeInfoOther",
  encode(message, writer = new BinaryWriter()) {
    if (message.tx_index !== "") {
      writer.uint32(10).string(message.tx_index);
    }
    if (message.rpc_address !== "") {
      writer.uint32(18).string(message.rpc_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseNodeInfoOther();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.tx_index = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.rpc_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      tx_index: isSet42(object.tx_index) ? globalThis.String(object.tx_index) : "",
      rpc_address: isSet42(object.rpc_address) ? globalThis.String(object.rpc_address) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.tx_index !== "") {
      obj.tx_index = message.tx_index;
    }
    if (message.rpc_address !== "") {
      obj.rpc_address = message.rpc_address;
    }
    return obj;
  },
  create(base) {
    return NodeInfoOther.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseNodeInfoOther();
    message.tx_index = object.tx_index ?? "";
    message.rpc_address = object.rpc_address ?? "";
    return message;
  }
};
var PeerInfo = {
  $type: "tendermint.p2p.PeerInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.address_info) {
      PeerAddressInfo.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.last_connected !== void 0) {
      Timestamp.encode(toTimestamp3(message.last_connected), writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePeerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.address_info.push(PeerAddressInfo.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.last_connected = fromTimestamp3(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet42(object.id) ? globalThis.String(object.id) : "",
      address_info: globalThis.Array.isArray(object == null ? void 0 : object.address_info) ? object.address_info.map((e) => PeerAddressInfo.fromJSON(e)) : [],
      last_connected: isSet42(object.last_connected) ? fromJsonTimestamp3(object.last_connected) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if ((_a = message.address_info) == null ? void 0 : _a.length) {
      obj.address_info = message.address_info.map((e) => PeerAddressInfo.toJSON(e));
    }
    if (message.last_connected !== void 0) {
      obj.last_connected = message.last_connected.toISOString();
    }
    return obj;
  },
  create(base) {
    return PeerInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBasePeerInfo();
    message.id = object.id ?? "";
    message.address_info = ((_a = object.address_info) == null ? void 0 : _a.map((e) => PeerAddressInfo.fromPartial(e))) || [];
    message.last_connected = object.last_connected ?? void 0;
    return message;
  }
};
var PeerAddressInfo = {
  $type: "tendermint.p2p.PeerAddressInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.last_dial_success !== void 0) {
      Timestamp.encode(toTimestamp3(message.last_dial_success), writer.uint32(18).fork()).join();
    }
    if (message.last_dial_failure !== void 0) {
      Timestamp.encode(toTimestamp3(message.last_dial_failure), writer.uint32(26).fork()).join();
    }
    if (message.dial_failures !== 0) {
      writer.uint32(32).uint32(message.dial_failures);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePeerAddressInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.last_dial_success = fromTimestamp3(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.last_dial_failure = fromTimestamp3(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.dial_failures = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet42(object.address) ? globalThis.String(object.address) : "",
      last_dial_success: isSet42(object.last_dial_success) ? fromJsonTimestamp3(object.last_dial_success) : void 0,
      last_dial_failure: isSet42(object.last_dial_failure) ? fromJsonTimestamp3(object.last_dial_failure) : void 0,
      dial_failures: isSet42(object.dial_failures) ? globalThis.Number(object.dial_failures) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.last_dial_success !== void 0) {
      obj.last_dial_success = message.last_dial_success.toISOString();
    }
    if (message.last_dial_failure !== void 0) {
      obj.last_dial_failure = message.last_dial_failure.toISOString();
    }
    if (message.dial_failures !== 0) {
      obj.dial_failures = Math.round(message.dial_failures);
    }
    return obj;
  },
  create(base) {
    return PeerAddressInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePeerAddressInfo();
    message.address = object.address ?? "";
    message.last_dial_success = object.last_dial_success ?? void 0;
    message.last_dial_failure = object.last_dial_failure ?? void 0;
    message.dial_failures = object.dial_failures ?? 0;
    return message;
  }
};
function createBaseProtocolVersion() {
  return { p2p: 0, block: 0, app: 0 };
}
function createBaseNodeInfo() {
  return {
    protocol_version: void 0,
    node_id: "",
    listen_addr: "",
    network: "",
    version: "",
    channels: new Uint8Array(0),
    moniker: "",
    other: void 0
  };
}
function createBaseNodeInfoOther() {
  return { tx_index: "", rpc_address: "" };
}
function createBasePeerInfo() {
  return { id: "", address_info: [], last_connected: void 0 };
}
function createBasePeerAddressInfo() {
  return { address: "", last_dial_success: void 0, last_dial_failure: void 0, dial_failures: 0 };
}
function bytesFromBase6419(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes19(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function toTimestamp3(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp3(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp3(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp3(Timestamp.fromJSON(o));
  }
}
function longToNumber16(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet42(value) {
  return value !== null && value !== void 0;
}
var registry44 = [
  ["/tendermint.p2p.ProtocolVersion", ProtocolVersion],
  ["/tendermint.p2p.NodeInfo", NodeInfo],
  ["/tendermint.p2p.NodeInfoOther", NodeInfoOther],
  ["/tendermint.p2p.PeerInfo", PeerInfo],
  ["/tendermint.p2p.PeerAddressInfo", PeerAddressInfo]
];
var aminoConverters44 = {
  "/tendermint.p2p.ProtocolVersion": {
    aminoType: "tendermint.p2p.ProtocolVersion",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.p2p.NodeInfo": {
    aminoType: "tendermint.p2p.NodeInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.p2p.NodeInfoOther": {
    aminoType: "tendermint.p2p.NodeInfoOther",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.p2p.PeerInfo": {
    aminoType: "tendermint.p2p.PeerInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.p2p.PeerAddressInfo": {
    aminoType: "tendermint.p2p.PeerAddressInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/version/types.js
var App = {
  $type: "tendermint.version.App",
  encode(message, writer = new BinaryWriter()) {
    if (message.protocol !== 0) {
      writer.uint32(8).uint64(message.protocol);
    }
    if (message.software !== "") {
      writer.uint32(18).string(message.software);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseApp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.protocol = longToNumber17(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.software = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      protocol: isSet43(object.protocol) ? globalThis.Number(object.protocol) : 0,
      software: isSet43(object.software) ? globalThis.String(object.software) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.protocol !== 0) {
      obj.protocol = Math.round(message.protocol);
    }
    if (message.software !== "") {
      obj.software = message.software;
    }
    return obj;
  },
  create(base) {
    return App.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseApp();
    message.protocol = object.protocol ?? 0;
    message.software = object.software ?? "";
    return message;
  }
};
var Consensus = {
  $type: "tendermint.version.Consensus",
  encode(message, writer = new BinaryWriter()) {
    if (message.block !== 0) {
      writer.uint32(8).uint64(message.block);
    }
    if (message.app !== 0) {
      writer.uint32(16).uint64(message.app);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseConsensus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.block = longToNumber17(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.app = longToNumber17(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      block: isSet43(object.block) ? globalThis.Number(object.block) : 0,
      app: isSet43(object.app) ? globalThis.Number(object.app) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.block !== 0) {
      obj.block = Math.round(message.block);
    }
    if (message.app !== 0) {
      obj.app = Math.round(message.app);
    }
    return obj;
  },
  create(base) {
    return Consensus.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseConsensus();
    message.block = object.block ?? 0;
    message.app = object.app ?? 0;
    return message;
  }
};
function createBaseApp() {
  return { protocol: 0, software: "" };
}
function createBaseConsensus() {
  return { block: 0, app: 0 };
}
function longToNumber17(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet43(value) {
  return value !== null && value !== void 0;
}
var registry45 = [
  ["/tendermint.version.App", App],
  ["/tendermint.version.Consensus", Consensus]
];
var aminoConverters45 = {
  "/tendermint.version.App": {
    aminoType: "tendermint.version.App",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.version.Consensus": {
    aminoType: "tendermint.version.Consensus",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/types/validator.js
var ValidatorSet = {
  $type: "tendermint.types.ValidatorSet",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.validators) {
      Validator2.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.proposer !== void 0) {
      Validator2.encode(message.proposer, writer.uint32(18).fork()).join();
    }
    if (message.total_voting_power !== 0) {
      writer.uint32(24).int64(message.total_voting_power);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validators.push(Validator2.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.proposer = Validator2.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.total_voting_power = longToNumber18(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validators: globalThis.Array.isArray(object == null ? void 0 : object.validators) ? object.validators.map((e) => Validator2.fromJSON(e)) : [],
      proposer: isSet44(object.proposer) ? Validator2.fromJSON(object.proposer) : void 0,
      total_voting_power: isSet44(object.total_voting_power) ? globalThis.Number(object.total_voting_power) : 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.validators) == null ? void 0 : _a.length) {
      obj.validators = message.validators.map((e) => Validator2.toJSON(e));
    }
    if (message.proposer !== void 0) {
      obj.proposer = Validator2.toJSON(message.proposer);
    }
    if (message.total_voting_power !== 0) {
      obj.total_voting_power = Math.round(message.total_voting_power);
    }
    return obj;
  },
  create(base) {
    return ValidatorSet.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseValidatorSet();
    message.validators = ((_a = object.validators) == null ? void 0 : _a.map((e) => Validator2.fromPartial(e))) || [];
    message.proposer = object.proposer !== void 0 && object.proposer !== null ? Validator2.fromPartial(object.proposer) : void 0;
    message.total_voting_power = object.total_voting_power ?? 0;
    return message;
  }
};
var Validator2 = {
  $type: "tendermint.types.Validator",
  encode(message, writer = new BinaryWriter()) {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    if (message.pub_key !== void 0) {
      PublicKey.encode(message.pub_key, writer.uint32(18).fork()).join();
    }
    if (message.voting_power !== 0) {
      writer.uint32(24).int64(message.voting_power);
    }
    if (message.proposer_priority !== 0) {
      writer.uint32(32).int64(message.proposer_priority);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidator2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pub_key = PublicKey.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.voting_power = longToNumber18(reader.int64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.proposer_priority = longToNumber18(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet44(object.address) ? bytesFromBase6420(object.address) : new Uint8Array(0),
      pub_key: isSet44(object.pub_key) ? PublicKey.fromJSON(object.pub_key) : void 0,
      voting_power: isSet44(object.voting_power) ? globalThis.Number(object.voting_power) : 0,
      proposer_priority: isSet44(object.proposer_priority) ? globalThis.Number(object.proposer_priority) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address.length !== 0) {
      obj.address = base64FromBytes20(message.address);
    }
    if (message.pub_key !== void 0) {
      obj.pub_key = PublicKey.toJSON(message.pub_key);
    }
    if (message.voting_power !== 0) {
      obj.voting_power = Math.round(message.voting_power);
    }
    if (message.proposer_priority !== 0) {
      obj.proposer_priority = Math.round(message.proposer_priority);
    }
    return obj;
  },
  create(base) {
    return Validator2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidator2();
    message.address = object.address ?? new Uint8Array(0);
    message.pub_key = object.pub_key !== void 0 && object.pub_key !== null ? PublicKey.fromPartial(object.pub_key) : void 0;
    message.voting_power = object.voting_power ?? 0;
    message.proposer_priority = object.proposer_priority ?? 0;
    return message;
  }
};
var SimpleValidator = {
  $type: "tendermint.types.SimpleValidator",
  encode(message, writer = new BinaryWriter()) {
    if (message.pub_key !== void 0) {
      PublicKey.encode(message.pub_key, writer.uint32(10).fork()).join();
    }
    if (message.voting_power !== 0) {
      writer.uint32(16).int64(message.voting_power);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSimpleValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pub_key = PublicKey.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.voting_power = longToNumber18(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pub_key: isSet44(object.pub_key) ? PublicKey.fromJSON(object.pub_key) : void 0,
      voting_power: isSet44(object.voting_power) ? globalThis.Number(object.voting_power) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pub_key !== void 0) {
      obj.pub_key = PublicKey.toJSON(message.pub_key);
    }
    if (message.voting_power !== 0) {
      obj.voting_power = Math.round(message.voting_power);
    }
    return obj;
  },
  create(base) {
    return SimpleValidator.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSimpleValidator();
    message.pub_key = object.pub_key !== void 0 && object.pub_key !== null ? PublicKey.fromPartial(object.pub_key) : void 0;
    message.voting_power = object.voting_power ?? 0;
    return message;
  }
};
function createBaseValidatorSet() {
  return { validators: [], proposer: void 0, total_voting_power: 0 };
}
function createBaseValidator2() {
  return { address: new Uint8Array(0), pub_key: void 0, voting_power: 0, proposer_priority: 0 };
}
function createBaseSimpleValidator() {
  return { pub_key: void 0, voting_power: 0 };
}
function bytesFromBase6420(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes20(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber18(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet44(value) {
  return value !== null && value !== void 0;
}
var registry46 = [
  ["/tendermint.types.ValidatorSet", ValidatorSet],
  ["/tendermint.types.Validator", Validator2],
  ["/tendermint.types.SimpleValidator", SimpleValidator]
];
var aminoConverters46 = {
  "/tendermint.types.ValidatorSet": {
    aminoType: "tendermint.types.ValidatorSet",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.Validator": {
    aminoType: "tendermint.types.Validator",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.SimpleValidator": {
    aminoType: "tendermint.types.SimpleValidator",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/types/tendermint/types/types.js
var BlockIDFlag;
(function(BlockIDFlag2) {
  BlockIDFlag2[BlockIDFlag2["BLOCK_ID_FLAG_UNKNOWN"] = 0] = "BLOCK_ID_FLAG_UNKNOWN";
  BlockIDFlag2[BlockIDFlag2["BLOCK_ID_FLAG_ABSENT"] = 1] = "BLOCK_ID_FLAG_ABSENT";
  BlockIDFlag2[BlockIDFlag2["BLOCK_ID_FLAG_COMMIT"] = 2] = "BLOCK_ID_FLAG_COMMIT";
  BlockIDFlag2[BlockIDFlag2["BLOCK_ID_FLAG_NIL"] = 3] = "BLOCK_ID_FLAG_NIL";
  BlockIDFlag2[BlockIDFlag2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockIDFlag || (BlockIDFlag = {}));
var SignedMsgType;
(function(SignedMsgType2) {
  SignedMsgType2[SignedMsgType2["SIGNED_MSG_TYPE_UNKNOWN"] = 0] = "SIGNED_MSG_TYPE_UNKNOWN";
  SignedMsgType2[SignedMsgType2["SIGNED_MSG_TYPE_PREVOTE"] = 1] = "SIGNED_MSG_TYPE_PREVOTE";
  SignedMsgType2[SignedMsgType2["SIGNED_MSG_TYPE_PRECOMMIT"] = 2] = "SIGNED_MSG_TYPE_PRECOMMIT";
  SignedMsgType2[SignedMsgType2["SIGNED_MSG_TYPE_PROPOSAL"] = 32] = "SIGNED_MSG_TYPE_PROPOSAL";
  SignedMsgType2[SignedMsgType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SignedMsgType || (SignedMsgType = {}));

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/types/types.js
var PartSetHeader = {
  $type: "tendermint.types.PartSetHeader",
  encode(message, writer = new BinaryWriter()) {
    if (message.total !== 0) {
      writer.uint32(8).uint32(message.total);
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePartSetHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.total = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      total: isSet45(object.total) ? globalThis.Number(object.total) : 0,
      hash: isSet45(object.hash) ? bytesFromBase6421(object.hash) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes21(message.hash);
    }
    return obj;
  },
  create(base) {
    return PartSetHeader.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePartSetHeader();
    message.total = object.total ?? 0;
    message.hash = object.hash ?? new Uint8Array(0);
    return message;
  }
};
var Part = {
  $type: "tendermint.types.Part",
  encode(message, writer = new BinaryWriter()) {
    if (message.index !== 0) {
      writer.uint32(8).uint32(message.index);
    }
    if (message.bytes.length !== 0) {
      writer.uint32(18).bytes(message.bytes);
    }
    if (message.proof !== void 0) {
      Proof.encode(message.proof, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.index = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.bytes = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.proof = Proof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      index: isSet45(object.index) ? globalThis.Number(object.index) : 0,
      bytes: isSet45(object.bytes) ? bytesFromBase6421(object.bytes) : new Uint8Array(0),
      proof: isSet45(object.proof) ? Proof.fromJSON(object.proof) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.bytes.length !== 0) {
      obj.bytes = base64FromBytes21(message.bytes);
    }
    if (message.proof !== void 0) {
      obj.proof = Proof.toJSON(message.proof);
    }
    return obj;
  },
  create(base) {
    return Part.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePart();
    message.index = object.index ?? 0;
    message.bytes = object.bytes ?? new Uint8Array(0);
    message.proof = object.proof !== void 0 && object.proof !== null ? Proof.fromPartial(object.proof) : void 0;
    return message;
  }
};
var BlockID = {
  $type: "tendermint.types.BlockID",
  encode(message, writer = new BinaryWriter()) {
    if (message.hash.length !== 0) {
      writer.uint32(10).bytes(message.hash);
    }
    if (message.part_set_header !== void 0) {
      PartSetHeader.encode(message.part_set_header, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBlockID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.hash = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.part_set_header = PartSetHeader.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      hash: isSet45(object.hash) ? bytesFromBase6421(object.hash) : new Uint8Array(0),
      part_set_header: isSet45(object.part_set_header) ? PartSetHeader.fromJSON(object.part_set_header) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes21(message.hash);
    }
    if (message.part_set_header !== void 0) {
      obj.part_set_header = PartSetHeader.toJSON(message.part_set_header);
    }
    return obj;
  },
  create(base) {
    return BlockID.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBlockID();
    message.hash = object.hash ?? new Uint8Array(0);
    message.part_set_header = object.part_set_header !== void 0 && object.part_set_header !== null ? PartSetHeader.fromPartial(object.part_set_header) : void 0;
    return message;
  }
};
var Header = {
  $type: "tendermint.types.Header",
  encode(message, writer = new BinaryWriter()) {
    if (message.version !== void 0) {
      Consensus.encode(message.version, writer.uint32(10).fork()).join();
    }
    if (message.chain_id !== "") {
      writer.uint32(18).string(message.chain_id);
    }
    if (message.height !== 0) {
      writer.uint32(24).int64(message.height);
    }
    if (message.time !== void 0) {
      Timestamp.encode(toTimestamp4(message.time), writer.uint32(34).fork()).join();
    }
    if (message.last_block_id !== void 0) {
      BlockID.encode(message.last_block_id, writer.uint32(42).fork()).join();
    }
    if (message.last_commit_hash.length !== 0) {
      writer.uint32(50).bytes(message.last_commit_hash);
    }
    if (message.data_hash.length !== 0) {
      writer.uint32(58).bytes(message.data_hash);
    }
    if (message.validators_hash.length !== 0) {
      writer.uint32(66).bytes(message.validators_hash);
    }
    if (message.next_validators_hash.length !== 0) {
      writer.uint32(74).bytes(message.next_validators_hash);
    }
    if (message.consensus_hash.length !== 0) {
      writer.uint32(82).bytes(message.consensus_hash);
    }
    if (message.app_hash.length !== 0) {
      writer.uint32(90).bytes(message.app_hash);
    }
    if (message.last_results_hash.length !== 0) {
      writer.uint32(98).bytes(message.last_results_hash);
    }
    if (message.evidence_hash.length !== 0) {
      writer.uint32(106).bytes(message.evidence_hash);
    }
    if (message.proposer_address.length !== 0) {
      writer.uint32(114).bytes(message.proposer_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.version = Consensus.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.chain_id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.height = longToNumber19(reader.int64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.time = fromTimestamp4(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.last_block_id = BlockID.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.last_commit_hash = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.data_hash = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.validators_hash = reader.bytes();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.next_validators_hash = reader.bytes();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.consensus_hash = reader.bytes();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.app_hash = reader.bytes();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }
          message.last_results_hash = reader.bytes();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }
          message.evidence_hash = reader.bytes();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }
          message.proposer_address = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      version: isSet45(object.version) ? Consensus.fromJSON(object.version) : void 0,
      chain_id: isSet45(object.chain_id) ? globalThis.String(object.chain_id) : "",
      height: isSet45(object.height) ? globalThis.Number(object.height) : 0,
      time: isSet45(object.time) ? fromJsonTimestamp4(object.time) : void 0,
      last_block_id: isSet45(object.last_block_id) ? BlockID.fromJSON(object.last_block_id) : void 0,
      last_commit_hash: isSet45(object.last_commit_hash) ? bytesFromBase6421(object.last_commit_hash) : new Uint8Array(0),
      data_hash: isSet45(object.data_hash) ? bytesFromBase6421(object.data_hash) : new Uint8Array(0),
      validators_hash: isSet45(object.validators_hash) ? bytesFromBase6421(object.validators_hash) : new Uint8Array(0),
      next_validators_hash: isSet45(object.next_validators_hash) ? bytesFromBase6421(object.next_validators_hash) : new Uint8Array(0),
      consensus_hash: isSet45(object.consensus_hash) ? bytesFromBase6421(object.consensus_hash) : new Uint8Array(0),
      app_hash: isSet45(object.app_hash) ? bytesFromBase6421(object.app_hash) : new Uint8Array(0),
      last_results_hash: isSet45(object.last_results_hash) ? bytesFromBase6421(object.last_results_hash) : new Uint8Array(0),
      evidence_hash: isSet45(object.evidence_hash) ? bytesFromBase6421(object.evidence_hash) : new Uint8Array(0),
      proposer_address: isSet45(object.proposer_address) ? bytesFromBase6421(object.proposer_address) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.version !== void 0) {
      obj.version = Consensus.toJSON(message.version);
    }
    if (message.chain_id !== "") {
      obj.chain_id = message.chain_id;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.time !== void 0) {
      obj.time = message.time.toISOString();
    }
    if (message.last_block_id !== void 0) {
      obj.last_block_id = BlockID.toJSON(message.last_block_id);
    }
    if (message.last_commit_hash.length !== 0) {
      obj.last_commit_hash = base64FromBytes21(message.last_commit_hash);
    }
    if (message.data_hash.length !== 0) {
      obj.data_hash = base64FromBytes21(message.data_hash);
    }
    if (message.validators_hash.length !== 0) {
      obj.validators_hash = base64FromBytes21(message.validators_hash);
    }
    if (message.next_validators_hash.length !== 0) {
      obj.next_validators_hash = base64FromBytes21(message.next_validators_hash);
    }
    if (message.consensus_hash.length !== 0) {
      obj.consensus_hash = base64FromBytes21(message.consensus_hash);
    }
    if (message.app_hash.length !== 0) {
      obj.app_hash = base64FromBytes21(message.app_hash);
    }
    if (message.last_results_hash.length !== 0) {
      obj.last_results_hash = base64FromBytes21(message.last_results_hash);
    }
    if (message.evidence_hash.length !== 0) {
      obj.evidence_hash = base64FromBytes21(message.evidence_hash);
    }
    if (message.proposer_address.length !== 0) {
      obj.proposer_address = base64FromBytes21(message.proposer_address);
    }
    return obj;
  },
  create(base) {
    return Header.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseHeader();
    message.version = object.version !== void 0 && object.version !== null ? Consensus.fromPartial(object.version) : void 0;
    message.chain_id = object.chain_id ?? "";
    message.height = object.height ?? 0;
    message.time = object.time ?? void 0;
    message.last_block_id = object.last_block_id !== void 0 && object.last_block_id !== null ? BlockID.fromPartial(object.last_block_id) : void 0;
    message.last_commit_hash = object.last_commit_hash ?? new Uint8Array(0);
    message.data_hash = object.data_hash ?? new Uint8Array(0);
    message.validators_hash = object.validators_hash ?? new Uint8Array(0);
    message.next_validators_hash = object.next_validators_hash ?? new Uint8Array(0);
    message.consensus_hash = object.consensus_hash ?? new Uint8Array(0);
    message.app_hash = object.app_hash ?? new Uint8Array(0);
    message.last_results_hash = object.last_results_hash ?? new Uint8Array(0);
    message.evidence_hash = object.evidence_hash ?? new Uint8Array(0);
    message.proposer_address = object.proposer_address ?? new Uint8Array(0);
    return message;
  }
};
var Data = {
  $type: "tendermint.types.Data",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.txs) {
      writer.uint32(10).bytes(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.txs.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { txs: globalThis.Array.isArray(object == null ? void 0 : object.txs) ? object.txs.map((e) => bytesFromBase6421(e)) : [] };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.txs) == null ? void 0 : _a.length) {
      obj.txs = message.txs.map((e) => base64FromBytes21(e));
    }
    return obj;
  },
  create(base) {
    return Data.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseData();
    message.txs = ((_a = object.txs) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var Vote = {
  $type: "tendermint.types.Vote",
  encode(message, writer = new BinaryWriter()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.height !== 0) {
      writer.uint32(16).int64(message.height);
    }
    if (message.round !== 0) {
      writer.uint32(24).int32(message.round);
    }
    if (message.block_id !== void 0) {
      BlockID.encode(message.block_id, writer.uint32(34).fork()).join();
    }
    if (message.timestamp !== void 0) {
      Timestamp.encode(toTimestamp4(message.timestamp), writer.uint32(42).fork()).join();
    }
    if (message.validator_address.length !== 0) {
      writer.uint32(50).bytes(message.validator_address);
    }
    if (message.validator_index !== 0) {
      writer.uint32(56).int32(message.validator_index);
    }
    if (message.signature.length !== 0) {
      writer.uint32(66).bytes(message.signature);
    }
    if (message.extension.length !== 0) {
      writer.uint32(74).bytes(message.extension);
    }
    if (message.extension_signature.length !== 0) {
      writer.uint32(82).bytes(message.extension_signature);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.height = longToNumber19(reader.int64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.round = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.block_id = BlockID.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.timestamp = fromTimestamp4(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.validator_address = reader.bytes();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.validator_index = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.signature = reader.bytes();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.extension = reader.bytes();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.extension_signature = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet45(object.type) ? signedMsgTypeFromJSON(object.type) : 0,
      height: isSet45(object.height) ? globalThis.Number(object.height) : 0,
      round: isSet45(object.round) ? globalThis.Number(object.round) : 0,
      block_id: isSet45(object.block_id) ? BlockID.fromJSON(object.block_id) : void 0,
      timestamp: isSet45(object.timestamp) ? fromJsonTimestamp4(object.timestamp) : void 0,
      validator_address: isSet45(object.validator_address) ? bytesFromBase6421(object.validator_address) : new Uint8Array(0),
      validator_index: isSet45(object.validator_index) ? globalThis.Number(object.validator_index) : 0,
      signature: isSet45(object.signature) ? bytesFromBase6421(object.signature) : new Uint8Array(0),
      extension: isSet45(object.extension) ? bytesFromBase6421(object.extension) : new Uint8Array(0),
      extension_signature: isSet45(object.extension_signature) ? bytesFromBase6421(object.extension_signature) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.type !== 0) {
      obj.type = signedMsgTypeToJSON(message.type);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.round !== 0) {
      obj.round = Math.round(message.round);
    }
    if (message.block_id !== void 0) {
      obj.block_id = BlockID.toJSON(message.block_id);
    }
    if (message.timestamp !== void 0) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.validator_address.length !== 0) {
      obj.validator_address = base64FromBytes21(message.validator_address);
    }
    if (message.validator_index !== 0) {
      obj.validator_index = Math.round(message.validator_index);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes21(message.signature);
    }
    if (message.extension.length !== 0) {
      obj.extension = base64FromBytes21(message.extension);
    }
    if (message.extension_signature.length !== 0) {
      obj.extension_signature = base64FromBytes21(message.extension_signature);
    }
    return obj;
  },
  create(base) {
    return Vote.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseVote();
    message.type = object.type ?? 0;
    message.height = object.height ?? 0;
    message.round = object.round ?? 0;
    message.block_id = object.block_id !== void 0 && object.block_id !== null ? BlockID.fromPartial(object.block_id) : void 0;
    message.timestamp = object.timestamp ?? void 0;
    message.validator_address = object.validator_address ?? new Uint8Array(0);
    message.validator_index = object.validator_index ?? 0;
    message.signature = object.signature ?? new Uint8Array(0);
    message.extension = object.extension ?? new Uint8Array(0);
    message.extension_signature = object.extension_signature ?? new Uint8Array(0);
    return message;
  }
};
var Commit = {
  $type: "tendermint.types.Commit",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    if (message.round !== 0) {
      writer.uint32(16).int32(message.round);
    }
    if (message.block_id !== void 0) {
      BlockID.encode(message.block_id, writer.uint32(26).fork()).join();
    }
    for (const v of message.signatures) {
      CommitSig.encode(v, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCommit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber19(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.round = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.block_id = BlockID.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.signatures.push(CommitSig.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet45(object.height) ? globalThis.Number(object.height) : 0,
      round: isSet45(object.round) ? globalThis.Number(object.round) : 0,
      block_id: isSet45(object.block_id) ? BlockID.fromJSON(object.block_id) : void 0,
      signatures: globalThis.Array.isArray(object == null ? void 0 : object.signatures) ? object.signatures.map((e) => CommitSig.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.round !== 0) {
      obj.round = Math.round(message.round);
    }
    if (message.block_id !== void 0) {
      obj.block_id = BlockID.toJSON(message.block_id);
    }
    if ((_a = message.signatures) == null ? void 0 : _a.length) {
      obj.signatures = message.signatures.map((e) => CommitSig.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Commit.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseCommit();
    message.height = object.height ?? 0;
    message.round = object.round ?? 0;
    message.block_id = object.block_id !== void 0 && object.block_id !== null ? BlockID.fromPartial(object.block_id) : void 0;
    message.signatures = ((_a = object.signatures) == null ? void 0 : _a.map((e) => CommitSig.fromPartial(e))) || [];
    return message;
  }
};
var CommitSig = {
  $type: "tendermint.types.CommitSig",
  encode(message, writer = new BinaryWriter()) {
    if (message.block_id_flag !== 0) {
      writer.uint32(8).int32(message.block_id_flag);
    }
    if (message.validator_address.length !== 0) {
      writer.uint32(18).bytes(message.validator_address);
    }
    if (message.timestamp !== void 0) {
      Timestamp.encode(toTimestamp4(message.timestamp), writer.uint32(26).fork()).join();
    }
    if (message.signature.length !== 0) {
      writer.uint32(34).bytes(message.signature);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCommitSig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.block_id_flag = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.timestamp = fromTimestamp4(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.signature = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      block_id_flag: isSet45(object.block_id_flag) ? blockIDFlagFromJSON(object.block_id_flag) : 0,
      validator_address: isSet45(object.validator_address) ? bytesFromBase6421(object.validator_address) : new Uint8Array(0),
      timestamp: isSet45(object.timestamp) ? fromJsonTimestamp4(object.timestamp) : void 0,
      signature: isSet45(object.signature) ? bytesFromBase6421(object.signature) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.block_id_flag !== 0) {
      obj.block_id_flag = blockIDFlagToJSON(message.block_id_flag);
    }
    if (message.validator_address.length !== 0) {
      obj.validator_address = base64FromBytes21(message.validator_address);
    }
    if (message.timestamp !== void 0) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes21(message.signature);
    }
    return obj;
  },
  create(base) {
    return CommitSig.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCommitSig();
    message.block_id_flag = object.block_id_flag ?? 0;
    message.validator_address = object.validator_address ?? new Uint8Array(0);
    message.timestamp = object.timestamp ?? void 0;
    message.signature = object.signature ?? new Uint8Array(0);
    return message;
  }
};
var ExtendedCommit = {
  $type: "tendermint.types.ExtendedCommit",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    if (message.round !== 0) {
      writer.uint32(16).int32(message.round);
    }
    if (message.block_id !== void 0) {
      BlockID.encode(message.block_id, writer.uint32(26).fork()).join();
    }
    for (const v of message.extended_signatures) {
      ExtendedCommitSig.encode(v, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseExtendedCommit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber19(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.round = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.block_id = BlockID.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.extended_signatures.push(ExtendedCommitSig.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet45(object.height) ? globalThis.Number(object.height) : 0,
      round: isSet45(object.round) ? globalThis.Number(object.round) : 0,
      block_id: isSet45(object.block_id) ? BlockID.fromJSON(object.block_id) : void 0,
      extended_signatures: globalThis.Array.isArray(object == null ? void 0 : object.extended_signatures) ? object.extended_signatures.map((e) => ExtendedCommitSig.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.round !== 0) {
      obj.round = Math.round(message.round);
    }
    if (message.block_id !== void 0) {
      obj.block_id = BlockID.toJSON(message.block_id);
    }
    if ((_a = message.extended_signatures) == null ? void 0 : _a.length) {
      obj.extended_signatures = message.extended_signatures.map((e) => ExtendedCommitSig.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ExtendedCommit.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseExtendedCommit();
    message.height = object.height ?? 0;
    message.round = object.round ?? 0;
    message.block_id = object.block_id !== void 0 && object.block_id !== null ? BlockID.fromPartial(object.block_id) : void 0;
    message.extended_signatures = ((_a = object.extended_signatures) == null ? void 0 : _a.map((e) => ExtendedCommitSig.fromPartial(e))) || [];
    return message;
  }
};
var ExtendedCommitSig = {
  $type: "tendermint.types.ExtendedCommitSig",
  encode(message, writer = new BinaryWriter()) {
    if (message.block_id_flag !== 0) {
      writer.uint32(8).int32(message.block_id_flag);
    }
    if (message.validator_address.length !== 0) {
      writer.uint32(18).bytes(message.validator_address);
    }
    if (message.timestamp !== void 0) {
      Timestamp.encode(toTimestamp4(message.timestamp), writer.uint32(26).fork()).join();
    }
    if (message.signature.length !== 0) {
      writer.uint32(34).bytes(message.signature);
    }
    if (message.extension.length !== 0) {
      writer.uint32(42).bytes(message.extension);
    }
    if (message.extension_signature.length !== 0) {
      writer.uint32(50).bytes(message.extension_signature);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseExtendedCommitSig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.block_id_flag = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.timestamp = fromTimestamp4(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.signature = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.extension = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.extension_signature = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      block_id_flag: isSet45(object.block_id_flag) ? blockIDFlagFromJSON(object.block_id_flag) : 0,
      validator_address: isSet45(object.validator_address) ? bytesFromBase6421(object.validator_address) : new Uint8Array(0),
      timestamp: isSet45(object.timestamp) ? fromJsonTimestamp4(object.timestamp) : void 0,
      signature: isSet45(object.signature) ? bytesFromBase6421(object.signature) : new Uint8Array(0),
      extension: isSet45(object.extension) ? bytesFromBase6421(object.extension) : new Uint8Array(0),
      extension_signature: isSet45(object.extension_signature) ? bytesFromBase6421(object.extension_signature) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.block_id_flag !== 0) {
      obj.block_id_flag = blockIDFlagToJSON(message.block_id_flag);
    }
    if (message.validator_address.length !== 0) {
      obj.validator_address = base64FromBytes21(message.validator_address);
    }
    if (message.timestamp !== void 0) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes21(message.signature);
    }
    if (message.extension.length !== 0) {
      obj.extension = base64FromBytes21(message.extension);
    }
    if (message.extension_signature.length !== 0) {
      obj.extension_signature = base64FromBytes21(message.extension_signature);
    }
    return obj;
  },
  create(base) {
    return ExtendedCommitSig.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseExtendedCommitSig();
    message.block_id_flag = object.block_id_flag ?? 0;
    message.validator_address = object.validator_address ?? new Uint8Array(0);
    message.timestamp = object.timestamp ?? void 0;
    message.signature = object.signature ?? new Uint8Array(0);
    message.extension = object.extension ?? new Uint8Array(0);
    message.extension_signature = object.extension_signature ?? new Uint8Array(0);
    return message;
  }
};
var Proposal = {
  $type: "tendermint.types.Proposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.height !== 0) {
      writer.uint32(16).int64(message.height);
    }
    if (message.round !== 0) {
      writer.uint32(24).int32(message.round);
    }
    if (message.pol_round !== 0) {
      writer.uint32(32).int32(message.pol_round);
    }
    if (message.block_id !== void 0) {
      BlockID.encode(message.block_id, writer.uint32(42).fork()).join();
    }
    if (message.timestamp !== void 0) {
      Timestamp.encode(toTimestamp4(message.timestamp), writer.uint32(50).fork()).join();
    }
    if (message.signature.length !== 0) {
      writer.uint32(58).bytes(message.signature);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.height = longToNumber19(reader.int64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.round = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.pol_round = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.block_id = BlockID.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.timestamp = fromTimestamp4(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.signature = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet45(object.type) ? signedMsgTypeFromJSON(object.type) : 0,
      height: isSet45(object.height) ? globalThis.Number(object.height) : 0,
      round: isSet45(object.round) ? globalThis.Number(object.round) : 0,
      pol_round: isSet45(object.pol_round) ? globalThis.Number(object.pol_round) : 0,
      block_id: isSet45(object.block_id) ? BlockID.fromJSON(object.block_id) : void 0,
      timestamp: isSet45(object.timestamp) ? fromJsonTimestamp4(object.timestamp) : void 0,
      signature: isSet45(object.signature) ? bytesFromBase6421(object.signature) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.type !== 0) {
      obj.type = signedMsgTypeToJSON(message.type);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.round !== 0) {
      obj.round = Math.round(message.round);
    }
    if (message.pol_round !== 0) {
      obj.pol_round = Math.round(message.pol_round);
    }
    if (message.block_id !== void 0) {
      obj.block_id = BlockID.toJSON(message.block_id);
    }
    if (message.timestamp !== void 0) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes21(message.signature);
    }
    return obj;
  },
  create(base) {
    return Proposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseProposal();
    message.type = object.type ?? 0;
    message.height = object.height ?? 0;
    message.round = object.round ?? 0;
    message.pol_round = object.pol_round ?? 0;
    message.block_id = object.block_id !== void 0 && object.block_id !== null ? BlockID.fromPartial(object.block_id) : void 0;
    message.timestamp = object.timestamp ?? void 0;
    message.signature = object.signature ?? new Uint8Array(0);
    return message;
  }
};
var SignedHeader = {
  $type: "tendermint.types.SignedHeader",
  encode(message, writer = new BinaryWriter()) {
    if (message.header !== void 0) {
      Header.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.commit !== void 0) {
      Commit.encode(message.commit, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignedHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.header = Header.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.commit = Commit.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      header: isSet45(object.header) ? Header.fromJSON(object.header) : void 0,
      commit: isSet45(object.commit) ? Commit.fromJSON(object.commit) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.header !== void 0) {
      obj.header = Header.toJSON(message.header);
    }
    if (message.commit !== void 0) {
      obj.commit = Commit.toJSON(message.commit);
    }
    return obj;
  },
  create(base) {
    return SignedHeader.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSignedHeader();
    message.header = object.header !== void 0 && object.header !== null ? Header.fromPartial(object.header) : void 0;
    message.commit = object.commit !== void 0 && object.commit !== null ? Commit.fromPartial(object.commit) : void 0;
    return message;
  }
};
var LightBlock = {
  $type: "tendermint.types.LightBlock",
  encode(message, writer = new BinaryWriter()) {
    if (message.signed_header !== void 0) {
      SignedHeader.encode(message.signed_header, writer.uint32(10).fork()).join();
    }
    if (message.validator_set !== void 0) {
      ValidatorSet.encode(message.validator_set, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLightBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.signed_header = SignedHeader.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_set = ValidatorSet.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      signed_header: isSet45(object.signed_header) ? SignedHeader.fromJSON(object.signed_header) : void 0,
      validator_set: isSet45(object.validator_set) ? ValidatorSet.fromJSON(object.validator_set) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.signed_header !== void 0) {
      obj.signed_header = SignedHeader.toJSON(message.signed_header);
    }
    if (message.validator_set !== void 0) {
      obj.validator_set = ValidatorSet.toJSON(message.validator_set);
    }
    return obj;
  },
  create(base) {
    return LightBlock.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseLightBlock();
    message.signed_header = object.signed_header !== void 0 && object.signed_header !== null ? SignedHeader.fromPartial(object.signed_header) : void 0;
    message.validator_set = object.validator_set !== void 0 && object.validator_set !== null ? ValidatorSet.fromPartial(object.validator_set) : void 0;
    return message;
  }
};
var BlockMeta = {
  $type: "tendermint.types.BlockMeta",
  encode(message, writer = new BinaryWriter()) {
    if (message.block_id !== void 0) {
      BlockID.encode(message.block_id, writer.uint32(10).fork()).join();
    }
    if (message.block_size !== 0) {
      writer.uint32(16).int64(message.block_size);
    }
    if (message.header !== void 0) {
      Header.encode(message.header, writer.uint32(26).fork()).join();
    }
    if (message.num_txs !== 0) {
      writer.uint32(32).int64(message.num_txs);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBlockMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.block_id = BlockID.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.block_size = longToNumber19(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.header = Header.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.num_txs = longToNumber19(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      block_id: isSet45(object.block_id) ? BlockID.fromJSON(object.block_id) : void 0,
      block_size: isSet45(object.block_size) ? globalThis.Number(object.block_size) : 0,
      header: isSet45(object.header) ? Header.fromJSON(object.header) : void 0,
      num_txs: isSet45(object.num_txs) ? globalThis.Number(object.num_txs) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.block_id !== void 0) {
      obj.block_id = BlockID.toJSON(message.block_id);
    }
    if (message.block_size !== 0) {
      obj.block_size = Math.round(message.block_size);
    }
    if (message.header !== void 0) {
      obj.header = Header.toJSON(message.header);
    }
    if (message.num_txs !== 0) {
      obj.num_txs = Math.round(message.num_txs);
    }
    return obj;
  },
  create(base) {
    return BlockMeta.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBlockMeta();
    message.block_id = object.block_id !== void 0 && object.block_id !== null ? BlockID.fromPartial(object.block_id) : void 0;
    message.block_size = object.block_size ?? 0;
    message.header = object.header !== void 0 && object.header !== null ? Header.fromPartial(object.header) : void 0;
    message.num_txs = object.num_txs ?? 0;
    return message;
  }
};
var TxProof = {
  $type: "tendermint.types.TxProof",
  encode(message, writer = new BinaryWriter()) {
    if (message.root_hash.length !== 0) {
      writer.uint32(10).bytes(message.root_hash);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    if (message.proof !== void 0) {
      Proof.encode(message.proof, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTxProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.root_hash = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.proof = Proof.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      root_hash: isSet45(object.root_hash) ? bytesFromBase6421(object.root_hash) : new Uint8Array(0),
      data: isSet45(object.data) ? bytesFromBase6421(object.data) : new Uint8Array(0),
      proof: isSet45(object.proof) ? Proof.fromJSON(object.proof) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.root_hash.length !== 0) {
      obj.root_hash = base64FromBytes21(message.root_hash);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes21(message.data);
    }
    if (message.proof !== void 0) {
      obj.proof = Proof.toJSON(message.proof);
    }
    return obj;
  },
  create(base) {
    return TxProof.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTxProof();
    message.root_hash = object.root_hash ?? new Uint8Array(0);
    message.data = object.data ?? new Uint8Array(0);
    message.proof = object.proof !== void 0 && object.proof !== null ? Proof.fromPartial(object.proof) : void 0;
    return message;
  }
};
function blockIDFlagFromJSON(object) {
  switch (object) {
    case 0:
    case "BLOCK_ID_FLAG_UNKNOWN":
      return BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN;
    case 1:
    case "BLOCK_ID_FLAG_ABSENT":
      return BlockIDFlag.BLOCK_ID_FLAG_ABSENT;
    case 2:
    case "BLOCK_ID_FLAG_COMMIT":
      return BlockIDFlag.BLOCK_ID_FLAG_COMMIT;
    case 3:
    case "BLOCK_ID_FLAG_NIL":
      return BlockIDFlag.BLOCK_ID_FLAG_NIL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BlockIDFlag.UNRECOGNIZED;
  }
}
function blockIDFlagToJSON(object) {
  switch (object) {
    case BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN:
      return "BLOCK_ID_FLAG_UNKNOWN";
    case BlockIDFlag.BLOCK_ID_FLAG_ABSENT:
      return "BLOCK_ID_FLAG_ABSENT";
    case BlockIDFlag.BLOCK_ID_FLAG_COMMIT:
      return "BLOCK_ID_FLAG_COMMIT";
    case BlockIDFlag.BLOCK_ID_FLAG_NIL:
      return "BLOCK_ID_FLAG_NIL";
    case BlockIDFlag.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function signedMsgTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "SIGNED_MSG_TYPE_UNKNOWN":
      return SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN;
    case 1:
    case "SIGNED_MSG_TYPE_PREVOTE":
      return SignedMsgType.SIGNED_MSG_TYPE_PREVOTE;
    case 2:
    case "SIGNED_MSG_TYPE_PRECOMMIT":
      return SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT;
    case 32:
    case "SIGNED_MSG_TYPE_PROPOSAL":
      return SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SignedMsgType.UNRECOGNIZED;
  }
}
function signedMsgTypeToJSON(object) {
  switch (object) {
    case SignedMsgType.SIGNED_MSG_TYPE_UNKNOWN:
      return "SIGNED_MSG_TYPE_UNKNOWN";
    case SignedMsgType.SIGNED_MSG_TYPE_PREVOTE:
      return "SIGNED_MSG_TYPE_PREVOTE";
    case SignedMsgType.SIGNED_MSG_TYPE_PRECOMMIT:
      return "SIGNED_MSG_TYPE_PRECOMMIT";
    case SignedMsgType.SIGNED_MSG_TYPE_PROPOSAL:
      return "SIGNED_MSG_TYPE_PROPOSAL";
    case SignedMsgType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function createBasePartSetHeader() {
  return { total: 0, hash: new Uint8Array(0) };
}
function createBasePart() {
  return { index: 0, bytes: new Uint8Array(0), proof: void 0 };
}
function createBaseBlockID() {
  return { hash: new Uint8Array(0), part_set_header: void 0 };
}
function createBaseHeader() {
  return {
    version: void 0,
    chain_id: "",
    height: 0,
    time: void 0,
    last_block_id: void 0,
    last_commit_hash: new Uint8Array(0),
    data_hash: new Uint8Array(0),
    validators_hash: new Uint8Array(0),
    next_validators_hash: new Uint8Array(0),
    consensus_hash: new Uint8Array(0),
    app_hash: new Uint8Array(0),
    last_results_hash: new Uint8Array(0),
    evidence_hash: new Uint8Array(0),
    proposer_address: new Uint8Array(0)
  };
}
function createBaseData() {
  return { txs: [] };
}
function createBaseVote() {
  return {
    type: 0,
    height: 0,
    round: 0,
    block_id: void 0,
    timestamp: void 0,
    validator_address: new Uint8Array(0),
    validator_index: 0,
    signature: new Uint8Array(0),
    extension: new Uint8Array(0),
    extension_signature: new Uint8Array(0)
  };
}
function createBaseCommit() {
  return { height: 0, round: 0, block_id: void 0, signatures: [] };
}
function createBaseCommitSig() {
  return { block_id_flag: 0, validator_address: new Uint8Array(0), timestamp: void 0, signature: new Uint8Array(0) };
}
function createBaseExtendedCommit() {
  return { height: 0, round: 0, block_id: void 0, extended_signatures: [] };
}
function createBaseExtendedCommitSig() {
  return {
    block_id_flag: 0,
    validator_address: new Uint8Array(0),
    timestamp: void 0,
    signature: new Uint8Array(0),
    extension: new Uint8Array(0),
    extension_signature: new Uint8Array(0)
  };
}
function createBaseProposal() {
  return {
    type: 0,
    height: 0,
    round: 0,
    pol_round: 0,
    block_id: void 0,
    timestamp: void 0,
    signature: new Uint8Array(0)
  };
}
function createBaseSignedHeader() {
  return { header: void 0, commit: void 0 };
}
function createBaseLightBlock() {
  return { signed_header: void 0, validator_set: void 0 };
}
function createBaseBlockMeta() {
  return { block_id: void 0, block_size: 0, header: void 0, num_txs: 0 };
}
function createBaseTxProof() {
  return { root_hash: new Uint8Array(0), data: new Uint8Array(0), proof: void 0 };
}
function bytesFromBase6421(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes21(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function toTimestamp4(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp4(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp4(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp4(Timestamp.fromJSON(o));
  }
}
function longToNumber19(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet45(value) {
  return value !== null && value !== void 0;
}
var registry47 = [
  ["/tendermint.types.PartSetHeader", PartSetHeader],
  ["/tendermint.types.Part", Part],
  ["/tendermint.types.BlockID", BlockID],
  ["/tendermint.types.Header", Header],
  ["/tendermint.types.Data", Data],
  ["/tendermint.types.Vote", Vote],
  ["/tendermint.types.Commit", Commit],
  ["/tendermint.types.CommitSig", CommitSig],
  ["/tendermint.types.ExtendedCommit", ExtendedCommit],
  ["/tendermint.types.ExtendedCommitSig", ExtendedCommitSig],
  ["/tendermint.types.Proposal", Proposal],
  ["/tendermint.types.SignedHeader", SignedHeader],
  ["/tendermint.types.LightBlock", LightBlock],
  ["/tendermint.types.BlockMeta", BlockMeta],
  ["/tendermint.types.TxProof", TxProof]
];
var aminoConverters47 = {
  "/tendermint.types.PartSetHeader": {
    aminoType: "tendermint.types.PartSetHeader",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.Part": {
    aminoType: "tendermint.types.Part",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.BlockID": {
    aminoType: "tendermint.types.BlockID",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.Header": {
    aminoType: "tendermint.types.Header",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.Data": {
    aminoType: "tendermint.types.Data",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.Vote": {
    aminoType: "tendermint.types.Vote",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.Commit": {
    aminoType: "tendermint.types.Commit",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.CommitSig": {
    aminoType: "tendermint.types.CommitSig",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.ExtendedCommit": {
    aminoType: "tendermint.types.ExtendedCommit",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.ExtendedCommitSig": {
    aminoType: "tendermint.types.ExtendedCommitSig",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.Proposal": {
    aminoType: "tendermint.types.Proposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.SignedHeader": {
    aminoType: "tendermint.types.SignedHeader",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.LightBlock": {
    aminoType: "tendermint.types.LightBlock",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.BlockMeta": {
    aminoType: "tendermint.types.BlockMeta",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.TxProof": {
    aminoType: "tendermint.types.TxProof",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/types/evidence.js
var Evidence = {
  $type: "tendermint.types.Evidence",
  encode(message, writer = new BinaryWriter()) {
    if (message.duplicate_vote_evidence !== void 0) {
      DuplicateVoteEvidence.encode(message.duplicate_vote_evidence, writer.uint32(10).fork()).join();
    }
    if (message.light_client_attack_evidence !== void 0) {
      LightClientAttackEvidence.encode(message.light_client_attack_evidence, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEvidence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.duplicate_vote_evidence = DuplicateVoteEvidence.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.light_client_attack_evidence = LightClientAttackEvidence.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      duplicate_vote_evidence: isSet46(object.duplicate_vote_evidence) ? DuplicateVoteEvidence.fromJSON(object.duplicate_vote_evidence) : void 0,
      light_client_attack_evidence: isSet46(object.light_client_attack_evidence) ? LightClientAttackEvidence.fromJSON(object.light_client_attack_evidence) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.duplicate_vote_evidence !== void 0) {
      obj.duplicate_vote_evidence = DuplicateVoteEvidence.toJSON(message.duplicate_vote_evidence);
    }
    if (message.light_client_attack_evidence !== void 0) {
      obj.light_client_attack_evidence = LightClientAttackEvidence.toJSON(message.light_client_attack_evidence);
    }
    return obj;
  },
  create(base) {
    return Evidence.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEvidence();
    message.duplicate_vote_evidence = object.duplicate_vote_evidence !== void 0 && object.duplicate_vote_evidence !== null ? DuplicateVoteEvidence.fromPartial(object.duplicate_vote_evidence) : void 0;
    message.light_client_attack_evidence = object.light_client_attack_evidence !== void 0 && object.light_client_attack_evidence !== null ? LightClientAttackEvidence.fromPartial(object.light_client_attack_evidence) : void 0;
    return message;
  }
};
var DuplicateVoteEvidence = {
  $type: "tendermint.types.DuplicateVoteEvidence",
  encode(message, writer = new BinaryWriter()) {
    if (message.vote_a !== void 0) {
      Vote.encode(message.vote_a, writer.uint32(10).fork()).join();
    }
    if (message.vote_b !== void 0) {
      Vote.encode(message.vote_b, writer.uint32(18).fork()).join();
    }
    if (message.total_voting_power !== 0) {
      writer.uint32(24).int64(message.total_voting_power);
    }
    if (message.validator_power !== 0) {
      writer.uint32(32).int64(message.validator_power);
    }
    if (message.timestamp !== void 0) {
      Timestamp.encode(toTimestamp5(message.timestamp), writer.uint32(42).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDuplicateVoteEvidence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.vote_a = Vote.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.vote_b = Vote.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.total_voting_power = longToNumber20(reader.int64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.validator_power = longToNumber20(reader.int64());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.timestamp = fromTimestamp5(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      vote_a: isSet46(object.vote_a) ? Vote.fromJSON(object.vote_a) : void 0,
      vote_b: isSet46(object.vote_b) ? Vote.fromJSON(object.vote_b) : void 0,
      total_voting_power: isSet46(object.total_voting_power) ? globalThis.Number(object.total_voting_power) : 0,
      validator_power: isSet46(object.validator_power) ? globalThis.Number(object.validator_power) : 0,
      timestamp: isSet46(object.timestamp) ? fromJsonTimestamp5(object.timestamp) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.vote_a !== void 0) {
      obj.vote_a = Vote.toJSON(message.vote_a);
    }
    if (message.vote_b !== void 0) {
      obj.vote_b = Vote.toJSON(message.vote_b);
    }
    if (message.total_voting_power !== 0) {
      obj.total_voting_power = Math.round(message.total_voting_power);
    }
    if (message.validator_power !== 0) {
      obj.validator_power = Math.round(message.validator_power);
    }
    if (message.timestamp !== void 0) {
      obj.timestamp = message.timestamp.toISOString();
    }
    return obj;
  },
  create(base) {
    return DuplicateVoteEvidence.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDuplicateVoteEvidence();
    message.vote_a = object.vote_a !== void 0 && object.vote_a !== null ? Vote.fromPartial(object.vote_a) : void 0;
    message.vote_b = object.vote_b !== void 0 && object.vote_b !== null ? Vote.fromPartial(object.vote_b) : void 0;
    message.total_voting_power = object.total_voting_power ?? 0;
    message.validator_power = object.validator_power ?? 0;
    message.timestamp = object.timestamp ?? void 0;
    return message;
  }
};
var LightClientAttackEvidence = {
  $type: "tendermint.types.LightClientAttackEvidence",
  encode(message, writer = new BinaryWriter()) {
    if (message.conflicting_block !== void 0) {
      LightBlock.encode(message.conflicting_block, writer.uint32(10).fork()).join();
    }
    if (message.common_height !== 0) {
      writer.uint32(16).int64(message.common_height);
    }
    for (const v of message.byzantine_validators) {
      Validator2.encode(v, writer.uint32(26).fork()).join();
    }
    if (message.total_voting_power !== 0) {
      writer.uint32(32).int64(message.total_voting_power);
    }
    if (message.timestamp !== void 0) {
      Timestamp.encode(toTimestamp5(message.timestamp), writer.uint32(42).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLightClientAttackEvidence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.conflicting_block = LightBlock.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.common_height = longToNumber20(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.byzantine_validators.push(Validator2.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.total_voting_power = longToNumber20(reader.int64());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.timestamp = fromTimestamp5(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      conflicting_block: isSet46(object.conflicting_block) ? LightBlock.fromJSON(object.conflicting_block) : void 0,
      common_height: isSet46(object.common_height) ? globalThis.Number(object.common_height) : 0,
      byzantine_validators: globalThis.Array.isArray(object == null ? void 0 : object.byzantine_validators) ? object.byzantine_validators.map((e) => Validator2.fromJSON(e)) : [],
      total_voting_power: isSet46(object.total_voting_power) ? globalThis.Number(object.total_voting_power) : 0,
      timestamp: isSet46(object.timestamp) ? fromJsonTimestamp5(object.timestamp) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.conflicting_block !== void 0) {
      obj.conflicting_block = LightBlock.toJSON(message.conflicting_block);
    }
    if (message.common_height !== 0) {
      obj.common_height = Math.round(message.common_height);
    }
    if ((_a = message.byzantine_validators) == null ? void 0 : _a.length) {
      obj.byzantine_validators = message.byzantine_validators.map((e) => Validator2.toJSON(e));
    }
    if (message.total_voting_power !== 0) {
      obj.total_voting_power = Math.round(message.total_voting_power);
    }
    if (message.timestamp !== void 0) {
      obj.timestamp = message.timestamp.toISOString();
    }
    return obj;
  },
  create(base) {
    return LightClientAttackEvidence.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseLightClientAttackEvidence();
    message.conflicting_block = object.conflicting_block !== void 0 && object.conflicting_block !== null ? LightBlock.fromPartial(object.conflicting_block) : void 0;
    message.common_height = object.common_height ?? 0;
    message.byzantine_validators = ((_a = object.byzantine_validators) == null ? void 0 : _a.map((e) => Validator2.fromPartial(e))) || [];
    message.total_voting_power = object.total_voting_power ?? 0;
    message.timestamp = object.timestamp ?? void 0;
    return message;
  }
};
var EvidenceList = {
  $type: "tendermint.types.EvidenceList",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.evidence) {
      Evidence.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEvidenceList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.evidence.push(Evidence.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      evidence: globalThis.Array.isArray(object == null ? void 0 : object.evidence) ? object.evidence.map((e) => Evidence.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.evidence) == null ? void 0 : _a.length) {
      obj.evidence = message.evidence.map((e) => Evidence.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return EvidenceList.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseEvidenceList();
    message.evidence = ((_a = object.evidence) == null ? void 0 : _a.map((e) => Evidence.fromPartial(e))) || [];
    return message;
  }
};
function createBaseEvidence() {
  return { duplicate_vote_evidence: void 0, light_client_attack_evidence: void 0 };
}
function createBaseDuplicateVoteEvidence() {
  return { vote_a: void 0, vote_b: void 0, total_voting_power: 0, validator_power: 0, timestamp: void 0 };
}
function createBaseLightClientAttackEvidence() {
  return {
    conflicting_block: void 0,
    common_height: 0,
    byzantine_validators: [],
    total_voting_power: 0,
    timestamp: void 0
  };
}
function createBaseEvidenceList() {
  return { evidence: [] };
}
function toTimestamp5(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp5(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp5(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp5(Timestamp.fromJSON(o));
  }
}
function longToNumber20(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet46(value) {
  return value !== null && value !== void 0;
}
var registry48 = [
  ["/tendermint.types.Evidence", Evidence],
  ["/tendermint.types.DuplicateVoteEvidence", DuplicateVoteEvidence],
  ["/tendermint.types.LightClientAttackEvidence", LightClientAttackEvidence],
  ["/tendermint.types.EvidenceList", EvidenceList]
];
var aminoConverters48 = {
  "/tendermint.types.Evidence": {
    aminoType: "tendermint.types.Evidence",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.DuplicateVoteEvidence": {
    aminoType: "tendermint.types.DuplicateVoteEvidence",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.LightClientAttackEvidence": {
    aminoType: "tendermint.types.LightClientAttackEvidence",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/tendermint.types.EvidenceList": {
    aminoType: "tendermint.types.EvidenceList",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/types/block.js
var Block = {
  $type: "tendermint.types.Block",
  encode(message, writer = new BinaryWriter()) {
    if (message.header !== void 0) {
      Header.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.data !== void 0) {
      Data.encode(message.data, writer.uint32(18).fork()).join();
    }
    if (message.evidence !== void 0) {
      EvidenceList.encode(message.evidence, writer.uint32(26).fork()).join();
    }
    if (message.last_commit !== void 0) {
      Commit.encode(message.last_commit, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.header = Header.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.data = Data.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.evidence = EvidenceList.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.last_commit = Commit.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      header: isSet47(object.header) ? Header.fromJSON(object.header) : void 0,
      data: isSet47(object.data) ? Data.fromJSON(object.data) : void 0,
      evidence: isSet47(object.evidence) ? EvidenceList.fromJSON(object.evidence) : void 0,
      last_commit: isSet47(object.last_commit) ? Commit.fromJSON(object.last_commit) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.header !== void 0) {
      obj.header = Header.toJSON(message.header);
    }
    if (message.data !== void 0) {
      obj.data = Data.toJSON(message.data);
    }
    if (message.evidence !== void 0) {
      obj.evidence = EvidenceList.toJSON(message.evidence);
    }
    if (message.last_commit !== void 0) {
      obj.last_commit = Commit.toJSON(message.last_commit);
    }
    return obj;
  },
  create(base) {
    return Block.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBlock();
    message.header = object.header !== void 0 && object.header !== null ? Header.fromPartial(object.header) : void 0;
    message.data = object.data !== void 0 && object.data !== null ? Data.fromPartial(object.data) : void 0;
    message.evidence = object.evidence !== void 0 && object.evidence !== null ? EvidenceList.fromPartial(object.evidence) : void 0;
    message.last_commit = object.last_commit !== void 0 && object.last_commit !== null ? Commit.fromPartial(object.last_commit) : void 0;
    return message;
  }
};
function createBaseBlock() {
  return { header: void 0, data: void 0, evidence: void 0, last_commit: void 0 };
}
function isSet47(value) {
  return value !== null && value !== void 0;
}
var registry49 = [["/tendermint.types.Block", Block]];
var aminoConverters49 = {
  "/tendermint.types.Block": {
    aminoType: "tendermint.types.Block",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/tendermint/v1beta1/query.js
var GetValidatorSetByHeightRequest = {
  $type: "cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetValidatorSetByHeightRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber21(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet48(object.height) ? globalThis.Number(object.height) : 0,
      pagination: isSet48(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return GetValidatorSetByHeightRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetValidatorSetByHeightRequest();
    message.height = object.height ?? 0;
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var GetValidatorSetByHeightResponse = {
  $type: "cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.block_height !== 0) {
      writer.uint32(8).int64(message.block_height);
    }
    for (const v of message.validators) {
      Validator3.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetValidatorSetByHeightResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.block_height = longToNumber21(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validators.push(Validator3.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      block_height: isSet48(object.block_height) ? globalThis.Number(object.block_height) : 0,
      validators: globalThis.Array.isArray(object == null ? void 0 : object.validators) ? object.validators.map((e) => Validator3.fromJSON(e)) : [],
      pagination: isSet48(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.block_height !== 0) {
      obj.block_height = Math.round(message.block_height);
    }
    if ((_a = message.validators) == null ? void 0 : _a.length) {
      obj.validators = message.validators.map((e) => Validator3.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return GetValidatorSetByHeightResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGetValidatorSetByHeightResponse();
    message.block_height = object.block_height ?? 0;
    message.validators = ((_a = object.validators) == null ? void 0 : _a.map((e) => Validator3.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var GetLatestValidatorSetRequest = {
  $type: "cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetLatestValidatorSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { pagination: isSet48(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return GetLatestValidatorSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetLatestValidatorSetRequest();
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var GetLatestValidatorSetResponse = {
  $type: "cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.block_height !== 0) {
      writer.uint32(8).int64(message.block_height);
    }
    for (const v of message.validators) {
      Validator3.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetLatestValidatorSetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.block_height = longToNumber21(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validators.push(Validator3.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      block_height: isSet48(object.block_height) ? globalThis.Number(object.block_height) : 0,
      validators: globalThis.Array.isArray(object == null ? void 0 : object.validators) ? object.validators.map((e) => Validator3.fromJSON(e)) : [],
      pagination: isSet48(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.block_height !== 0) {
      obj.block_height = Math.round(message.block_height);
    }
    if ((_a = message.validators) == null ? void 0 : _a.length) {
      obj.validators = message.validators.map((e) => Validator3.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return GetLatestValidatorSetResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGetLatestValidatorSetResponse();
    message.block_height = object.block_height ?? 0;
    message.validators = ((_a = object.validators) == null ? void 0 : _a.map((e) => Validator3.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var Validator3 = {
  $type: "cosmos.base.tendermint.v1beta1.Validator",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.pub_key !== void 0) {
      Any.encode(message.pub_key, writer.uint32(18).fork()).join();
    }
    if (message.voting_power !== 0) {
      writer.uint32(24).int64(message.voting_power);
    }
    if (message.proposer_priority !== 0) {
      writer.uint32(32).int64(message.proposer_priority);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidator3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pub_key = Any.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.voting_power = longToNumber21(reader.int64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.proposer_priority = longToNumber21(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet48(object.address) ? globalThis.String(object.address) : "",
      pub_key: isSet48(object.pub_key) ? Any.fromJSON(object.pub_key) : void 0,
      voting_power: isSet48(object.voting_power) ? globalThis.Number(object.voting_power) : 0,
      proposer_priority: isSet48(object.proposer_priority) ? globalThis.Number(object.proposer_priority) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.pub_key !== void 0) {
      obj.pub_key = Any.toJSON(message.pub_key);
    }
    if (message.voting_power !== 0) {
      obj.voting_power = Math.round(message.voting_power);
    }
    if (message.proposer_priority !== 0) {
      obj.proposer_priority = Math.round(message.proposer_priority);
    }
    return obj;
  },
  create(base) {
    return Validator3.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidator3();
    message.address = object.address ?? "";
    message.pub_key = object.pub_key !== void 0 && object.pub_key !== null ? Any.fromPartial(object.pub_key) : void 0;
    message.voting_power = object.voting_power ?? 0;
    message.proposer_priority = object.proposer_priority ?? 0;
    return message;
  }
};
var GetBlockByHeightRequest = {
  $type: "cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetBlockByHeightRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber21(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { height: isSet48(object.height) ? globalThis.Number(object.height) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },
  create(base) {
    return GetBlockByHeightRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetBlockByHeightRequest();
    message.height = object.height ?? 0;
    return message;
  }
};
var GetBlockByHeightResponse = {
  $type: "cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.block_id !== void 0) {
      BlockID.encode(message.block_id, writer.uint32(10).fork()).join();
    }
    if (message.block !== void 0) {
      Block.encode(message.block, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetBlockByHeightResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.block_id = BlockID.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.block = Block.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      block_id: isSet48(object.block_id) ? BlockID.fromJSON(object.block_id) : void 0,
      block: isSet48(object.block) ? Block.fromJSON(object.block) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.block_id !== void 0) {
      obj.block_id = BlockID.toJSON(message.block_id);
    }
    if (message.block !== void 0) {
      obj.block = Block.toJSON(message.block);
    }
    return obj;
  },
  create(base) {
    return GetBlockByHeightResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetBlockByHeightResponse();
    message.block_id = object.block_id !== void 0 && object.block_id !== null ? BlockID.fromPartial(object.block_id) : void 0;
    message.block = object.block !== void 0 && object.block !== null ? Block.fromPartial(object.block) : void 0;
    return message;
  }
};
var GetLatestBlockRequest = {
  $type: "cosmos.base.tendermint.v1beta1.GetLatestBlockRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetLatestBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return GetLatestBlockRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseGetLatestBlockRequest();
    return message;
  }
};
var GetLatestBlockResponse = {
  $type: "cosmos.base.tendermint.v1beta1.GetLatestBlockResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.block_id !== void 0) {
      BlockID.encode(message.block_id, writer.uint32(10).fork()).join();
    }
    if (message.block !== void 0) {
      Block.encode(message.block, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetLatestBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.block_id = BlockID.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.block = Block.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      block_id: isSet48(object.block_id) ? BlockID.fromJSON(object.block_id) : void 0,
      block: isSet48(object.block) ? Block.fromJSON(object.block) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.block_id !== void 0) {
      obj.block_id = BlockID.toJSON(message.block_id);
    }
    if (message.block !== void 0) {
      obj.block = Block.toJSON(message.block);
    }
    return obj;
  },
  create(base) {
    return GetLatestBlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetLatestBlockResponse();
    message.block_id = object.block_id !== void 0 && object.block_id !== null ? BlockID.fromPartial(object.block_id) : void 0;
    message.block = object.block !== void 0 && object.block !== null ? Block.fromPartial(object.block) : void 0;
    return message;
  }
};
var GetSyncingRequest = {
  $type: "cosmos.base.tendermint.v1beta1.GetSyncingRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetSyncingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return GetSyncingRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseGetSyncingRequest();
    return message;
  }
};
var GetSyncingResponse = {
  $type: "cosmos.base.tendermint.v1beta1.GetSyncingResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.syncing !== false) {
      writer.uint32(8).bool(message.syncing);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetSyncingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.syncing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { syncing: isSet48(object.syncing) ? globalThis.Boolean(object.syncing) : false };
  },
  toJSON(message) {
    const obj = {};
    if (message.syncing !== false) {
      obj.syncing = message.syncing;
    }
    return obj;
  },
  create(base) {
    return GetSyncingResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetSyncingResponse();
    message.syncing = object.syncing ?? false;
    return message;
  }
};
var GetNodeInfoRequest = {
  $type: "cosmos.base.tendermint.v1beta1.GetNodeInfoRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetNodeInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return GetNodeInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseGetNodeInfoRequest();
    return message;
  }
};
var GetNodeInfoResponse = {
  $type: "cosmos.base.tendermint.v1beta1.GetNodeInfoResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.default_node_info !== void 0) {
      NodeInfo.encode(message.default_node_info, writer.uint32(10).fork()).join();
    }
    if (message.application_version !== void 0) {
      VersionInfo.encode(message.application_version, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetNodeInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.default_node_info = NodeInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.application_version = VersionInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      default_node_info: isSet48(object.default_node_info) ? NodeInfo.fromJSON(object.default_node_info) : void 0,
      application_version: isSet48(object.application_version) ? VersionInfo.fromJSON(object.application_version) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.default_node_info !== void 0) {
      obj.default_node_info = NodeInfo.toJSON(message.default_node_info);
    }
    if (message.application_version !== void 0) {
      obj.application_version = VersionInfo.toJSON(message.application_version);
    }
    return obj;
  },
  create(base) {
    return GetNodeInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetNodeInfoResponse();
    message.default_node_info = object.default_node_info !== void 0 && object.default_node_info !== null ? NodeInfo.fromPartial(object.default_node_info) : void 0;
    message.application_version = object.application_version !== void 0 && object.application_version !== null ? VersionInfo.fromPartial(object.application_version) : void 0;
    return message;
  }
};
var VersionInfo = {
  $type: "cosmos.base.tendermint.v1beta1.VersionInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.app_name !== "") {
      writer.uint32(18).string(message.app_name);
    }
    if (message.version !== "") {
      writer.uint32(26).string(message.version);
    }
    if (message.git_commit !== "") {
      writer.uint32(34).string(message.git_commit);
    }
    if (message.build_tags !== "") {
      writer.uint32(42).string(message.build_tags);
    }
    if (message.go_version !== "") {
      writer.uint32(50).string(message.go_version);
    }
    for (const v of message.build_deps) {
      Module.encode(v, writer.uint32(58).fork()).join();
    }
    if (message.cosmos_sdk_version !== "") {
      writer.uint32(66).string(message.cosmos_sdk_version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVersionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.app_name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.version = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.git_commit = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.build_tags = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.go_version = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.build_deps.push(Module.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.cosmos_sdk_version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet48(object.name) ? globalThis.String(object.name) : "",
      app_name: isSet48(object.app_name) ? globalThis.String(object.app_name) : "",
      version: isSet48(object.version) ? globalThis.String(object.version) : "",
      git_commit: isSet48(object.git_commit) ? globalThis.String(object.git_commit) : "",
      build_tags: isSet48(object.build_tags) ? globalThis.String(object.build_tags) : "",
      go_version: isSet48(object.go_version) ? globalThis.String(object.go_version) : "",
      build_deps: globalThis.Array.isArray(object == null ? void 0 : object.build_deps) ? object.build_deps.map((e) => Module.fromJSON(e)) : [],
      cosmos_sdk_version: isSet48(object.cosmos_sdk_version) ? globalThis.String(object.cosmos_sdk_version) : ""
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.app_name !== "") {
      obj.app_name = message.app_name;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.git_commit !== "") {
      obj.git_commit = message.git_commit;
    }
    if (message.build_tags !== "") {
      obj.build_tags = message.build_tags;
    }
    if (message.go_version !== "") {
      obj.go_version = message.go_version;
    }
    if ((_a = message.build_deps) == null ? void 0 : _a.length) {
      obj.build_deps = message.build_deps.map((e) => Module.toJSON(e));
    }
    if (message.cosmos_sdk_version !== "") {
      obj.cosmos_sdk_version = message.cosmos_sdk_version;
    }
    return obj;
  },
  create(base) {
    return VersionInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseVersionInfo();
    message.name = object.name ?? "";
    message.app_name = object.app_name ?? "";
    message.version = object.version ?? "";
    message.git_commit = object.git_commit ?? "";
    message.build_tags = object.build_tags ?? "";
    message.go_version = object.go_version ?? "";
    message.build_deps = ((_a = object.build_deps) == null ? void 0 : _a.map((e) => Module.fromPartial(e))) || [];
    message.cosmos_sdk_version = object.cosmos_sdk_version ?? "";
    return message;
  }
};
var Module = {
  $type: "cosmos.base.tendermint.v1beta1.Module",
  encode(message, writer = new BinaryWriter()) {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.sum !== "") {
      writer.uint32(26).string(message.sum);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseModule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.path = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.sum = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      path: isSet48(object.path) ? globalThis.String(object.path) : "",
      version: isSet48(object.version) ? globalThis.String(object.version) : "",
      sum: isSet48(object.sum) ? globalThis.String(object.sum) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.sum !== "") {
      obj.sum = message.sum;
    }
    return obj;
  },
  create(base) {
    return Module.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseModule();
    message.path = object.path ?? "";
    message.version = object.version ?? "";
    message.sum = object.sum ?? "";
    return message;
  }
};
function createBaseGetValidatorSetByHeightRequest() {
  return { height: 0, pagination: void 0 };
}
function createBaseGetValidatorSetByHeightResponse() {
  return { block_height: 0, validators: [], pagination: void 0 };
}
function createBaseGetLatestValidatorSetRequest() {
  return { pagination: void 0 };
}
function createBaseGetLatestValidatorSetResponse() {
  return { block_height: 0, validators: [], pagination: void 0 };
}
function createBaseValidator3() {
  return { address: "", pub_key: void 0, voting_power: 0, proposer_priority: 0 };
}
function createBaseGetBlockByHeightRequest() {
  return { height: 0 };
}
function createBaseGetBlockByHeightResponse() {
  return { block_id: void 0, block: void 0 };
}
function createBaseGetLatestBlockRequest() {
  return {};
}
function createBaseGetLatestBlockResponse() {
  return { block_id: void 0, block: void 0 };
}
function createBaseGetSyncingRequest() {
  return {};
}
function createBaseGetSyncingResponse() {
  return { syncing: false };
}
function createBaseGetNodeInfoRequest() {
  return {};
}
function createBaseGetNodeInfoResponse() {
  return { default_node_info: void 0, application_version: void 0 };
}
function createBaseVersionInfo() {
  return {
    name: "",
    app_name: "",
    version: "",
    git_commit: "",
    build_tags: "",
    go_version: "",
    build_deps: [],
    cosmos_sdk_version: ""
  };
}
function createBaseModule() {
  return { path: "", version: "", sum: "" };
}
function longToNumber21(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet48(value) {
  return value !== null && value !== void 0;
}
var registry50 = [
  ["/cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest", GetValidatorSetByHeightRequest],
  ["/cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse", GetValidatorSetByHeightResponse],
  ["/cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest", GetLatestValidatorSetRequest],
  ["/cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse", GetLatestValidatorSetResponse],
  ["/cosmos.base.tendermint.v1beta1.Validator", Validator3],
  ["/cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest", GetBlockByHeightRequest],
  ["/cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse", GetBlockByHeightResponse],
  ["/cosmos.base.tendermint.v1beta1.GetLatestBlockRequest", GetLatestBlockRequest],
  ["/cosmos.base.tendermint.v1beta1.GetLatestBlockResponse", GetLatestBlockResponse],
  ["/cosmos.base.tendermint.v1beta1.GetSyncingRequest", GetSyncingRequest],
  ["/cosmos.base.tendermint.v1beta1.GetSyncingResponse", GetSyncingResponse],
  ["/cosmos.base.tendermint.v1beta1.GetNodeInfoRequest", GetNodeInfoRequest],
  ["/cosmos.base.tendermint.v1beta1.GetNodeInfoResponse", GetNodeInfoResponse],
  ["/cosmos.base.tendermint.v1beta1.VersionInfo", VersionInfo],
  ["/cosmos.base.tendermint.v1beta1.Module", Module]
];
var aminoConverters50 = {
  "/cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest": {
    aminoType: "cosmos-sdk/GetValidatorSetByHeightRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse": {
    aminoType: "cosmos-sdk/GetValidatorSetByHeightResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest": {
    aminoType: "cosmos-sdk/GetLatestValidatorSetRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse": {
    aminoType: "cosmos-sdk/GetLatestValidatorSetResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.Validator": {
    aminoType: "cosmos-sdk/Validator",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest": {
    aminoType: "cosmos-sdk/GetBlockByHeightRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse": {
    aminoType: "cosmos-sdk/GetBlockByHeightResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.GetLatestBlockRequest": {
    aminoType: "cosmos-sdk/GetLatestBlockRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.GetLatestBlockResponse": {
    aminoType: "cosmos-sdk/GetLatestBlockResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.GetSyncingRequest": {
    aminoType: "cosmos-sdk/GetSyncingRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.GetSyncingResponse": {
    aminoType: "cosmos-sdk/GetSyncingResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.GetNodeInfoRequest": {
    aminoType: "cosmos-sdk/GetNodeInfoRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.GetNodeInfoResponse": {
    aminoType: "cosmos-sdk/GetNodeInfoResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.VersionInfo": {
    aminoType: "cosmos-sdk/VersionInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.base.tendermint.v1beta1.Module": {
    aminoType: "cosmos-sdk/Module",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/base/v1beta1/index.js
var v1beta1_exports11 = {};
__export(v1beta1_exports11, {
  Coin: () => Coin,
  DecCoin: () => DecCoin,
  DecProto: () => DecProto,
  IntProto: () => IntProto,
  aminoConverters: () => aminoConverters26,
  registry: () => registry26
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/capability/v1beta1/index.js
var v1beta1_exports12 = {};
__export(v1beta1_exports12, {
  Capability: () => Capability,
  CapabilityOwners: () => CapabilityOwners,
  GenesisOwners: () => GenesisOwners,
  GenesisState: () => GenesisState6,
  Owner: () => Owner
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/capability/v1beta1/capability.js
var Capability = {
  $type: "cosmos.capability.v1beta1.Capability",
  encode(message, writer = new BinaryWriter()) {
    if (message.index !== 0) {
      writer.uint32(8).uint64(message.index);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCapability();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.index = longToNumber22(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { index: isSet49(object.index) ? globalThis.Number(object.index) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    return obj;
  },
  create(base) {
    return Capability.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCapability();
    message.index = object.index ?? 0;
    return message;
  }
};
var Owner = {
  $type: "cosmos.capability.v1beta1.Owner",
  encode(message, writer = new BinaryWriter()) {
    if (message.module !== "") {
      writer.uint32(10).string(message.module);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseOwner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.module = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      module: isSet49(object.module) ? globalThis.String(object.module) : "",
      name: isSet49(object.name) ? globalThis.String(object.name) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.module !== "") {
      obj.module = message.module;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },
  create(base) {
    return Owner.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseOwner();
    message.module = object.module ?? "";
    message.name = object.name ?? "";
    return message;
  }
};
var CapabilityOwners = {
  $type: "cosmos.capability.v1beta1.CapabilityOwners",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.owners) {
      Owner.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCapabilityOwners();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owners.push(Owner.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { owners: globalThis.Array.isArray(object == null ? void 0 : object.owners) ? object.owners.map((e) => Owner.fromJSON(e)) : [] };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.owners) == null ? void 0 : _a.length) {
      obj.owners = message.owners.map((e) => Owner.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return CapabilityOwners.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseCapabilityOwners();
    message.owners = ((_a = object.owners) == null ? void 0 : _a.map((e) => Owner.fromPartial(e))) || [];
    return message;
  }
};
function createBaseCapability() {
  return { index: 0 };
}
function createBaseOwner() {
  return { module: "", name: "" };
}
function createBaseCapabilityOwners() {
  return { owners: [] };
}
function longToNumber22(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet49(value) {
  return value !== null && value !== void 0;
}
var registry51 = [
  ["/cosmos.capability.v1beta1.Capability", Capability],
  ["/cosmos.capability.v1beta1.Owner", Owner],
  ["/cosmos.capability.v1beta1.CapabilityOwners", CapabilityOwners]
];
var aminoConverters51 = {
  "/cosmos.capability.v1beta1.Capability": {
    aminoType: "cosmos-sdk/Capability",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.capability.v1beta1.Owner": {
    aminoType: "cosmos-sdk/Owner",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.capability.v1beta1.CapabilityOwners": {
    aminoType: "cosmos-sdk/CapabilityOwners",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/capability/v1beta1/genesis.js
var GenesisOwners = {
  $type: "cosmos.capability.v1beta1.GenesisOwners",
  encode(message, writer = new BinaryWriter()) {
    if (message.index !== 0) {
      writer.uint32(8).uint64(message.index);
    }
    if (message.index_owners !== void 0) {
      CapabilityOwners.encode(message.index_owners, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisOwners();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.index = longToNumber23(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.index_owners = CapabilityOwners.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      index: isSet50(object.index) ? globalThis.Number(object.index) : 0,
      index_owners: isSet50(object.index_owners) ? CapabilityOwners.fromJSON(object.index_owners) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.index_owners !== void 0) {
      obj.index_owners = CapabilityOwners.toJSON(message.index_owners);
    }
    return obj;
  },
  create(base) {
    return GenesisOwners.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGenesisOwners();
    message.index = object.index ?? 0;
    message.index_owners = object.index_owners !== void 0 && object.index_owners !== null ? CapabilityOwners.fromPartial(object.index_owners) : void 0;
    return message;
  }
};
var GenesisState6 = {
  $type: "cosmos.capability.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.index !== 0) {
      writer.uint32(8).uint64(message.index);
    }
    for (const v of message.owners) {
      GenesisOwners.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState6();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.index = longToNumber23(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.owners.push(GenesisOwners.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      index: isSet50(object.index) ? globalThis.Number(object.index) : 0,
      owners: globalThis.Array.isArray(object == null ? void 0 : object.owners) ? object.owners.map((e) => GenesisOwners.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if ((_a = message.owners) == null ? void 0 : _a.length) {
      obj.owners = message.owners.map((e) => GenesisOwners.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState6.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGenesisState6();
    message.index = object.index ?? 0;
    message.owners = ((_a = object.owners) == null ? void 0 : _a.map((e) => GenesisOwners.fromPartial(e))) || [];
    return message;
  }
};
function createBaseGenesisOwners() {
  return { index: 0, index_owners: void 0 };
}
function createBaseGenesisState6() {
  return { index: 0, owners: [] };
}
function longToNumber23(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet50(value) {
  return value !== null && value !== void 0;
}
var registry52 = [
  ["/cosmos.capability.v1beta1.GenesisOwners", GenesisOwners],
  ["/cosmos.capability.v1beta1.GenesisState", GenesisState6]
];
var aminoConverters52 = {
  "/cosmos.capability.v1beta1.GenesisOwners": {
    aminoType: "cosmos-sdk/GenesisOwners",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.capability.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crisis/v1beta1/index.js
var v1beta1_exports13 = {};
__export(v1beta1_exports13, {
  GenesisState: () => GenesisState7,
  MsgVerifyInvariant: () => MsgVerifyInvariant,
  MsgVerifyInvariantResponse: () => MsgVerifyInvariantResponse
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crisis/v1beta1/genesis.js
var GenesisState7 = {
  $type: "cosmos.crisis.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.constant_fee !== void 0) {
      Coin.encode(message.constant_fee, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState7();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }
          message.constant_fee = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { constant_fee: isSet51(object.constant_fee) ? Coin.fromJSON(object.constant_fee) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.constant_fee !== void 0) {
      obj.constant_fee = Coin.toJSON(message.constant_fee);
    }
    return obj;
  },
  create(base) {
    return GenesisState7.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGenesisState7();
    message.constant_fee = object.constant_fee !== void 0 && object.constant_fee !== null ? Coin.fromPartial(object.constant_fee) : void 0;
    return message;
  }
};
function createBaseGenesisState7() {
  return { constant_fee: void 0 };
}
function isSet51(value) {
  return value !== null && value !== void 0;
}
var registry53 = [["/cosmos.crisis.v1beta1.GenesisState", GenesisState7]];
var aminoConverters53 = {
  "/cosmos.crisis.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crisis/v1beta1/tx.js
var MsgVerifyInvariant = {
  $type: "cosmos.crisis.v1beta1.MsgVerifyInvariant",
  encode(message, writer = new BinaryWriter()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.invariant_module_name !== "") {
      writer.uint32(18).string(message.invariant_module_name);
    }
    if (message.invariant_route !== "") {
      writer.uint32(26).string(message.invariant_route);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgVerifyInvariant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.invariant_module_name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.invariant_route = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet52(object.sender) ? globalThis.String(object.sender) : "",
      invariant_module_name: isSet52(object.invariant_module_name) ? globalThis.String(object.invariant_module_name) : "",
      invariant_route: isSet52(object.invariant_route) ? globalThis.String(object.invariant_route) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.invariant_module_name !== "") {
      obj.invariant_module_name = message.invariant_module_name;
    }
    if (message.invariant_route !== "") {
      obj.invariant_route = message.invariant_route;
    }
    return obj;
  },
  create(base) {
    return MsgVerifyInvariant.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgVerifyInvariant();
    message.sender = object.sender ?? "";
    message.invariant_module_name = object.invariant_module_name ?? "";
    message.invariant_route = object.invariant_route ?? "";
    return message;
  }
};
var MsgVerifyInvariantResponse = {
  $type: "cosmos.crisis.v1beta1.MsgVerifyInvariantResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgVerifyInvariantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgVerifyInvariantResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgVerifyInvariantResponse();
    return message;
  }
};
function createBaseMsgVerifyInvariant() {
  return { sender: "", invariant_module_name: "", invariant_route: "" };
}
function createBaseMsgVerifyInvariantResponse() {
  return {};
}
function isSet52(value) {
  return value !== null && value !== void 0;
}
var registry54 = [
  ["/cosmos.crisis.v1beta1.MsgVerifyInvariant", MsgVerifyInvariant],
  ["/cosmos.crisis.v1beta1.MsgVerifyInvariantResponse", MsgVerifyInvariantResponse]
];
var aminoConverters54 = {
  "/cosmos.crisis.v1beta1.MsgVerifyInvariant": {
    aminoType: "cosmos-sdk/MsgVerifyInvariant",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.crisis.v1beta1.MsgVerifyInvariantResponse": {
    aminoType: "cosmos-sdk/MsgVerifyInvariantResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crypto/ed25519/index.js
var ed25519_exports = {};
__export(ed25519_exports, {
  PrivKey: () => PrivKey,
  PubKey: () => PubKey,
  aminoConverters: () => aminoConverters55,
  registry: () => registry55
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crypto/ed25519/keys.js
var PubKey = {
  $type: "cosmos.crypto.ed25519.PubKey",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePubKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { key: isSet53(object.key) ? bytesFromBase6422(object.key) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes22(message.key);
    }
    return obj;
  },
  create(base) {
    return PubKey.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePubKey();
    message.key = object.key ?? new Uint8Array(0);
    return message;
  }
};
var PrivKey = {
  $type: "cosmos.crypto.ed25519.PrivKey",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePrivKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { key: isSet53(object.key) ? bytesFromBase6422(object.key) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes22(message.key);
    }
    return obj;
  },
  create(base) {
    return PrivKey.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePrivKey();
    message.key = object.key ?? new Uint8Array(0);
    return message;
  }
};
function createBasePubKey() {
  return { key: new Uint8Array(0) };
}
function createBasePrivKey() {
  return { key: new Uint8Array(0) };
}
function bytesFromBase6422(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes22(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet53(value) {
  return value !== null && value !== void 0;
}
var registry55 = [
  ["/cosmos.crypto.ed25519.PubKey", PubKey],
  ["/cosmos.crypto.ed25519.PrivKey", PrivKey]
];
var aminoConverters55 = {
  "/cosmos.crypto.ed25519.PubKey": {
    aminoType: "cosmos-sdk/PubKey",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.crypto.ed25519.PrivKey": {
    aminoType: "cosmos-sdk/PrivKey",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crypto/multisig/index.js
var multisig_exports = {};
__export(multisig_exports, {
  LegacyAminoPubKey: () => LegacyAminoPubKey,
  aminoConverters: () => aminoConverters56,
  registry: () => registry56
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crypto/multisig/keys.js
var LegacyAminoPubKey = {
  $type: "cosmos.crypto.multisig.LegacyAminoPubKey",
  encode(message, writer = new BinaryWriter()) {
    if (message.threshold !== 0) {
      writer.uint32(8).uint32(message.threshold);
    }
    for (const v of message.public_keys) {
      Any.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLegacyAminoPubKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.threshold = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.public_keys.push(Any.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      threshold: isSet54(object.threshold) ? globalThis.Number(object.threshold) : 0,
      public_keys: globalThis.Array.isArray(object == null ? void 0 : object.public_keys) ? object.public_keys.map((e) => Any.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.threshold !== 0) {
      obj.threshold = Math.round(message.threshold);
    }
    if ((_a = message.public_keys) == null ? void 0 : _a.length) {
      obj.public_keys = message.public_keys.map((e) => Any.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return LegacyAminoPubKey.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseLegacyAminoPubKey();
    message.threshold = object.threshold ?? 0;
    message.public_keys = ((_a = object.public_keys) == null ? void 0 : _a.map((e) => Any.fromPartial(e))) || [];
    return message;
  }
};
function createBaseLegacyAminoPubKey() {
  return { threshold: 0, public_keys: [] };
}
function isSet54(value) {
  return value !== null && value !== void 0;
}
var registry56 = [["/cosmos.crypto.multisig.LegacyAminoPubKey", LegacyAminoPubKey]];
var aminoConverters56 = {
  "/cosmos.crypto.multisig.LegacyAminoPubKey": {
    aminoType: "cosmos-sdk/LegacyAminoPubKey",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crypto/secp256k1/index.js
var secp256k1_exports = {};
__export(secp256k1_exports, {
  PrivKey: () => PrivKey2,
  PubKey: () => PubKey2,
  aminoConverters: () => aminoConverters57,
  registry: () => registry57
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crypto/secp256k1/keys.js
var PubKey2 = {
  $type: "cosmos.crypto.secp256k1.PubKey",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePubKey2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { key: isSet55(object.key) ? bytesFromBase6423(object.key) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes23(message.key);
    }
    return obj;
  },
  create(base) {
    return PubKey2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePubKey2();
    message.key = object.key ?? new Uint8Array(0);
    return message;
  }
};
var PrivKey2 = {
  $type: "cosmos.crypto.secp256k1.PrivKey",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePrivKey2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { key: isSet55(object.key) ? bytesFromBase6423(object.key) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes23(message.key);
    }
    return obj;
  },
  create(base) {
    return PrivKey2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePrivKey2();
    message.key = object.key ?? new Uint8Array(0);
    return message;
  }
};
function createBasePubKey2() {
  return { key: new Uint8Array(0) };
}
function createBasePrivKey2() {
  return { key: new Uint8Array(0) };
}
function bytesFromBase6423(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes23(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet55(value) {
  return value !== null && value !== void 0;
}
var registry57 = [
  ["/cosmos.crypto.secp256k1.PubKey", PubKey2],
  ["/cosmos.crypto.secp256k1.PrivKey", PrivKey2]
];
var aminoConverters57 = {
  "/cosmos.crypto.secp256k1.PubKey": {
    aminoType: "cosmos-sdk/PubKey",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.crypto.secp256k1.PrivKey": {
    aminoType: "cosmos-sdk/PrivKey",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crypto/secp256r1/index.js
var secp256r1_exports = {};
__export(secp256r1_exports, {
  PrivKey: () => PrivKey3,
  PubKey: () => PubKey3,
  aminoConverters: () => aminoConverters58,
  registry: () => registry58
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crypto/secp256r1/keys.js
var PubKey3 = {
  $type: "cosmos.crypto.secp256r1.PubKey",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePubKey3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { key: isSet56(object.key) ? bytesFromBase6424(object.key) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes24(message.key);
    }
    return obj;
  },
  create(base) {
    return PubKey3.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePubKey3();
    message.key = object.key ?? new Uint8Array(0);
    return message;
  }
};
var PrivKey3 = {
  $type: "cosmos.crypto.secp256r1.PrivKey",
  encode(message, writer = new BinaryWriter()) {
    if (message.secret.length !== 0) {
      writer.uint32(10).bytes(message.secret);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePrivKey3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.secret = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { secret: isSet56(object.secret) ? bytesFromBase6424(object.secret) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.secret.length !== 0) {
      obj.secret = base64FromBytes24(message.secret);
    }
    return obj;
  },
  create(base) {
    return PrivKey3.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePrivKey3();
    message.secret = object.secret ?? new Uint8Array(0);
    return message;
  }
};
function createBasePubKey3() {
  return { key: new Uint8Array(0) };
}
function createBasePrivKey3() {
  return { secret: new Uint8Array(0) };
}
function bytesFromBase6424(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes24(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet56(value) {
  return value !== null && value !== void 0;
}
var registry58 = [
  ["/cosmos.crypto.secp256r1.PubKey", PubKey3],
  ["/cosmos.crypto.secp256r1.PrivKey", PrivKey3]
];
var aminoConverters58 = {
  "/cosmos.crypto.secp256r1.PubKey": {
    aminoType: "cosmos-sdk/PubKey",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.crypto.secp256r1.PrivKey": {
    aminoType: "cosmos-sdk/PrivKey",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crypto/sr25519/index.js
var sr25519_exports = {};
__export(sr25519_exports, {
  PubKey: () => PubKey4,
  aminoConverters: () => aminoConverters59,
  registry: () => registry59
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crypto/sr25519/keys.js
var PubKey4 = {
  $type: "cosmos.crypto.sr25519.PubKey",
  encode(message, writer = new BinaryWriter()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePubKey4();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { key: isSet57(object.key) ? bytesFromBase6425(object.key) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes25(message.key);
    }
    return obj;
  },
  create(base) {
    return PubKey4.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePubKey4();
    message.key = object.key ?? new Uint8Array(0);
    return message;
  }
};
function createBasePubKey4() {
  return { key: new Uint8Array(0) };
}
function bytesFromBase6425(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes25(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet57(value) {
  return value !== null && value !== void 0;
}
var registry59 = [["/cosmos.crypto.sr25519.PubKey", PubKey4]];
var aminoConverters59 = {
  "/cosmos.crypto.sr25519.PubKey": {
    aminoType: "cosmos-sdk/PubKey",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/distribution/v1beta1/index.js
var v1beta1_exports14 = {};
__export(v1beta1_exports14, {
  CommunityPoolSpendProposal: () => CommunityPoolSpendProposal,
  CommunityPoolSpendProposalWithDeposit: () => CommunityPoolSpendProposalWithDeposit,
  DelegationDelegatorReward: () => DelegationDelegatorReward,
  DelegatorStartingInfo: () => DelegatorStartingInfo,
  DelegatorStartingInfoRecord: () => DelegatorStartingInfoRecord,
  DelegatorWithdrawInfo: () => DelegatorWithdrawInfo,
  FeePool: () => FeePool,
  GenesisState: () => GenesisState8,
  MsgFundCommunityPool: () => MsgFundCommunityPool,
  MsgFundCommunityPoolResponse: () => MsgFundCommunityPoolResponse,
  MsgSetWithdrawAddress: () => MsgSetWithdrawAddress,
  MsgSetWithdrawAddressResponse: () => MsgSetWithdrawAddressResponse,
  MsgWithdrawDelegatorReward: () => MsgWithdrawDelegatorReward,
  MsgWithdrawDelegatorRewardResponse: () => MsgWithdrawDelegatorRewardResponse,
  MsgWithdrawValidatorCommission: () => MsgWithdrawValidatorCommission,
  MsgWithdrawValidatorCommissionResponse: () => MsgWithdrawValidatorCommissionResponse,
  Params: () => Params5,
  QueryCommunityPoolRequest: () => QueryCommunityPoolRequest,
  QueryCommunityPoolResponse: () => QueryCommunityPoolResponse,
  QueryDelegationRewardsRequest: () => QueryDelegationRewardsRequest,
  QueryDelegationRewardsResponse: () => QueryDelegationRewardsResponse,
  QueryDelegationTotalRewardsRequest: () => QueryDelegationTotalRewardsRequest,
  QueryDelegationTotalRewardsResponse: () => QueryDelegationTotalRewardsResponse,
  QueryDelegatorValidatorsRequest: () => QueryDelegatorValidatorsRequest,
  QueryDelegatorValidatorsResponse: () => QueryDelegatorValidatorsResponse,
  QueryDelegatorWithdrawAddressRequest: () => QueryDelegatorWithdrawAddressRequest,
  QueryDelegatorWithdrawAddressResponse: () => QueryDelegatorWithdrawAddressResponse,
  QueryParamsRequest: () => QueryParamsRequest4,
  QueryParamsResponse: () => QueryParamsResponse4,
  QueryValidatorCommissionRequest: () => QueryValidatorCommissionRequest,
  QueryValidatorCommissionResponse: () => QueryValidatorCommissionResponse,
  QueryValidatorOutstandingRewardsRequest: () => QueryValidatorOutstandingRewardsRequest,
  QueryValidatorOutstandingRewardsResponse: () => QueryValidatorOutstandingRewardsResponse,
  QueryValidatorSlashesRequest: () => QueryValidatorSlashesRequest,
  QueryValidatorSlashesResponse: () => QueryValidatorSlashesResponse,
  ValidatorAccumulatedCommission: () => ValidatorAccumulatedCommission,
  ValidatorAccumulatedCommissionRecord: () => ValidatorAccumulatedCommissionRecord,
  ValidatorCurrentRewards: () => ValidatorCurrentRewards,
  ValidatorCurrentRewardsRecord: () => ValidatorCurrentRewardsRecord,
  ValidatorHistoricalRewards: () => ValidatorHistoricalRewards,
  ValidatorHistoricalRewardsRecord: () => ValidatorHistoricalRewardsRecord,
  ValidatorOutstandingRewards: () => ValidatorOutstandingRewards,
  ValidatorOutstandingRewardsRecord: () => ValidatorOutstandingRewardsRecord,
  ValidatorSlashEvent: () => ValidatorSlashEvent,
  ValidatorSlashEventRecord: () => ValidatorSlashEventRecord,
  ValidatorSlashEvents: () => ValidatorSlashEvents
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/distribution/v1beta1/distribution.js
var Params5 = {
  $type: "cosmos.distribution.v1beta1.Params",
  encode(message, writer = new BinaryWriter()) {
    if (message.community_tax !== "") {
      writer.uint32(10).string(message.community_tax);
    }
    if (message.base_proposer_reward !== "") {
      writer.uint32(18).string(message.base_proposer_reward);
    }
    if (message.bonus_proposer_reward !== "") {
      writer.uint32(26).string(message.bonus_proposer_reward);
    }
    if (message.withdraw_addr_enabled !== false) {
      writer.uint32(32).bool(message.withdraw_addr_enabled);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams5();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.community_tax = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.base_proposer_reward = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.bonus_proposer_reward = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.withdraw_addr_enabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      community_tax: isSet58(object.community_tax) ? globalThis.String(object.community_tax) : "",
      base_proposer_reward: isSet58(object.base_proposer_reward) ? globalThis.String(object.base_proposer_reward) : "",
      bonus_proposer_reward: isSet58(object.bonus_proposer_reward) ? globalThis.String(object.bonus_proposer_reward) : "",
      withdraw_addr_enabled: isSet58(object.withdraw_addr_enabled) ? globalThis.Boolean(object.withdraw_addr_enabled) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.community_tax !== "") {
      obj.community_tax = message.community_tax;
    }
    if (message.base_proposer_reward !== "") {
      obj.base_proposer_reward = message.base_proposer_reward;
    }
    if (message.bonus_proposer_reward !== "") {
      obj.bonus_proposer_reward = message.bonus_proposer_reward;
    }
    if (message.withdraw_addr_enabled !== false) {
      obj.withdraw_addr_enabled = message.withdraw_addr_enabled;
    }
    return obj;
  },
  create(base) {
    return Params5.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseParams5();
    message.community_tax = object.community_tax ?? "";
    message.base_proposer_reward = object.base_proposer_reward ?? "";
    message.bonus_proposer_reward = object.bonus_proposer_reward ?? "";
    message.withdraw_addr_enabled = object.withdraw_addr_enabled ?? false;
    return message;
  }
};
var ValidatorHistoricalRewards = {
  $type: "cosmos.distribution.v1beta1.ValidatorHistoricalRewards",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.cumulative_reward_ratio) {
      DecCoin.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.reference_count !== 0) {
      writer.uint32(16).uint32(message.reference_count);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorHistoricalRewards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.cumulative_reward_ratio.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.reference_count = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      cumulative_reward_ratio: globalThis.Array.isArray(object == null ? void 0 : object.cumulative_reward_ratio) ? object.cumulative_reward_ratio.map((e) => DecCoin.fromJSON(e)) : [],
      reference_count: isSet58(object.reference_count) ? globalThis.Number(object.reference_count) : 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.cumulative_reward_ratio) == null ? void 0 : _a.length) {
      obj.cumulative_reward_ratio = message.cumulative_reward_ratio.map((e) => DecCoin.toJSON(e));
    }
    if (message.reference_count !== 0) {
      obj.reference_count = Math.round(message.reference_count);
    }
    return obj;
  },
  create(base) {
    return ValidatorHistoricalRewards.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseValidatorHistoricalRewards();
    message.cumulative_reward_ratio = ((_a = object.cumulative_reward_ratio) == null ? void 0 : _a.map((e) => DecCoin.fromPartial(e))) || [];
    message.reference_count = object.reference_count ?? 0;
    return message;
  }
};
var ValidatorCurrentRewards = {
  $type: "cosmos.distribution.v1beta1.ValidatorCurrentRewards",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.rewards) {
      DecCoin.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.period !== 0) {
      writer.uint32(16).uint64(message.period);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorCurrentRewards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.rewards.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.period = longToNumber24(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      rewards: globalThis.Array.isArray(object == null ? void 0 : object.rewards) ? object.rewards.map((e) => DecCoin.fromJSON(e)) : [],
      period: isSet58(object.period) ? globalThis.Number(object.period) : 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.rewards) == null ? void 0 : _a.length) {
      obj.rewards = message.rewards.map((e) => DecCoin.toJSON(e));
    }
    if (message.period !== 0) {
      obj.period = Math.round(message.period);
    }
    return obj;
  },
  create(base) {
    return ValidatorCurrentRewards.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseValidatorCurrentRewards();
    message.rewards = ((_a = object.rewards) == null ? void 0 : _a.map((e) => DecCoin.fromPartial(e))) || [];
    message.period = object.period ?? 0;
    return message;
  }
};
var ValidatorAccumulatedCommission = {
  $type: "cosmos.distribution.v1beta1.ValidatorAccumulatedCommission",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.commission) {
      DecCoin.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorAccumulatedCommission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.commission.push(DecCoin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      commission: globalThis.Array.isArray(object == null ? void 0 : object.commission) ? object.commission.map((e) => DecCoin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.commission) == null ? void 0 : _a.length) {
      obj.commission = message.commission.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ValidatorAccumulatedCommission.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseValidatorAccumulatedCommission();
    message.commission = ((_a = object.commission) == null ? void 0 : _a.map((e) => DecCoin.fromPartial(e))) || [];
    return message;
  }
};
var ValidatorOutstandingRewards = {
  $type: "cosmos.distribution.v1beta1.ValidatorOutstandingRewards",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.rewards) {
      DecCoin.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorOutstandingRewards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.rewards.push(DecCoin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      rewards: globalThis.Array.isArray(object == null ? void 0 : object.rewards) ? object.rewards.map((e) => DecCoin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.rewards) == null ? void 0 : _a.length) {
      obj.rewards = message.rewards.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ValidatorOutstandingRewards.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseValidatorOutstandingRewards();
    message.rewards = ((_a = object.rewards) == null ? void 0 : _a.map((e) => DecCoin.fromPartial(e))) || [];
    return message;
  }
};
var ValidatorSlashEvent = {
  $type: "cosmos.distribution.v1beta1.ValidatorSlashEvent",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_period !== 0) {
      writer.uint32(8).uint64(message.validator_period);
    }
    if (message.fraction !== "") {
      writer.uint32(18).string(message.fraction);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorSlashEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.validator_period = longToNumber24(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.fraction = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator_period: isSet58(object.validator_period) ? globalThis.Number(object.validator_period) : 0,
      fraction: isSet58(object.fraction) ? globalThis.String(object.fraction) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_period !== 0) {
      obj.validator_period = Math.round(message.validator_period);
    }
    if (message.fraction !== "") {
      obj.fraction = message.fraction;
    }
    return obj;
  },
  create(base) {
    return ValidatorSlashEvent.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidatorSlashEvent();
    message.validator_period = object.validator_period ?? 0;
    message.fraction = object.fraction ?? "";
    return message;
  }
};
var ValidatorSlashEvents = {
  $type: "cosmos.distribution.v1beta1.ValidatorSlashEvents",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.validator_slash_events) {
      ValidatorSlashEvent.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorSlashEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_slash_events.push(ValidatorSlashEvent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator_slash_events: globalThis.Array.isArray(object == null ? void 0 : object.validator_slash_events) ? object.validator_slash_events.map((e) => ValidatorSlashEvent.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.validator_slash_events) == null ? void 0 : _a.length) {
      obj.validator_slash_events = message.validator_slash_events.map((e) => ValidatorSlashEvent.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ValidatorSlashEvents.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseValidatorSlashEvents();
    message.validator_slash_events = ((_a = object.validator_slash_events) == null ? void 0 : _a.map((e) => ValidatorSlashEvent.fromPartial(e))) || [];
    return message;
  }
};
var FeePool = {
  $type: "cosmos.distribution.v1beta1.FeePool",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.community_pool) {
      DecCoin.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFeePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.community_pool.push(DecCoin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      community_pool: globalThis.Array.isArray(object == null ? void 0 : object.community_pool) ? object.community_pool.map((e) => DecCoin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.community_pool) == null ? void 0 : _a.length) {
      obj.community_pool = message.community_pool.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return FeePool.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseFeePool();
    message.community_pool = ((_a = object.community_pool) == null ? void 0 : _a.map((e) => DecCoin.fromPartial(e))) || [];
    return message;
  }
};
var CommunityPoolSpendProposal = {
  $type: "cosmos.distribution.v1beta1.CommunityPoolSpendProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.recipient !== "") {
      writer.uint32(26).string(message.recipient);
    }
    for (const v of message.amount) {
      Coin.encode(v, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCommunityPoolSpendProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.recipient = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet58(object.title) ? globalThis.String(object.title) : "",
      description: isSet58(object.description) ? globalThis.String(object.description) : "",
      recipient: isSet58(object.recipient) ? globalThis.String(object.recipient) : "",
      amount: globalThis.Array.isArray(object == null ? void 0 : object.amount) ? object.amount.map((e) => Coin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if ((_a = message.amount) == null ? void 0 : _a.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return CommunityPoolSpendProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseCommunityPoolSpendProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.recipient = object.recipient ?? "";
    message.amount = ((_a = object.amount) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    return message;
  }
};
var DelegatorStartingInfo = {
  $type: "cosmos.distribution.v1beta1.DelegatorStartingInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.previous_period !== 0) {
      writer.uint32(8).uint64(message.previous_period);
    }
    if (message.stake !== "") {
      writer.uint32(18).string(message.stake);
    }
    if (message.height !== 0) {
      writer.uint32(24).uint64(message.height);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDelegatorStartingInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.previous_period = longToNumber24(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.stake = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.height = longToNumber24(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      previous_period: isSet58(object.previous_period) ? globalThis.Number(object.previous_period) : 0,
      stake: isSet58(object.stake) ? globalThis.String(object.stake) : "",
      height: isSet58(object.height) ? globalThis.Number(object.height) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.previous_period !== 0) {
      obj.previous_period = Math.round(message.previous_period);
    }
    if (message.stake !== "") {
      obj.stake = message.stake;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },
  create(base) {
    return DelegatorStartingInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDelegatorStartingInfo();
    message.previous_period = object.previous_period ?? 0;
    message.stake = object.stake ?? "";
    message.height = object.height ?? 0;
    return message;
  }
};
var DelegationDelegatorReward = {
  $type: "cosmos.distribution.v1beta1.DelegationDelegatorReward",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_address !== "") {
      writer.uint32(10).string(message.validator_address);
    }
    for (const v of message.reward) {
      DecCoin.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDelegationDelegatorReward();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.reward.push(DecCoin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator_address: isSet58(object.validator_address) ? globalThis.String(object.validator_address) : "",
      reward: globalThis.Array.isArray(object == null ? void 0 : object.reward) ? object.reward.map((e) => DecCoin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if ((_a = message.reward) == null ? void 0 : _a.length) {
      obj.reward = message.reward.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return DelegationDelegatorReward.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseDelegationDelegatorReward();
    message.validator_address = object.validator_address ?? "";
    message.reward = ((_a = object.reward) == null ? void 0 : _a.map((e) => DecCoin.fromPartial(e))) || [];
    return message;
  }
};
var CommunityPoolSpendProposalWithDeposit = {
  $type: "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.recipient !== "") {
      writer.uint32(26).string(message.recipient);
    }
    if (message.amount !== "") {
      writer.uint32(34).string(message.amount);
    }
    if (message.deposit !== "") {
      writer.uint32(42).string(message.deposit);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCommunityPoolSpendProposalWithDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.recipient = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.amount = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.deposit = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet58(object.title) ? globalThis.String(object.title) : "",
      description: isSet58(object.description) ? globalThis.String(object.description) : "",
      recipient: isSet58(object.recipient) ? globalThis.String(object.recipient) : "",
      amount: isSet58(object.amount) ? globalThis.String(object.amount) : "",
      deposit: isSet58(object.deposit) ? globalThis.String(object.deposit) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.deposit !== "") {
      obj.deposit = message.deposit;
    }
    return obj;
  },
  create(base) {
    return CommunityPoolSpendProposalWithDeposit.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCommunityPoolSpendProposalWithDeposit();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.recipient = object.recipient ?? "";
    message.amount = object.amount ?? "";
    message.deposit = object.deposit ?? "";
    return message;
  }
};
function createBaseParams5() {
  return { community_tax: "", base_proposer_reward: "", bonus_proposer_reward: "", withdraw_addr_enabled: false };
}
function createBaseValidatorHistoricalRewards() {
  return { cumulative_reward_ratio: [], reference_count: 0 };
}
function createBaseValidatorCurrentRewards() {
  return { rewards: [], period: 0 };
}
function createBaseValidatorAccumulatedCommission() {
  return { commission: [] };
}
function createBaseValidatorOutstandingRewards() {
  return { rewards: [] };
}
function createBaseValidatorSlashEvent() {
  return { validator_period: 0, fraction: "" };
}
function createBaseValidatorSlashEvents() {
  return { validator_slash_events: [] };
}
function createBaseFeePool() {
  return { community_pool: [] };
}
function createBaseCommunityPoolSpendProposal() {
  return { title: "", description: "", recipient: "", amount: [] };
}
function createBaseDelegatorStartingInfo() {
  return { previous_period: 0, stake: "", height: 0 };
}
function createBaseDelegationDelegatorReward() {
  return { validator_address: "", reward: [] };
}
function createBaseCommunityPoolSpendProposalWithDeposit() {
  return { title: "", description: "", recipient: "", amount: "", deposit: "" };
}
function longToNumber24(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet58(value) {
  return value !== null && value !== void 0;
}
var registry60 = [
  ["/cosmos.distribution.v1beta1.Params", Params5],
  ["/cosmos.distribution.v1beta1.ValidatorHistoricalRewards", ValidatorHistoricalRewards],
  ["/cosmos.distribution.v1beta1.ValidatorCurrentRewards", ValidatorCurrentRewards],
  ["/cosmos.distribution.v1beta1.ValidatorAccumulatedCommission", ValidatorAccumulatedCommission],
  ["/cosmos.distribution.v1beta1.ValidatorOutstandingRewards", ValidatorOutstandingRewards],
  ["/cosmos.distribution.v1beta1.ValidatorSlashEvent", ValidatorSlashEvent],
  ["/cosmos.distribution.v1beta1.ValidatorSlashEvents", ValidatorSlashEvents],
  ["/cosmos.distribution.v1beta1.FeePool", FeePool],
  ["/cosmos.distribution.v1beta1.CommunityPoolSpendProposal", CommunityPoolSpendProposal],
  ["/cosmos.distribution.v1beta1.DelegatorStartingInfo", DelegatorStartingInfo],
  ["/cosmos.distribution.v1beta1.DelegationDelegatorReward", DelegationDelegatorReward],
  ["/cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit", CommunityPoolSpendProposalWithDeposit]
];
var aminoConverters60 = {
  "/cosmos.distribution.v1beta1.Params": {
    aminoType: "cosmos-sdk/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.ValidatorHistoricalRewards": {
    aminoType: "cosmos-sdk/ValidatorHistoricalRewards",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.ValidatorCurrentRewards": {
    aminoType: "cosmos-sdk/ValidatorCurrentRewards",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.ValidatorAccumulatedCommission": {
    aminoType: "cosmos-sdk/ValidatorAccumulatedCommission",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.ValidatorOutstandingRewards": {
    aminoType: "cosmos-sdk/ValidatorOutstandingRewards",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.ValidatorSlashEvent": {
    aminoType: "cosmos-sdk/ValidatorSlashEvent",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.ValidatorSlashEvents": {
    aminoType: "cosmos-sdk/ValidatorSlashEvents",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.FeePool": {
    aminoType: "cosmos-sdk/FeePool",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.CommunityPoolSpendProposal": {
    aminoType: "cosmos-sdk/CommunityPoolSpendProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.DelegatorStartingInfo": {
    aminoType: "cosmos-sdk/DelegatorStartingInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.DelegationDelegatorReward": {
    aminoType: "cosmos-sdk/DelegationDelegatorReward",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit": {
    aminoType: "cosmos-sdk/CommunityPoolSpendProposalWithDeposit",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/distribution/v1beta1/genesis.js
var DelegatorWithdrawInfo = {
  $type: "cosmos.distribution.v1beta1.DelegatorWithdrawInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.withdraw_address !== "") {
      writer.uint32(18).string(message.withdraw_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDelegatorWithdrawInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.withdraw_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet59(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      withdraw_address: isSet59(object.withdraw_address) ? globalThis.String(object.withdraw_address) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.withdraw_address !== "") {
      obj.withdraw_address = message.withdraw_address;
    }
    return obj;
  },
  create(base) {
    return DelegatorWithdrawInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDelegatorWithdrawInfo();
    message.delegator_address = object.delegator_address ?? "";
    message.withdraw_address = object.withdraw_address ?? "";
    return message;
  }
};
var ValidatorOutstandingRewardsRecord = {
  $type: "cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_address !== "") {
      writer.uint32(10).string(message.validator_address);
    }
    for (const v of message.outstanding_rewards) {
      DecCoin.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorOutstandingRewardsRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.outstanding_rewards.push(DecCoin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator_address: isSet59(object.validator_address) ? globalThis.String(object.validator_address) : "",
      outstanding_rewards: globalThis.Array.isArray(object == null ? void 0 : object.outstanding_rewards) ? object.outstanding_rewards.map((e) => DecCoin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if ((_a = message.outstanding_rewards) == null ? void 0 : _a.length) {
      obj.outstanding_rewards = message.outstanding_rewards.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ValidatorOutstandingRewardsRecord.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseValidatorOutstandingRewardsRecord();
    message.validator_address = object.validator_address ?? "";
    message.outstanding_rewards = ((_a = object.outstanding_rewards) == null ? void 0 : _a.map((e) => DecCoin.fromPartial(e))) || [];
    return message;
  }
};
var ValidatorAccumulatedCommissionRecord = {
  $type: "cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_address !== "") {
      writer.uint32(10).string(message.validator_address);
    }
    if (message.accumulated !== void 0) {
      ValidatorAccumulatedCommission.encode(message.accumulated, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorAccumulatedCommissionRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.accumulated = ValidatorAccumulatedCommission.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator_address: isSet59(object.validator_address) ? globalThis.String(object.validator_address) : "",
      accumulated: isSet59(object.accumulated) ? ValidatorAccumulatedCommission.fromJSON(object.accumulated) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if (message.accumulated !== void 0) {
      obj.accumulated = ValidatorAccumulatedCommission.toJSON(message.accumulated);
    }
    return obj;
  },
  create(base) {
    return ValidatorAccumulatedCommissionRecord.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidatorAccumulatedCommissionRecord();
    message.validator_address = object.validator_address ?? "";
    message.accumulated = object.accumulated !== void 0 && object.accumulated !== null ? ValidatorAccumulatedCommission.fromPartial(object.accumulated) : void 0;
    return message;
  }
};
var ValidatorHistoricalRewardsRecord = {
  $type: "cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_address !== "") {
      writer.uint32(10).string(message.validator_address);
    }
    if (message.period !== 0) {
      writer.uint32(16).uint64(message.period);
    }
    if (message.rewards !== void 0) {
      ValidatorHistoricalRewards.encode(message.rewards, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorHistoricalRewardsRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.period = longToNumber25(reader.uint64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.rewards = ValidatorHistoricalRewards.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator_address: isSet59(object.validator_address) ? globalThis.String(object.validator_address) : "",
      period: isSet59(object.period) ? globalThis.Number(object.period) : 0,
      rewards: isSet59(object.rewards) ? ValidatorHistoricalRewards.fromJSON(object.rewards) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if (message.period !== 0) {
      obj.period = Math.round(message.period);
    }
    if (message.rewards !== void 0) {
      obj.rewards = ValidatorHistoricalRewards.toJSON(message.rewards);
    }
    return obj;
  },
  create(base) {
    return ValidatorHistoricalRewardsRecord.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidatorHistoricalRewardsRecord();
    message.validator_address = object.validator_address ?? "";
    message.period = object.period ?? 0;
    message.rewards = object.rewards !== void 0 && object.rewards !== null ? ValidatorHistoricalRewards.fromPartial(object.rewards) : void 0;
    return message;
  }
};
var ValidatorCurrentRewardsRecord = {
  $type: "cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_address !== "") {
      writer.uint32(10).string(message.validator_address);
    }
    if (message.rewards !== void 0) {
      ValidatorCurrentRewards.encode(message.rewards, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorCurrentRewardsRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.rewards = ValidatorCurrentRewards.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator_address: isSet59(object.validator_address) ? globalThis.String(object.validator_address) : "",
      rewards: isSet59(object.rewards) ? ValidatorCurrentRewards.fromJSON(object.rewards) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if (message.rewards !== void 0) {
      obj.rewards = ValidatorCurrentRewards.toJSON(message.rewards);
    }
    return obj;
  },
  create(base) {
    return ValidatorCurrentRewardsRecord.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidatorCurrentRewardsRecord();
    message.validator_address = object.validator_address ?? "";
    message.rewards = object.rewards !== void 0 && object.rewards !== null ? ValidatorCurrentRewards.fromPartial(object.rewards) : void 0;
    return message;
  }
};
var DelegatorStartingInfoRecord = {
  $type: "cosmos.distribution.v1beta1.DelegatorStartingInfoRecord",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.validator_address !== "") {
      writer.uint32(18).string(message.validator_address);
    }
    if (message.starting_info !== void 0) {
      DelegatorStartingInfo.encode(message.starting_info, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDelegatorStartingInfoRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.starting_info = DelegatorStartingInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet59(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      validator_address: isSet59(object.validator_address) ? globalThis.String(object.validator_address) : "",
      starting_info: isSet59(object.starting_info) ? DelegatorStartingInfo.fromJSON(object.starting_info) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if (message.starting_info !== void 0) {
      obj.starting_info = DelegatorStartingInfo.toJSON(message.starting_info);
    }
    return obj;
  },
  create(base) {
    return DelegatorStartingInfoRecord.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDelegatorStartingInfoRecord();
    message.delegator_address = object.delegator_address ?? "";
    message.validator_address = object.validator_address ?? "";
    message.starting_info = object.starting_info !== void 0 && object.starting_info !== null ? DelegatorStartingInfo.fromPartial(object.starting_info) : void 0;
    return message;
  }
};
var ValidatorSlashEventRecord = {
  $type: "cosmos.distribution.v1beta1.ValidatorSlashEventRecord",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_address !== "") {
      writer.uint32(10).string(message.validator_address);
    }
    if (message.height !== 0) {
      writer.uint32(16).uint64(message.height);
    }
    if (message.period !== 0) {
      writer.uint32(24).uint64(message.period);
    }
    if (message.validator_slash_event !== void 0) {
      ValidatorSlashEvent.encode(message.validator_slash_event, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorSlashEventRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.height = longToNumber25(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.period = longToNumber25(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.validator_slash_event = ValidatorSlashEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator_address: isSet59(object.validator_address) ? globalThis.String(object.validator_address) : "",
      height: isSet59(object.height) ? globalThis.Number(object.height) : 0,
      period: isSet59(object.period) ? globalThis.Number(object.period) : 0,
      validator_slash_event: isSet59(object.validator_slash_event) ? ValidatorSlashEvent.fromJSON(object.validator_slash_event) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.period !== 0) {
      obj.period = Math.round(message.period);
    }
    if (message.validator_slash_event !== void 0) {
      obj.validator_slash_event = ValidatorSlashEvent.toJSON(message.validator_slash_event);
    }
    return obj;
  },
  create(base) {
    return ValidatorSlashEventRecord.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidatorSlashEventRecord();
    message.validator_address = object.validator_address ?? "";
    message.height = object.height ?? 0;
    message.period = object.period ?? 0;
    message.validator_slash_event = object.validator_slash_event !== void 0 && object.validator_slash_event !== null ? ValidatorSlashEvent.fromPartial(object.validator_slash_event) : void 0;
    return message;
  }
};
var GenesisState8 = {
  $type: "cosmos.distribution.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params5.encode(message.params, writer.uint32(10).fork()).join();
    }
    if (message.fee_pool !== void 0) {
      FeePool.encode(message.fee_pool, writer.uint32(18).fork()).join();
    }
    for (const v of message.delegator_withdraw_infos) {
      DelegatorWithdrawInfo.encode(v, writer.uint32(26).fork()).join();
    }
    if (message.previous_proposer !== "") {
      writer.uint32(34).string(message.previous_proposer);
    }
    for (const v of message.outstanding_rewards) {
      ValidatorOutstandingRewardsRecord.encode(v, writer.uint32(42).fork()).join();
    }
    for (const v of message.validator_accumulated_commissions) {
      ValidatorAccumulatedCommissionRecord.encode(v, writer.uint32(50).fork()).join();
    }
    for (const v of message.validator_historical_rewards) {
      ValidatorHistoricalRewardsRecord.encode(v, writer.uint32(58).fork()).join();
    }
    for (const v of message.validator_current_rewards) {
      ValidatorCurrentRewardsRecord.encode(v, writer.uint32(66).fork()).join();
    }
    for (const v of message.delegator_starting_infos) {
      DelegatorStartingInfoRecord.encode(v, writer.uint32(74).fork()).join();
    }
    for (const v of message.validator_slash_events) {
      ValidatorSlashEventRecord.encode(v, writer.uint32(82).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState8();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params5.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.fee_pool = FeePool.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.delegator_withdraw_infos.push(DelegatorWithdrawInfo.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.previous_proposer = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.outstanding_rewards.push(ValidatorOutstandingRewardsRecord.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.validator_accumulated_commissions.push(ValidatorAccumulatedCommissionRecord.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.validator_historical_rewards.push(ValidatorHistoricalRewardsRecord.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.validator_current_rewards.push(ValidatorCurrentRewardsRecord.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.delegator_starting_infos.push(DelegatorStartingInfoRecord.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.validator_slash_events.push(ValidatorSlashEventRecord.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet59(object.params) ? Params5.fromJSON(object.params) : void 0,
      fee_pool: isSet59(object.fee_pool) ? FeePool.fromJSON(object.fee_pool) : void 0,
      delegator_withdraw_infos: globalThis.Array.isArray(object == null ? void 0 : object.delegator_withdraw_infos) ? object.delegator_withdraw_infos.map((e) => DelegatorWithdrawInfo.fromJSON(e)) : [],
      previous_proposer: isSet59(object.previous_proposer) ? globalThis.String(object.previous_proposer) : "",
      outstanding_rewards: globalThis.Array.isArray(object == null ? void 0 : object.outstanding_rewards) ? object.outstanding_rewards.map((e) => ValidatorOutstandingRewardsRecord.fromJSON(e)) : [],
      validator_accumulated_commissions: globalThis.Array.isArray(object == null ? void 0 : object.validator_accumulated_commissions) ? object.validator_accumulated_commissions.map((e) => ValidatorAccumulatedCommissionRecord.fromJSON(e)) : [],
      validator_historical_rewards: globalThis.Array.isArray(object == null ? void 0 : object.validator_historical_rewards) ? object.validator_historical_rewards.map((e) => ValidatorHistoricalRewardsRecord.fromJSON(e)) : [],
      validator_current_rewards: globalThis.Array.isArray(object == null ? void 0 : object.validator_current_rewards) ? object.validator_current_rewards.map((e) => ValidatorCurrentRewardsRecord.fromJSON(e)) : [],
      delegator_starting_infos: globalThis.Array.isArray(object == null ? void 0 : object.delegator_starting_infos) ? object.delegator_starting_infos.map((e) => DelegatorStartingInfoRecord.fromJSON(e)) : [],
      validator_slash_events: globalThis.Array.isArray(object == null ? void 0 : object.validator_slash_events) ? object.validator_slash_events.map((e) => ValidatorSlashEventRecord.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b, _c, _d, _e, _f, _g;
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params5.toJSON(message.params);
    }
    if (message.fee_pool !== void 0) {
      obj.fee_pool = FeePool.toJSON(message.fee_pool);
    }
    if ((_a = message.delegator_withdraw_infos) == null ? void 0 : _a.length) {
      obj.delegator_withdraw_infos = message.delegator_withdraw_infos.map((e) => DelegatorWithdrawInfo.toJSON(e));
    }
    if (message.previous_proposer !== "") {
      obj.previous_proposer = message.previous_proposer;
    }
    if ((_b = message.outstanding_rewards) == null ? void 0 : _b.length) {
      obj.outstanding_rewards = message.outstanding_rewards.map((e) => ValidatorOutstandingRewardsRecord.toJSON(e));
    }
    if ((_c = message.validator_accumulated_commissions) == null ? void 0 : _c.length) {
      obj.validator_accumulated_commissions = message.validator_accumulated_commissions.map((e) => ValidatorAccumulatedCommissionRecord.toJSON(e));
    }
    if ((_d = message.validator_historical_rewards) == null ? void 0 : _d.length) {
      obj.validator_historical_rewards = message.validator_historical_rewards.map((e) => ValidatorHistoricalRewardsRecord.toJSON(e));
    }
    if ((_e = message.validator_current_rewards) == null ? void 0 : _e.length) {
      obj.validator_current_rewards = message.validator_current_rewards.map((e) => ValidatorCurrentRewardsRecord.toJSON(e));
    }
    if ((_f = message.delegator_starting_infos) == null ? void 0 : _f.length) {
      obj.delegator_starting_infos = message.delegator_starting_infos.map((e) => DelegatorStartingInfoRecord.toJSON(e));
    }
    if ((_g = message.validator_slash_events) == null ? void 0 : _g.length) {
      obj.validator_slash_events = message.validator_slash_events.map((e) => ValidatorSlashEventRecord.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState8.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e, _f, _g;
    const message = createBaseGenesisState8();
    message.params = object.params !== void 0 && object.params !== null ? Params5.fromPartial(object.params) : void 0;
    message.fee_pool = object.fee_pool !== void 0 && object.fee_pool !== null ? FeePool.fromPartial(object.fee_pool) : void 0;
    message.delegator_withdraw_infos = ((_a = object.delegator_withdraw_infos) == null ? void 0 : _a.map((e) => DelegatorWithdrawInfo.fromPartial(e))) || [];
    message.previous_proposer = object.previous_proposer ?? "";
    message.outstanding_rewards = ((_b = object.outstanding_rewards) == null ? void 0 : _b.map((e) => ValidatorOutstandingRewardsRecord.fromPartial(e))) || [];
    message.validator_accumulated_commissions = ((_c = object.validator_accumulated_commissions) == null ? void 0 : _c.map((e) => ValidatorAccumulatedCommissionRecord.fromPartial(e))) || [];
    message.validator_historical_rewards = ((_d = object.validator_historical_rewards) == null ? void 0 : _d.map((e) => ValidatorHistoricalRewardsRecord.fromPartial(e))) || [];
    message.validator_current_rewards = ((_e = object.validator_current_rewards) == null ? void 0 : _e.map((e) => ValidatorCurrentRewardsRecord.fromPartial(e))) || [];
    message.delegator_starting_infos = ((_f = object.delegator_starting_infos) == null ? void 0 : _f.map((e) => DelegatorStartingInfoRecord.fromPartial(e))) || [];
    message.validator_slash_events = ((_g = object.validator_slash_events) == null ? void 0 : _g.map((e) => ValidatorSlashEventRecord.fromPartial(e))) || [];
    return message;
  }
};
function createBaseDelegatorWithdrawInfo() {
  return { delegator_address: "", withdraw_address: "" };
}
function createBaseValidatorOutstandingRewardsRecord() {
  return { validator_address: "", outstanding_rewards: [] };
}
function createBaseValidatorAccumulatedCommissionRecord() {
  return { validator_address: "", accumulated: void 0 };
}
function createBaseValidatorHistoricalRewardsRecord() {
  return { validator_address: "", period: 0, rewards: void 0 };
}
function createBaseValidatorCurrentRewardsRecord() {
  return { validator_address: "", rewards: void 0 };
}
function createBaseDelegatorStartingInfoRecord() {
  return { delegator_address: "", validator_address: "", starting_info: void 0 };
}
function createBaseValidatorSlashEventRecord() {
  return { validator_address: "", height: 0, period: 0, validator_slash_event: void 0 };
}
function createBaseGenesisState8() {
  return {
    params: void 0,
    fee_pool: void 0,
    delegator_withdraw_infos: [],
    previous_proposer: "",
    outstanding_rewards: [],
    validator_accumulated_commissions: [],
    validator_historical_rewards: [],
    validator_current_rewards: [],
    delegator_starting_infos: [],
    validator_slash_events: []
  };
}
function longToNumber25(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet59(value) {
  return value !== null && value !== void 0;
}
var registry61 = [
  ["/cosmos.distribution.v1beta1.DelegatorWithdrawInfo", DelegatorWithdrawInfo],
  ["/cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord", ValidatorOutstandingRewardsRecord],
  ["/cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord", ValidatorAccumulatedCommissionRecord],
  ["/cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord", ValidatorHistoricalRewardsRecord],
  ["/cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord", ValidatorCurrentRewardsRecord],
  ["/cosmos.distribution.v1beta1.DelegatorStartingInfoRecord", DelegatorStartingInfoRecord],
  ["/cosmos.distribution.v1beta1.ValidatorSlashEventRecord", ValidatorSlashEventRecord],
  ["/cosmos.distribution.v1beta1.GenesisState", GenesisState8]
];
var aminoConverters61 = {
  "/cosmos.distribution.v1beta1.DelegatorWithdrawInfo": {
    aminoType: "cosmos-sdk/DelegatorWithdrawInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord": {
    aminoType: "cosmos-sdk/ValidatorOutstandingRewardsRecord",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord": {
    aminoType: "cosmos-sdk/ValidatorAccumulatedCommissionRecord",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord": {
    aminoType: "cosmos-sdk/ValidatorHistoricalRewardsRecord",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord": {
    aminoType: "cosmos-sdk/ValidatorCurrentRewardsRecord",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.DelegatorStartingInfoRecord": {
    aminoType: "cosmos-sdk/DelegatorStartingInfoRecord",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.ValidatorSlashEventRecord": {
    aminoType: "cosmos-sdk/ValidatorSlashEventRecord",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/distribution/v1beta1/query.js
var QueryParamsRequest4 = {
  $type: "cosmos.distribution.v1beta1.QueryParamsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest4();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryParamsRequest4.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest4();
    return message;
  }
};
var QueryParamsResponse4 = {
  $type: "cosmos.distribution.v1beta1.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params5.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse4();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params5.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { params: isSet60(object.params) ? Params5.fromJSON(object.params) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params5.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse4.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse4();
    message.params = object.params !== void 0 && object.params !== null ? Params5.fromPartial(object.params) : void 0;
    return message;
  }
};
var QueryValidatorOutstandingRewardsRequest = {
  $type: "cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_address !== "") {
      writer.uint32(10).string(message.validator_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorOutstandingRewardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { validator_address: isSet60(object.validator_address) ? globalThis.String(object.validator_address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    return obj;
  },
  create(base) {
    return QueryValidatorOutstandingRewardsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryValidatorOutstandingRewardsRequest();
    message.validator_address = object.validator_address ?? "";
    return message;
  }
};
var QueryValidatorOutstandingRewardsResponse = {
  $type: "cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.rewards !== void 0) {
      ValidatorOutstandingRewards.encode(message.rewards, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorOutstandingRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.rewards = ValidatorOutstandingRewards.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { rewards: isSet60(object.rewards) ? ValidatorOutstandingRewards.fromJSON(object.rewards) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.rewards !== void 0) {
      obj.rewards = ValidatorOutstandingRewards.toJSON(message.rewards);
    }
    return obj;
  },
  create(base) {
    return QueryValidatorOutstandingRewardsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryValidatorOutstandingRewardsResponse();
    message.rewards = object.rewards !== void 0 && object.rewards !== null ? ValidatorOutstandingRewards.fromPartial(object.rewards) : void 0;
    return message;
  }
};
var QueryValidatorCommissionRequest = {
  $type: "cosmos.distribution.v1beta1.QueryValidatorCommissionRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_address !== "") {
      writer.uint32(10).string(message.validator_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorCommissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { validator_address: isSet60(object.validator_address) ? globalThis.String(object.validator_address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    return obj;
  },
  create(base) {
    return QueryValidatorCommissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryValidatorCommissionRequest();
    message.validator_address = object.validator_address ?? "";
    return message;
  }
};
var QueryValidatorCommissionResponse = {
  $type: "cosmos.distribution.v1beta1.QueryValidatorCommissionResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.commission !== void 0) {
      ValidatorAccumulatedCommission.encode(message.commission, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorCommissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.commission = ValidatorAccumulatedCommission.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      commission: isSet60(object.commission) ? ValidatorAccumulatedCommission.fromJSON(object.commission) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.commission !== void 0) {
      obj.commission = ValidatorAccumulatedCommission.toJSON(message.commission);
    }
    return obj;
  },
  create(base) {
    return QueryValidatorCommissionResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryValidatorCommissionResponse();
    message.commission = object.commission !== void 0 && object.commission !== null ? ValidatorAccumulatedCommission.fromPartial(object.commission) : void 0;
    return message;
  }
};
var QueryValidatorSlashesRequest = {
  $type: "cosmos.distribution.v1beta1.QueryValidatorSlashesRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_address !== "") {
      writer.uint32(10).string(message.validator_address);
    }
    if (message.starting_height !== 0) {
      writer.uint32(16).uint64(message.starting_height);
    }
    if (message.ending_height !== 0) {
      writer.uint32(24).uint64(message.ending_height);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorSlashesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.starting_height = longToNumber26(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.ending_height = longToNumber26(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator_address: isSet60(object.validator_address) ? globalThis.String(object.validator_address) : "",
      starting_height: isSet60(object.starting_height) ? globalThis.Number(object.starting_height) : 0,
      ending_height: isSet60(object.ending_height) ? globalThis.Number(object.ending_height) : 0,
      pagination: isSet60(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if (message.starting_height !== 0) {
      obj.starting_height = Math.round(message.starting_height);
    }
    if (message.ending_height !== 0) {
      obj.ending_height = Math.round(message.ending_height);
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryValidatorSlashesRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryValidatorSlashesRequest();
    message.validator_address = object.validator_address ?? "";
    message.starting_height = object.starting_height ?? 0;
    message.ending_height = object.ending_height ?? 0;
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryValidatorSlashesResponse = {
  $type: "cosmos.distribution.v1beta1.QueryValidatorSlashesResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.slashes) {
      ValidatorSlashEvent.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorSlashesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.slashes.push(ValidatorSlashEvent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      slashes: globalThis.Array.isArray(object == null ? void 0 : object.slashes) ? object.slashes.map((e) => ValidatorSlashEvent.fromJSON(e)) : [],
      pagination: isSet60(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.slashes) == null ? void 0 : _a.length) {
      obj.slashes = message.slashes.map((e) => ValidatorSlashEvent.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryValidatorSlashesResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryValidatorSlashesResponse();
    message.slashes = ((_a = object.slashes) == null ? void 0 : _a.map((e) => ValidatorSlashEvent.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryDelegationRewardsRequest = {
  $type: "cosmos.distribution.v1beta1.QueryDelegationRewardsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.validator_address !== "") {
      writer.uint32(18).string(message.validator_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegationRewardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet60(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      validator_address: isSet60(object.validator_address) ? globalThis.String(object.validator_address) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    return obj;
  },
  create(base) {
    return QueryDelegationRewardsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDelegationRewardsRequest();
    message.delegator_address = object.delegator_address ?? "";
    message.validator_address = object.validator_address ?? "";
    return message;
  }
};
var QueryDelegationRewardsResponse = {
  $type: "cosmos.distribution.v1beta1.QueryDelegationRewardsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.rewards) {
      DecCoin.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegationRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.rewards.push(DecCoin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      rewards: globalThis.Array.isArray(object == null ? void 0 : object.rewards) ? object.rewards.map((e) => DecCoin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.rewards) == null ? void 0 : _a.length) {
      obj.rewards = message.rewards.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return QueryDelegationRewardsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryDelegationRewardsResponse();
    message.rewards = ((_a = object.rewards) == null ? void 0 : _a.map((e) => DecCoin.fromPartial(e))) || [];
    return message;
  }
};
var QueryDelegationTotalRewardsRequest = {
  $type: "cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegationTotalRewardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { delegator_address: isSet60(object.delegator_address) ? globalThis.String(object.delegator_address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    return obj;
  },
  create(base) {
    return QueryDelegationTotalRewardsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDelegationTotalRewardsRequest();
    message.delegator_address = object.delegator_address ?? "";
    return message;
  }
};
var QueryDelegationTotalRewardsResponse = {
  $type: "cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.rewards) {
      DelegationDelegatorReward.encode(v, writer.uint32(10).fork()).join();
    }
    for (const v of message.total) {
      DecCoin.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegationTotalRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.rewards.push(DelegationDelegatorReward.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.total.push(DecCoin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      rewards: globalThis.Array.isArray(object == null ? void 0 : object.rewards) ? object.rewards.map((e) => DelegationDelegatorReward.fromJSON(e)) : [],
      total: globalThis.Array.isArray(object == null ? void 0 : object.total) ? object.total.map((e) => DecCoin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if ((_a = message.rewards) == null ? void 0 : _a.length) {
      obj.rewards = message.rewards.map((e) => DelegationDelegatorReward.toJSON(e));
    }
    if ((_b = message.total) == null ? void 0 : _b.length) {
      obj.total = message.total.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return QueryDelegationTotalRewardsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseQueryDelegationTotalRewardsResponse();
    message.rewards = ((_a = object.rewards) == null ? void 0 : _a.map((e) => DelegationDelegatorReward.fromPartial(e))) || [];
    message.total = ((_b = object.total) == null ? void 0 : _b.map((e) => DecCoin.fromPartial(e))) || [];
    return message;
  }
};
var QueryDelegatorValidatorsRequest = {
  $type: "cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorValidatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { delegator_address: isSet60(object.delegator_address) ? globalThis.String(object.delegator_address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    return obj;
  },
  create(base) {
    return QueryDelegatorValidatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDelegatorValidatorsRequest();
    message.delegator_address = object.delegator_address ?? "";
    return message;
  }
};
var QueryDelegatorValidatorsResponse = {
  $type: "cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.validators) {
      writer.uint32(10).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorValidatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validators.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validators: globalThis.Array.isArray(object == null ? void 0 : object.validators) ? object.validators.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.validators) == null ? void 0 : _a.length) {
      obj.validators = message.validators;
    }
    return obj;
  },
  create(base) {
    return QueryDelegatorValidatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryDelegatorValidatorsResponse();
    message.validators = ((_a = object.validators) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var QueryDelegatorWithdrawAddressRequest = {
  $type: "cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorWithdrawAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { delegator_address: isSet60(object.delegator_address) ? globalThis.String(object.delegator_address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    return obj;
  },
  create(base) {
    return QueryDelegatorWithdrawAddressRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDelegatorWithdrawAddressRequest();
    message.delegator_address = object.delegator_address ?? "";
    return message;
  }
};
var QueryDelegatorWithdrawAddressResponse = {
  $type: "cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.withdraw_address !== "") {
      writer.uint32(10).string(message.withdraw_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorWithdrawAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.withdraw_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { withdraw_address: isSet60(object.withdraw_address) ? globalThis.String(object.withdraw_address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.withdraw_address !== "") {
      obj.withdraw_address = message.withdraw_address;
    }
    return obj;
  },
  create(base) {
    return QueryDelegatorWithdrawAddressResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDelegatorWithdrawAddressResponse();
    message.withdraw_address = object.withdraw_address ?? "";
    return message;
  }
};
var QueryCommunityPoolRequest = {
  $type: "cosmos.distribution.v1beta1.QueryCommunityPoolRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryCommunityPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryCommunityPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryCommunityPoolRequest();
    return message;
  }
};
var QueryCommunityPoolResponse = {
  $type: "cosmos.distribution.v1beta1.QueryCommunityPoolResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.pool) {
      DecCoin.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryCommunityPoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pool.push(DecCoin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { pool: globalThis.Array.isArray(object == null ? void 0 : object.pool) ? object.pool.map((e) => DecCoin.fromJSON(e)) : [] };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.pool) == null ? void 0 : _a.length) {
      obj.pool = message.pool.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return QueryCommunityPoolResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryCommunityPoolResponse();
    message.pool = ((_a = object.pool) == null ? void 0 : _a.map((e) => DecCoin.fromPartial(e))) || [];
    return message;
  }
};
function createBaseQueryParamsRequest4() {
  return {};
}
function createBaseQueryParamsResponse4() {
  return { params: void 0 };
}
function createBaseQueryValidatorOutstandingRewardsRequest() {
  return { validator_address: "" };
}
function createBaseQueryValidatorOutstandingRewardsResponse() {
  return { rewards: void 0 };
}
function createBaseQueryValidatorCommissionRequest() {
  return { validator_address: "" };
}
function createBaseQueryValidatorCommissionResponse() {
  return { commission: void 0 };
}
function createBaseQueryValidatorSlashesRequest() {
  return { validator_address: "", starting_height: 0, ending_height: 0, pagination: void 0 };
}
function createBaseQueryValidatorSlashesResponse() {
  return { slashes: [], pagination: void 0 };
}
function createBaseQueryDelegationRewardsRequest() {
  return { delegator_address: "", validator_address: "" };
}
function createBaseQueryDelegationRewardsResponse() {
  return { rewards: [] };
}
function createBaseQueryDelegationTotalRewardsRequest() {
  return { delegator_address: "" };
}
function createBaseQueryDelegationTotalRewardsResponse() {
  return { rewards: [], total: [] };
}
function createBaseQueryDelegatorValidatorsRequest() {
  return { delegator_address: "" };
}
function createBaseQueryDelegatorValidatorsResponse() {
  return { validators: [] };
}
function createBaseQueryDelegatorWithdrawAddressRequest() {
  return { delegator_address: "" };
}
function createBaseQueryDelegatorWithdrawAddressResponse() {
  return { withdraw_address: "" };
}
function createBaseQueryCommunityPoolRequest() {
  return {};
}
function createBaseQueryCommunityPoolResponse() {
  return { pool: [] };
}
function longToNumber26(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet60(value) {
  return value !== null && value !== void 0;
}
var registry62 = [
  ["/cosmos.distribution.v1beta1.QueryParamsRequest", QueryParamsRequest4],
  ["/cosmos.distribution.v1beta1.QueryParamsResponse", QueryParamsResponse4],
  ["/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest", QueryValidatorOutstandingRewardsRequest],
  ["/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse", QueryValidatorOutstandingRewardsResponse],
  ["/cosmos.distribution.v1beta1.QueryValidatorCommissionRequest", QueryValidatorCommissionRequest],
  ["/cosmos.distribution.v1beta1.QueryValidatorCommissionResponse", QueryValidatorCommissionResponse],
  ["/cosmos.distribution.v1beta1.QueryValidatorSlashesRequest", QueryValidatorSlashesRequest],
  ["/cosmos.distribution.v1beta1.QueryValidatorSlashesResponse", QueryValidatorSlashesResponse],
  ["/cosmos.distribution.v1beta1.QueryDelegationRewardsRequest", QueryDelegationRewardsRequest],
  ["/cosmos.distribution.v1beta1.QueryDelegationRewardsResponse", QueryDelegationRewardsResponse],
  ["/cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest", QueryDelegationTotalRewardsRequest],
  ["/cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse", QueryDelegationTotalRewardsResponse],
  ["/cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest", QueryDelegatorValidatorsRequest],
  ["/cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse", QueryDelegatorValidatorsResponse],
  ["/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest", QueryDelegatorWithdrawAddressRequest],
  ["/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse", QueryDelegatorWithdrawAddressResponse],
  ["/cosmos.distribution.v1beta1.QueryCommunityPoolRequest", QueryCommunityPoolRequest],
  ["/cosmos.distribution.v1beta1.QueryCommunityPoolResponse", QueryCommunityPoolResponse]
];
var aminoConverters62 = {
  "/cosmos.distribution.v1beta1.QueryParamsRequest": {
    aminoType: "cosmos-sdk/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryParamsResponse": {
    aminoType: "cosmos-sdk/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest": {
    aminoType: "cosmos-sdk/QueryValidatorOutstandingRewardsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse": {
    aminoType: "cosmos-sdk/QueryValidatorOutstandingRewardsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryValidatorCommissionRequest": {
    aminoType: "cosmos-sdk/QueryValidatorCommissionRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryValidatorCommissionResponse": {
    aminoType: "cosmos-sdk/QueryValidatorCommissionResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryValidatorSlashesRequest": {
    aminoType: "cosmos-sdk/QueryValidatorSlashesRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryValidatorSlashesResponse": {
    aminoType: "cosmos-sdk/QueryValidatorSlashesResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryDelegationRewardsRequest": {
    aminoType: "cosmos-sdk/QueryDelegationRewardsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryDelegationRewardsResponse": {
    aminoType: "cosmos-sdk/QueryDelegationRewardsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest": {
    aminoType: "cosmos-sdk/QueryDelegationTotalRewardsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse": {
    aminoType: "cosmos-sdk/QueryDelegationTotalRewardsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest": {
    aminoType: "cosmos-sdk/QueryDelegatorValidatorsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse": {
    aminoType: "cosmos-sdk/QueryDelegatorValidatorsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest": {
    aminoType: "cosmos-sdk/QueryDelegatorWithdrawAddressRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse": {
    aminoType: "cosmos-sdk/QueryDelegatorWithdrawAddressResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryCommunityPoolRequest": {
    aminoType: "cosmos-sdk/QueryCommunityPoolRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.QueryCommunityPoolResponse": {
    aminoType: "cosmos-sdk/QueryCommunityPoolResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/distribution/v1beta1/tx.js
var MsgSetWithdrawAddress = {
  $type: "cosmos.distribution.v1beta1.MsgSetWithdrawAddress",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.withdraw_address !== "") {
      writer.uint32(18).string(message.withdraw_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgSetWithdrawAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.withdraw_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet61(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      withdraw_address: isSet61(object.withdraw_address) ? globalThis.String(object.withdraw_address) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.withdraw_address !== "") {
      obj.withdraw_address = message.withdraw_address;
    }
    return obj;
  },
  create(base) {
    return MsgSetWithdrawAddress.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgSetWithdrawAddress();
    message.delegator_address = object.delegator_address ?? "";
    message.withdraw_address = object.withdraw_address ?? "";
    return message;
  }
};
var MsgSetWithdrawAddressResponse = {
  $type: "cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgSetWithdrawAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgSetWithdrawAddressResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgSetWithdrawAddressResponse();
    return message;
  }
};
var MsgWithdrawDelegatorReward = {
  $type: "cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.validator_address !== "") {
      writer.uint32(18).string(message.validator_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawDelegatorReward();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet61(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      validator_address: isSet61(object.validator_address) ? globalThis.String(object.validator_address) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    return obj;
  },
  create(base) {
    return MsgWithdrawDelegatorReward.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgWithdrawDelegatorReward();
    message.delegator_address = object.delegator_address ?? "";
    message.validator_address = object.validator_address ?? "";
    return message;
  }
};
var MsgWithdrawDelegatorRewardResponse = {
  $type: "cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawDelegatorRewardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgWithdrawDelegatorRewardResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgWithdrawDelegatorRewardResponse();
    return message;
  }
};
var MsgWithdrawValidatorCommission = {
  $type: "cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_address !== "") {
      writer.uint32(10).string(message.validator_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawValidatorCommission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { validator_address: isSet61(object.validator_address) ? globalThis.String(object.validator_address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    return obj;
  },
  create(base) {
    return MsgWithdrawValidatorCommission.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgWithdrawValidatorCommission();
    message.validator_address = object.validator_address ?? "";
    return message;
  }
};
var MsgWithdrawValidatorCommissionResponse = {
  $type: "cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawValidatorCommissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgWithdrawValidatorCommissionResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgWithdrawValidatorCommissionResponse();
    return message;
  }
};
var MsgFundCommunityPool = {
  $type: "cosmos.distribution.v1beta1.MsgFundCommunityPool",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.amount) {
      Coin.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.depositor !== "") {
      writer.uint32(18).string(message.depositor);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgFundCommunityPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.depositor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      amount: globalThis.Array.isArray(object == null ? void 0 : object.amount) ? object.amount.map((e) => Coin.fromJSON(e)) : [],
      depositor: isSet61(object.depositor) ? globalThis.String(object.depositor) : ""
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.amount) == null ? void 0 : _a.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    if (message.depositor !== "") {
      obj.depositor = message.depositor;
    }
    return obj;
  },
  create(base) {
    return MsgFundCommunityPool.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgFundCommunityPool();
    message.amount = ((_a = object.amount) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    message.depositor = object.depositor ?? "";
    return message;
  }
};
var MsgFundCommunityPoolResponse = {
  $type: "cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgFundCommunityPoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgFundCommunityPoolResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgFundCommunityPoolResponse();
    return message;
  }
};
function createBaseMsgSetWithdrawAddress() {
  return { delegator_address: "", withdraw_address: "" };
}
function createBaseMsgSetWithdrawAddressResponse() {
  return {};
}
function createBaseMsgWithdrawDelegatorReward() {
  return { delegator_address: "", validator_address: "" };
}
function createBaseMsgWithdrawDelegatorRewardResponse() {
  return {};
}
function createBaseMsgWithdrawValidatorCommission() {
  return { validator_address: "" };
}
function createBaseMsgWithdrawValidatorCommissionResponse() {
  return {};
}
function createBaseMsgFundCommunityPool() {
  return { amount: [], depositor: "" };
}
function createBaseMsgFundCommunityPoolResponse() {
  return {};
}
function isSet61(value) {
  return value !== null && value !== void 0;
}
var registry63 = [
  ["/cosmos.distribution.v1beta1.MsgSetWithdrawAddress", MsgSetWithdrawAddress],
  ["/cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse", MsgSetWithdrawAddressResponse],
  ["/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward", MsgWithdrawDelegatorReward],
  ["/cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse", MsgWithdrawDelegatorRewardResponse],
  ["/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission", MsgWithdrawValidatorCommission],
  ["/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse", MsgWithdrawValidatorCommissionResponse],
  ["/cosmos.distribution.v1beta1.MsgFundCommunityPool", MsgFundCommunityPool],
  ["/cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse", MsgFundCommunityPoolResponse]
];
var aminoConverters63 = {
  "/cosmos.distribution.v1beta1.MsgSetWithdrawAddress": {
    aminoType: "cosmos-sdk/MsgSetWithdrawAddress",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse": {
    aminoType: "cosmos-sdk/MsgSetWithdrawAddressResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward": {
    aminoType: "cosmos-sdk/MsgWithdrawDelegatorReward",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse": {
    aminoType: "cosmos-sdk/MsgWithdrawDelegatorRewardResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission": {
    aminoType: "cosmos-sdk/MsgWithdrawValidatorCommission",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse": {
    aminoType: "cosmos-sdk/MsgWithdrawValidatorCommissionResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.MsgFundCommunityPool": {
    aminoType: "cosmos-sdk/MsgFundCommunityPool",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse": {
    aminoType: "cosmos-sdk/MsgFundCommunityPoolResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/evidence/v1beta1/index.js
var v1beta1_exports15 = {};
__export(v1beta1_exports15, {
  Equivocation: () => Equivocation,
  GenesisState: () => GenesisState9,
  MsgSubmitEvidence: () => MsgSubmitEvidence,
  MsgSubmitEvidenceResponse: () => MsgSubmitEvidenceResponse,
  QueryAllEvidenceRequest: () => QueryAllEvidenceRequest,
  QueryAllEvidenceResponse: () => QueryAllEvidenceResponse,
  QueryEvidenceRequest: () => QueryEvidenceRequest,
  QueryEvidenceResponse: () => QueryEvidenceResponse
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/evidence/v1beta1/evidence.js
var Equivocation = {
  $type: "cosmos.evidence.v1beta1.Equivocation",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    if (message.time !== void 0) {
      Timestamp.encode(toTimestamp6(message.time), writer.uint32(18).fork()).join();
    }
    if (message.power !== 0) {
      writer.uint32(24).int64(message.power);
    }
    if (message.consensus_address !== "") {
      writer.uint32(34).string(message.consensus_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEquivocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber27(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.time = fromTimestamp6(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.power = longToNumber27(reader.int64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.consensus_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet62(object.height) ? globalThis.Number(object.height) : 0,
      time: isSet62(object.time) ? fromJsonTimestamp6(object.time) : void 0,
      power: isSet62(object.power) ? globalThis.Number(object.power) : 0,
      consensus_address: isSet62(object.consensus_address) ? globalThis.String(object.consensus_address) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.time !== void 0) {
      obj.time = message.time.toISOString();
    }
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    if (message.consensus_address !== "") {
      obj.consensus_address = message.consensus_address;
    }
    return obj;
  },
  create(base) {
    return Equivocation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEquivocation();
    message.height = object.height ?? 0;
    message.time = object.time ?? void 0;
    message.power = object.power ?? 0;
    message.consensus_address = object.consensus_address ?? "";
    return message;
  }
};
function createBaseEquivocation() {
  return { height: 0, time: void 0, power: 0, consensus_address: "" };
}
function toTimestamp6(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp6(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp6(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp6(Timestamp.fromJSON(o));
  }
}
function longToNumber27(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet62(value) {
  return value !== null && value !== void 0;
}
var registry64 = [["/cosmos.evidence.v1beta1.Equivocation", Equivocation]];
var aminoConverters64 = {
  "/cosmos.evidence.v1beta1.Equivocation": {
    aminoType: "cosmos-sdk/Equivocation",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/evidence/v1beta1/genesis.js
var GenesisState9 = {
  $type: "cosmos.evidence.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.evidence) {
      Any.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState9();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.evidence.push(Any.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      evidence: globalThis.Array.isArray(object == null ? void 0 : object.evidence) ? object.evidence.map((e) => Any.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.evidence) == null ? void 0 : _a.length) {
      obj.evidence = message.evidence.map((e) => Any.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState9.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGenesisState9();
    message.evidence = ((_a = object.evidence) == null ? void 0 : _a.map((e) => Any.fromPartial(e))) || [];
    return message;
  }
};
function createBaseGenesisState9() {
  return { evidence: [] };
}
var registry65 = [["/cosmos.evidence.v1beta1.GenesisState", GenesisState9]];
var aminoConverters65 = {
  "/cosmos.evidence.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/evidence/v1beta1/query.js
var QueryEvidenceRequest = {
  $type: "cosmos.evidence.v1beta1.QueryEvidenceRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.evidence_hash.length !== 0) {
      writer.uint32(10).bytes(message.evidence_hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryEvidenceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.evidence_hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { evidence_hash: isSet63(object.evidence_hash) ? bytesFromBase6426(object.evidence_hash) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.evidence_hash.length !== 0) {
      obj.evidence_hash = base64FromBytes26(message.evidence_hash);
    }
    return obj;
  },
  create(base) {
    return QueryEvidenceRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryEvidenceRequest();
    message.evidence_hash = object.evidence_hash ?? new Uint8Array(0);
    return message;
  }
};
var QueryEvidenceResponse = {
  $type: "cosmos.evidence.v1beta1.QueryEvidenceResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.evidence !== void 0) {
      Any.encode(message.evidence, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryEvidenceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.evidence = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { evidence: isSet63(object.evidence) ? Any.fromJSON(object.evidence) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.evidence !== void 0) {
      obj.evidence = Any.toJSON(message.evidence);
    }
    return obj;
  },
  create(base) {
    return QueryEvidenceResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryEvidenceResponse();
    message.evidence = object.evidence !== void 0 && object.evidence !== null ? Any.fromPartial(object.evidence) : void 0;
    return message;
  }
};
var QueryAllEvidenceRequest = {
  $type: "cosmos.evidence.v1beta1.QueryAllEvidenceRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAllEvidenceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { pagination: isSet63(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryAllEvidenceRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryAllEvidenceRequest();
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryAllEvidenceResponse = {
  $type: "cosmos.evidence.v1beta1.QueryAllEvidenceResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.evidence) {
      Any.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAllEvidenceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.evidence.push(Any.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      evidence: globalThis.Array.isArray(object == null ? void 0 : object.evidence) ? object.evidence.map((e) => Any.fromJSON(e)) : [],
      pagination: isSet63(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.evidence) == null ? void 0 : _a.length) {
      obj.evidence = message.evidence.map((e) => Any.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryAllEvidenceResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryAllEvidenceResponse();
    message.evidence = ((_a = object.evidence) == null ? void 0 : _a.map((e) => Any.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
function createBaseQueryEvidenceRequest() {
  return { evidence_hash: new Uint8Array(0) };
}
function createBaseQueryEvidenceResponse() {
  return { evidence: void 0 };
}
function createBaseQueryAllEvidenceRequest() {
  return { pagination: void 0 };
}
function createBaseQueryAllEvidenceResponse() {
  return { evidence: [], pagination: void 0 };
}
function bytesFromBase6426(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes26(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet63(value) {
  return value !== null && value !== void 0;
}
var registry66 = [
  ["/cosmos.evidence.v1beta1.QueryEvidenceRequest", QueryEvidenceRequest],
  ["/cosmos.evidence.v1beta1.QueryEvidenceResponse", QueryEvidenceResponse],
  ["/cosmos.evidence.v1beta1.QueryAllEvidenceRequest", QueryAllEvidenceRequest],
  ["/cosmos.evidence.v1beta1.QueryAllEvidenceResponse", QueryAllEvidenceResponse]
];
var aminoConverters66 = {
  "/cosmos.evidence.v1beta1.QueryEvidenceRequest": {
    aminoType: "cosmos-sdk/QueryEvidenceRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.evidence.v1beta1.QueryEvidenceResponse": {
    aminoType: "cosmos-sdk/QueryEvidenceResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.evidence.v1beta1.QueryAllEvidenceRequest": {
    aminoType: "cosmos-sdk/QueryAllEvidenceRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.evidence.v1beta1.QueryAllEvidenceResponse": {
    aminoType: "cosmos-sdk/QueryAllEvidenceResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/evidence/v1beta1/tx.js
var MsgSubmitEvidence = {
  $type: "cosmos.evidence.v1beta1.MsgSubmitEvidence",
  encode(message, writer = new BinaryWriter()) {
    if (message.submitter !== "") {
      writer.uint32(10).string(message.submitter);
    }
    if (message.evidence !== void 0) {
      Any.encode(message.evidence, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitEvidence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.submitter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.evidence = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      submitter: isSet64(object.submitter) ? globalThis.String(object.submitter) : "",
      evidence: isSet64(object.evidence) ? Any.fromJSON(object.evidence) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.submitter !== "") {
      obj.submitter = message.submitter;
    }
    if (message.evidence !== void 0) {
      obj.evidence = Any.toJSON(message.evidence);
    }
    return obj;
  },
  create(base) {
    return MsgSubmitEvidence.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgSubmitEvidence();
    message.submitter = object.submitter ?? "";
    message.evidence = object.evidence !== void 0 && object.evidence !== null ? Any.fromPartial(object.evidence) : void 0;
    return message;
  }
};
var MsgSubmitEvidenceResponse = {
  $type: "cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.hash.length !== 0) {
      writer.uint32(34).bytes(message.hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitEvidenceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }
          message.hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { hash: isSet64(object.hash) ? bytesFromBase6427(object.hash) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes27(message.hash);
    }
    return obj;
  },
  create(base) {
    return MsgSubmitEvidenceResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgSubmitEvidenceResponse();
    message.hash = object.hash ?? new Uint8Array(0);
    return message;
  }
};
function createBaseMsgSubmitEvidence() {
  return { submitter: "", evidence: void 0 };
}
function createBaseMsgSubmitEvidenceResponse() {
  return { hash: new Uint8Array(0) };
}
function bytesFromBase6427(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes27(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet64(value) {
  return value !== null && value !== void 0;
}
var registry67 = [
  ["/cosmos.evidence.v1beta1.MsgSubmitEvidence", MsgSubmitEvidence],
  ["/cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse", MsgSubmitEvidenceResponse]
];
var aminoConverters67 = {
  "/cosmos.evidence.v1beta1.MsgSubmitEvidence": {
    aminoType: "cosmos-sdk/MsgSubmitEvidence",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse": {
    aminoType: "cosmos-sdk/MsgSubmitEvidenceResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/feegrant/v1beta1/index.js
var v1beta1_exports16 = {};
__export(v1beta1_exports16, {
  AllowedMsgAllowance: () => AllowedMsgAllowance,
  BasicAllowance: () => BasicAllowance,
  GenesisState: () => GenesisState10,
  Grant: () => Grant2,
  MsgGrantAllowance: () => MsgGrantAllowance,
  MsgGrantAllowanceResponse: () => MsgGrantAllowanceResponse,
  MsgRevokeAllowance: () => MsgRevokeAllowance,
  MsgRevokeAllowanceResponse: () => MsgRevokeAllowanceResponse,
  PeriodicAllowance: () => PeriodicAllowance,
  QueryAllowanceRequest: () => QueryAllowanceRequest,
  QueryAllowanceResponse: () => QueryAllowanceResponse,
  QueryAllowancesByGranterRequest: () => QueryAllowancesByGranterRequest,
  QueryAllowancesByGranterResponse: () => QueryAllowancesByGranterResponse,
  QueryAllowancesRequest: () => QueryAllowancesRequest,
  QueryAllowancesResponse: () => QueryAllowancesResponse
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/feegrant/v1beta1/feegrant.js
var BasicAllowance = {
  $type: "cosmos.feegrant.v1beta1.BasicAllowance",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.spend_limit) {
      Coin.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.expiration !== void 0) {
      Timestamp.encode(toTimestamp7(message.expiration), writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBasicAllowance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.spend_limit.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.expiration = fromTimestamp7(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      spend_limit: globalThis.Array.isArray(object == null ? void 0 : object.spend_limit) ? object.spend_limit.map((e) => Coin.fromJSON(e)) : [],
      expiration: isSet65(object.expiration) ? fromJsonTimestamp7(object.expiration) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.spend_limit) == null ? void 0 : _a.length) {
      obj.spend_limit = message.spend_limit.map((e) => Coin.toJSON(e));
    }
    if (message.expiration !== void 0) {
      obj.expiration = message.expiration.toISOString();
    }
    return obj;
  },
  create(base) {
    return BasicAllowance.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseBasicAllowance();
    message.spend_limit = ((_a = object.spend_limit) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    message.expiration = object.expiration ?? void 0;
    return message;
  }
};
var PeriodicAllowance = {
  $type: "cosmos.feegrant.v1beta1.PeriodicAllowance",
  encode(message, writer = new BinaryWriter()) {
    if (message.basic !== void 0) {
      BasicAllowance.encode(message.basic, writer.uint32(10).fork()).join();
    }
    if (message.period !== void 0) {
      Duration.encode(message.period, writer.uint32(18).fork()).join();
    }
    for (const v of message.period_spend_limit) {
      Coin.encode(v, writer.uint32(26).fork()).join();
    }
    for (const v of message.period_can_spend) {
      Coin.encode(v, writer.uint32(34).fork()).join();
    }
    if (message.period_reset !== void 0) {
      Timestamp.encode(toTimestamp7(message.period_reset), writer.uint32(42).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePeriodicAllowance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.basic = BasicAllowance.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.period = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.period_spend_limit.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.period_can_spend.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.period_reset = fromTimestamp7(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      basic: isSet65(object.basic) ? BasicAllowance.fromJSON(object.basic) : void 0,
      period: isSet65(object.period) ? Duration.fromJSON(object.period) : void 0,
      period_spend_limit: globalThis.Array.isArray(object == null ? void 0 : object.period_spend_limit) ? object.period_spend_limit.map((e) => Coin.fromJSON(e)) : [],
      period_can_spend: globalThis.Array.isArray(object == null ? void 0 : object.period_can_spend) ? object.period_can_spend.map((e) => Coin.fromJSON(e)) : [],
      period_reset: isSet65(object.period_reset) ? fromJsonTimestamp7(object.period_reset) : void 0
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if (message.basic !== void 0) {
      obj.basic = BasicAllowance.toJSON(message.basic);
    }
    if (message.period !== void 0) {
      obj.period = Duration.toJSON(message.period);
    }
    if ((_a = message.period_spend_limit) == null ? void 0 : _a.length) {
      obj.period_spend_limit = message.period_spend_limit.map((e) => Coin.toJSON(e));
    }
    if ((_b = message.period_can_spend) == null ? void 0 : _b.length) {
      obj.period_can_spend = message.period_can_spend.map((e) => Coin.toJSON(e));
    }
    if (message.period_reset !== void 0) {
      obj.period_reset = message.period_reset.toISOString();
    }
    return obj;
  },
  create(base) {
    return PeriodicAllowance.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBasePeriodicAllowance();
    message.basic = object.basic !== void 0 && object.basic !== null ? BasicAllowance.fromPartial(object.basic) : void 0;
    message.period = object.period !== void 0 && object.period !== null ? Duration.fromPartial(object.period) : void 0;
    message.period_spend_limit = ((_a = object.period_spend_limit) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    message.period_can_spend = ((_b = object.period_can_spend) == null ? void 0 : _b.map((e) => Coin.fromPartial(e))) || [];
    message.period_reset = object.period_reset ?? void 0;
    return message;
  }
};
var AllowedMsgAllowance = {
  $type: "cosmos.feegrant.v1beta1.AllowedMsgAllowance",
  encode(message, writer = new BinaryWriter()) {
    if (message.allowance !== void 0) {
      Any.encode(message.allowance, writer.uint32(10).fork()).join();
    }
    for (const v of message.allowed_messages) {
      writer.uint32(18).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAllowedMsgAllowance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.allowance = Any.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.allowed_messages.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      allowance: isSet65(object.allowance) ? Any.fromJSON(object.allowance) : void 0,
      allowed_messages: globalThis.Array.isArray(object == null ? void 0 : object.allowed_messages) ? object.allowed_messages.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.allowance !== void 0) {
      obj.allowance = Any.toJSON(message.allowance);
    }
    if ((_a = message.allowed_messages) == null ? void 0 : _a.length) {
      obj.allowed_messages = message.allowed_messages;
    }
    return obj;
  },
  create(base) {
    return AllowedMsgAllowance.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseAllowedMsgAllowance();
    message.allowance = object.allowance !== void 0 && object.allowance !== null ? Any.fromPartial(object.allowance) : void 0;
    message.allowed_messages = ((_a = object.allowed_messages) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var Grant2 = {
  $type: "cosmos.feegrant.v1beta1.Grant",
  encode(message, writer = new BinaryWriter()) {
    if (message.granter !== "") {
      writer.uint32(10).string(message.granter);
    }
    if (message.grantee !== "") {
      writer.uint32(18).string(message.grantee);
    }
    if (message.allowance !== void 0) {
      Any.encode(message.allowance, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGrant2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.grantee = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.allowance = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      granter: isSet65(object.granter) ? globalThis.String(object.granter) : "",
      grantee: isSet65(object.grantee) ? globalThis.String(object.grantee) : "",
      allowance: isSet65(object.allowance) ? Any.fromJSON(object.allowance) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    if (message.allowance !== void 0) {
      obj.allowance = Any.toJSON(message.allowance);
    }
    return obj;
  },
  create(base) {
    return Grant2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGrant2();
    message.granter = object.granter ?? "";
    message.grantee = object.grantee ?? "";
    message.allowance = object.allowance !== void 0 && object.allowance !== null ? Any.fromPartial(object.allowance) : void 0;
    return message;
  }
};
function createBaseBasicAllowance() {
  return { spend_limit: [], expiration: void 0 };
}
function createBasePeriodicAllowance() {
  return { basic: void 0, period: void 0, period_spend_limit: [], period_can_spend: [], period_reset: void 0 };
}
function createBaseAllowedMsgAllowance() {
  return { allowance: void 0, allowed_messages: [] };
}
function createBaseGrant2() {
  return { granter: "", grantee: "", allowance: void 0 };
}
function toTimestamp7(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp7(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp7(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp7(Timestamp.fromJSON(o));
  }
}
function isSet65(value) {
  return value !== null && value !== void 0;
}
var registry68 = [
  ["/cosmos.feegrant.v1beta1.BasicAllowance", BasicAllowance],
  ["/cosmos.feegrant.v1beta1.PeriodicAllowance", PeriodicAllowance],
  ["/cosmos.feegrant.v1beta1.AllowedMsgAllowance", AllowedMsgAllowance],
  ["/cosmos.feegrant.v1beta1.Grant", Grant2]
];
var aminoConverters68 = {
  "/cosmos.feegrant.v1beta1.BasicAllowance": {
    aminoType: "cosmos-sdk/BasicAllowance",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.feegrant.v1beta1.PeriodicAllowance": {
    aminoType: "cosmos-sdk/PeriodicAllowance",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.feegrant.v1beta1.AllowedMsgAllowance": {
    aminoType: "cosmos-sdk/AllowedMsgAllowance",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.feegrant.v1beta1.Grant": {
    aminoType: "cosmos-sdk/Grant",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/feegrant/v1beta1/genesis.js
var GenesisState10 = {
  $type: "cosmos.feegrant.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.allowances) {
      Grant2.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState10();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.allowances.push(Grant2.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      allowances: globalThis.Array.isArray(object == null ? void 0 : object.allowances) ? object.allowances.map((e) => Grant2.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.allowances) == null ? void 0 : _a.length) {
      obj.allowances = message.allowances.map((e) => Grant2.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState10.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGenesisState10();
    message.allowances = ((_a = object.allowances) == null ? void 0 : _a.map((e) => Grant2.fromPartial(e))) || [];
    return message;
  }
};
function createBaseGenesisState10() {
  return { allowances: [] };
}
var registry69 = [["/cosmos.feegrant.v1beta1.GenesisState", GenesisState10]];
var aminoConverters69 = {
  "/cosmos.feegrant.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/feegrant/v1beta1/query.js
var QueryAllowanceRequest = {
  $type: "cosmos.feegrant.v1beta1.QueryAllowanceRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.granter !== "") {
      writer.uint32(10).string(message.granter);
    }
    if (message.grantee !== "") {
      writer.uint32(18).string(message.grantee);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAllowanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.grantee = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      granter: isSet66(object.granter) ? globalThis.String(object.granter) : "",
      grantee: isSet66(object.grantee) ? globalThis.String(object.grantee) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    return obj;
  },
  create(base) {
    return QueryAllowanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryAllowanceRequest();
    message.granter = object.granter ?? "";
    message.grantee = object.grantee ?? "";
    return message;
  }
};
var QueryAllowanceResponse = {
  $type: "cosmos.feegrant.v1beta1.QueryAllowanceResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.allowance !== void 0) {
      Grant2.encode(message.allowance, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAllowanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.allowance = Grant2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { allowance: isSet66(object.allowance) ? Grant2.fromJSON(object.allowance) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.allowance !== void 0) {
      obj.allowance = Grant2.toJSON(message.allowance);
    }
    return obj;
  },
  create(base) {
    return QueryAllowanceResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryAllowanceResponse();
    message.allowance = object.allowance !== void 0 && object.allowance !== null ? Grant2.fromPartial(object.allowance) : void 0;
    return message;
  }
};
var QueryAllowancesRequest = {
  $type: "cosmos.feegrant.v1beta1.QueryAllowancesRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.grantee !== "") {
      writer.uint32(10).string(message.grantee);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAllowancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.grantee = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      grantee: isSet66(object.grantee) ? globalThis.String(object.grantee) : "",
      pagination: isSet66(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryAllowancesRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryAllowancesRequest();
    message.grantee = object.grantee ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryAllowancesResponse = {
  $type: "cosmos.feegrant.v1beta1.QueryAllowancesResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.allowances) {
      Grant2.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAllowancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.allowances.push(Grant2.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      allowances: globalThis.Array.isArray(object == null ? void 0 : object.allowances) ? object.allowances.map((e) => Grant2.fromJSON(e)) : [],
      pagination: isSet66(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.allowances) == null ? void 0 : _a.length) {
      obj.allowances = message.allowances.map((e) => Grant2.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryAllowancesResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryAllowancesResponse();
    message.allowances = ((_a = object.allowances) == null ? void 0 : _a.map((e) => Grant2.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryAllowancesByGranterRequest = {
  $type: "cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.granter !== "") {
      writer.uint32(10).string(message.granter);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAllowancesByGranterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      granter: isSet66(object.granter) ? globalThis.String(object.granter) : "",
      pagination: isSet66(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryAllowancesByGranterRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryAllowancesByGranterRequest();
    message.granter = object.granter ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryAllowancesByGranterResponse = {
  $type: "cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.allowances) {
      Grant2.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAllowancesByGranterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.allowances.push(Grant2.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      allowances: globalThis.Array.isArray(object == null ? void 0 : object.allowances) ? object.allowances.map((e) => Grant2.fromJSON(e)) : [],
      pagination: isSet66(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.allowances) == null ? void 0 : _a.length) {
      obj.allowances = message.allowances.map((e) => Grant2.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryAllowancesByGranterResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryAllowancesByGranterResponse();
    message.allowances = ((_a = object.allowances) == null ? void 0 : _a.map((e) => Grant2.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
function createBaseQueryAllowanceRequest() {
  return { granter: "", grantee: "" };
}
function createBaseQueryAllowanceResponse() {
  return { allowance: void 0 };
}
function createBaseQueryAllowancesRequest() {
  return { grantee: "", pagination: void 0 };
}
function createBaseQueryAllowancesResponse() {
  return { allowances: [], pagination: void 0 };
}
function createBaseQueryAllowancesByGranterRequest() {
  return { granter: "", pagination: void 0 };
}
function createBaseQueryAllowancesByGranterResponse() {
  return { allowances: [], pagination: void 0 };
}
function isSet66(value) {
  return value !== null && value !== void 0;
}
var registry70 = [
  ["/cosmos.feegrant.v1beta1.QueryAllowanceRequest", QueryAllowanceRequest],
  ["/cosmos.feegrant.v1beta1.QueryAllowanceResponse", QueryAllowanceResponse],
  ["/cosmos.feegrant.v1beta1.QueryAllowancesRequest", QueryAllowancesRequest],
  ["/cosmos.feegrant.v1beta1.QueryAllowancesResponse", QueryAllowancesResponse],
  ["/cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest", QueryAllowancesByGranterRequest],
  ["/cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse", QueryAllowancesByGranterResponse]
];
var aminoConverters70 = {
  "/cosmos.feegrant.v1beta1.QueryAllowanceRequest": {
    aminoType: "cosmos-sdk/QueryAllowanceRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.feegrant.v1beta1.QueryAllowanceResponse": {
    aminoType: "cosmos-sdk/QueryAllowanceResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.feegrant.v1beta1.QueryAllowancesRequest": {
    aminoType: "cosmos-sdk/QueryAllowancesRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.feegrant.v1beta1.QueryAllowancesResponse": {
    aminoType: "cosmos-sdk/QueryAllowancesResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest": {
    aminoType: "cosmos-sdk/QueryAllowancesByGranterRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse": {
    aminoType: "cosmos-sdk/QueryAllowancesByGranterResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/feegrant/v1beta1/tx.js
var MsgGrantAllowance = {
  $type: "cosmos.feegrant.v1beta1.MsgGrantAllowance",
  encode(message, writer = new BinaryWriter()) {
    if (message.granter !== "") {
      writer.uint32(10).string(message.granter);
    }
    if (message.grantee !== "") {
      writer.uint32(18).string(message.grantee);
    }
    if (message.allowance !== void 0) {
      Any.encode(message.allowance, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgGrantAllowance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.grantee = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.allowance = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      granter: isSet67(object.granter) ? globalThis.String(object.granter) : "",
      grantee: isSet67(object.grantee) ? globalThis.String(object.grantee) : "",
      allowance: isSet67(object.allowance) ? Any.fromJSON(object.allowance) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    if (message.allowance !== void 0) {
      obj.allowance = Any.toJSON(message.allowance);
    }
    return obj;
  },
  create(base) {
    return MsgGrantAllowance.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgGrantAllowance();
    message.granter = object.granter ?? "";
    message.grantee = object.grantee ?? "";
    message.allowance = object.allowance !== void 0 && object.allowance !== null ? Any.fromPartial(object.allowance) : void 0;
    return message;
  }
};
var MsgGrantAllowanceResponse = {
  $type: "cosmos.feegrant.v1beta1.MsgGrantAllowanceResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgGrantAllowanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgGrantAllowanceResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgGrantAllowanceResponse();
    return message;
  }
};
var MsgRevokeAllowance = {
  $type: "cosmos.feegrant.v1beta1.MsgRevokeAllowance",
  encode(message, writer = new BinaryWriter()) {
    if (message.granter !== "") {
      writer.uint32(10).string(message.granter);
    }
    if (message.grantee !== "") {
      writer.uint32(18).string(message.grantee);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgRevokeAllowance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.grantee = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      granter: isSet67(object.granter) ? globalThis.String(object.granter) : "",
      grantee: isSet67(object.grantee) ? globalThis.String(object.grantee) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.grantee !== "") {
      obj.grantee = message.grantee;
    }
    return obj;
  },
  create(base) {
    return MsgRevokeAllowance.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgRevokeAllowance();
    message.granter = object.granter ?? "";
    message.grantee = object.grantee ?? "";
    return message;
  }
};
var MsgRevokeAllowanceResponse = {
  $type: "cosmos.feegrant.v1beta1.MsgRevokeAllowanceResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgRevokeAllowanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgRevokeAllowanceResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgRevokeAllowanceResponse();
    return message;
  }
};
function createBaseMsgGrantAllowance() {
  return { granter: "", grantee: "", allowance: void 0 };
}
function createBaseMsgGrantAllowanceResponse() {
  return {};
}
function createBaseMsgRevokeAllowance() {
  return { granter: "", grantee: "" };
}
function createBaseMsgRevokeAllowanceResponse() {
  return {};
}
function isSet67(value) {
  return value !== null && value !== void 0;
}
var registry71 = [
  ["/cosmos.feegrant.v1beta1.MsgGrantAllowance", MsgGrantAllowance],
  ["/cosmos.feegrant.v1beta1.MsgGrantAllowanceResponse", MsgGrantAllowanceResponse],
  ["/cosmos.feegrant.v1beta1.MsgRevokeAllowance", MsgRevokeAllowance],
  ["/cosmos.feegrant.v1beta1.MsgRevokeAllowanceResponse", MsgRevokeAllowanceResponse]
];
var aminoConverters71 = {
  "/cosmos.feegrant.v1beta1.MsgGrantAllowance": {
    aminoType: "cosmos-sdk/MsgGrantAllowance",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.feegrant.v1beta1.MsgGrantAllowanceResponse": {
    aminoType: "cosmos-sdk/MsgGrantAllowanceResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.feegrant.v1beta1.MsgRevokeAllowance": {
    aminoType: "cosmos-sdk/MsgRevokeAllowance",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.feegrant.v1beta1.MsgRevokeAllowanceResponse": {
    aminoType: "cosmos-sdk/MsgRevokeAllowanceResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/genutil/v1beta1/index.js
var v1beta1_exports17 = {};
__export(v1beta1_exports17, {
  GenesisState: () => GenesisState11,
  aminoConverters: () => aminoConverters72,
  registry: () => registry72
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/genutil/v1beta1/genesis.js
var GenesisState11 = {
  $type: "cosmos.genutil.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.gen_txs) {
      writer.uint32(10).bytes(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState11();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.gen_txs.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      gen_txs: globalThis.Array.isArray(object == null ? void 0 : object.gen_txs) ? object.gen_txs.map((e) => bytesFromBase6428(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.gen_txs) == null ? void 0 : _a.length) {
      obj.gen_txs = message.gen_txs.map((e) => base64FromBytes28(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState11.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGenesisState11();
    message.gen_txs = ((_a = object.gen_txs) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
function createBaseGenesisState11() {
  return { gen_txs: [] };
}
function bytesFromBase6428(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes28(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
var registry72 = [["/cosmos.genutil.v1beta1.GenesisState", GenesisState11]];
var aminoConverters72 = {
  "/cosmos.genutil.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/gov/v1beta1/index.js
var v1beta1_exports18 = {};
__export(v1beta1_exports18, {
  Deposit: () => Deposit,
  DepositParams: () => DepositParams,
  GenesisState: () => GenesisState12,
  MsgDeposit: () => MsgDeposit2,
  MsgDepositResponse: () => MsgDepositResponse2,
  MsgSubmitProposal: () => MsgSubmitProposal,
  MsgSubmitProposalResponse: () => MsgSubmitProposalResponse,
  MsgVote: () => MsgVote,
  MsgVoteResponse: () => MsgVoteResponse,
  MsgVoteWeighted: () => MsgVoteWeighted,
  MsgVoteWeightedResponse: () => MsgVoteWeightedResponse,
  Proposal: () => Proposal2,
  QueryDepositRequest: () => QueryDepositRequest,
  QueryDepositResponse: () => QueryDepositResponse,
  QueryDepositsRequest: () => QueryDepositsRequest,
  QueryDepositsResponse: () => QueryDepositsResponse,
  QueryParamsRequest: () => QueryParamsRequest5,
  QueryParamsResponse: () => QueryParamsResponse5,
  QueryProposalRequest: () => QueryProposalRequest,
  QueryProposalResponse: () => QueryProposalResponse,
  QueryProposalsRequest: () => QueryProposalsRequest,
  QueryProposalsResponse: () => QueryProposalsResponse,
  QueryTallyResultRequest: () => QueryTallyResultRequest,
  QueryTallyResultResponse: () => QueryTallyResultResponse,
  QueryVoteRequest: () => QueryVoteRequest,
  QueryVoteResponse: () => QueryVoteResponse,
  QueryVotesRequest: () => QueryVotesRequest,
  QueryVotesResponse: () => QueryVotesResponse,
  TallyParams: () => TallyParams,
  TallyResult: () => TallyResult,
  TextProposal: () => TextProposal,
  Vote: () => Vote2,
  VotingParams: () => VotingParams,
  WeightedVoteOption: () => WeightedVoteOption,
  proposalStatusFromJSON: () => proposalStatusFromJSON,
  proposalStatusToJSON: () => proposalStatusToJSON,
  voteOptionFromJSON: () => voteOptionFromJSON,
  voteOptionToJSON: () => voteOptionToJSON
});

// node_modules/@sei-js/cosmos/dist/esm/types/cosmos/gov/v1beta1/gov.js
var VoteOption;
(function(VoteOption2) {
  VoteOption2[VoteOption2["VOTE_OPTION_UNSPECIFIED"] = 0] = "VOTE_OPTION_UNSPECIFIED";
  VoteOption2[VoteOption2["VOTE_OPTION_YES"] = 1] = "VOTE_OPTION_YES";
  VoteOption2[VoteOption2["VOTE_OPTION_ABSTAIN"] = 2] = "VOTE_OPTION_ABSTAIN";
  VoteOption2[VoteOption2["VOTE_OPTION_NO"] = 3] = "VOTE_OPTION_NO";
  VoteOption2[VoteOption2["VOTE_OPTION_NO_WITH_VETO"] = 4] = "VOTE_OPTION_NO_WITH_VETO";
  VoteOption2[VoteOption2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VoteOption || (VoteOption = {}));
var ProposalStatus;
(function(ProposalStatus2) {
  ProposalStatus2[ProposalStatus2["PROPOSAL_STATUS_UNSPECIFIED"] = 0] = "PROPOSAL_STATUS_UNSPECIFIED";
  ProposalStatus2[ProposalStatus2["PROPOSAL_STATUS_DEPOSIT_PERIOD"] = 1] = "PROPOSAL_STATUS_DEPOSIT_PERIOD";
  ProposalStatus2[ProposalStatus2["PROPOSAL_STATUS_VOTING_PERIOD"] = 2] = "PROPOSAL_STATUS_VOTING_PERIOD";
  ProposalStatus2[ProposalStatus2["PROPOSAL_STATUS_PASSED"] = 3] = "PROPOSAL_STATUS_PASSED";
  ProposalStatus2[ProposalStatus2["PROPOSAL_STATUS_REJECTED"] = 4] = "PROPOSAL_STATUS_REJECTED";
  ProposalStatus2[ProposalStatus2["PROPOSAL_STATUS_FAILED"] = 5] = "PROPOSAL_STATUS_FAILED";
  ProposalStatus2[ProposalStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ProposalStatus || (ProposalStatus = {}));

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/gov/v1beta1/gov.js
var WeightedVoteOption = {
  $type: "cosmos.gov.v1beta1.WeightedVoteOption",
  encode(message, writer = new BinaryWriter()) {
    if (message.option !== 0) {
      writer.uint32(8).int32(message.option);
    }
    if (message.weight !== "") {
      writer.uint32(18).string(message.weight);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseWeightedVoteOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.option = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.weight = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      option: isSet68(object.option) ? voteOptionFromJSON(object.option) : 0,
      weight: isSet68(object.weight) ? globalThis.String(object.weight) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.option !== 0) {
      obj.option = voteOptionToJSON(message.option);
    }
    if (message.weight !== "") {
      obj.weight = message.weight;
    }
    return obj;
  },
  create(base) {
    return WeightedVoteOption.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseWeightedVoteOption();
    message.option = object.option ?? 0;
    message.weight = object.weight ?? "";
    return message;
  }
};
var TextProposal = {
  $type: "cosmos.gov.v1beta1.TextProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.is_expedited !== false) {
      writer.uint32(24).bool(message.is_expedited);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTextProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.is_expedited = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet68(object.title) ? globalThis.String(object.title) : "",
      description: isSet68(object.description) ? globalThis.String(object.description) : "",
      is_expedited: isSet68(object.is_expedited) ? globalThis.Boolean(object.is_expedited) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.is_expedited !== false) {
      obj.is_expedited = message.is_expedited;
    }
    return obj;
  },
  create(base) {
    return TextProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTextProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.is_expedited = object.is_expedited ?? false;
    return message;
  }
};
var Deposit = {
  $type: "cosmos.gov.v1beta1.Deposit",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    if (message.depositor !== "") {
      writer.uint32(18).string(message.depositor);
    }
    for (const v of message.amount) {
      Coin.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber28(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.depositor = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proposal_id: isSet68(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0,
      depositor: isSet68(object.depositor) ? globalThis.String(object.depositor) : "",
      amount: globalThis.Array.isArray(object == null ? void 0 : object.amount) ? object.amount.map((e) => Coin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    if (message.depositor !== "") {
      obj.depositor = message.depositor;
    }
    if ((_a = message.amount) == null ? void 0 : _a.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Deposit.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseDeposit();
    message.proposal_id = object.proposal_id ?? 0;
    message.depositor = object.depositor ?? "";
    message.amount = ((_a = object.amount) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    return message;
  }
};
var Proposal2 = {
  $type: "cosmos.gov.v1beta1.Proposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    if (message.content !== void 0) {
      Any.encode(message.content, writer.uint32(18).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.final_tally_result !== void 0) {
      TallyResult.encode(message.final_tally_result, writer.uint32(34).fork()).join();
    }
    if (message.submit_time !== void 0) {
      Timestamp.encode(toTimestamp8(message.submit_time), writer.uint32(42).fork()).join();
    }
    if (message.deposit_end_time !== void 0) {
      Timestamp.encode(toTimestamp8(message.deposit_end_time), writer.uint32(50).fork()).join();
    }
    for (const v of message.total_deposit) {
      Coin.encode(v, writer.uint32(58).fork()).join();
    }
    if (message.voting_start_time !== void 0) {
      Timestamp.encode(toTimestamp8(message.voting_start_time), writer.uint32(66).fork()).join();
    }
    if (message.voting_end_time !== void 0) {
      Timestamp.encode(toTimestamp8(message.voting_end_time), writer.uint32(74).fork()).join();
    }
    if (message.is_expedited !== false) {
      writer.uint32(80).bool(message.is_expedited);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseProposal2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber28(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.content = Any.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.status = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.final_tally_result = TallyResult.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.submit_time = fromTimestamp8(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.deposit_end_time = fromTimestamp8(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.total_deposit.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.voting_start_time = fromTimestamp8(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.voting_end_time = fromTimestamp8(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }
          message.is_expedited = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proposal_id: isSet68(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0,
      content: isSet68(object.content) ? Any.fromJSON(object.content) : void 0,
      status: isSet68(object.status) ? proposalStatusFromJSON(object.status) : 0,
      final_tally_result: isSet68(object.final_tally_result) ? TallyResult.fromJSON(object.final_tally_result) : void 0,
      submit_time: isSet68(object.submit_time) ? fromJsonTimestamp8(object.submit_time) : void 0,
      deposit_end_time: isSet68(object.deposit_end_time) ? fromJsonTimestamp8(object.deposit_end_time) : void 0,
      total_deposit: globalThis.Array.isArray(object == null ? void 0 : object.total_deposit) ? object.total_deposit.map((e) => Coin.fromJSON(e)) : [],
      voting_start_time: isSet68(object.voting_start_time) ? fromJsonTimestamp8(object.voting_start_time) : void 0,
      voting_end_time: isSet68(object.voting_end_time) ? fromJsonTimestamp8(object.voting_end_time) : void 0,
      is_expedited: isSet68(object.is_expedited) ? globalThis.Boolean(object.is_expedited) : false
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    if (message.content !== void 0) {
      obj.content = Any.toJSON(message.content);
    }
    if (message.status !== 0) {
      obj.status = proposalStatusToJSON(message.status);
    }
    if (message.final_tally_result !== void 0) {
      obj.final_tally_result = TallyResult.toJSON(message.final_tally_result);
    }
    if (message.submit_time !== void 0) {
      obj.submit_time = message.submit_time.toISOString();
    }
    if (message.deposit_end_time !== void 0) {
      obj.deposit_end_time = message.deposit_end_time.toISOString();
    }
    if ((_a = message.total_deposit) == null ? void 0 : _a.length) {
      obj.total_deposit = message.total_deposit.map((e) => Coin.toJSON(e));
    }
    if (message.voting_start_time !== void 0) {
      obj.voting_start_time = message.voting_start_time.toISOString();
    }
    if (message.voting_end_time !== void 0) {
      obj.voting_end_time = message.voting_end_time.toISOString();
    }
    if (message.is_expedited !== false) {
      obj.is_expedited = message.is_expedited;
    }
    return obj;
  },
  create(base) {
    return Proposal2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseProposal2();
    message.proposal_id = object.proposal_id ?? 0;
    message.content = object.content !== void 0 && object.content !== null ? Any.fromPartial(object.content) : void 0;
    message.status = object.status ?? 0;
    message.final_tally_result = object.final_tally_result !== void 0 && object.final_tally_result !== null ? TallyResult.fromPartial(object.final_tally_result) : void 0;
    message.submit_time = object.submit_time ?? void 0;
    message.deposit_end_time = object.deposit_end_time ?? void 0;
    message.total_deposit = ((_a = object.total_deposit) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    message.voting_start_time = object.voting_start_time ?? void 0;
    message.voting_end_time = object.voting_end_time ?? void 0;
    message.is_expedited = object.is_expedited ?? false;
    return message;
  }
};
var TallyResult = {
  $type: "cosmos.gov.v1beta1.TallyResult",
  encode(message, writer = new BinaryWriter()) {
    if (message.yes !== "") {
      writer.uint32(10).string(message.yes);
    }
    if (message.abstain !== "") {
      writer.uint32(18).string(message.abstain);
    }
    if (message.no !== "") {
      writer.uint32(26).string(message.no);
    }
    if (message.no_with_veto !== "") {
      writer.uint32(34).string(message.no_with_veto);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTallyResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.yes = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.abstain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.no = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.no_with_veto = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      yes: isSet68(object.yes) ? globalThis.String(object.yes) : "",
      abstain: isSet68(object.abstain) ? globalThis.String(object.abstain) : "",
      no: isSet68(object.no) ? globalThis.String(object.no) : "",
      no_with_veto: isSet68(object.no_with_veto) ? globalThis.String(object.no_with_veto) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.yes !== "") {
      obj.yes = message.yes;
    }
    if (message.abstain !== "") {
      obj.abstain = message.abstain;
    }
    if (message.no !== "") {
      obj.no = message.no;
    }
    if (message.no_with_veto !== "") {
      obj.no_with_veto = message.no_with_veto;
    }
    return obj;
  },
  create(base) {
    return TallyResult.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTallyResult();
    message.yes = object.yes ?? "";
    message.abstain = object.abstain ?? "";
    message.no = object.no ?? "";
    message.no_with_veto = object.no_with_veto ?? "";
    return message;
  }
};
var Vote2 = {
  $type: "cosmos.gov.v1beta1.Vote",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    if (message.voter !== "") {
      writer.uint32(18).string(message.voter);
    }
    if (message.option !== 0) {
      writer.uint32(24).int32(message.option);
    }
    for (const v of message.options) {
      WeightedVoteOption.encode(v, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVote2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber28(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.voter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.option = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.options.push(WeightedVoteOption.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proposal_id: isSet68(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0,
      voter: isSet68(object.voter) ? globalThis.String(object.voter) : "",
      option: isSet68(object.option) ? voteOptionFromJSON(object.option) : 0,
      options: globalThis.Array.isArray(object == null ? void 0 : object.options) ? object.options.map((e) => WeightedVoteOption.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    if (message.voter !== "") {
      obj.voter = message.voter;
    }
    if (message.option !== 0) {
      obj.option = voteOptionToJSON(message.option);
    }
    if ((_a = message.options) == null ? void 0 : _a.length) {
      obj.options = message.options.map((e) => WeightedVoteOption.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Vote2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseVote2();
    message.proposal_id = object.proposal_id ?? 0;
    message.voter = object.voter ?? "";
    message.option = object.option ?? 0;
    message.options = ((_a = object.options) == null ? void 0 : _a.map((e) => WeightedVoteOption.fromPartial(e))) || [];
    return message;
  }
};
var DepositParams = {
  $type: "cosmos.gov.v1beta1.DepositParams",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.min_deposit) {
      Coin.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.max_deposit_period !== void 0) {
      Duration.encode(message.max_deposit_period, writer.uint32(18).fork()).join();
    }
    for (const v of message.min_expedited_deposit) {
      Coin.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDepositParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.min_deposit.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.max_deposit_period = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.min_expedited_deposit.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      min_deposit: globalThis.Array.isArray(object == null ? void 0 : object.min_deposit) ? object.min_deposit.map((e) => Coin.fromJSON(e)) : [],
      max_deposit_period: isSet68(object.max_deposit_period) ? Duration.fromJSON(object.max_deposit_period) : void 0,
      min_expedited_deposit: globalThis.Array.isArray(object == null ? void 0 : object.min_expedited_deposit) ? object.min_expedited_deposit.map((e) => Coin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if ((_a = message.min_deposit) == null ? void 0 : _a.length) {
      obj.min_deposit = message.min_deposit.map((e) => Coin.toJSON(e));
    }
    if (message.max_deposit_period !== void 0) {
      obj.max_deposit_period = Duration.toJSON(message.max_deposit_period);
    }
    if ((_b = message.min_expedited_deposit) == null ? void 0 : _b.length) {
      obj.min_expedited_deposit = message.min_expedited_deposit.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return DepositParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseDepositParams();
    message.min_deposit = ((_a = object.min_deposit) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    message.max_deposit_period = object.max_deposit_period !== void 0 && object.max_deposit_period !== null ? Duration.fromPartial(object.max_deposit_period) : void 0;
    message.min_expedited_deposit = ((_b = object.min_expedited_deposit) == null ? void 0 : _b.map((e) => Coin.fromPartial(e))) || [];
    return message;
  }
};
var VotingParams = {
  $type: "cosmos.gov.v1beta1.VotingParams",
  encode(message, writer = new BinaryWriter()) {
    if (message.voting_period !== void 0) {
      Duration.encode(message.voting_period, writer.uint32(10).fork()).join();
    }
    if (message.expedited_voting_period !== void 0) {
      Duration.encode(message.expedited_voting_period, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVotingParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.voting_period = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.expedited_voting_period = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      voting_period: isSet68(object.voting_period) ? Duration.fromJSON(object.voting_period) : void 0,
      expedited_voting_period: isSet68(object.expedited_voting_period) ? Duration.fromJSON(object.expedited_voting_period) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.voting_period !== void 0) {
      obj.voting_period = Duration.toJSON(message.voting_period);
    }
    if (message.expedited_voting_period !== void 0) {
      obj.expedited_voting_period = Duration.toJSON(message.expedited_voting_period);
    }
    return obj;
  },
  create(base) {
    return VotingParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseVotingParams();
    message.voting_period = object.voting_period !== void 0 && object.voting_period !== null ? Duration.fromPartial(object.voting_period) : void 0;
    message.expedited_voting_period = object.expedited_voting_period !== void 0 && object.expedited_voting_period !== null ? Duration.fromPartial(object.expedited_voting_period) : void 0;
    return message;
  }
};
var TallyParams = {
  $type: "cosmos.gov.v1beta1.TallyParams",
  encode(message, writer = new BinaryWriter()) {
    if (message.quorum.length !== 0) {
      writer.uint32(10).bytes(message.quorum);
    }
    if (message.threshold.length !== 0) {
      writer.uint32(18).bytes(message.threshold);
    }
    if (message.veto_threshold.length !== 0) {
      writer.uint32(26).bytes(message.veto_threshold);
    }
    if (message.expedited_quorum.length !== 0) {
      writer.uint32(34).bytes(message.expedited_quorum);
    }
    if (message.expedited_threshold.length !== 0) {
      writer.uint32(42).bytes(message.expedited_threshold);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTallyParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.quorum = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.threshold = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.veto_threshold = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.expedited_quorum = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.expedited_threshold = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      quorum: isSet68(object.quorum) ? bytesFromBase6429(object.quorum) : new Uint8Array(0),
      threshold: isSet68(object.threshold) ? bytesFromBase6429(object.threshold) : new Uint8Array(0),
      veto_threshold: isSet68(object.veto_threshold) ? bytesFromBase6429(object.veto_threshold) : new Uint8Array(0),
      expedited_quorum: isSet68(object.expedited_quorum) ? bytesFromBase6429(object.expedited_quorum) : new Uint8Array(0),
      expedited_threshold: isSet68(object.expedited_threshold) ? bytesFromBase6429(object.expedited_threshold) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.quorum.length !== 0) {
      obj.quorum = base64FromBytes29(message.quorum);
    }
    if (message.threshold.length !== 0) {
      obj.threshold = base64FromBytes29(message.threshold);
    }
    if (message.veto_threshold.length !== 0) {
      obj.veto_threshold = base64FromBytes29(message.veto_threshold);
    }
    if (message.expedited_quorum.length !== 0) {
      obj.expedited_quorum = base64FromBytes29(message.expedited_quorum);
    }
    if (message.expedited_threshold.length !== 0) {
      obj.expedited_threshold = base64FromBytes29(message.expedited_threshold);
    }
    return obj;
  },
  create(base) {
    return TallyParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTallyParams();
    message.quorum = object.quorum ?? new Uint8Array(0);
    message.threshold = object.threshold ?? new Uint8Array(0);
    message.veto_threshold = object.veto_threshold ?? new Uint8Array(0);
    message.expedited_quorum = object.expedited_quorum ?? new Uint8Array(0);
    message.expedited_threshold = object.expedited_threshold ?? new Uint8Array(0);
    return message;
  }
};
function voteOptionFromJSON(object) {
  switch (object) {
    case 0:
    case "VOTE_OPTION_UNSPECIFIED":
      return VoteOption.VOTE_OPTION_UNSPECIFIED;
    case 1:
    case "VOTE_OPTION_YES":
      return VoteOption.VOTE_OPTION_YES;
    case 2:
    case "VOTE_OPTION_ABSTAIN":
      return VoteOption.VOTE_OPTION_ABSTAIN;
    case 3:
    case "VOTE_OPTION_NO":
      return VoteOption.VOTE_OPTION_NO;
    case 4:
    case "VOTE_OPTION_NO_WITH_VETO":
      return VoteOption.VOTE_OPTION_NO_WITH_VETO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VoteOption.UNRECOGNIZED;
  }
}
function voteOptionToJSON(object) {
  switch (object) {
    case VoteOption.VOTE_OPTION_UNSPECIFIED:
      return "VOTE_OPTION_UNSPECIFIED";
    case VoteOption.VOTE_OPTION_YES:
      return "VOTE_OPTION_YES";
    case VoteOption.VOTE_OPTION_ABSTAIN:
      return "VOTE_OPTION_ABSTAIN";
    case VoteOption.VOTE_OPTION_NO:
      return "VOTE_OPTION_NO";
    case VoteOption.VOTE_OPTION_NO_WITH_VETO:
      return "VOTE_OPTION_NO_WITH_VETO";
    case VoteOption.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function proposalStatusFromJSON(object) {
  switch (object) {
    case 0:
    case "PROPOSAL_STATUS_UNSPECIFIED":
      return ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED;
    case 1:
    case "PROPOSAL_STATUS_DEPOSIT_PERIOD":
      return ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD;
    case 2:
    case "PROPOSAL_STATUS_VOTING_PERIOD":
      return ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD;
    case 3:
    case "PROPOSAL_STATUS_PASSED":
      return ProposalStatus.PROPOSAL_STATUS_PASSED;
    case 4:
    case "PROPOSAL_STATUS_REJECTED":
      return ProposalStatus.PROPOSAL_STATUS_REJECTED;
    case 5:
    case "PROPOSAL_STATUS_FAILED":
      return ProposalStatus.PROPOSAL_STATUS_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProposalStatus.UNRECOGNIZED;
  }
}
function proposalStatusToJSON(object) {
  switch (object) {
    case ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED:
      return "PROPOSAL_STATUS_UNSPECIFIED";
    case ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD:
      return "PROPOSAL_STATUS_DEPOSIT_PERIOD";
    case ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD:
      return "PROPOSAL_STATUS_VOTING_PERIOD";
    case ProposalStatus.PROPOSAL_STATUS_PASSED:
      return "PROPOSAL_STATUS_PASSED";
    case ProposalStatus.PROPOSAL_STATUS_REJECTED:
      return "PROPOSAL_STATUS_REJECTED";
    case ProposalStatus.PROPOSAL_STATUS_FAILED:
      return "PROPOSAL_STATUS_FAILED";
    case ProposalStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function createBaseWeightedVoteOption() {
  return { option: 0, weight: "" };
}
function createBaseTextProposal() {
  return { title: "", description: "", is_expedited: false };
}
function createBaseDeposit() {
  return { proposal_id: 0, depositor: "", amount: [] };
}
function createBaseProposal2() {
  return {
    proposal_id: 0,
    content: void 0,
    status: 0,
    final_tally_result: void 0,
    submit_time: void 0,
    deposit_end_time: void 0,
    total_deposit: [],
    voting_start_time: void 0,
    voting_end_time: void 0,
    is_expedited: false
  };
}
function createBaseTallyResult() {
  return { yes: "", abstain: "", no: "", no_with_veto: "" };
}
function createBaseVote2() {
  return { proposal_id: 0, voter: "", option: 0, options: [] };
}
function createBaseDepositParams() {
  return { min_deposit: [], max_deposit_period: void 0, min_expedited_deposit: [] };
}
function createBaseVotingParams() {
  return { voting_period: void 0, expedited_voting_period: void 0 };
}
function createBaseTallyParams() {
  return {
    quorum: new Uint8Array(0),
    threshold: new Uint8Array(0),
    veto_threshold: new Uint8Array(0),
    expedited_quorum: new Uint8Array(0),
    expedited_threshold: new Uint8Array(0)
  };
}
function bytesFromBase6429(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes29(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function toTimestamp8(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp8(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp8(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp8(Timestamp.fromJSON(o));
  }
}
function longToNumber28(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet68(value) {
  return value !== null && value !== void 0;
}
var registry73 = [
  ["/cosmos.gov.v1beta1.WeightedVoteOption", WeightedVoteOption],
  ["/cosmos.gov.v1beta1.TextProposal", TextProposal],
  ["/cosmos.gov.v1beta1.Deposit", Deposit],
  ["/cosmos.gov.v1beta1.Proposal", Proposal2],
  ["/cosmos.gov.v1beta1.TallyResult", TallyResult],
  ["/cosmos.gov.v1beta1.Vote", Vote2],
  ["/cosmos.gov.v1beta1.DepositParams", DepositParams],
  ["/cosmos.gov.v1beta1.VotingParams", VotingParams],
  ["/cosmos.gov.v1beta1.TallyParams", TallyParams]
];
var aminoConverters73 = {
  "/cosmos.gov.v1beta1.WeightedVoteOption": {
    aminoType: "cosmos-sdk/WeightedVoteOption",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.TextProposal": {
    aminoType: "cosmos-sdk/TextProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.Deposit": {
    aminoType: "cosmos-sdk/Deposit",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.Proposal": {
    aminoType: "cosmos-sdk/Proposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.TallyResult": {
    aminoType: "cosmos-sdk/TallyResult",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.Vote": {
    aminoType: "cosmos-sdk/Vote",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.DepositParams": {
    aminoType: "cosmos-sdk/DepositParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.VotingParams": {
    aminoType: "cosmos-sdk/VotingParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.TallyParams": {
    aminoType: "cosmos-sdk/TallyParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/gov/v1beta1/genesis.js
var GenesisState12 = {
  $type: "cosmos.gov.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.starting_proposal_id !== 0) {
      writer.uint32(8).uint64(message.starting_proposal_id);
    }
    for (const v of message.deposits) {
      Deposit.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.votes) {
      Vote2.encode(v, writer.uint32(26).fork()).join();
    }
    for (const v of message.proposals) {
      Proposal2.encode(v, writer.uint32(34).fork()).join();
    }
    if (message.deposit_params !== void 0) {
      DepositParams.encode(message.deposit_params, writer.uint32(42).fork()).join();
    }
    if (message.voting_params !== void 0) {
      VotingParams.encode(message.voting_params, writer.uint32(50).fork()).join();
    }
    if (message.tally_params !== void 0) {
      TallyParams.encode(message.tally_params, writer.uint32(58).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState12();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.starting_proposal_id = longToNumber29(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.deposits.push(Deposit.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.votes.push(Vote2.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.proposals.push(Proposal2.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.deposit_params = DepositParams.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.voting_params = VotingParams.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.tally_params = TallyParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      starting_proposal_id: isSet69(object.starting_proposal_id) ? globalThis.Number(object.starting_proposal_id) : 0,
      deposits: globalThis.Array.isArray(object == null ? void 0 : object.deposits) ? object.deposits.map((e) => Deposit.fromJSON(e)) : [],
      votes: globalThis.Array.isArray(object == null ? void 0 : object.votes) ? object.votes.map((e) => Vote2.fromJSON(e)) : [],
      proposals: globalThis.Array.isArray(object == null ? void 0 : object.proposals) ? object.proposals.map((e) => Proposal2.fromJSON(e)) : [],
      deposit_params: isSet69(object.deposit_params) ? DepositParams.fromJSON(object.deposit_params) : void 0,
      voting_params: isSet69(object.voting_params) ? VotingParams.fromJSON(object.voting_params) : void 0,
      tally_params: isSet69(object.tally_params) ? TallyParams.fromJSON(object.tally_params) : void 0
    };
  },
  toJSON(message) {
    var _a, _b, _c;
    const obj = {};
    if (message.starting_proposal_id !== 0) {
      obj.starting_proposal_id = Math.round(message.starting_proposal_id);
    }
    if ((_a = message.deposits) == null ? void 0 : _a.length) {
      obj.deposits = message.deposits.map((e) => Deposit.toJSON(e));
    }
    if ((_b = message.votes) == null ? void 0 : _b.length) {
      obj.votes = message.votes.map((e) => Vote2.toJSON(e));
    }
    if ((_c = message.proposals) == null ? void 0 : _c.length) {
      obj.proposals = message.proposals.map((e) => Proposal2.toJSON(e));
    }
    if (message.deposit_params !== void 0) {
      obj.deposit_params = DepositParams.toJSON(message.deposit_params);
    }
    if (message.voting_params !== void 0) {
      obj.voting_params = VotingParams.toJSON(message.voting_params);
    }
    if (message.tally_params !== void 0) {
      obj.tally_params = TallyParams.toJSON(message.tally_params);
    }
    return obj;
  },
  create(base) {
    return GenesisState12.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseGenesisState12();
    message.starting_proposal_id = object.starting_proposal_id ?? 0;
    message.deposits = ((_a = object.deposits) == null ? void 0 : _a.map((e) => Deposit.fromPartial(e))) || [];
    message.votes = ((_b = object.votes) == null ? void 0 : _b.map((e) => Vote2.fromPartial(e))) || [];
    message.proposals = ((_c = object.proposals) == null ? void 0 : _c.map((e) => Proposal2.fromPartial(e))) || [];
    message.deposit_params = object.deposit_params !== void 0 && object.deposit_params !== null ? DepositParams.fromPartial(object.deposit_params) : void 0;
    message.voting_params = object.voting_params !== void 0 && object.voting_params !== null ? VotingParams.fromPartial(object.voting_params) : void 0;
    message.tally_params = object.tally_params !== void 0 && object.tally_params !== null ? TallyParams.fromPartial(object.tally_params) : void 0;
    return message;
  }
};
function createBaseGenesisState12() {
  return {
    starting_proposal_id: 0,
    deposits: [],
    votes: [],
    proposals: [],
    deposit_params: void 0,
    voting_params: void 0,
    tally_params: void 0
  };
}
function longToNumber29(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet69(value) {
  return value !== null && value !== void 0;
}
var registry74 = [["/cosmos.gov.v1beta1.GenesisState", GenesisState12]];
var aminoConverters74 = {
  "/cosmos.gov.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/gov/v1beta1/query.js
var QueryProposalRequest = {
  $type: "cosmos.gov.v1beta1.QueryProposalRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber30(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { proposal_id: isSet70(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    return obj;
  },
  create(base) {
    return QueryProposalRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryProposalRequest();
    message.proposal_id = object.proposal_id ?? 0;
    return message;
  }
};
var QueryProposalResponse = {
  $type: "cosmos.gov.v1beta1.QueryProposalResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal !== void 0) {
      Proposal2.encode(message.proposal, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.proposal = Proposal2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { proposal: isSet70(object.proposal) ? Proposal2.fromJSON(object.proposal) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.proposal !== void 0) {
      obj.proposal = Proposal2.toJSON(message.proposal);
    }
    return obj;
  },
  create(base) {
    return QueryProposalResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryProposalResponse();
    message.proposal = object.proposal !== void 0 && object.proposal !== null ? Proposal2.fromPartial(object.proposal) : void 0;
    return message;
  }
};
var QueryProposalsRequest = {
  $type: "cosmos.gov.v1beta1.QueryProposalsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_status !== 0) {
      writer.uint32(8).int32(message.proposal_status);
    }
    if (message.voter !== "") {
      writer.uint32(18).string(message.voter);
    }
    if (message.depositor !== "") {
      writer.uint32(26).string(message.depositor);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryProposalsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_status = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.voter = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.depositor = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proposal_status: isSet70(object.proposal_status) ? proposalStatusFromJSON(object.proposal_status) : 0,
      voter: isSet70(object.voter) ? globalThis.String(object.voter) : "",
      depositor: isSet70(object.depositor) ? globalThis.String(object.depositor) : "",
      pagination: isSet70(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.proposal_status !== 0) {
      obj.proposal_status = proposalStatusToJSON(message.proposal_status);
    }
    if (message.voter !== "") {
      obj.voter = message.voter;
    }
    if (message.depositor !== "") {
      obj.depositor = message.depositor;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryProposalsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryProposalsRequest();
    message.proposal_status = object.proposal_status ?? 0;
    message.voter = object.voter ?? "";
    message.depositor = object.depositor ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryProposalsResponse = {
  $type: "cosmos.gov.v1beta1.QueryProposalsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.proposals) {
      Proposal2.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryProposalsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.proposals.push(Proposal2.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proposals: globalThis.Array.isArray(object == null ? void 0 : object.proposals) ? object.proposals.map((e) => Proposal2.fromJSON(e)) : [],
      pagination: isSet70(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.proposals) == null ? void 0 : _a.length) {
      obj.proposals = message.proposals.map((e) => Proposal2.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryProposalsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryProposalsResponse();
    message.proposals = ((_a = object.proposals) == null ? void 0 : _a.map((e) => Proposal2.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryVoteRequest = {
  $type: "cosmos.gov.v1beta1.QueryVoteRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    if (message.voter !== "") {
      writer.uint32(18).string(message.voter);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryVoteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber30(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.voter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proposal_id: isSet70(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0,
      voter: isSet70(object.voter) ? globalThis.String(object.voter) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    if (message.voter !== "") {
      obj.voter = message.voter;
    }
    return obj;
  },
  create(base) {
    return QueryVoteRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryVoteRequest();
    message.proposal_id = object.proposal_id ?? 0;
    message.voter = object.voter ?? "";
    return message;
  }
};
var QueryVoteResponse = {
  $type: "cosmos.gov.v1beta1.QueryVoteResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.vote !== void 0) {
      Vote2.encode(message.vote, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryVoteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.vote = Vote2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { vote: isSet70(object.vote) ? Vote2.fromJSON(object.vote) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.vote !== void 0) {
      obj.vote = Vote2.toJSON(message.vote);
    }
    return obj;
  },
  create(base) {
    return QueryVoteResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryVoteResponse();
    message.vote = object.vote !== void 0 && object.vote !== null ? Vote2.fromPartial(object.vote) : void 0;
    return message;
  }
};
var QueryVotesRequest = {
  $type: "cosmos.gov.v1beta1.QueryVotesRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryVotesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber30(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proposal_id: isSet70(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0,
      pagination: isSet70(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryVotesRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryVotesRequest();
    message.proposal_id = object.proposal_id ?? 0;
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryVotesResponse = {
  $type: "cosmos.gov.v1beta1.QueryVotesResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.votes) {
      Vote2.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryVotesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.votes.push(Vote2.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      votes: globalThis.Array.isArray(object == null ? void 0 : object.votes) ? object.votes.map((e) => Vote2.fromJSON(e)) : [],
      pagination: isSet70(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.votes) == null ? void 0 : _a.length) {
      obj.votes = message.votes.map((e) => Vote2.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryVotesResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryVotesResponse();
    message.votes = ((_a = object.votes) == null ? void 0 : _a.map((e) => Vote2.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryParamsRequest5 = {
  $type: "cosmos.gov.v1beta1.QueryParamsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.params_type !== "") {
      writer.uint32(10).string(message.params_type);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest5();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params_type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { params_type: isSet70(object.params_type) ? globalThis.String(object.params_type) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.params_type !== "") {
      obj.params_type = message.params_type;
    }
    return obj;
  },
  create(base) {
    return QueryParamsRequest5.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsRequest5();
    message.params_type = object.params_type ?? "";
    return message;
  }
};
var QueryParamsResponse5 = {
  $type: "cosmos.gov.v1beta1.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.voting_params !== void 0) {
      VotingParams.encode(message.voting_params, writer.uint32(10).fork()).join();
    }
    if (message.deposit_params !== void 0) {
      DepositParams.encode(message.deposit_params, writer.uint32(18).fork()).join();
    }
    if (message.tally_params !== void 0) {
      TallyParams.encode(message.tally_params, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse5();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.voting_params = VotingParams.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.deposit_params = DepositParams.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.tally_params = TallyParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      voting_params: isSet70(object.voting_params) ? VotingParams.fromJSON(object.voting_params) : void 0,
      deposit_params: isSet70(object.deposit_params) ? DepositParams.fromJSON(object.deposit_params) : void 0,
      tally_params: isSet70(object.tally_params) ? TallyParams.fromJSON(object.tally_params) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.voting_params !== void 0) {
      obj.voting_params = VotingParams.toJSON(message.voting_params);
    }
    if (message.deposit_params !== void 0) {
      obj.deposit_params = DepositParams.toJSON(message.deposit_params);
    }
    if (message.tally_params !== void 0) {
      obj.tally_params = TallyParams.toJSON(message.tally_params);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse5.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse5();
    message.voting_params = object.voting_params !== void 0 && object.voting_params !== null ? VotingParams.fromPartial(object.voting_params) : void 0;
    message.deposit_params = object.deposit_params !== void 0 && object.deposit_params !== null ? DepositParams.fromPartial(object.deposit_params) : void 0;
    message.tally_params = object.tally_params !== void 0 && object.tally_params !== null ? TallyParams.fromPartial(object.tally_params) : void 0;
    return message;
  }
};
var QueryDepositRequest = {
  $type: "cosmos.gov.v1beta1.QueryDepositRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    if (message.depositor !== "") {
      writer.uint32(18).string(message.depositor);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDepositRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber30(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.depositor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proposal_id: isSet70(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0,
      depositor: isSet70(object.depositor) ? globalThis.String(object.depositor) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    if (message.depositor !== "") {
      obj.depositor = message.depositor;
    }
    return obj;
  },
  create(base) {
    return QueryDepositRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDepositRequest();
    message.proposal_id = object.proposal_id ?? 0;
    message.depositor = object.depositor ?? "";
    return message;
  }
};
var QueryDepositResponse = {
  $type: "cosmos.gov.v1beta1.QueryDepositResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.deposit !== void 0) {
      Deposit.encode(message.deposit, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDepositResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.deposit = Deposit.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { deposit: isSet70(object.deposit) ? Deposit.fromJSON(object.deposit) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.deposit !== void 0) {
      obj.deposit = Deposit.toJSON(message.deposit);
    }
    return obj;
  },
  create(base) {
    return QueryDepositResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDepositResponse();
    message.deposit = object.deposit !== void 0 && object.deposit !== null ? Deposit.fromPartial(object.deposit) : void 0;
    return message;
  }
};
var QueryDepositsRequest = {
  $type: "cosmos.gov.v1beta1.QueryDepositsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDepositsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber30(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proposal_id: isSet70(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0,
      pagination: isSet70(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryDepositsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDepositsRequest();
    message.proposal_id = object.proposal_id ?? 0;
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryDepositsResponse = {
  $type: "cosmos.gov.v1beta1.QueryDepositsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.deposits) {
      Deposit.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDepositsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.deposits.push(Deposit.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      deposits: globalThis.Array.isArray(object == null ? void 0 : object.deposits) ? object.deposits.map((e) => Deposit.fromJSON(e)) : [],
      pagination: isSet70(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.deposits) == null ? void 0 : _a.length) {
      obj.deposits = message.deposits.map((e) => Deposit.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryDepositsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryDepositsResponse();
    message.deposits = ((_a = object.deposits) == null ? void 0 : _a.map((e) => Deposit.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryTallyResultRequest = {
  $type: "cosmos.gov.v1beta1.QueryTallyResultRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryTallyResultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber30(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { proposal_id: isSet70(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    return obj;
  },
  create(base) {
    return QueryTallyResultRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryTallyResultRequest();
    message.proposal_id = object.proposal_id ?? 0;
    return message;
  }
};
var QueryTallyResultResponse = {
  $type: "cosmos.gov.v1beta1.QueryTallyResultResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.tally !== void 0) {
      TallyResult.encode(message.tally, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryTallyResultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.tally = TallyResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { tally: isSet70(object.tally) ? TallyResult.fromJSON(object.tally) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.tally !== void 0) {
      obj.tally = TallyResult.toJSON(message.tally);
    }
    return obj;
  },
  create(base) {
    return QueryTallyResultResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryTallyResultResponse();
    message.tally = object.tally !== void 0 && object.tally !== null ? TallyResult.fromPartial(object.tally) : void 0;
    return message;
  }
};
function createBaseQueryProposalRequest() {
  return { proposal_id: 0 };
}
function createBaseQueryProposalResponse() {
  return { proposal: void 0 };
}
function createBaseQueryProposalsRequest() {
  return { proposal_status: 0, voter: "", depositor: "", pagination: void 0 };
}
function createBaseQueryProposalsResponse() {
  return { proposals: [], pagination: void 0 };
}
function createBaseQueryVoteRequest() {
  return { proposal_id: 0, voter: "" };
}
function createBaseQueryVoteResponse() {
  return { vote: void 0 };
}
function createBaseQueryVotesRequest() {
  return { proposal_id: 0, pagination: void 0 };
}
function createBaseQueryVotesResponse() {
  return { votes: [], pagination: void 0 };
}
function createBaseQueryParamsRequest5() {
  return { params_type: "" };
}
function createBaseQueryParamsResponse5() {
  return { voting_params: void 0, deposit_params: void 0, tally_params: void 0 };
}
function createBaseQueryDepositRequest() {
  return { proposal_id: 0, depositor: "" };
}
function createBaseQueryDepositResponse() {
  return { deposit: void 0 };
}
function createBaseQueryDepositsRequest() {
  return { proposal_id: 0, pagination: void 0 };
}
function createBaseQueryDepositsResponse() {
  return { deposits: [], pagination: void 0 };
}
function createBaseQueryTallyResultRequest() {
  return { proposal_id: 0 };
}
function createBaseQueryTallyResultResponse() {
  return { tally: void 0 };
}
function longToNumber30(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet70(value) {
  return value !== null && value !== void 0;
}
var registry75 = [
  ["/cosmos.gov.v1beta1.QueryProposalRequest", QueryProposalRequest],
  ["/cosmos.gov.v1beta1.QueryProposalResponse", QueryProposalResponse],
  ["/cosmos.gov.v1beta1.QueryProposalsRequest", QueryProposalsRequest],
  ["/cosmos.gov.v1beta1.QueryProposalsResponse", QueryProposalsResponse],
  ["/cosmos.gov.v1beta1.QueryVoteRequest", QueryVoteRequest],
  ["/cosmos.gov.v1beta1.QueryVoteResponse", QueryVoteResponse],
  ["/cosmos.gov.v1beta1.QueryVotesRequest", QueryVotesRequest],
  ["/cosmos.gov.v1beta1.QueryVotesResponse", QueryVotesResponse],
  ["/cosmos.gov.v1beta1.QueryParamsRequest", QueryParamsRequest5],
  ["/cosmos.gov.v1beta1.QueryParamsResponse", QueryParamsResponse5],
  ["/cosmos.gov.v1beta1.QueryDepositRequest", QueryDepositRequest],
  ["/cosmos.gov.v1beta1.QueryDepositResponse", QueryDepositResponse],
  ["/cosmos.gov.v1beta1.QueryDepositsRequest", QueryDepositsRequest],
  ["/cosmos.gov.v1beta1.QueryDepositsResponse", QueryDepositsResponse],
  ["/cosmos.gov.v1beta1.QueryTallyResultRequest", QueryTallyResultRequest],
  ["/cosmos.gov.v1beta1.QueryTallyResultResponse", QueryTallyResultResponse]
];
var aminoConverters75 = {
  "/cosmos.gov.v1beta1.QueryProposalRequest": {
    aminoType: "cosmos-sdk/QueryProposalRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryProposalResponse": {
    aminoType: "cosmos-sdk/QueryProposalResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryProposalsRequest": {
    aminoType: "cosmos-sdk/QueryProposalsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryProposalsResponse": {
    aminoType: "cosmos-sdk/QueryProposalsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryVoteRequest": {
    aminoType: "cosmos-sdk/QueryVoteRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryVoteResponse": {
    aminoType: "cosmos-sdk/QueryVoteResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryVotesRequest": {
    aminoType: "cosmos-sdk/QueryVotesRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryVotesResponse": {
    aminoType: "cosmos-sdk/QueryVotesResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryParamsRequest": {
    aminoType: "cosmos-sdk/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryParamsResponse": {
    aminoType: "cosmos-sdk/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryDepositRequest": {
    aminoType: "cosmos-sdk/QueryDepositRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryDepositResponse": {
    aminoType: "cosmos-sdk/QueryDepositResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryDepositsRequest": {
    aminoType: "cosmos-sdk/QueryDepositsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryDepositsResponse": {
    aminoType: "cosmos-sdk/QueryDepositsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryTallyResultRequest": {
    aminoType: "cosmos-sdk/QueryTallyResultRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.QueryTallyResultResponse": {
    aminoType: "cosmos-sdk/QueryTallyResultResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/gov/v1beta1/tx.js
var MsgSubmitProposal = {
  $type: "cosmos.gov.v1beta1.MsgSubmitProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.content !== void 0) {
      Any.encode(message.content, writer.uint32(10).fork()).join();
    }
    for (const v of message.initial_deposit) {
      Coin.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.proposer !== "") {
      writer.uint32(26).string(message.proposer);
    }
    if (message.is_expedited !== false) {
      writer.uint32(32).bool(message.is_expedited);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.content = Any.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.initial_deposit.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.proposer = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.is_expedited = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      content: isSet71(object.content) ? Any.fromJSON(object.content) : void 0,
      initial_deposit: globalThis.Array.isArray(object == null ? void 0 : object.initial_deposit) ? object.initial_deposit.map((e) => Coin.fromJSON(e)) : [],
      proposer: isSet71(object.proposer) ? globalThis.String(object.proposer) : "",
      is_expedited: isSet71(object.is_expedited) ? globalThis.Boolean(object.is_expedited) : false
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.content !== void 0) {
      obj.content = Any.toJSON(message.content);
    }
    if ((_a = message.initial_deposit) == null ? void 0 : _a.length) {
      obj.initial_deposit = message.initial_deposit.map((e) => Coin.toJSON(e));
    }
    if (message.proposer !== "") {
      obj.proposer = message.proposer;
    }
    if (message.is_expedited !== false) {
      obj.is_expedited = message.is_expedited;
    }
    return obj;
  },
  create(base) {
    return MsgSubmitProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgSubmitProposal();
    message.content = object.content !== void 0 && object.content !== null ? Any.fromPartial(object.content) : void 0;
    message.initial_deposit = ((_a = object.initial_deposit) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    message.proposer = object.proposer ?? "";
    message.is_expedited = object.is_expedited ?? false;
    return message;
  }
};
var MsgSubmitProposalResponse = {
  $type: "cosmos.gov.v1beta1.MsgSubmitProposalResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber31(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { proposal_id: isSet71(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    return obj;
  },
  create(base) {
    return MsgSubmitProposalResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgSubmitProposalResponse();
    message.proposal_id = object.proposal_id ?? 0;
    return message;
  }
};
var MsgVote = {
  $type: "cosmos.gov.v1beta1.MsgVote",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    if (message.voter !== "") {
      writer.uint32(18).string(message.voter);
    }
    if (message.option !== 0) {
      writer.uint32(24).int32(message.option);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber31(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.voter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.option = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proposal_id: isSet71(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0,
      voter: isSet71(object.voter) ? globalThis.String(object.voter) : "",
      option: isSet71(object.option) ? voteOptionFromJSON(object.option) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    if (message.voter !== "") {
      obj.voter = message.voter;
    }
    if (message.option !== 0) {
      obj.option = voteOptionToJSON(message.option);
    }
    return obj;
  },
  create(base) {
    return MsgVote.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgVote();
    message.proposal_id = object.proposal_id ?? 0;
    message.voter = object.voter ?? "";
    message.option = object.option ?? 0;
    return message;
  }
};
var MsgVoteResponse = {
  $type: "cosmos.gov.v1beta1.MsgVoteResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgVoteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgVoteResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgVoteResponse();
    return message;
  }
};
var MsgVoteWeighted = {
  $type: "cosmos.gov.v1beta1.MsgVoteWeighted",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    if (message.voter !== "") {
      writer.uint32(18).string(message.voter);
    }
    for (const v of message.options) {
      WeightedVoteOption.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgVoteWeighted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber31(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.voter = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.options.push(WeightedVoteOption.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proposal_id: isSet71(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0,
      voter: isSet71(object.voter) ? globalThis.String(object.voter) : "",
      options: globalThis.Array.isArray(object == null ? void 0 : object.options) ? object.options.map((e) => WeightedVoteOption.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    if (message.voter !== "") {
      obj.voter = message.voter;
    }
    if ((_a = message.options) == null ? void 0 : _a.length) {
      obj.options = message.options.map((e) => WeightedVoteOption.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return MsgVoteWeighted.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgVoteWeighted();
    message.proposal_id = object.proposal_id ?? 0;
    message.voter = object.voter ?? "";
    message.options = ((_a = object.options) == null ? void 0 : _a.map((e) => WeightedVoteOption.fromPartial(e))) || [];
    return message;
  }
};
var MsgVoteWeightedResponse = {
  $type: "cosmos.gov.v1beta1.MsgVoteWeightedResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgVoteWeightedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgVoteWeightedResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgVoteWeightedResponse();
    return message;
  }
};
var MsgDeposit2 = {
  $type: "cosmos.gov.v1beta1.MsgDeposit",
  encode(message, writer = new BinaryWriter()) {
    if (message.proposal_id !== 0) {
      writer.uint32(8).uint64(message.proposal_id);
    }
    if (message.depositor !== "") {
      writer.uint32(18).string(message.depositor);
    }
    for (const v of message.amount) {
      Coin.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgDeposit2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.proposal_id = longToNumber31(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.depositor = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      proposal_id: isSet71(object.proposal_id) ? globalThis.Number(object.proposal_id) : 0,
      depositor: isSet71(object.depositor) ? globalThis.String(object.depositor) : "",
      amount: globalThis.Array.isArray(object == null ? void 0 : object.amount) ? object.amount.map((e) => Coin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.proposal_id !== 0) {
      obj.proposal_id = Math.round(message.proposal_id);
    }
    if (message.depositor !== "") {
      obj.depositor = message.depositor;
    }
    if ((_a = message.amount) == null ? void 0 : _a.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return MsgDeposit2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgDeposit2();
    message.proposal_id = object.proposal_id ?? 0;
    message.depositor = object.depositor ?? "";
    message.amount = ((_a = object.amount) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    return message;
  }
};
var MsgDepositResponse2 = {
  $type: "cosmos.gov.v1beta1.MsgDepositResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgDepositResponse2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgDepositResponse2.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgDepositResponse2();
    return message;
  }
};
function createBaseMsgSubmitProposal() {
  return { content: void 0, initial_deposit: [], proposer: "", is_expedited: false };
}
function createBaseMsgSubmitProposalResponse() {
  return { proposal_id: 0 };
}
function createBaseMsgVote() {
  return { proposal_id: 0, voter: "", option: 0 };
}
function createBaseMsgVoteResponse() {
  return {};
}
function createBaseMsgVoteWeighted() {
  return { proposal_id: 0, voter: "", options: [] };
}
function createBaseMsgVoteWeightedResponse() {
  return {};
}
function createBaseMsgDeposit2() {
  return { proposal_id: 0, depositor: "", amount: [] };
}
function createBaseMsgDepositResponse2() {
  return {};
}
function longToNumber31(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet71(value) {
  return value !== null && value !== void 0;
}
var registry76 = [
  ["/cosmos.gov.v1beta1.MsgSubmitProposal", MsgSubmitProposal],
  ["/cosmos.gov.v1beta1.MsgSubmitProposalResponse", MsgSubmitProposalResponse],
  ["/cosmos.gov.v1beta1.MsgVote", MsgVote],
  ["/cosmos.gov.v1beta1.MsgVoteResponse", MsgVoteResponse],
  ["/cosmos.gov.v1beta1.MsgVoteWeighted", MsgVoteWeighted],
  ["/cosmos.gov.v1beta1.MsgVoteWeightedResponse", MsgVoteWeightedResponse],
  ["/cosmos.gov.v1beta1.MsgDeposit", MsgDeposit2],
  ["/cosmos.gov.v1beta1.MsgDepositResponse", MsgDepositResponse2]
];
var aminoConverters76 = {
  "/cosmos.gov.v1beta1.MsgSubmitProposal": {
    aminoType: "cosmos-sdk/MsgSubmitProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.MsgSubmitProposalResponse": {
    aminoType: "cosmos-sdk/MsgSubmitProposalResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.MsgVote": {
    aminoType: "cosmos-sdk/MsgVote",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.MsgVoteResponse": {
    aminoType: "cosmos-sdk/MsgVoteResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.MsgVoteWeighted": {
    aminoType: "cosmos-sdk/MsgVoteWeighted",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.MsgVoteWeightedResponse": {
    aminoType: "cosmos-sdk/MsgVoteWeightedResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.MsgDeposit": {
    aminoType: "cosmos-sdk/MsgDeposit",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.gov.v1beta1.MsgDepositResponse": {
    aminoType: "cosmos-sdk/MsgDepositResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/mint/v1beta1/index.js
var v1beta1_exports19 = {};
__export(v1beta1_exports19, {
  GenesisState: () => GenesisState13,
  Minter: () => Minter,
  Params: () => Params6,
  QueryAnnualProvisionsRequest: () => QueryAnnualProvisionsRequest,
  QueryAnnualProvisionsResponse: () => QueryAnnualProvisionsResponse,
  QueryInflationRequest: () => QueryInflationRequest,
  QueryInflationResponse: () => QueryInflationResponse,
  QueryParamsRequest: () => QueryParamsRequest6,
  QueryParamsResponse: () => QueryParamsResponse6
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/mint/v1beta1/mint.js
var Minter = {
  $type: "cosmos.mint.v1beta1.Minter",
  encode(message, writer = new BinaryWriter()) {
    if (message.inflation !== "") {
      writer.uint32(10).string(message.inflation);
    }
    if (message.annual_provisions !== "") {
      writer.uint32(18).string(message.annual_provisions);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMinter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.inflation = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.annual_provisions = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      inflation: isSet72(object.inflation) ? globalThis.String(object.inflation) : "",
      annual_provisions: isSet72(object.annual_provisions) ? globalThis.String(object.annual_provisions) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.inflation !== "") {
      obj.inflation = message.inflation;
    }
    if (message.annual_provisions !== "") {
      obj.annual_provisions = message.annual_provisions;
    }
    return obj;
  },
  create(base) {
    return Minter.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMinter();
    message.inflation = object.inflation ?? "";
    message.annual_provisions = object.annual_provisions ?? "";
    return message;
  }
};
var Params6 = {
  $type: "cosmos.mint.v1beta1.Params",
  encode(message, writer = new BinaryWriter()) {
    if (message.mint_denom !== "") {
      writer.uint32(10).string(message.mint_denom);
    }
    if (message.inflation_rate_change !== "") {
      writer.uint32(18).string(message.inflation_rate_change);
    }
    if (message.inflation_max !== "") {
      writer.uint32(26).string(message.inflation_max);
    }
    if (message.inflation_min !== "") {
      writer.uint32(34).string(message.inflation_min);
    }
    if (message.goal_bonded !== "") {
      writer.uint32(42).string(message.goal_bonded);
    }
    if (message.blocks_per_year !== 0) {
      writer.uint32(48).uint64(message.blocks_per_year);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams6();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.mint_denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.inflation_rate_change = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.inflation_max = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.inflation_min = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.goal_bonded = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.blocks_per_year = longToNumber32(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      mint_denom: isSet72(object.mint_denom) ? globalThis.String(object.mint_denom) : "",
      inflation_rate_change: isSet72(object.inflation_rate_change) ? globalThis.String(object.inflation_rate_change) : "",
      inflation_max: isSet72(object.inflation_max) ? globalThis.String(object.inflation_max) : "",
      inflation_min: isSet72(object.inflation_min) ? globalThis.String(object.inflation_min) : "",
      goal_bonded: isSet72(object.goal_bonded) ? globalThis.String(object.goal_bonded) : "",
      blocks_per_year: isSet72(object.blocks_per_year) ? globalThis.Number(object.blocks_per_year) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.mint_denom !== "") {
      obj.mint_denom = message.mint_denom;
    }
    if (message.inflation_rate_change !== "") {
      obj.inflation_rate_change = message.inflation_rate_change;
    }
    if (message.inflation_max !== "") {
      obj.inflation_max = message.inflation_max;
    }
    if (message.inflation_min !== "") {
      obj.inflation_min = message.inflation_min;
    }
    if (message.goal_bonded !== "") {
      obj.goal_bonded = message.goal_bonded;
    }
    if (message.blocks_per_year !== 0) {
      obj.blocks_per_year = Math.round(message.blocks_per_year);
    }
    return obj;
  },
  create(base) {
    return Params6.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseParams6();
    message.mint_denom = object.mint_denom ?? "";
    message.inflation_rate_change = object.inflation_rate_change ?? "";
    message.inflation_max = object.inflation_max ?? "";
    message.inflation_min = object.inflation_min ?? "";
    message.goal_bonded = object.goal_bonded ?? "";
    message.blocks_per_year = object.blocks_per_year ?? 0;
    return message;
  }
};
function createBaseMinter() {
  return { inflation: "", annual_provisions: "" };
}
function createBaseParams6() {
  return {
    mint_denom: "",
    inflation_rate_change: "",
    inflation_max: "",
    inflation_min: "",
    goal_bonded: "",
    blocks_per_year: 0
  };
}
function longToNumber32(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet72(value) {
  return value !== null && value !== void 0;
}
var registry77 = [
  ["/cosmos.mint.v1beta1.Minter", Minter],
  ["/cosmos.mint.v1beta1.Params", Params6]
];
var aminoConverters77 = {
  "/cosmos.mint.v1beta1.Minter": {
    aminoType: "cosmos-sdk/Minter",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.mint.v1beta1.Params": {
    aminoType: "cosmos-sdk/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/mint/v1beta1/genesis.js
var GenesisState13 = {
  $type: "cosmos.mint.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.minter !== void 0) {
      Minter.encode(message.minter, writer.uint32(10).fork()).join();
    }
    if (message.params !== void 0) {
      Params6.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState13();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.minter = Minter.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.params = Params6.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      minter: isSet73(object.minter) ? Minter.fromJSON(object.minter) : void 0,
      params: isSet73(object.params) ? Params6.fromJSON(object.params) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.minter !== void 0) {
      obj.minter = Minter.toJSON(message.minter);
    }
    if (message.params !== void 0) {
      obj.params = Params6.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return GenesisState13.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGenesisState13();
    message.minter = object.minter !== void 0 && object.minter !== null ? Minter.fromPartial(object.minter) : void 0;
    message.params = object.params !== void 0 && object.params !== null ? Params6.fromPartial(object.params) : void 0;
    return message;
  }
};
function createBaseGenesisState13() {
  return { minter: void 0, params: void 0 };
}
function isSet73(value) {
  return value !== null && value !== void 0;
}
var registry78 = [["/cosmos.mint.v1beta1.GenesisState", GenesisState13]];
var aminoConverters78 = {
  "/cosmos.mint.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/mint/v1beta1/query.js
var QueryParamsRequest6 = {
  $type: "cosmos.mint.v1beta1.QueryParamsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest6();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryParamsRequest6.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest6();
    return message;
  }
};
var QueryParamsResponse6 = {
  $type: "cosmos.mint.v1beta1.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params6.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse6();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params6.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { params: isSet74(object.params) ? Params6.fromJSON(object.params) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params6.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse6.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse6();
    message.params = object.params !== void 0 && object.params !== null ? Params6.fromPartial(object.params) : void 0;
    return message;
  }
};
var QueryInflationRequest = {
  $type: "cosmos.mint.v1beta1.QueryInflationRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryInflationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryInflationRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryInflationRequest();
    return message;
  }
};
var QueryInflationResponse = {
  $type: "cosmos.mint.v1beta1.QueryInflationResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.inflation.length !== 0) {
      writer.uint32(10).bytes(message.inflation);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryInflationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.inflation = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { inflation: isSet74(object.inflation) ? bytesFromBase6430(object.inflation) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.inflation.length !== 0) {
      obj.inflation = base64FromBytes30(message.inflation);
    }
    return obj;
  },
  create(base) {
    return QueryInflationResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryInflationResponse();
    message.inflation = object.inflation ?? new Uint8Array(0);
    return message;
  }
};
var QueryAnnualProvisionsRequest = {
  $type: "cosmos.mint.v1beta1.QueryAnnualProvisionsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAnnualProvisionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryAnnualProvisionsRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryAnnualProvisionsRequest();
    return message;
  }
};
var QueryAnnualProvisionsResponse = {
  $type: "cosmos.mint.v1beta1.QueryAnnualProvisionsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.annual_provisions.length !== 0) {
      writer.uint32(10).bytes(message.annual_provisions);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAnnualProvisionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.annual_provisions = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      annual_provisions: isSet74(object.annual_provisions) ? bytesFromBase6430(object.annual_provisions) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.annual_provisions.length !== 0) {
      obj.annual_provisions = base64FromBytes30(message.annual_provisions);
    }
    return obj;
  },
  create(base) {
    return QueryAnnualProvisionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryAnnualProvisionsResponse();
    message.annual_provisions = object.annual_provisions ?? new Uint8Array(0);
    return message;
  }
};
function createBaseQueryParamsRequest6() {
  return {};
}
function createBaseQueryParamsResponse6() {
  return { params: void 0 };
}
function createBaseQueryInflationRequest() {
  return {};
}
function createBaseQueryInflationResponse() {
  return { inflation: new Uint8Array(0) };
}
function createBaseQueryAnnualProvisionsRequest() {
  return {};
}
function createBaseQueryAnnualProvisionsResponse() {
  return { annual_provisions: new Uint8Array(0) };
}
function bytesFromBase6430(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes30(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet74(value) {
  return value !== null && value !== void 0;
}
var registry79 = [
  ["/cosmos.mint.v1beta1.QueryParamsRequest", QueryParamsRequest6],
  ["/cosmos.mint.v1beta1.QueryParamsResponse", QueryParamsResponse6],
  ["/cosmos.mint.v1beta1.QueryInflationRequest", QueryInflationRequest],
  ["/cosmos.mint.v1beta1.QueryInflationResponse", QueryInflationResponse],
  ["/cosmos.mint.v1beta1.QueryAnnualProvisionsRequest", QueryAnnualProvisionsRequest],
  ["/cosmos.mint.v1beta1.QueryAnnualProvisionsResponse", QueryAnnualProvisionsResponse]
];
var aminoConverters79 = {
  "/cosmos.mint.v1beta1.QueryParamsRequest": {
    aminoType: "cosmos-sdk/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.mint.v1beta1.QueryParamsResponse": {
    aminoType: "cosmos-sdk/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.mint.v1beta1.QueryInflationRequest": {
    aminoType: "cosmos-sdk/QueryInflationRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.mint.v1beta1.QueryInflationResponse": {
    aminoType: "cosmos-sdk/QueryInflationResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.mint.v1beta1.QueryAnnualProvisionsRequest": {
    aminoType: "cosmos-sdk/QueryAnnualProvisionsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.mint.v1beta1.QueryAnnualProvisionsResponse": {
    aminoType: "cosmos-sdk/QueryAnnualProvisionsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/params/types/index.js
var types_exports = {};
__export(types_exports, {
  CosmosGasParams: () => CosmosGasParams,
  FeesParams: () => FeesParams,
  GenesisState: () => GenesisState14,
  aminoConverters: () => aminoConverters80,
  registry: () => registry80
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/params/types/types.js
var FeesParams = {
  $type: "cosmos.params.v1beta1.FeesParams",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.global_minimum_gas_prices) {
      DecCoin.encode(v, writer.uint32(10).fork()).join();
    }
    for (const v of message.allowed_fee_denoms) {
      writer.uint32(18).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFeesParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.global_minimum_gas_prices.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.allowed_fee_denoms.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      global_minimum_gas_prices: globalThis.Array.isArray(object == null ? void 0 : object.global_minimum_gas_prices) ? object.global_minimum_gas_prices.map((e) => DecCoin.fromJSON(e)) : [],
      allowed_fee_denoms: globalThis.Array.isArray(object == null ? void 0 : object.allowed_fee_denoms) ? object.allowed_fee_denoms.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if ((_a = message.global_minimum_gas_prices) == null ? void 0 : _a.length) {
      obj.global_minimum_gas_prices = message.global_minimum_gas_prices.map((e) => DecCoin.toJSON(e));
    }
    if ((_b = message.allowed_fee_denoms) == null ? void 0 : _b.length) {
      obj.allowed_fee_denoms = message.allowed_fee_denoms;
    }
    return obj;
  },
  create(base) {
    return FeesParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseFeesParams();
    message.global_minimum_gas_prices = ((_a = object.global_minimum_gas_prices) == null ? void 0 : _a.map((e) => DecCoin.fromPartial(e))) || [];
    message.allowed_fee_denoms = ((_b = object.allowed_fee_denoms) == null ? void 0 : _b.map((e) => e)) || [];
    return message;
  }
};
var CosmosGasParams = {
  $type: "cosmos.params.v1beta1.CosmosGasParams",
  encode(message, writer = new BinaryWriter()) {
    if (message.cosmos_gas_multiplier_numerator !== 0) {
      writer.uint32(8).uint64(message.cosmos_gas_multiplier_numerator);
    }
    if (message.cosmos_gas_multiplier_denominator !== 0) {
      writer.uint32(16).uint64(message.cosmos_gas_multiplier_denominator);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCosmosGasParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.cosmos_gas_multiplier_numerator = longToNumber33(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.cosmos_gas_multiplier_denominator = longToNumber33(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      cosmos_gas_multiplier_numerator: isSet75(object.cosmos_gas_multiplier_numerator) ? globalThis.Number(object.cosmos_gas_multiplier_numerator) : 0,
      cosmos_gas_multiplier_denominator: isSet75(object.cosmos_gas_multiplier_denominator) ? globalThis.Number(object.cosmos_gas_multiplier_denominator) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.cosmos_gas_multiplier_numerator !== 0) {
      obj.cosmos_gas_multiplier_numerator = Math.round(message.cosmos_gas_multiplier_numerator);
    }
    if (message.cosmos_gas_multiplier_denominator !== 0) {
      obj.cosmos_gas_multiplier_denominator = Math.round(message.cosmos_gas_multiplier_denominator);
    }
    return obj;
  },
  create(base) {
    return CosmosGasParams.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCosmosGasParams();
    message.cosmos_gas_multiplier_numerator = object.cosmos_gas_multiplier_numerator ?? 0;
    message.cosmos_gas_multiplier_denominator = object.cosmos_gas_multiplier_denominator ?? 0;
    return message;
  }
};
var GenesisState14 = {
  $type: "cosmos.params.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.fees_params !== void 0) {
      FeesParams.encode(message.fees_params, writer.uint32(10).fork()).join();
    }
    if (message.cosmos_gas_params !== void 0) {
      CosmosGasParams.encode(message.cosmos_gas_params, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState14();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.fees_params = FeesParams.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.cosmos_gas_params = CosmosGasParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fees_params: isSet75(object.fees_params) ? FeesParams.fromJSON(object.fees_params) : void 0,
      cosmos_gas_params: isSet75(object.cosmos_gas_params) ? CosmosGasParams.fromJSON(object.cosmos_gas_params) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.fees_params !== void 0) {
      obj.fees_params = FeesParams.toJSON(message.fees_params);
    }
    if (message.cosmos_gas_params !== void 0) {
      obj.cosmos_gas_params = CosmosGasParams.toJSON(message.cosmos_gas_params);
    }
    return obj;
  },
  create(base) {
    return GenesisState14.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGenesisState14();
    message.fees_params = object.fees_params !== void 0 && object.fees_params !== null ? FeesParams.fromPartial(object.fees_params) : void 0;
    message.cosmos_gas_params = object.cosmos_gas_params !== void 0 && object.cosmos_gas_params !== null ? CosmosGasParams.fromPartial(object.cosmos_gas_params) : void 0;
    return message;
  }
};
function createBaseFeesParams() {
  return { global_minimum_gas_prices: [], allowed_fee_denoms: [] };
}
function createBaseCosmosGasParams() {
  return { cosmos_gas_multiplier_numerator: 0, cosmos_gas_multiplier_denominator: 0 };
}
function createBaseGenesisState14() {
  return { fees_params: void 0, cosmos_gas_params: void 0 };
}
function longToNumber33(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet75(value) {
  return value !== null && value !== void 0;
}
var registry80 = [
  ["/cosmos.params.v1beta1.FeesParams", FeesParams],
  ["/cosmos.params.v1beta1.CosmosGasParams", CosmosGasParams],
  ["/cosmos.params.v1beta1.GenesisState", GenesisState14]
];
var aminoConverters80 = {
  "/cosmos.params.v1beta1.FeesParams": {
    aminoType: "cosmos-sdk/FeesParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.params.v1beta1.CosmosGasParams": {
    aminoType: "cosmos-sdk/CosmosGasParams",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.params.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/params/v1beta1/index.js
var v1beta1_exports20 = {};
__export(v1beta1_exports20, {
  ParamChange: () => ParamChange,
  ParameterChangeProposal: () => ParameterChangeProposal,
  QueryParamsRequest: () => QueryParamsRequest7,
  QueryParamsResponse: () => QueryParamsResponse7
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/params/v1beta1/params.js
var ParameterChangeProposal = {
  $type: "cosmos.params.v1beta1.ParameterChangeProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.changes) {
      ParamChange.encode(v, writer.uint32(26).fork()).join();
    }
    if (message.is_expedited !== false) {
      writer.uint32(32).bool(message.is_expedited);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParameterChangeProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.changes.push(ParamChange.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.is_expedited = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet76(object.title) ? globalThis.String(object.title) : "",
      description: isSet76(object.description) ? globalThis.String(object.description) : "",
      changes: globalThis.Array.isArray(object == null ? void 0 : object.changes) ? object.changes.map((e) => ParamChange.fromJSON(e)) : [],
      is_expedited: isSet76(object.is_expedited) ? globalThis.Boolean(object.is_expedited) : false
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if ((_a = message.changes) == null ? void 0 : _a.length) {
      obj.changes = message.changes.map((e) => ParamChange.toJSON(e));
    }
    if (message.is_expedited !== false) {
      obj.is_expedited = message.is_expedited;
    }
    return obj;
  },
  create(base) {
    return ParameterChangeProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseParameterChangeProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.changes = ((_a = object.changes) == null ? void 0 : _a.map((e) => ParamChange.fromPartial(e))) || [];
    message.is_expedited = object.is_expedited ?? false;
    return message;
  }
};
var ParamChange = {
  $type: "cosmos.params.v1beta1.ParamChange",
  encode(message, writer = new BinaryWriter()) {
    if (message.subspace !== "") {
      writer.uint32(10).string(message.subspace);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParamChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.subspace = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.key = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      subspace: isSet76(object.subspace) ? globalThis.String(object.subspace) : "",
      key: isSet76(object.key) ? globalThis.String(object.key) : "",
      value: isSet76(object.value) ? globalThis.String(object.value) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.subspace !== "") {
      obj.subspace = message.subspace;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
  create(base) {
    return ParamChange.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseParamChange();
    message.subspace = object.subspace ?? "";
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  }
};
function createBaseParameterChangeProposal() {
  return { title: "", description: "", changes: [], is_expedited: false };
}
function createBaseParamChange() {
  return { subspace: "", key: "", value: "" };
}
function isSet76(value) {
  return value !== null && value !== void 0;
}
var registry81 = [
  ["/cosmos.params.v1beta1.ParameterChangeProposal", ParameterChangeProposal],
  ["/cosmos.params.v1beta1.ParamChange", ParamChange]
];
var aminoConverters81 = {
  "/cosmos.params.v1beta1.ParameterChangeProposal": {
    aminoType: "cosmos-sdk/ParameterChangeProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.params.v1beta1.ParamChange": {
    aminoType: "cosmos-sdk/ParamChange",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/params/v1beta1/query.js
var QueryParamsRequest7 = {
  $type: "cosmos.params.v1beta1.QueryParamsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.subspace !== "") {
      writer.uint32(10).string(message.subspace);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest7();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.subspace = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      subspace: isSet77(object.subspace) ? globalThis.String(object.subspace) : "",
      key: isSet77(object.key) ? globalThis.String(object.key) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.subspace !== "") {
      obj.subspace = message.subspace;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },
  create(base) {
    return QueryParamsRequest7.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsRequest7();
    message.subspace = object.subspace ?? "";
    message.key = object.key ?? "";
    return message;
  }
};
var QueryParamsResponse7 = {
  $type: "cosmos.params.v1beta1.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.param !== void 0) {
      ParamChange.encode(message.param, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse7();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.param = ParamChange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { param: isSet77(object.param) ? ParamChange.fromJSON(object.param) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.param !== void 0) {
      obj.param = ParamChange.toJSON(message.param);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse7.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse7();
    message.param = object.param !== void 0 && object.param !== null ? ParamChange.fromPartial(object.param) : void 0;
    return message;
  }
};
function createBaseQueryParamsRequest7() {
  return { subspace: "", key: "" };
}
function createBaseQueryParamsResponse7() {
  return { param: void 0 };
}
function isSet77(value) {
  return value !== null && value !== void 0;
}
var registry82 = [
  ["/cosmos.params.v1beta1.QueryParamsRequest", QueryParamsRequest7],
  ["/cosmos.params.v1beta1.QueryParamsResponse", QueryParamsResponse7]
];
var aminoConverters82 = {
  "/cosmos.params.v1beta1.QueryParamsRequest": {
    aminoType: "cosmos-sdk/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.params.v1beta1.QueryParamsResponse": {
    aminoType: "cosmos-sdk/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/slashing/v1beta1/index.js
var v1beta1_exports21 = {};
__export(v1beta1_exports21, {
  GenesisState: () => GenesisState15,
  GenesisStateLegacyMissingHeights: () => GenesisStateLegacyMissingHeights,
  GenesisStateLegacyV43: () => GenesisStateLegacyV43,
  MissedBlock: () => MissedBlock,
  MsgUnjail: () => MsgUnjail,
  MsgUnjailResponse: () => MsgUnjailResponse,
  Params: () => Params7,
  QueryParamsRequest: () => QueryParamsRequest8,
  QueryParamsResponse: () => QueryParamsResponse8,
  QuerySigningInfoRequest: () => QuerySigningInfoRequest,
  QuerySigningInfoResponse: () => QuerySigningInfoResponse,
  QuerySigningInfosRequest: () => QuerySigningInfosRequest,
  QuerySigningInfosResponse: () => QuerySigningInfosResponse,
  SigningInfo: () => SigningInfo,
  SigningInfoLegacyMissedHeights: () => SigningInfoLegacyMissedHeights,
  ValidatorMissedBlockArray: () => ValidatorMissedBlockArray,
  ValidatorMissedBlockArrayLegacyMissedHeights: () => ValidatorMissedBlockArrayLegacyMissedHeights,
  ValidatorMissedBlocks: () => ValidatorMissedBlocks,
  ValidatorSigningInfo: () => ValidatorSigningInfo,
  ValidatorSigningInfoLegacyMissedHeights: () => ValidatorSigningInfoLegacyMissedHeights
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/slashing/v1beta1/slashing.js
var ValidatorSigningInfoLegacyMissedHeights = {
  $type: "cosmos.slashing.v1beta1.ValidatorSigningInfoLegacyMissedHeights",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.start_height !== 0) {
      writer.uint32(16).int64(message.start_height);
    }
    if (message.jailed_until !== void 0) {
      Timestamp.encode(toTimestamp9(message.jailed_until), writer.uint32(26).fork()).join();
    }
    if (message.tombstoned !== false) {
      writer.uint32(32).bool(message.tombstoned);
    }
    if (message.missed_blocks_counter !== 0) {
      writer.uint32(40).int64(message.missed_blocks_counter);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorSigningInfoLegacyMissedHeights();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.start_height = longToNumber34(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.jailed_until = fromTimestamp9(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.tombstoned = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.missed_blocks_counter = longToNumber34(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet78(object.address) ? globalThis.String(object.address) : "",
      start_height: isSet78(object.start_height) ? globalThis.Number(object.start_height) : 0,
      jailed_until: isSet78(object.jailed_until) ? fromJsonTimestamp9(object.jailed_until) : void 0,
      tombstoned: isSet78(object.tombstoned) ? globalThis.Boolean(object.tombstoned) : false,
      missed_blocks_counter: isSet78(object.missed_blocks_counter) ? globalThis.Number(object.missed_blocks_counter) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.start_height !== 0) {
      obj.start_height = Math.round(message.start_height);
    }
    if (message.jailed_until !== void 0) {
      obj.jailed_until = message.jailed_until.toISOString();
    }
    if (message.tombstoned !== false) {
      obj.tombstoned = message.tombstoned;
    }
    if (message.missed_blocks_counter !== 0) {
      obj.missed_blocks_counter = Math.round(message.missed_blocks_counter);
    }
    return obj;
  },
  create(base) {
    return ValidatorSigningInfoLegacyMissedHeights.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidatorSigningInfoLegacyMissedHeights();
    message.address = object.address ?? "";
    message.start_height = object.start_height ?? 0;
    message.jailed_until = object.jailed_until ?? void 0;
    message.tombstoned = object.tombstoned ?? false;
    message.missed_blocks_counter = object.missed_blocks_counter ?? 0;
    return message;
  }
};
var ValidatorSigningInfo = {
  $type: "cosmos.slashing.v1beta1.ValidatorSigningInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.start_height !== 0) {
      writer.uint32(16).int64(message.start_height);
    }
    if (message.index_offset !== 0) {
      writer.uint32(24).int64(message.index_offset);
    }
    if (message.jailed_until !== void 0) {
      Timestamp.encode(toTimestamp9(message.jailed_until), writer.uint32(34).fork()).join();
    }
    if (message.tombstoned !== false) {
      writer.uint32(40).bool(message.tombstoned);
    }
    if (message.missed_blocks_counter !== 0) {
      writer.uint32(48).int64(message.missed_blocks_counter);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorSigningInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.start_height = longToNumber34(reader.int64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.index_offset = longToNumber34(reader.int64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.jailed_until = fromTimestamp9(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.tombstoned = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.missed_blocks_counter = longToNumber34(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet78(object.address) ? globalThis.String(object.address) : "",
      start_height: isSet78(object.start_height) ? globalThis.Number(object.start_height) : 0,
      index_offset: isSet78(object.index_offset) ? globalThis.Number(object.index_offset) : 0,
      jailed_until: isSet78(object.jailed_until) ? fromJsonTimestamp9(object.jailed_until) : void 0,
      tombstoned: isSet78(object.tombstoned) ? globalThis.Boolean(object.tombstoned) : false,
      missed_blocks_counter: isSet78(object.missed_blocks_counter) ? globalThis.Number(object.missed_blocks_counter) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.start_height !== 0) {
      obj.start_height = Math.round(message.start_height);
    }
    if (message.index_offset !== 0) {
      obj.index_offset = Math.round(message.index_offset);
    }
    if (message.jailed_until !== void 0) {
      obj.jailed_until = message.jailed_until.toISOString();
    }
    if (message.tombstoned !== false) {
      obj.tombstoned = message.tombstoned;
    }
    if (message.missed_blocks_counter !== 0) {
      obj.missed_blocks_counter = Math.round(message.missed_blocks_counter);
    }
    return obj;
  },
  create(base) {
    return ValidatorSigningInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidatorSigningInfo();
    message.address = object.address ?? "";
    message.start_height = object.start_height ?? 0;
    message.index_offset = object.index_offset ?? 0;
    message.jailed_until = object.jailed_until ?? void 0;
    message.tombstoned = object.tombstoned ?? false;
    message.missed_blocks_counter = object.missed_blocks_counter ?? 0;
    return message;
  }
};
var ValidatorMissedBlockArrayLegacyMissedHeights = {
  $type: "cosmos.slashing.v1beta1.ValidatorMissedBlockArrayLegacyMissedHeights",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    writer.uint32(18).fork();
    for (const v of message.missed_heights) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorMissedBlockArrayLegacyMissedHeights();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.missed_heights.push(longToNumber34(reader.int64()));
            continue;
          }
          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.missed_heights.push(longToNumber34(reader.int64()));
            }
            continue;
          }
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet78(object.address) ? globalThis.String(object.address) : "",
      missed_heights: globalThis.Array.isArray(object == null ? void 0 : object.missed_heights) ? object.missed_heights.map((e) => globalThis.Number(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if ((_a = message.missed_heights) == null ? void 0 : _a.length) {
      obj.missed_heights = message.missed_heights.map((e) => Math.round(e));
    }
    return obj;
  },
  create(base) {
    return ValidatorMissedBlockArrayLegacyMissedHeights.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseValidatorMissedBlockArrayLegacyMissedHeights();
    message.address = object.address ?? "";
    message.missed_heights = ((_a = object.missed_heights) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var ValidatorMissedBlockArray = {
  $type: "cosmos.slashing.v1beta1.ValidatorMissedBlockArray",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.window_size !== 0) {
      writer.uint32(16).int64(message.window_size);
    }
    writer.uint32(26).fork();
    for (const v of message.missed_blocks) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorMissedBlockArray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.window_size = longToNumber34(reader.int64());
          continue;
        case 3:
          if (tag === 24) {
            message.missed_blocks.push(longToNumber34(reader.uint64()));
            continue;
          }
          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.missed_blocks.push(longToNumber34(reader.uint64()));
            }
            continue;
          }
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet78(object.address) ? globalThis.String(object.address) : "",
      window_size: isSet78(object.window_size) ? globalThis.Number(object.window_size) : 0,
      missed_blocks: globalThis.Array.isArray(object == null ? void 0 : object.missed_blocks) ? object.missed_blocks.map((e) => globalThis.Number(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.window_size !== 0) {
      obj.window_size = Math.round(message.window_size);
    }
    if ((_a = message.missed_blocks) == null ? void 0 : _a.length) {
      obj.missed_blocks = message.missed_blocks.map((e) => Math.round(e));
    }
    return obj;
  },
  create(base) {
    return ValidatorMissedBlockArray.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseValidatorMissedBlockArray();
    message.address = object.address ?? "";
    message.window_size = object.window_size ?? 0;
    message.missed_blocks = ((_a = object.missed_blocks) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var Params7 = {
  $type: "cosmos.slashing.v1beta1.Params",
  encode(message, writer = new BinaryWriter()) {
    if (message.signed_blocks_window !== 0) {
      writer.uint32(8).int64(message.signed_blocks_window);
    }
    if (message.min_signed_per_window.length !== 0) {
      writer.uint32(18).bytes(message.min_signed_per_window);
    }
    if (message.downtime_jail_duration !== void 0) {
      Duration.encode(message.downtime_jail_duration, writer.uint32(26).fork()).join();
    }
    if (message.slash_fraction_double_sign.length !== 0) {
      writer.uint32(34).bytes(message.slash_fraction_double_sign);
    }
    if (message.slash_fraction_downtime.length !== 0) {
      writer.uint32(42).bytes(message.slash_fraction_downtime);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams7();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.signed_blocks_window = longToNumber34(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.min_signed_per_window = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.downtime_jail_duration = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.slash_fraction_double_sign = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.slash_fraction_downtime = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      signed_blocks_window: isSet78(object.signed_blocks_window) ? globalThis.Number(object.signed_blocks_window) : 0,
      min_signed_per_window: isSet78(object.min_signed_per_window) ? bytesFromBase6431(object.min_signed_per_window) : new Uint8Array(0),
      downtime_jail_duration: isSet78(object.downtime_jail_duration) ? Duration.fromJSON(object.downtime_jail_duration) : void 0,
      slash_fraction_double_sign: isSet78(object.slash_fraction_double_sign) ? bytesFromBase6431(object.slash_fraction_double_sign) : new Uint8Array(0),
      slash_fraction_downtime: isSet78(object.slash_fraction_downtime) ? bytesFromBase6431(object.slash_fraction_downtime) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.signed_blocks_window !== 0) {
      obj.signed_blocks_window = Math.round(message.signed_blocks_window);
    }
    if (message.min_signed_per_window.length !== 0) {
      obj.min_signed_per_window = base64FromBytes31(message.min_signed_per_window);
    }
    if (message.downtime_jail_duration !== void 0) {
      obj.downtime_jail_duration = Duration.toJSON(message.downtime_jail_duration);
    }
    if (message.slash_fraction_double_sign.length !== 0) {
      obj.slash_fraction_double_sign = base64FromBytes31(message.slash_fraction_double_sign);
    }
    if (message.slash_fraction_downtime.length !== 0) {
      obj.slash_fraction_downtime = base64FromBytes31(message.slash_fraction_downtime);
    }
    return obj;
  },
  create(base) {
    return Params7.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseParams7();
    message.signed_blocks_window = object.signed_blocks_window ?? 0;
    message.min_signed_per_window = object.min_signed_per_window ?? new Uint8Array(0);
    message.downtime_jail_duration = object.downtime_jail_duration !== void 0 && object.downtime_jail_duration !== null ? Duration.fromPartial(object.downtime_jail_duration) : void 0;
    message.slash_fraction_double_sign = object.slash_fraction_double_sign ?? new Uint8Array(0);
    message.slash_fraction_downtime = object.slash_fraction_downtime ?? new Uint8Array(0);
    return message;
  }
};
function createBaseValidatorSigningInfoLegacyMissedHeights() {
  return { address: "", start_height: 0, jailed_until: void 0, tombstoned: false, missed_blocks_counter: 0 };
}
function createBaseValidatorSigningInfo() {
  return {
    address: "",
    start_height: 0,
    index_offset: 0,
    jailed_until: void 0,
    tombstoned: false,
    missed_blocks_counter: 0
  };
}
function createBaseValidatorMissedBlockArrayLegacyMissedHeights() {
  return { address: "", missed_heights: [] };
}
function createBaseValidatorMissedBlockArray() {
  return { address: "", window_size: 0, missed_blocks: [] };
}
function createBaseParams7() {
  return {
    signed_blocks_window: 0,
    min_signed_per_window: new Uint8Array(0),
    downtime_jail_duration: void 0,
    slash_fraction_double_sign: new Uint8Array(0),
    slash_fraction_downtime: new Uint8Array(0)
  };
}
function bytesFromBase6431(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes31(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function toTimestamp9(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp9(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp9(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp9(Timestamp.fromJSON(o));
  }
}
function longToNumber34(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet78(value) {
  return value !== null && value !== void 0;
}
var registry83 = [
  ["/cosmos.slashing.v1beta1.ValidatorSigningInfoLegacyMissedHeights", ValidatorSigningInfoLegacyMissedHeights],
  ["/cosmos.slashing.v1beta1.ValidatorSigningInfo", ValidatorSigningInfo],
  ["/cosmos.slashing.v1beta1.ValidatorMissedBlockArrayLegacyMissedHeights", ValidatorMissedBlockArrayLegacyMissedHeights],
  ["/cosmos.slashing.v1beta1.ValidatorMissedBlockArray", ValidatorMissedBlockArray],
  ["/cosmos.slashing.v1beta1.Params", Params7]
];
var aminoConverters83 = {
  "/cosmos.slashing.v1beta1.ValidatorSigningInfoLegacyMissedHeights": {
    aminoType: "cosmos-sdk/ValidatorSigningInfoLegacyMissedHeights",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.ValidatorSigningInfo": {
    aminoType: "cosmos-sdk/ValidatorSigningInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.ValidatorMissedBlockArrayLegacyMissedHeights": {
    aminoType: "cosmos-sdk/ValidatorMissedBlockArrayLegacyMissedHeights",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.ValidatorMissedBlockArray": {
    aminoType: "cosmos-sdk/ValidatorMissedBlockArray",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.Params": {
    aminoType: "cosmos-sdk/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/slashing/v1beta1/genesis.js
var GenesisState15 = {
  $type: "cosmos.slashing.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params7.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.signing_infos) {
      SigningInfo.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.missed_blocks) {
      ValidatorMissedBlockArray.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState15();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params7.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.signing_infos.push(SigningInfo.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.missed_blocks.push(ValidatorMissedBlockArray.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet79(object.params) ? Params7.fromJSON(object.params) : void 0,
      signing_infos: globalThis.Array.isArray(object == null ? void 0 : object.signing_infos) ? object.signing_infos.map((e) => SigningInfo.fromJSON(e)) : [],
      missed_blocks: globalThis.Array.isArray(object == null ? void 0 : object.missed_blocks) ? object.missed_blocks.map((e) => ValidatorMissedBlockArray.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params7.toJSON(message.params);
    }
    if ((_a = message.signing_infos) == null ? void 0 : _a.length) {
      obj.signing_infos = message.signing_infos.map((e) => SigningInfo.toJSON(e));
    }
    if ((_b = message.missed_blocks) == null ? void 0 : _b.length) {
      obj.missed_blocks = message.missed_blocks.map((e) => ValidatorMissedBlockArray.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState15.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseGenesisState15();
    message.params = object.params !== void 0 && object.params !== null ? Params7.fromPartial(object.params) : void 0;
    message.signing_infos = ((_a = object.signing_infos) == null ? void 0 : _a.map((e) => SigningInfo.fromPartial(e))) || [];
    message.missed_blocks = ((_b = object.missed_blocks) == null ? void 0 : _b.map((e) => ValidatorMissedBlockArray.fromPartial(e))) || [];
    return message;
  }
};
var GenesisStateLegacyMissingHeights = {
  $type: "cosmos.slashing.v1beta1.GenesisStateLegacyMissingHeights",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params7.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.signing_infos) {
      SigningInfo.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.missed_blocks) {
      ValidatorMissedBlockArrayLegacyMissedHeights.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisStateLegacyMissingHeights();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params7.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.signing_infos.push(SigningInfo.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.missed_blocks.push(ValidatorMissedBlockArrayLegacyMissedHeights.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet79(object.params) ? Params7.fromJSON(object.params) : void 0,
      signing_infos: globalThis.Array.isArray(object == null ? void 0 : object.signing_infos) ? object.signing_infos.map((e) => SigningInfo.fromJSON(e)) : [],
      missed_blocks: globalThis.Array.isArray(object == null ? void 0 : object.missed_blocks) ? object.missed_blocks.map((e) => ValidatorMissedBlockArrayLegacyMissedHeights.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params7.toJSON(message.params);
    }
    if ((_a = message.signing_infos) == null ? void 0 : _a.length) {
      obj.signing_infos = message.signing_infos.map((e) => SigningInfo.toJSON(e));
    }
    if ((_b = message.missed_blocks) == null ? void 0 : _b.length) {
      obj.missed_blocks = message.missed_blocks.map((e) => ValidatorMissedBlockArrayLegacyMissedHeights.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisStateLegacyMissingHeights.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseGenesisStateLegacyMissingHeights();
    message.params = object.params !== void 0 && object.params !== null ? Params7.fromPartial(object.params) : void 0;
    message.signing_infos = ((_a = object.signing_infos) == null ? void 0 : _a.map((e) => SigningInfo.fromPartial(e))) || [];
    message.missed_blocks = ((_b = object.missed_blocks) == null ? void 0 : _b.map((e) => ValidatorMissedBlockArrayLegacyMissedHeights.fromPartial(e))) || [];
    return message;
  }
};
var GenesisStateLegacyV43 = {
  $type: "cosmos.slashing.v1beta1.GenesisStateLegacyV43",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params7.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.signing_infos) {
      SigningInfo.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.missed_blocks) {
      ValidatorMissedBlocks.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisStateLegacyV43();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params7.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.signing_infos.push(SigningInfo.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.missed_blocks.push(ValidatorMissedBlocks.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet79(object.params) ? Params7.fromJSON(object.params) : void 0,
      signing_infos: globalThis.Array.isArray(object == null ? void 0 : object.signing_infos) ? object.signing_infos.map((e) => SigningInfo.fromJSON(e)) : [],
      missed_blocks: globalThis.Array.isArray(object == null ? void 0 : object.missed_blocks) ? object.missed_blocks.map((e) => ValidatorMissedBlocks.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params7.toJSON(message.params);
    }
    if ((_a = message.signing_infos) == null ? void 0 : _a.length) {
      obj.signing_infos = message.signing_infos.map((e) => SigningInfo.toJSON(e));
    }
    if ((_b = message.missed_blocks) == null ? void 0 : _b.length) {
      obj.missed_blocks = message.missed_blocks.map((e) => ValidatorMissedBlocks.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisStateLegacyV43.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseGenesisStateLegacyV43();
    message.params = object.params !== void 0 && object.params !== null ? Params7.fromPartial(object.params) : void 0;
    message.signing_infos = ((_a = object.signing_infos) == null ? void 0 : _a.map((e) => SigningInfo.fromPartial(e))) || [];
    message.missed_blocks = ((_b = object.missed_blocks) == null ? void 0 : _b.map((e) => ValidatorMissedBlocks.fromPartial(e))) || [];
    return message;
  }
};
var SigningInfo = {
  $type: "cosmos.slashing.v1beta1.SigningInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.validator_signing_info !== void 0) {
      ValidatorSigningInfo.encode(message.validator_signing_info, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSigningInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_signing_info = ValidatorSigningInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet79(object.address) ? globalThis.String(object.address) : "",
      validator_signing_info: isSet79(object.validator_signing_info) ? ValidatorSigningInfo.fromJSON(object.validator_signing_info) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.validator_signing_info !== void 0) {
      obj.validator_signing_info = ValidatorSigningInfo.toJSON(message.validator_signing_info);
    }
    return obj;
  },
  create(base) {
    return SigningInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSigningInfo();
    message.address = object.address ?? "";
    message.validator_signing_info = object.validator_signing_info !== void 0 && object.validator_signing_info !== null ? ValidatorSigningInfo.fromPartial(object.validator_signing_info) : void 0;
    return message;
  }
};
var SigningInfoLegacyMissedHeights = {
  $type: "cosmos.slashing.v1beta1.SigningInfoLegacyMissedHeights",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.validator_signing_info !== void 0) {
      ValidatorSigningInfoLegacyMissedHeights.encode(message.validator_signing_info, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSigningInfoLegacyMissedHeights();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_signing_info = ValidatorSigningInfoLegacyMissedHeights.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet79(object.address) ? globalThis.String(object.address) : "",
      validator_signing_info: isSet79(object.validator_signing_info) ? ValidatorSigningInfoLegacyMissedHeights.fromJSON(object.validator_signing_info) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.validator_signing_info !== void 0) {
      obj.validator_signing_info = ValidatorSigningInfoLegacyMissedHeights.toJSON(message.validator_signing_info);
    }
    return obj;
  },
  create(base) {
    return SigningInfoLegacyMissedHeights.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSigningInfoLegacyMissedHeights();
    message.address = object.address ?? "";
    message.validator_signing_info = object.validator_signing_info !== void 0 && object.validator_signing_info !== null ? ValidatorSigningInfoLegacyMissedHeights.fromPartial(object.validator_signing_info) : void 0;
    return message;
  }
};
var ValidatorMissedBlocks = {
  $type: "cosmos.slashing.v1beta1.ValidatorMissedBlocks",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.missed_blocks) {
      MissedBlock.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidatorMissedBlocks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.missed_blocks.push(MissedBlock.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet79(object.address) ? globalThis.String(object.address) : "",
      missed_blocks: globalThis.Array.isArray(object == null ? void 0 : object.missed_blocks) ? object.missed_blocks.map((e) => MissedBlock.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if ((_a = message.missed_blocks) == null ? void 0 : _a.length) {
      obj.missed_blocks = message.missed_blocks.map((e) => MissedBlock.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ValidatorMissedBlocks.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseValidatorMissedBlocks();
    message.address = object.address ?? "";
    message.missed_blocks = ((_a = object.missed_blocks) == null ? void 0 : _a.map((e) => MissedBlock.fromPartial(e))) || [];
    return message;
  }
};
var MissedBlock = {
  $type: "cosmos.slashing.v1beta1.MissedBlock",
  encode(message, writer = new BinaryWriter()) {
    if (message.index !== 0) {
      writer.uint32(8).int64(message.index);
    }
    if (message.missed !== false) {
      writer.uint32(16).bool(message.missed);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMissedBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.index = longToNumber35(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.missed = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      index: isSet79(object.index) ? globalThis.Number(object.index) : 0,
      missed: isSet79(object.missed) ? globalThis.Boolean(object.missed) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.missed !== false) {
      obj.missed = message.missed;
    }
    return obj;
  },
  create(base) {
    return MissedBlock.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMissedBlock();
    message.index = object.index ?? 0;
    message.missed = object.missed ?? false;
    return message;
  }
};
function createBaseGenesisState15() {
  return { params: void 0, signing_infos: [], missed_blocks: [] };
}
function createBaseGenesisStateLegacyMissingHeights() {
  return { params: void 0, signing_infos: [], missed_blocks: [] };
}
function createBaseGenesisStateLegacyV43() {
  return { params: void 0, signing_infos: [], missed_blocks: [] };
}
function createBaseSigningInfo() {
  return { address: "", validator_signing_info: void 0 };
}
function createBaseSigningInfoLegacyMissedHeights() {
  return { address: "", validator_signing_info: void 0 };
}
function createBaseValidatorMissedBlocks() {
  return { address: "", missed_blocks: [] };
}
function createBaseMissedBlock() {
  return { index: 0, missed: false };
}
function longToNumber35(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet79(value) {
  return value !== null && value !== void 0;
}
var registry84 = [
  ["/cosmos.slashing.v1beta1.GenesisState", GenesisState15],
  ["/cosmos.slashing.v1beta1.GenesisStateLegacyMissingHeights", GenesisStateLegacyMissingHeights],
  ["/cosmos.slashing.v1beta1.GenesisStateLegacyV43", GenesisStateLegacyV43],
  ["/cosmos.slashing.v1beta1.SigningInfo", SigningInfo],
  ["/cosmos.slashing.v1beta1.SigningInfoLegacyMissedHeights", SigningInfoLegacyMissedHeights],
  ["/cosmos.slashing.v1beta1.ValidatorMissedBlocks", ValidatorMissedBlocks],
  ["/cosmos.slashing.v1beta1.MissedBlock", MissedBlock]
];
var aminoConverters84 = {
  "/cosmos.slashing.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.GenesisStateLegacyMissingHeights": {
    aminoType: "cosmos-sdk/GenesisStateLegacyMissingHeights",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.GenesisStateLegacyV43": {
    aminoType: "cosmos-sdk/GenesisStateLegacyV43",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.SigningInfo": {
    aminoType: "cosmos-sdk/SigningInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.SigningInfoLegacyMissedHeights": {
    aminoType: "cosmos-sdk/SigningInfoLegacyMissedHeights",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.ValidatorMissedBlocks": {
    aminoType: "cosmos-sdk/ValidatorMissedBlocks",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.MissedBlock": {
    aminoType: "cosmos-sdk/MissedBlock",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/slashing/v1beta1/query.js
var QueryParamsRequest8 = {
  $type: "cosmos.slashing.v1beta1.QueryParamsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest8();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryParamsRequest8.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest8();
    return message;
  }
};
var QueryParamsResponse8 = {
  $type: "cosmos.slashing.v1beta1.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params7.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse8();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params7.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { params: isSet80(object.params) ? Params7.fromJSON(object.params) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params7.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse8.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse8();
    message.params = object.params !== void 0 && object.params !== null ? Params7.fromPartial(object.params) : void 0;
    return message;
  }
};
var QuerySigningInfoRequest = {
  $type: "cosmos.slashing.v1beta1.QuerySigningInfoRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.cons_address !== "") {
      writer.uint32(10).string(message.cons_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQuerySigningInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.cons_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { cons_address: isSet80(object.cons_address) ? globalThis.String(object.cons_address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.cons_address !== "") {
      obj.cons_address = message.cons_address;
    }
    return obj;
  },
  create(base) {
    return QuerySigningInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQuerySigningInfoRequest();
    message.cons_address = object.cons_address ?? "";
    return message;
  }
};
var QuerySigningInfoResponse = {
  $type: "cosmos.slashing.v1beta1.QuerySigningInfoResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.val_signing_info !== void 0) {
      ValidatorSigningInfo.encode(message.val_signing_info, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQuerySigningInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.val_signing_info = ValidatorSigningInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      val_signing_info: isSet80(object.val_signing_info) ? ValidatorSigningInfo.fromJSON(object.val_signing_info) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.val_signing_info !== void 0) {
      obj.val_signing_info = ValidatorSigningInfo.toJSON(message.val_signing_info);
    }
    return obj;
  },
  create(base) {
    return QuerySigningInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQuerySigningInfoResponse();
    message.val_signing_info = object.val_signing_info !== void 0 && object.val_signing_info !== null ? ValidatorSigningInfo.fromPartial(object.val_signing_info) : void 0;
    return message;
  }
};
var QuerySigningInfosRequest = {
  $type: "cosmos.slashing.v1beta1.QuerySigningInfosRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQuerySigningInfosRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { pagination: isSet80(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QuerySigningInfosRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQuerySigningInfosRequest();
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QuerySigningInfosResponse = {
  $type: "cosmos.slashing.v1beta1.QuerySigningInfosResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.info) {
      ValidatorSigningInfo.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQuerySigningInfosResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.info.push(ValidatorSigningInfo.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      info: globalThis.Array.isArray(object == null ? void 0 : object.info) ? object.info.map((e) => ValidatorSigningInfo.fromJSON(e)) : [],
      pagination: isSet80(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.info) == null ? void 0 : _a.length) {
      obj.info = message.info.map((e) => ValidatorSigningInfo.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QuerySigningInfosResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQuerySigningInfosResponse();
    message.info = ((_a = object.info) == null ? void 0 : _a.map((e) => ValidatorSigningInfo.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
function createBaseQueryParamsRequest8() {
  return {};
}
function createBaseQueryParamsResponse8() {
  return { params: void 0 };
}
function createBaseQuerySigningInfoRequest() {
  return { cons_address: "" };
}
function createBaseQuerySigningInfoResponse() {
  return { val_signing_info: void 0 };
}
function createBaseQuerySigningInfosRequest() {
  return { pagination: void 0 };
}
function createBaseQuerySigningInfosResponse() {
  return { info: [], pagination: void 0 };
}
function isSet80(value) {
  return value !== null && value !== void 0;
}
var registry85 = [
  ["/cosmos.slashing.v1beta1.QueryParamsRequest", QueryParamsRequest8],
  ["/cosmos.slashing.v1beta1.QueryParamsResponse", QueryParamsResponse8],
  ["/cosmos.slashing.v1beta1.QuerySigningInfoRequest", QuerySigningInfoRequest],
  ["/cosmos.slashing.v1beta1.QuerySigningInfoResponse", QuerySigningInfoResponse],
  ["/cosmos.slashing.v1beta1.QuerySigningInfosRequest", QuerySigningInfosRequest],
  ["/cosmos.slashing.v1beta1.QuerySigningInfosResponse", QuerySigningInfosResponse]
];
var aminoConverters85 = {
  "/cosmos.slashing.v1beta1.QueryParamsRequest": {
    aminoType: "cosmos-sdk/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.QueryParamsResponse": {
    aminoType: "cosmos-sdk/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.QuerySigningInfoRequest": {
    aminoType: "cosmos-sdk/QuerySigningInfoRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.QuerySigningInfoResponse": {
    aminoType: "cosmos-sdk/QuerySigningInfoResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.QuerySigningInfosRequest": {
    aminoType: "cosmos-sdk/QuerySigningInfosRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.QuerySigningInfosResponse": {
    aminoType: "cosmos-sdk/QuerySigningInfosResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/slashing/v1beta1/tx.js
var MsgUnjail = {
  $type: "cosmos.slashing.v1beta1.MsgUnjail",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_addr !== "") {
      writer.uint32(10).string(message.validator_addr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgUnjail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_addr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { validator_addr: isSet81(object.validator_addr) ? globalThis.String(object.validator_addr) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_addr !== "") {
      obj.validator_addr = message.validator_addr;
    }
    return obj;
  },
  create(base) {
    return MsgUnjail.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgUnjail();
    message.validator_addr = object.validator_addr ?? "";
    return message;
  }
};
var MsgUnjailResponse = {
  $type: "cosmos.slashing.v1beta1.MsgUnjailResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgUnjailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgUnjailResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgUnjailResponse();
    return message;
  }
};
function createBaseMsgUnjail() {
  return { validator_addr: "" };
}
function createBaseMsgUnjailResponse() {
  return {};
}
function isSet81(value) {
  return value !== null && value !== void 0;
}
var registry86 = [
  ["/cosmos.slashing.v1beta1.MsgUnjail", MsgUnjail],
  ["/cosmos.slashing.v1beta1.MsgUnjailResponse", MsgUnjailResponse]
];
var aminoConverters86 = {
  "/cosmos.slashing.v1beta1.MsgUnjail": {
    aminoType: "cosmos-sdk/MsgUnjail",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.slashing.v1beta1.MsgUnjailResponse": {
    aminoType: "cosmos-sdk/MsgUnjailResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/staking/v1beta1/index.js
var v1beta1_exports22 = {};
__export(v1beta1_exports22, {
  Commission: () => Commission,
  CommissionRates: () => CommissionRates,
  DVPair: () => DVPair,
  DVPairs: () => DVPairs,
  DVVTriplet: () => DVVTriplet,
  DVVTriplets: () => DVVTriplets,
  Delegation: () => Delegation,
  DelegationResponse: () => DelegationResponse,
  Description: () => Description,
  GenesisState: () => GenesisState16,
  HistoricalInfo: () => HistoricalInfo,
  LastValidatorPower: () => LastValidatorPower,
  MsgBeginRedelegate: () => MsgBeginRedelegate,
  MsgBeginRedelegateResponse: () => MsgBeginRedelegateResponse,
  MsgCreateValidator: () => MsgCreateValidator,
  MsgCreateValidatorResponse: () => MsgCreateValidatorResponse,
  MsgDelegate: () => MsgDelegate,
  MsgDelegateResponse: () => MsgDelegateResponse,
  MsgEditValidator: () => MsgEditValidator,
  MsgEditValidatorResponse: () => MsgEditValidatorResponse,
  MsgUndelegate: () => MsgUndelegate,
  MsgUndelegateResponse: () => MsgUndelegateResponse,
  Params: () => Params8,
  Pool: () => Pool,
  QueryDelegationRequest: () => QueryDelegationRequest,
  QueryDelegationResponse: () => QueryDelegationResponse,
  QueryDelegatorDelegationsRequest: () => QueryDelegatorDelegationsRequest,
  QueryDelegatorDelegationsResponse: () => QueryDelegatorDelegationsResponse,
  QueryDelegatorUnbondingDelegationsRequest: () => QueryDelegatorUnbondingDelegationsRequest,
  QueryDelegatorUnbondingDelegationsResponse: () => QueryDelegatorUnbondingDelegationsResponse,
  QueryDelegatorValidatorRequest: () => QueryDelegatorValidatorRequest,
  QueryDelegatorValidatorResponse: () => QueryDelegatorValidatorResponse,
  QueryDelegatorValidatorsRequest: () => QueryDelegatorValidatorsRequest2,
  QueryDelegatorValidatorsResponse: () => QueryDelegatorValidatorsResponse2,
  QueryHistoricalInfoRequest: () => QueryHistoricalInfoRequest,
  QueryHistoricalInfoResponse: () => QueryHistoricalInfoResponse,
  QueryParamsRequest: () => QueryParamsRequest9,
  QueryParamsResponse: () => QueryParamsResponse9,
  QueryPoolRequest: () => QueryPoolRequest,
  QueryPoolResponse: () => QueryPoolResponse,
  QueryRedelegationsRequest: () => QueryRedelegationsRequest,
  QueryRedelegationsResponse: () => QueryRedelegationsResponse,
  QueryUnbondingDelegationRequest: () => QueryUnbondingDelegationRequest,
  QueryUnbondingDelegationResponse: () => QueryUnbondingDelegationResponse,
  QueryValidatorDelegationsRequest: () => QueryValidatorDelegationsRequest,
  QueryValidatorDelegationsResponse: () => QueryValidatorDelegationsResponse,
  QueryValidatorRequest: () => QueryValidatorRequest,
  QueryValidatorResponse: () => QueryValidatorResponse,
  QueryValidatorUnbondingDelegationsRequest: () => QueryValidatorUnbondingDelegationsRequest,
  QueryValidatorUnbondingDelegationsResponse: () => QueryValidatorUnbondingDelegationsResponse,
  QueryValidatorsRequest: () => QueryValidatorsRequest,
  QueryValidatorsResponse: () => QueryValidatorsResponse,
  Redelegation: () => Redelegation,
  RedelegationEntry: () => RedelegationEntry,
  RedelegationEntryResponse: () => RedelegationEntryResponse,
  RedelegationResponse: () => RedelegationResponse,
  StakeAuthorization: () => StakeAuthorization,
  StakeAuthorizationValidators: () => StakeAuthorizationValidators,
  UnbondingDelegation: () => UnbondingDelegation,
  UnbondingDelegationEntry: () => UnbondingDelegationEntry,
  ValAddresses: () => ValAddresses,
  Validator: () => Validator4,
  authorizationTypeFromJSON: () => authorizationTypeFromJSON,
  authorizationTypeToJSON: () => authorizationTypeToJSON,
  bondStatusFromJSON: () => bondStatusFromJSON,
  bondStatusToJSON: () => bondStatusToJSON
});

// node_modules/@sei-js/cosmos/dist/esm/types/cosmos/staking/v1beta1/authz.js
var AuthorizationType;
(function(AuthorizationType2) {
  AuthorizationType2[AuthorizationType2["AUTHORIZATION_TYPE_UNSPECIFIED"] = 0] = "AUTHORIZATION_TYPE_UNSPECIFIED";
  AuthorizationType2[AuthorizationType2["AUTHORIZATION_TYPE_DELEGATE"] = 1] = "AUTHORIZATION_TYPE_DELEGATE";
  AuthorizationType2[AuthorizationType2["AUTHORIZATION_TYPE_UNDELEGATE"] = 2] = "AUTHORIZATION_TYPE_UNDELEGATE";
  AuthorizationType2[AuthorizationType2["AUTHORIZATION_TYPE_REDELEGATE"] = 3] = "AUTHORIZATION_TYPE_REDELEGATE";
  AuthorizationType2[AuthorizationType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AuthorizationType || (AuthorizationType = {}));

// node_modules/@sei-js/cosmos/dist/esm/types/cosmos/staking/v1beta1/staking.js
var BondStatus;
(function(BondStatus2) {
  BondStatus2[BondStatus2["BOND_STATUS_UNSPECIFIED"] = 0] = "BOND_STATUS_UNSPECIFIED";
  BondStatus2[BondStatus2["BOND_STATUS_UNBONDED"] = 1] = "BOND_STATUS_UNBONDED";
  BondStatus2[BondStatus2["BOND_STATUS_UNBONDING"] = 2] = "BOND_STATUS_UNBONDING";
  BondStatus2[BondStatus2["BOND_STATUS_BONDED"] = 3] = "BOND_STATUS_BONDED";
  BondStatus2[BondStatus2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BondStatus || (BondStatus = {}));

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/staking/v1beta1/authz.js
var StakeAuthorization = {
  $type: "cosmos.staking.v1beta1.StakeAuthorization",
  encode(message, writer = new BinaryWriter()) {
    if (message.max_tokens !== void 0) {
      Coin.encode(message.max_tokens, writer.uint32(10).fork()).join();
    }
    if (message.allow_list !== void 0) {
      StakeAuthorizationValidators.encode(message.allow_list, writer.uint32(18).fork()).join();
    }
    if (message.deny_list !== void 0) {
      StakeAuthorizationValidators.encode(message.deny_list, writer.uint32(26).fork()).join();
    }
    if (message.authorization_type !== 0) {
      writer.uint32(32).int32(message.authorization_type);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseStakeAuthorization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.max_tokens = Coin.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.allow_list = StakeAuthorizationValidators.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.deny_list = StakeAuthorizationValidators.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.authorization_type = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      max_tokens: isSet82(object.max_tokens) ? Coin.fromJSON(object.max_tokens) : void 0,
      allow_list: isSet82(object.allow_list) ? StakeAuthorizationValidators.fromJSON(object.allow_list) : void 0,
      deny_list: isSet82(object.deny_list) ? StakeAuthorizationValidators.fromJSON(object.deny_list) : void 0,
      authorization_type: isSet82(object.authorization_type) ? authorizationTypeFromJSON(object.authorization_type) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.max_tokens !== void 0) {
      obj.max_tokens = Coin.toJSON(message.max_tokens);
    }
    if (message.allow_list !== void 0) {
      obj.allow_list = StakeAuthorizationValidators.toJSON(message.allow_list);
    }
    if (message.deny_list !== void 0) {
      obj.deny_list = StakeAuthorizationValidators.toJSON(message.deny_list);
    }
    if (message.authorization_type !== 0) {
      obj.authorization_type = authorizationTypeToJSON(message.authorization_type);
    }
    return obj;
  },
  create(base) {
    return StakeAuthorization.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseStakeAuthorization();
    message.max_tokens = object.max_tokens !== void 0 && object.max_tokens !== null ? Coin.fromPartial(object.max_tokens) : void 0;
    message.allow_list = object.allow_list !== void 0 && object.allow_list !== null ? StakeAuthorizationValidators.fromPartial(object.allow_list) : void 0;
    message.deny_list = object.deny_list !== void 0 && object.deny_list !== null ? StakeAuthorizationValidators.fromPartial(object.deny_list) : void 0;
    message.authorization_type = object.authorization_type ?? 0;
    return message;
  }
};
var StakeAuthorizationValidators = {
  $type: "cosmos.staking.v1beta1.StakeAuthorization.Validators",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.address) {
      writer.uint32(10).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseStakeAuthorizationValidators();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: globalThis.Array.isArray(object == null ? void 0 : object.address) ? object.address.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.address) == null ? void 0 : _a.length) {
      obj.address = message.address;
    }
    return obj;
  },
  create(base) {
    return StakeAuthorizationValidators.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseStakeAuthorizationValidators();
    message.address = ((_a = object.address) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
function authorizationTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "AUTHORIZATION_TYPE_UNSPECIFIED":
      return AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED;
    case 1:
    case "AUTHORIZATION_TYPE_DELEGATE":
      return AuthorizationType.AUTHORIZATION_TYPE_DELEGATE;
    case 2:
    case "AUTHORIZATION_TYPE_UNDELEGATE":
      return AuthorizationType.AUTHORIZATION_TYPE_UNDELEGATE;
    case 3:
    case "AUTHORIZATION_TYPE_REDELEGATE":
      return AuthorizationType.AUTHORIZATION_TYPE_REDELEGATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AuthorizationType.UNRECOGNIZED;
  }
}
function authorizationTypeToJSON(object) {
  switch (object) {
    case AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED:
      return "AUTHORIZATION_TYPE_UNSPECIFIED";
    case AuthorizationType.AUTHORIZATION_TYPE_DELEGATE:
      return "AUTHORIZATION_TYPE_DELEGATE";
    case AuthorizationType.AUTHORIZATION_TYPE_UNDELEGATE:
      return "AUTHORIZATION_TYPE_UNDELEGATE";
    case AuthorizationType.AUTHORIZATION_TYPE_REDELEGATE:
      return "AUTHORIZATION_TYPE_REDELEGATE";
    case AuthorizationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function createBaseStakeAuthorization() {
  return { max_tokens: void 0, allow_list: void 0, deny_list: void 0, authorization_type: 0 };
}
function createBaseStakeAuthorizationValidators() {
  return { address: [] };
}
function isSet82(value) {
  return value !== null && value !== void 0;
}
var registry87 = [
  ["/cosmos.staking.v1beta1.StakeAuthorization", StakeAuthorization],
  ["/cosmos.staking.v1beta1.StakeAuthorization.Validators", StakeAuthorizationValidators]
];
var aminoConverters87 = {
  "/cosmos.staking.v1beta1.StakeAuthorization": {
    aminoType: "cosmos-sdk/StakeAuthorization",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.StakeAuthorization.Validators": {
    aminoType: "cosmos-sdk/Validators",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/staking/v1beta1/staking.js
var HistoricalInfo = {
  $type: "cosmos.staking.v1beta1.HistoricalInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.header !== void 0) {
      Header.encode(message.header, writer.uint32(10).fork()).join();
    }
    for (const v of message.valset) {
      Validator4.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseHistoricalInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.header = Header.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.valset.push(Validator4.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      header: isSet83(object.header) ? Header.fromJSON(object.header) : void 0,
      valset: globalThis.Array.isArray(object == null ? void 0 : object.valset) ? object.valset.map((e) => Validator4.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.header !== void 0) {
      obj.header = Header.toJSON(message.header);
    }
    if ((_a = message.valset) == null ? void 0 : _a.length) {
      obj.valset = message.valset.map((e) => Validator4.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return HistoricalInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseHistoricalInfo();
    message.header = object.header !== void 0 && object.header !== null ? Header.fromPartial(object.header) : void 0;
    message.valset = ((_a = object.valset) == null ? void 0 : _a.map((e) => Validator4.fromPartial(e))) || [];
    return message;
  }
};
var CommissionRates = {
  $type: "cosmos.staking.v1beta1.CommissionRates",
  encode(message, writer = new BinaryWriter()) {
    if (message.rate !== "") {
      writer.uint32(10).string(message.rate);
    }
    if (message.max_rate !== "") {
      writer.uint32(18).string(message.max_rate);
    }
    if (message.max_change_rate !== "") {
      writer.uint32(26).string(message.max_change_rate);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCommissionRates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.rate = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.max_rate = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.max_change_rate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      rate: isSet83(object.rate) ? globalThis.String(object.rate) : "",
      max_rate: isSet83(object.max_rate) ? globalThis.String(object.max_rate) : "",
      max_change_rate: isSet83(object.max_change_rate) ? globalThis.String(object.max_change_rate) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.rate !== "") {
      obj.rate = message.rate;
    }
    if (message.max_rate !== "") {
      obj.max_rate = message.max_rate;
    }
    if (message.max_change_rate !== "") {
      obj.max_change_rate = message.max_change_rate;
    }
    return obj;
  },
  create(base) {
    return CommissionRates.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCommissionRates();
    message.rate = object.rate ?? "";
    message.max_rate = object.max_rate ?? "";
    message.max_change_rate = object.max_change_rate ?? "";
    return message;
  }
};
var Commission = {
  $type: "cosmos.staking.v1beta1.Commission",
  encode(message, writer = new BinaryWriter()) {
    if (message.commission_rates !== void 0) {
      CommissionRates.encode(message.commission_rates, writer.uint32(10).fork()).join();
    }
    if (message.update_time !== void 0) {
      Timestamp.encode(toTimestamp10(message.update_time), writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCommission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.commission_rates = CommissionRates.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.update_time = fromTimestamp10(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      commission_rates: isSet83(object.commission_rates) ? CommissionRates.fromJSON(object.commission_rates) : void 0,
      update_time: isSet83(object.update_time) ? fromJsonTimestamp10(object.update_time) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.commission_rates !== void 0) {
      obj.commission_rates = CommissionRates.toJSON(message.commission_rates);
    }
    if (message.update_time !== void 0) {
      obj.update_time = message.update_time.toISOString();
    }
    return obj;
  },
  create(base) {
    return Commission.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCommission();
    message.commission_rates = object.commission_rates !== void 0 && object.commission_rates !== null ? CommissionRates.fromPartial(object.commission_rates) : void 0;
    message.update_time = object.update_time ?? void 0;
    return message;
  }
};
var Description = {
  $type: "cosmos.staking.v1beta1.Description",
  encode(message, writer = new BinaryWriter()) {
    if (message.moniker !== "") {
      writer.uint32(10).string(message.moniker);
    }
    if (message.identity !== "") {
      writer.uint32(18).string(message.identity);
    }
    if (message.website !== "") {
      writer.uint32(26).string(message.website);
    }
    if (message.security_contact !== "") {
      writer.uint32(34).string(message.security_contact);
    }
    if (message.details !== "") {
      writer.uint32(42).string(message.details);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDescription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.moniker = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.identity = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.website = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.security_contact = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.details = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      moniker: isSet83(object.moniker) ? globalThis.String(object.moniker) : "",
      identity: isSet83(object.identity) ? globalThis.String(object.identity) : "",
      website: isSet83(object.website) ? globalThis.String(object.website) : "",
      security_contact: isSet83(object.security_contact) ? globalThis.String(object.security_contact) : "",
      details: isSet83(object.details) ? globalThis.String(object.details) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.moniker !== "") {
      obj.moniker = message.moniker;
    }
    if (message.identity !== "") {
      obj.identity = message.identity;
    }
    if (message.website !== "") {
      obj.website = message.website;
    }
    if (message.security_contact !== "") {
      obj.security_contact = message.security_contact;
    }
    if (message.details !== "") {
      obj.details = message.details;
    }
    return obj;
  },
  create(base) {
    return Description.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDescription();
    message.moniker = object.moniker ?? "";
    message.identity = object.identity ?? "";
    message.website = object.website ?? "";
    message.security_contact = object.security_contact ?? "";
    message.details = object.details ?? "";
    return message;
  }
};
var Validator4 = {
  $type: "cosmos.staking.v1beta1.Validator",
  encode(message, writer = new BinaryWriter()) {
    if (message.operator_address !== "") {
      writer.uint32(10).string(message.operator_address);
    }
    if (message.consensus_pubkey !== void 0) {
      Any.encode(message.consensus_pubkey, writer.uint32(18).fork()).join();
    }
    if (message.jailed !== false) {
      writer.uint32(24).bool(message.jailed);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.tokens !== "") {
      writer.uint32(42).string(message.tokens);
    }
    if (message.delegator_shares !== "") {
      writer.uint32(50).string(message.delegator_shares);
    }
    if (message.description !== void 0) {
      Description.encode(message.description, writer.uint32(58).fork()).join();
    }
    if (message.unbonding_height !== 0) {
      writer.uint32(64).int64(message.unbonding_height);
    }
    if (message.unbonding_time !== void 0) {
      Timestamp.encode(toTimestamp10(message.unbonding_time), writer.uint32(74).fork()).join();
    }
    if (message.commission !== void 0) {
      Commission.encode(message.commission, writer.uint32(82).fork()).join();
    }
    if (message.min_self_delegation !== "") {
      writer.uint32(90).string(message.min_self_delegation);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidator4();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.operator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.consensus_pubkey = Any.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.jailed = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.status = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.tokens = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.delegator_shares = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.description = Description.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }
          message.unbonding_height = longToNumber36(reader.int64());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.unbonding_time = fromTimestamp10(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.commission = Commission.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.min_self_delegation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      operator_address: isSet83(object.operator_address) ? globalThis.String(object.operator_address) : "",
      consensus_pubkey: isSet83(object.consensus_pubkey) ? Any.fromJSON(object.consensus_pubkey) : void 0,
      jailed: isSet83(object.jailed) ? globalThis.Boolean(object.jailed) : false,
      status: isSet83(object.status) ? bondStatusFromJSON(object.status) : 0,
      tokens: isSet83(object.tokens) ? globalThis.String(object.tokens) : "",
      delegator_shares: isSet83(object.delegator_shares) ? globalThis.String(object.delegator_shares) : "",
      description: isSet83(object.description) ? Description.fromJSON(object.description) : void 0,
      unbonding_height: isSet83(object.unbonding_height) ? globalThis.Number(object.unbonding_height) : 0,
      unbonding_time: isSet83(object.unbonding_time) ? fromJsonTimestamp10(object.unbonding_time) : void 0,
      commission: isSet83(object.commission) ? Commission.fromJSON(object.commission) : void 0,
      min_self_delegation: isSet83(object.min_self_delegation) ? globalThis.String(object.min_self_delegation) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.operator_address !== "") {
      obj.operator_address = message.operator_address;
    }
    if (message.consensus_pubkey !== void 0) {
      obj.consensus_pubkey = Any.toJSON(message.consensus_pubkey);
    }
    if (message.jailed !== false) {
      obj.jailed = message.jailed;
    }
    if (message.status !== 0) {
      obj.status = bondStatusToJSON(message.status);
    }
    if (message.tokens !== "") {
      obj.tokens = message.tokens;
    }
    if (message.delegator_shares !== "") {
      obj.delegator_shares = message.delegator_shares;
    }
    if (message.description !== void 0) {
      obj.description = Description.toJSON(message.description);
    }
    if (message.unbonding_height !== 0) {
      obj.unbonding_height = Math.round(message.unbonding_height);
    }
    if (message.unbonding_time !== void 0) {
      obj.unbonding_time = message.unbonding_time.toISOString();
    }
    if (message.commission !== void 0) {
      obj.commission = Commission.toJSON(message.commission);
    }
    if (message.min_self_delegation !== "") {
      obj.min_self_delegation = message.min_self_delegation;
    }
    return obj;
  },
  create(base) {
    return Validator4.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseValidator4();
    message.operator_address = object.operator_address ?? "";
    message.consensus_pubkey = object.consensus_pubkey !== void 0 && object.consensus_pubkey !== null ? Any.fromPartial(object.consensus_pubkey) : void 0;
    message.jailed = object.jailed ?? false;
    message.status = object.status ?? 0;
    message.tokens = object.tokens ?? "";
    message.delegator_shares = object.delegator_shares ?? "";
    message.description = object.description !== void 0 && object.description !== null ? Description.fromPartial(object.description) : void 0;
    message.unbonding_height = object.unbonding_height ?? 0;
    message.unbonding_time = object.unbonding_time ?? void 0;
    message.commission = object.commission !== void 0 && object.commission !== null ? Commission.fromPartial(object.commission) : void 0;
    message.min_self_delegation = object.min_self_delegation ?? "";
    return message;
  }
};
var ValAddresses = {
  $type: "cosmos.staking.v1beta1.ValAddresses",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.addresses) {
      writer.uint32(10).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValAddresses();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.addresses.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      addresses: globalThis.Array.isArray(object == null ? void 0 : object.addresses) ? object.addresses.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.addresses) == null ? void 0 : _a.length) {
      obj.addresses = message.addresses;
    }
    return obj;
  },
  create(base) {
    return ValAddresses.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseValAddresses();
    message.addresses = ((_a = object.addresses) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var DVPair = {
  $type: "cosmos.staking.v1beta1.DVPair",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.validator_address !== "") {
      writer.uint32(18).string(message.validator_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDVPair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet83(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      validator_address: isSet83(object.validator_address) ? globalThis.String(object.validator_address) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    return obj;
  },
  create(base) {
    return DVPair.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDVPair();
    message.delegator_address = object.delegator_address ?? "";
    message.validator_address = object.validator_address ?? "";
    return message;
  }
};
var DVPairs = {
  $type: "cosmos.staking.v1beta1.DVPairs",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.pairs) {
      DVPair.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDVPairs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pairs.push(DVPair.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { pairs: globalThis.Array.isArray(object == null ? void 0 : object.pairs) ? object.pairs.map((e) => DVPair.fromJSON(e)) : [] };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.pairs) == null ? void 0 : _a.length) {
      obj.pairs = message.pairs.map((e) => DVPair.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return DVPairs.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseDVPairs();
    message.pairs = ((_a = object.pairs) == null ? void 0 : _a.map((e) => DVPair.fromPartial(e))) || [];
    return message;
  }
};
var DVVTriplet = {
  $type: "cosmos.staking.v1beta1.DVVTriplet",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.validator_src_address !== "") {
      writer.uint32(18).string(message.validator_src_address);
    }
    if (message.validator_dst_address !== "") {
      writer.uint32(26).string(message.validator_dst_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDVVTriplet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_src_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.validator_dst_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet83(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      validator_src_address: isSet83(object.validator_src_address) ? globalThis.String(object.validator_src_address) : "",
      validator_dst_address: isSet83(object.validator_dst_address) ? globalThis.String(object.validator_dst_address) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.validator_src_address !== "") {
      obj.validator_src_address = message.validator_src_address;
    }
    if (message.validator_dst_address !== "") {
      obj.validator_dst_address = message.validator_dst_address;
    }
    return obj;
  },
  create(base) {
    return DVVTriplet.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDVVTriplet();
    message.delegator_address = object.delegator_address ?? "";
    message.validator_src_address = object.validator_src_address ?? "";
    message.validator_dst_address = object.validator_dst_address ?? "";
    return message;
  }
};
var DVVTriplets = {
  $type: "cosmos.staking.v1beta1.DVVTriplets",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.triplets) {
      DVVTriplet.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDVVTriplets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.triplets.push(DVVTriplet.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      triplets: globalThis.Array.isArray(object == null ? void 0 : object.triplets) ? object.triplets.map((e) => DVVTriplet.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.triplets) == null ? void 0 : _a.length) {
      obj.triplets = message.triplets.map((e) => DVVTriplet.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return DVVTriplets.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseDVVTriplets();
    message.triplets = ((_a = object.triplets) == null ? void 0 : _a.map((e) => DVVTriplet.fromPartial(e))) || [];
    return message;
  }
};
var Delegation = {
  $type: "cosmos.staking.v1beta1.Delegation",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.validator_address !== "") {
      writer.uint32(18).string(message.validator_address);
    }
    if (message.shares !== "") {
      writer.uint32(26).string(message.shares);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDelegation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.shares = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet83(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      validator_address: isSet83(object.validator_address) ? globalThis.String(object.validator_address) : "",
      shares: isSet83(object.shares) ? globalThis.String(object.shares) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if (message.shares !== "") {
      obj.shares = message.shares;
    }
    return obj;
  },
  create(base) {
    return Delegation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDelegation();
    message.delegator_address = object.delegator_address ?? "";
    message.validator_address = object.validator_address ?? "";
    message.shares = object.shares ?? "";
    return message;
  }
};
var UnbondingDelegation = {
  $type: "cosmos.staking.v1beta1.UnbondingDelegation",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.validator_address !== "") {
      writer.uint32(18).string(message.validator_address);
    }
    for (const v of message.entries) {
      UnbondingDelegationEntry.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUnbondingDelegation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.entries.push(UnbondingDelegationEntry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet83(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      validator_address: isSet83(object.validator_address) ? globalThis.String(object.validator_address) : "",
      entries: globalThis.Array.isArray(object == null ? void 0 : object.entries) ? object.entries.map((e) => UnbondingDelegationEntry.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if ((_a = message.entries) == null ? void 0 : _a.length) {
      obj.entries = message.entries.map((e) => UnbondingDelegationEntry.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return UnbondingDelegation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseUnbondingDelegation();
    message.delegator_address = object.delegator_address ?? "";
    message.validator_address = object.validator_address ?? "";
    message.entries = ((_a = object.entries) == null ? void 0 : _a.map((e) => UnbondingDelegationEntry.fromPartial(e))) || [];
    return message;
  }
};
var UnbondingDelegationEntry = {
  $type: "cosmos.staking.v1beta1.UnbondingDelegationEntry",
  encode(message, writer = new BinaryWriter()) {
    if (message.creation_height !== 0) {
      writer.uint32(8).int64(message.creation_height);
    }
    if (message.completion_time !== void 0) {
      Timestamp.encode(toTimestamp10(message.completion_time), writer.uint32(18).fork()).join();
    }
    if (message.initial_balance !== "") {
      writer.uint32(26).string(message.initial_balance);
    }
    if (message.balance !== "") {
      writer.uint32(34).string(message.balance);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUnbondingDelegationEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.creation_height = longToNumber36(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.completion_time = fromTimestamp10(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.initial_balance = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.balance = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      creation_height: isSet83(object.creation_height) ? globalThis.Number(object.creation_height) : 0,
      completion_time: isSet83(object.completion_time) ? fromJsonTimestamp10(object.completion_time) : void 0,
      initial_balance: isSet83(object.initial_balance) ? globalThis.String(object.initial_balance) : "",
      balance: isSet83(object.balance) ? globalThis.String(object.balance) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.creation_height !== 0) {
      obj.creation_height = Math.round(message.creation_height);
    }
    if (message.completion_time !== void 0) {
      obj.completion_time = message.completion_time.toISOString();
    }
    if (message.initial_balance !== "") {
      obj.initial_balance = message.initial_balance;
    }
    if (message.balance !== "") {
      obj.balance = message.balance;
    }
    return obj;
  },
  create(base) {
    return UnbondingDelegationEntry.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseUnbondingDelegationEntry();
    message.creation_height = object.creation_height ?? 0;
    message.completion_time = object.completion_time ?? void 0;
    message.initial_balance = object.initial_balance ?? "";
    message.balance = object.balance ?? "";
    return message;
  }
};
var RedelegationEntry = {
  $type: "cosmos.staking.v1beta1.RedelegationEntry",
  encode(message, writer = new BinaryWriter()) {
    if (message.creation_height !== 0) {
      writer.uint32(8).int64(message.creation_height);
    }
    if (message.completion_time !== void 0) {
      Timestamp.encode(toTimestamp10(message.completion_time), writer.uint32(18).fork()).join();
    }
    if (message.initial_balance !== "") {
      writer.uint32(26).string(message.initial_balance);
    }
    if (message.shares_dst !== "") {
      writer.uint32(34).string(message.shares_dst);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRedelegationEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.creation_height = longToNumber36(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.completion_time = fromTimestamp10(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.initial_balance = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.shares_dst = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      creation_height: isSet83(object.creation_height) ? globalThis.Number(object.creation_height) : 0,
      completion_time: isSet83(object.completion_time) ? fromJsonTimestamp10(object.completion_time) : void 0,
      initial_balance: isSet83(object.initial_balance) ? globalThis.String(object.initial_balance) : "",
      shares_dst: isSet83(object.shares_dst) ? globalThis.String(object.shares_dst) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.creation_height !== 0) {
      obj.creation_height = Math.round(message.creation_height);
    }
    if (message.completion_time !== void 0) {
      obj.completion_time = message.completion_time.toISOString();
    }
    if (message.initial_balance !== "") {
      obj.initial_balance = message.initial_balance;
    }
    if (message.shares_dst !== "") {
      obj.shares_dst = message.shares_dst;
    }
    return obj;
  },
  create(base) {
    return RedelegationEntry.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRedelegationEntry();
    message.creation_height = object.creation_height ?? 0;
    message.completion_time = object.completion_time ?? void 0;
    message.initial_balance = object.initial_balance ?? "";
    message.shares_dst = object.shares_dst ?? "";
    return message;
  }
};
var Redelegation = {
  $type: "cosmos.staking.v1beta1.Redelegation",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.validator_src_address !== "") {
      writer.uint32(18).string(message.validator_src_address);
    }
    if (message.validator_dst_address !== "") {
      writer.uint32(26).string(message.validator_dst_address);
    }
    for (const v of message.entries) {
      RedelegationEntry.encode(v, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRedelegation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_src_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.validator_dst_address = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.entries.push(RedelegationEntry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet83(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      validator_src_address: isSet83(object.validator_src_address) ? globalThis.String(object.validator_src_address) : "",
      validator_dst_address: isSet83(object.validator_dst_address) ? globalThis.String(object.validator_dst_address) : "",
      entries: globalThis.Array.isArray(object == null ? void 0 : object.entries) ? object.entries.map((e) => RedelegationEntry.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.validator_src_address !== "") {
      obj.validator_src_address = message.validator_src_address;
    }
    if (message.validator_dst_address !== "") {
      obj.validator_dst_address = message.validator_dst_address;
    }
    if ((_a = message.entries) == null ? void 0 : _a.length) {
      obj.entries = message.entries.map((e) => RedelegationEntry.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Redelegation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseRedelegation();
    message.delegator_address = object.delegator_address ?? "";
    message.validator_src_address = object.validator_src_address ?? "";
    message.validator_dst_address = object.validator_dst_address ?? "";
    message.entries = ((_a = object.entries) == null ? void 0 : _a.map((e) => RedelegationEntry.fromPartial(e))) || [];
    return message;
  }
};
var Params8 = {
  $type: "cosmos.staking.v1beta1.Params",
  encode(message, writer = new BinaryWriter()) {
    if (message.unbonding_time !== void 0) {
      Duration.encode(message.unbonding_time, writer.uint32(10).fork()).join();
    }
    if (message.max_validators !== 0) {
      writer.uint32(16).uint32(message.max_validators);
    }
    if (message.max_entries !== 0) {
      writer.uint32(24).uint32(message.max_entries);
    }
    if (message.historical_entries !== 0) {
      writer.uint32(32).uint32(message.historical_entries);
    }
    if (message.bond_denom !== "") {
      writer.uint32(42).string(message.bond_denom);
    }
    if (message.min_commission_rate !== "") {
      writer.uint32(50).string(message.min_commission_rate);
    }
    if (message.max_voting_power_ratio !== "") {
      writer.uint32(58).string(message.max_voting_power_ratio);
    }
    if (message.max_voting_power_enforcement_threshold !== "") {
      writer.uint32(66).string(message.max_voting_power_enforcement_threshold);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams8();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.unbonding_time = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.max_validators = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.max_entries = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.historical_entries = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.bond_denom = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.min_commission_rate = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.max_voting_power_ratio = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.max_voting_power_enforcement_threshold = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      unbonding_time: isSet83(object.unbonding_time) ? Duration.fromJSON(object.unbonding_time) : void 0,
      max_validators: isSet83(object.max_validators) ? globalThis.Number(object.max_validators) : 0,
      max_entries: isSet83(object.max_entries) ? globalThis.Number(object.max_entries) : 0,
      historical_entries: isSet83(object.historical_entries) ? globalThis.Number(object.historical_entries) : 0,
      bond_denom: isSet83(object.bond_denom) ? globalThis.String(object.bond_denom) : "",
      min_commission_rate: isSet83(object.min_commission_rate) ? globalThis.String(object.min_commission_rate) : "",
      max_voting_power_ratio: isSet83(object.max_voting_power_ratio) ? globalThis.String(object.max_voting_power_ratio) : "",
      max_voting_power_enforcement_threshold: isSet83(object.max_voting_power_enforcement_threshold) ? globalThis.String(object.max_voting_power_enforcement_threshold) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.unbonding_time !== void 0) {
      obj.unbonding_time = Duration.toJSON(message.unbonding_time);
    }
    if (message.max_validators !== 0) {
      obj.max_validators = Math.round(message.max_validators);
    }
    if (message.max_entries !== 0) {
      obj.max_entries = Math.round(message.max_entries);
    }
    if (message.historical_entries !== 0) {
      obj.historical_entries = Math.round(message.historical_entries);
    }
    if (message.bond_denom !== "") {
      obj.bond_denom = message.bond_denom;
    }
    if (message.min_commission_rate !== "") {
      obj.min_commission_rate = message.min_commission_rate;
    }
    if (message.max_voting_power_ratio !== "") {
      obj.max_voting_power_ratio = message.max_voting_power_ratio;
    }
    if (message.max_voting_power_enforcement_threshold !== "") {
      obj.max_voting_power_enforcement_threshold = message.max_voting_power_enforcement_threshold;
    }
    return obj;
  },
  create(base) {
    return Params8.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseParams8();
    message.unbonding_time = object.unbonding_time !== void 0 && object.unbonding_time !== null ? Duration.fromPartial(object.unbonding_time) : void 0;
    message.max_validators = object.max_validators ?? 0;
    message.max_entries = object.max_entries ?? 0;
    message.historical_entries = object.historical_entries ?? 0;
    message.bond_denom = object.bond_denom ?? "";
    message.min_commission_rate = object.min_commission_rate ?? "";
    message.max_voting_power_ratio = object.max_voting_power_ratio ?? "";
    message.max_voting_power_enforcement_threshold = object.max_voting_power_enforcement_threshold ?? "";
    return message;
  }
};
var DelegationResponse = {
  $type: "cosmos.staking.v1beta1.DelegationResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegation !== void 0) {
      Delegation.encode(message.delegation, writer.uint32(10).fork()).join();
    }
    if (message.balance !== void 0) {
      Coin.encode(message.balance, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegation = Delegation.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.balance = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegation: isSet83(object.delegation) ? Delegation.fromJSON(object.delegation) : void 0,
      balance: isSet83(object.balance) ? Coin.fromJSON(object.balance) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegation !== void 0) {
      obj.delegation = Delegation.toJSON(message.delegation);
    }
    if (message.balance !== void 0) {
      obj.balance = Coin.toJSON(message.balance);
    }
    return obj;
  },
  create(base) {
    return DelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDelegationResponse();
    message.delegation = object.delegation !== void 0 && object.delegation !== null ? Delegation.fromPartial(object.delegation) : void 0;
    message.balance = object.balance !== void 0 && object.balance !== null ? Coin.fromPartial(object.balance) : void 0;
    return message;
  }
};
var RedelegationEntryResponse = {
  $type: "cosmos.staking.v1beta1.RedelegationEntryResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.redelegation_entry !== void 0) {
      RedelegationEntry.encode(message.redelegation_entry, writer.uint32(10).fork()).join();
    }
    if (message.balance !== "") {
      writer.uint32(34).string(message.balance);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRedelegationEntryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.redelegation_entry = RedelegationEntry.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.balance = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      redelegation_entry: isSet83(object.redelegation_entry) ? RedelegationEntry.fromJSON(object.redelegation_entry) : void 0,
      balance: isSet83(object.balance) ? globalThis.String(object.balance) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.redelegation_entry !== void 0) {
      obj.redelegation_entry = RedelegationEntry.toJSON(message.redelegation_entry);
    }
    if (message.balance !== "") {
      obj.balance = message.balance;
    }
    return obj;
  },
  create(base) {
    return RedelegationEntryResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRedelegationEntryResponse();
    message.redelegation_entry = object.redelegation_entry !== void 0 && object.redelegation_entry !== null ? RedelegationEntry.fromPartial(object.redelegation_entry) : void 0;
    message.balance = object.balance ?? "";
    return message;
  }
};
var RedelegationResponse = {
  $type: "cosmos.staking.v1beta1.RedelegationResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.redelegation !== void 0) {
      Redelegation.encode(message.redelegation, writer.uint32(10).fork()).join();
    }
    for (const v of message.entries) {
      RedelegationEntryResponse.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRedelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.redelegation = Redelegation.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.entries.push(RedelegationEntryResponse.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      redelegation: isSet83(object.redelegation) ? Redelegation.fromJSON(object.redelegation) : void 0,
      entries: globalThis.Array.isArray(object == null ? void 0 : object.entries) ? object.entries.map((e) => RedelegationEntryResponse.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.redelegation !== void 0) {
      obj.redelegation = Redelegation.toJSON(message.redelegation);
    }
    if ((_a = message.entries) == null ? void 0 : _a.length) {
      obj.entries = message.entries.map((e) => RedelegationEntryResponse.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return RedelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseRedelegationResponse();
    message.redelegation = object.redelegation !== void 0 && object.redelegation !== null ? Redelegation.fromPartial(object.redelegation) : void 0;
    message.entries = ((_a = object.entries) == null ? void 0 : _a.map((e) => RedelegationEntryResponse.fromPartial(e))) || [];
    return message;
  }
};
var Pool = {
  $type: "cosmos.staking.v1beta1.Pool",
  encode(message, writer = new BinaryWriter()) {
    if (message.not_bonded_tokens !== "") {
      writer.uint32(10).string(message.not_bonded_tokens);
    }
    if (message.bonded_tokens !== "") {
      writer.uint32(18).string(message.bonded_tokens);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.not_bonded_tokens = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.bonded_tokens = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      not_bonded_tokens: isSet83(object.not_bonded_tokens) ? globalThis.String(object.not_bonded_tokens) : "",
      bonded_tokens: isSet83(object.bonded_tokens) ? globalThis.String(object.bonded_tokens) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.not_bonded_tokens !== "") {
      obj.not_bonded_tokens = message.not_bonded_tokens;
    }
    if (message.bonded_tokens !== "") {
      obj.bonded_tokens = message.bonded_tokens;
    }
    return obj;
  },
  create(base) {
    return Pool.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePool();
    message.not_bonded_tokens = object.not_bonded_tokens ?? "";
    message.bonded_tokens = object.bonded_tokens ?? "";
    return message;
  }
};
function bondStatusFromJSON(object) {
  switch (object) {
    case 0:
    case "BOND_STATUS_UNSPECIFIED":
      return BondStatus.BOND_STATUS_UNSPECIFIED;
    case 1:
    case "BOND_STATUS_UNBONDED":
      return BondStatus.BOND_STATUS_UNBONDED;
    case 2:
    case "BOND_STATUS_UNBONDING":
      return BondStatus.BOND_STATUS_UNBONDING;
    case 3:
    case "BOND_STATUS_BONDED":
      return BondStatus.BOND_STATUS_BONDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BondStatus.UNRECOGNIZED;
  }
}
function bondStatusToJSON(object) {
  switch (object) {
    case BondStatus.BOND_STATUS_UNSPECIFIED:
      return "BOND_STATUS_UNSPECIFIED";
    case BondStatus.BOND_STATUS_UNBONDED:
      return "BOND_STATUS_UNBONDED";
    case BondStatus.BOND_STATUS_UNBONDING:
      return "BOND_STATUS_UNBONDING";
    case BondStatus.BOND_STATUS_BONDED:
      return "BOND_STATUS_BONDED";
    case BondStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function createBaseHistoricalInfo() {
  return { header: void 0, valset: [] };
}
function createBaseCommissionRates() {
  return { rate: "", max_rate: "", max_change_rate: "" };
}
function createBaseCommission() {
  return { commission_rates: void 0, update_time: void 0 };
}
function createBaseDescription() {
  return { moniker: "", identity: "", website: "", security_contact: "", details: "" };
}
function createBaseValidator4() {
  return {
    operator_address: "",
    consensus_pubkey: void 0,
    jailed: false,
    status: 0,
    tokens: "",
    delegator_shares: "",
    description: void 0,
    unbonding_height: 0,
    unbonding_time: void 0,
    commission: void 0,
    min_self_delegation: ""
  };
}
function createBaseValAddresses() {
  return { addresses: [] };
}
function createBaseDVPair() {
  return { delegator_address: "", validator_address: "" };
}
function createBaseDVPairs() {
  return { pairs: [] };
}
function createBaseDVVTriplet() {
  return { delegator_address: "", validator_src_address: "", validator_dst_address: "" };
}
function createBaseDVVTriplets() {
  return { triplets: [] };
}
function createBaseDelegation() {
  return { delegator_address: "", validator_address: "", shares: "" };
}
function createBaseUnbondingDelegation() {
  return { delegator_address: "", validator_address: "", entries: [] };
}
function createBaseUnbondingDelegationEntry() {
  return { creation_height: 0, completion_time: void 0, initial_balance: "", balance: "" };
}
function createBaseRedelegationEntry() {
  return { creation_height: 0, completion_time: void 0, initial_balance: "", shares_dst: "" };
}
function createBaseRedelegation() {
  return { delegator_address: "", validator_src_address: "", validator_dst_address: "", entries: [] };
}
function createBaseParams8() {
  return {
    unbonding_time: void 0,
    max_validators: 0,
    max_entries: 0,
    historical_entries: 0,
    bond_denom: "",
    min_commission_rate: "",
    max_voting_power_ratio: "",
    max_voting_power_enforcement_threshold: ""
  };
}
function createBaseDelegationResponse() {
  return { delegation: void 0, balance: void 0 };
}
function createBaseRedelegationEntryResponse() {
  return { redelegation_entry: void 0, balance: "" };
}
function createBaseRedelegationResponse() {
  return { redelegation: void 0, entries: [] };
}
function createBasePool() {
  return { not_bonded_tokens: "", bonded_tokens: "" };
}
function toTimestamp10(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp10(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp10(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp10(Timestamp.fromJSON(o));
  }
}
function longToNumber36(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet83(value) {
  return value !== null && value !== void 0;
}
var registry88 = [
  ["/cosmos.staking.v1beta1.HistoricalInfo", HistoricalInfo],
  ["/cosmos.staking.v1beta1.CommissionRates", CommissionRates],
  ["/cosmos.staking.v1beta1.Commission", Commission],
  ["/cosmos.staking.v1beta1.Description", Description],
  ["/cosmos.staking.v1beta1.Validator", Validator4],
  ["/cosmos.staking.v1beta1.ValAddresses", ValAddresses],
  ["/cosmos.staking.v1beta1.DVPair", DVPair],
  ["/cosmos.staking.v1beta1.DVPairs", DVPairs],
  ["/cosmos.staking.v1beta1.DVVTriplet", DVVTriplet],
  ["/cosmos.staking.v1beta1.DVVTriplets", DVVTriplets],
  ["/cosmos.staking.v1beta1.Delegation", Delegation],
  ["/cosmos.staking.v1beta1.UnbondingDelegation", UnbondingDelegation],
  ["/cosmos.staking.v1beta1.UnbondingDelegationEntry", UnbondingDelegationEntry],
  ["/cosmos.staking.v1beta1.RedelegationEntry", RedelegationEntry],
  ["/cosmos.staking.v1beta1.Redelegation", Redelegation],
  ["/cosmos.staking.v1beta1.Params", Params8],
  ["/cosmos.staking.v1beta1.DelegationResponse", DelegationResponse],
  ["/cosmos.staking.v1beta1.RedelegationEntryResponse", RedelegationEntryResponse],
  ["/cosmos.staking.v1beta1.RedelegationResponse", RedelegationResponse],
  ["/cosmos.staking.v1beta1.Pool", Pool]
];
var aminoConverters88 = {
  "/cosmos.staking.v1beta1.HistoricalInfo": {
    aminoType: "cosmos-sdk/HistoricalInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.CommissionRates": {
    aminoType: "cosmos-sdk/CommissionRates",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.Commission": {
    aminoType: "cosmos-sdk/Commission",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.Description": {
    aminoType: "cosmos-sdk/Description",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.Validator": {
    aminoType: "cosmos-sdk/Validator",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.ValAddresses": {
    aminoType: "cosmos-sdk/ValAddresses",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.DVPair": {
    aminoType: "cosmos-sdk/DVPair",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.DVPairs": {
    aminoType: "cosmos-sdk/DVPairs",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.DVVTriplet": {
    aminoType: "cosmos-sdk/DVVTriplet",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.DVVTriplets": {
    aminoType: "cosmos-sdk/DVVTriplets",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.Delegation": {
    aminoType: "cosmos-sdk/Delegation",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.UnbondingDelegation": {
    aminoType: "cosmos-sdk/UnbondingDelegation",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.UnbondingDelegationEntry": {
    aminoType: "cosmos-sdk/UnbondingDelegationEntry",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.RedelegationEntry": {
    aminoType: "cosmos-sdk/RedelegationEntry",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.Redelegation": {
    aminoType: "cosmos-sdk/Redelegation",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.Params": {
    aminoType: "cosmos-sdk/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.DelegationResponse": {
    aminoType: "cosmos-sdk/DelegationResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.RedelegationEntryResponse": {
    aminoType: "cosmos-sdk/RedelegationEntryResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.RedelegationResponse": {
    aminoType: "cosmos-sdk/RedelegationResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.Pool": {
    aminoType: "cosmos-sdk/Pool",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/staking/v1beta1/genesis.js
var GenesisState16 = {
  $type: "cosmos.staking.v1beta1.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params8.encode(message.params, writer.uint32(10).fork()).join();
    }
    if (message.last_total_power.length !== 0) {
      writer.uint32(18).bytes(message.last_total_power);
    }
    for (const v of message.last_validator_powers) {
      LastValidatorPower.encode(v, writer.uint32(26).fork()).join();
    }
    for (const v of message.validators) {
      Validator4.encode(v, writer.uint32(34).fork()).join();
    }
    for (const v of message.delegations) {
      Delegation.encode(v, writer.uint32(42).fork()).join();
    }
    for (const v of message.unbonding_delegations) {
      UnbondingDelegation.encode(v, writer.uint32(50).fork()).join();
    }
    for (const v of message.redelegations) {
      Redelegation.encode(v, writer.uint32(58).fork()).join();
    }
    if (message.exported !== false) {
      writer.uint32(64).bool(message.exported);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState16();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params8.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.last_total_power = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.last_validator_powers.push(LastValidatorPower.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.validators.push(Validator4.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.delegations.push(Delegation.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.unbonding_delegations.push(UnbondingDelegation.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.redelegations.push(Redelegation.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }
          message.exported = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet84(object.params) ? Params8.fromJSON(object.params) : void 0,
      last_total_power: isSet84(object.last_total_power) ? bytesFromBase6432(object.last_total_power) : new Uint8Array(0),
      last_validator_powers: globalThis.Array.isArray(object == null ? void 0 : object.last_validator_powers) ? object.last_validator_powers.map((e) => LastValidatorPower.fromJSON(e)) : [],
      validators: globalThis.Array.isArray(object == null ? void 0 : object.validators) ? object.validators.map((e) => Validator4.fromJSON(e)) : [],
      delegations: globalThis.Array.isArray(object == null ? void 0 : object.delegations) ? object.delegations.map((e) => Delegation.fromJSON(e)) : [],
      unbonding_delegations: globalThis.Array.isArray(object == null ? void 0 : object.unbonding_delegations) ? object.unbonding_delegations.map((e) => UnbondingDelegation.fromJSON(e)) : [],
      redelegations: globalThis.Array.isArray(object == null ? void 0 : object.redelegations) ? object.redelegations.map((e) => Redelegation.fromJSON(e)) : [],
      exported: isSet84(object.exported) ? globalThis.Boolean(object.exported) : false
    };
  },
  toJSON(message) {
    var _a, _b, _c, _d, _e;
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params8.toJSON(message.params);
    }
    if (message.last_total_power.length !== 0) {
      obj.last_total_power = base64FromBytes32(message.last_total_power);
    }
    if ((_a = message.last_validator_powers) == null ? void 0 : _a.length) {
      obj.last_validator_powers = message.last_validator_powers.map((e) => LastValidatorPower.toJSON(e));
    }
    if ((_b = message.validators) == null ? void 0 : _b.length) {
      obj.validators = message.validators.map((e) => Validator4.toJSON(e));
    }
    if ((_c = message.delegations) == null ? void 0 : _c.length) {
      obj.delegations = message.delegations.map((e) => Delegation.toJSON(e));
    }
    if ((_d = message.unbonding_delegations) == null ? void 0 : _d.length) {
      obj.unbonding_delegations = message.unbonding_delegations.map((e) => UnbondingDelegation.toJSON(e));
    }
    if ((_e = message.redelegations) == null ? void 0 : _e.length) {
      obj.redelegations = message.redelegations.map((e) => Redelegation.toJSON(e));
    }
    if (message.exported !== false) {
      obj.exported = message.exported;
    }
    return obj;
  },
  create(base) {
    return GenesisState16.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e;
    const message = createBaseGenesisState16();
    message.params = object.params !== void 0 && object.params !== null ? Params8.fromPartial(object.params) : void 0;
    message.last_total_power = object.last_total_power ?? new Uint8Array(0);
    message.last_validator_powers = ((_a = object.last_validator_powers) == null ? void 0 : _a.map((e) => LastValidatorPower.fromPartial(e))) || [];
    message.validators = ((_b = object.validators) == null ? void 0 : _b.map((e) => Validator4.fromPartial(e))) || [];
    message.delegations = ((_c = object.delegations) == null ? void 0 : _c.map((e) => Delegation.fromPartial(e))) || [];
    message.unbonding_delegations = ((_d = object.unbonding_delegations) == null ? void 0 : _d.map((e) => UnbondingDelegation.fromPartial(e))) || [];
    message.redelegations = ((_e = object.redelegations) == null ? void 0 : _e.map((e) => Redelegation.fromPartial(e))) || [];
    message.exported = object.exported ?? false;
    return message;
  }
};
var LastValidatorPower = {
  $type: "cosmos.staking.v1beta1.LastValidatorPower",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.power !== 0) {
      writer.uint32(16).int64(message.power);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLastValidatorPower();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.power = longToNumber37(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet84(object.address) ? globalThis.String(object.address) : "",
      power: isSet84(object.power) ? globalThis.Number(object.power) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    return obj;
  },
  create(base) {
    return LastValidatorPower.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseLastValidatorPower();
    message.address = object.address ?? "";
    message.power = object.power ?? 0;
    return message;
  }
};
function createBaseGenesisState16() {
  return {
    params: void 0,
    last_total_power: new Uint8Array(0),
    last_validator_powers: [],
    validators: [],
    delegations: [],
    unbonding_delegations: [],
    redelegations: [],
    exported: false
  };
}
function createBaseLastValidatorPower() {
  return { address: "", power: 0 };
}
function bytesFromBase6432(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes32(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber37(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet84(value) {
  return value !== null && value !== void 0;
}
var registry89 = [
  ["/cosmos.staking.v1beta1.GenesisState", GenesisState16],
  ["/cosmos.staking.v1beta1.LastValidatorPower", LastValidatorPower]
];
var aminoConverters89 = {
  "/cosmos.staking.v1beta1.GenesisState": {
    aminoType: "cosmos-sdk/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.LastValidatorPower": {
    aminoType: "cosmos-sdk/LastValidatorPower",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/staking/v1beta1/query.js
var QueryValidatorsRequest = {
  $type: "cosmos.staking.v1beta1.QueryValidatorsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.status = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      status: isSet85(object.status) ? globalThis.String(object.status) : "",
      pagination: isSet85(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryValidatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryValidatorsRequest();
    message.status = object.status ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryValidatorsResponse = {
  $type: "cosmos.staking.v1beta1.QueryValidatorsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.validators) {
      Validator4.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validators.push(Validator4.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validators: globalThis.Array.isArray(object == null ? void 0 : object.validators) ? object.validators.map((e) => Validator4.fromJSON(e)) : [],
      pagination: isSet85(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.validators) == null ? void 0 : _a.length) {
      obj.validators = message.validators.map((e) => Validator4.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryValidatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryValidatorsResponse();
    message.validators = ((_a = object.validators) == null ? void 0 : _a.map((e) => Validator4.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryValidatorRequest = {
  $type: "cosmos.staking.v1beta1.QueryValidatorRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_addr !== "") {
      writer.uint32(10).string(message.validator_addr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_addr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { validator_addr: isSet85(object.validator_addr) ? globalThis.String(object.validator_addr) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_addr !== "") {
      obj.validator_addr = message.validator_addr;
    }
    return obj;
  },
  create(base) {
    return QueryValidatorRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryValidatorRequest();
    message.validator_addr = object.validator_addr ?? "";
    return message;
  }
};
var QueryValidatorResponse = {
  $type: "cosmos.staking.v1beta1.QueryValidatorResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator !== void 0) {
      Validator4.encode(message.validator, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator = Validator4.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { validator: isSet85(object.validator) ? Validator4.fromJSON(object.validator) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator !== void 0) {
      obj.validator = Validator4.toJSON(message.validator);
    }
    return obj;
  },
  create(base) {
    return QueryValidatorResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryValidatorResponse();
    message.validator = object.validator !== void 0 && object.validator !== null ? Validator4.fromPartial(object.validator) : void 0;
    return message;
  }
};
var QueryValidatorDelegationsRequest = {
  $type: "cosmos.staking.v1beta1.QueryValidatorDelegationsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_addr !== "") {
      writer.uint32(10).string(message.validator_addr);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_addr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator_addr: isSet85(object.validator_addr) ? globalThis.String(object.validator_addr) : "",
      pagination: isSet85(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_addr !== "") {
      obj.validator_addr = message.validator_addr;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryValidatorDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryValidatorDelegationsRequest();
    message.validator_addr = object.validator_addr ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryValidatorDelegationsResponse = {
  $type: "cosmos.staking.v1beta1.QueryValidatorDelegationsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.delegation_responses) {
      DelegationResponse.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegation_responses.push(DelegationResponse.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegation_responses: globalThis.Array.isArray(object == null ? void 0 : object.delegation_responses) ? object.delegation_responses.map((e) => DelegationResponse.fromJSON(e)) : [],
      pagination: isSet85(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.delegation_responses) == null ? void 0 : _a.length) {
      obj.delegation_responses = message.delegation_responses.map((e) => DelegationResponse.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryValidatorDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryValidatorDelegationsResponse();
    message.delegation_responses = ((_a = object.delegation_responses) == null ? void 0 : _a.map((e) => DelegationResponse.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryValidatorUnbondingDelegationsRequest = {
  $type: "cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_addr !== "") {
      writer.uint32(10).string(message.validator_addr);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorUnbondingDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_addr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator_addr: isSet85(object.validator_addr) ? globalThis.String(object.validator_addr) : "",
      pagination: isSet85(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_addr !== "") {
      obj.validator_addr = message.validator_addr;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryValidatorUnbondingDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryValidatorUnbondingDelegationsRequest();
    message.validator_addr = object.validator_addr ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryValidatorUnbondingDelegationsResponse = {
  $type: "cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.unbonding_responses) {
      UnbondingDelegation.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorUnbondingDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.unbonding_responses.push(UnbondingDelegation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      unbonding_responses: globalThis.Array.isArray(object == null ? void 0 : object.unbonding_responses) ? object.unbonding_responses.map((e) => UnbondingDelegation.fromJSON(e)) : [],
      pagination: isSet85(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.unbonding_responses) == null ? void 0 : _a.length) {
      obj.unbonding_responses = message.unbonding_responses.map((e) => UnbondingDelegation.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryValidatorUnbondingDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryValidatorUnbondingDelegationsResponse();
    message.unbonding_responses = ((_a = object.unbonding_responses) == null ? void 0 : _a.map((e) => UnbondingDelegation.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryDelegationRequest = {
  $type: "cosmos.staking.v1beta1.QueryDelegationRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_addr !== "") {
      writer.uint32(10).string(message.delegator_addr);
    }
    if (message.validator_addr !== "") {
      writer.uint32(18).string(message.validator_addr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_addr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_addr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_addr: isSet85(object.delegator_addr) ? globalThis.String(object.delegator_addr) : "",
      validator_addr: isSet85(object.validator_addr) ? globalThis.String(object.validator_addr) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_addr !== "") {
      obj.delegator_addr = message.delegator_addr;
    }
    if (message.validator_addr !== "") {
      obj.validator_addr = message.validator_addr;
    }
    return obj;
  },
  create(base) {
    return QueryDelegationRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDelegationRequest();
    message.delegator_addr = object.delegator_addr ?? "";
    message.validator_addr = object.validator_addr ?? "";
    return message;
  }
};
var QueryDelegationResponse = {
  $type: "cosmos.staking.v1beta1.QueryDelegationResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegation_response !== void 0) {
      DelegationResponse.encode(message.delegation_response, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegation_response = DelegationResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegation_response: isSet85(object.delegation_response) ? DelegationResponse.fromJSON(object.delegation_response) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegation_response !== void 0) {
      obj.delegation_response = DelegationResponse.toJSON(message.delegation_response);
    }
    return obj;
  },
  create(base) {
    return QueryDelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDelegationResponse();
    message.delegation_response = object.delegation_response !== void 0 && object.delegation_response !== null ? DelegationResponse.fromPartial(object.delegation_response) : void 0;
    return message;
  }
};
var QueryUnbondingDelegationRequest = {
  $type: "cosmos.staking.v1beta1.QueryUnbondingDelegationRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_addr !== "") {
      writer.uint32(10).string(message.delegator_addr);
    }
    if (message.validator_addr !== "") {
      writer.uint32(18).string(message.validator_addr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryUnbondingDelegationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_addr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_addr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_addr: isSet85(object.delegator_addr) ? globalThis.String(object.delegator_addr) : "",
      validator_addr: isSet85(object.validator_addr) ? globalThis.String(object.validator_addr) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_addr !== "") {
      obj.delegator_addr = message.delegator_addr;
    }
    if (message.validator_addr !== "") {
      obj.validator_addr = message.validator_addr;
    }
    return obj;
  },
  create(base) {
    return QueryUnbondingDelegationRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryUnbondingDelegationRequest();
    message.delegator_addr = object.delegator_addr ?? "";
    message.validator_addr = object.validator_addr ?? "";
    return message;
  }
};
var QueryUnbondingDelegationResponse = {
  $type: "cosmos.staking.v1beta1.QueryUnbondingDelegationResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.unbond !== void 0) {
      UnbondingDelegation.encode(message.unbond, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryUnbondingDelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.unbond = UnbondingDelegation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { unbond: isSet85(object.unbond) ? UnbondingDelegation.fromJSON(object.unbond) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.unbond !== void 0) {
      obj.unbond = UnbondingDelegation.toJSON(message.unbond);
    }
    return obj;
  },
  create(base) {
    return QueryUnbondingDelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryUnbondingDelegationResponse();
    message.unbond = object.unbond !== void 0 && object.unbond !== null ? UnbondingDelegation.fromPartial(object.unbond) : void 0;
    return message;
  }
};
var QueryDelegatorDelegationsRequest = {
  $type: "cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_addr !== "") {
      writer.uint32(10).string(message.delegator_addr);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_addr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_addr: isSet85(object.delegator_addr) ? globalThis.String(object.delegator_addr) : "",
      pagination: isSet85(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_addr !== "") {
      obj.delegator_addr = message.delegator_addr;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryDelegatorDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDelegatorDelegationsRequest();
    message.delegator_addr = object.delegator_addr ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryDelegatorDelegationsResponse = {
  $type: "cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.delegation_responses) {
      DelegationResponse.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegation_responses.push(DelegationResponse.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegation_responses: globalThis.Array.isArray(object == null ? void 0 : object.delegation_responses) ? object.delegation_responses.map((e) => DelegationResponse.fromJSON(e)) : [],
      pagination: isSet85(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.delegation_responses) == null ? void 0 : _a.length) {
      obj.delegation_responses = message.delegation_responses.map((e) => DelegationResponse.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryDelegatorDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryDelegatorDelegationsResponse();
    message.delegation_responses = ((_a = object.delegation_responses) == null ? void 0 : _a.map((e) => DelegationResponse.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryDelegatorUnbondingDelegationsRequest = {
  $type: "cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_addr !== "") {
      writer.uint32(10).string(message.delegator_addr);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorUnbondingDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_addr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_addr: isSet85(object.delegator_addr) ? globalThis.String(object.delegator_addr) : "",
      pagination: isSet85(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_addr !== "") {
      obj.delegator_addr = message.delegator_addr;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryDelegatorUnbondingDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDelegatorUnbondingDelegationsRequest();
    message.delegator_addr = object.delegator_addr ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryDelegatorUnbondingDelegationsResponse = {
  $type: "cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.unbonding_responses) {
      UnbondingDelegation.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorUnbondingDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.unbonding_responses.push(UnbondingDelegation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      unbonding_responses: globalThis.Array.isArray(object == null ? void 0 : object.unbonding_responses) ? object.unbonding_responses.map((e) => UnbondingDelegation.fromJSON(e)) : [],
      pagination: isSet85(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.unbonding_responses) == null ? void 0 : _a.length) {
      obj.unbonding_responses = message.unbonding_responses.map((e) => UnbondingDelegation.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryDelegatorUnbondingDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryDelegatorUnbondingDelegationsResponse();
    message.unbonding_responses = ((_a = object.unbonding_responses) == null ? void 0 : _a.map((e) => UnbondingDelegation.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryRedelegationsRequest = {
  $type: "cosmos.staking.v1beta1.QueryRedelegationsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_addr !== "") {
      writer.uint32(10).string(message.delegator_addr);
    }
    if (message.src_validator_addr !== "") {
      writer.uint32(18).string(message.src_validator_addr);
    }
    if (message.dst_validator_addr !== "") {
      writer.uint32(26).string(message.dst_validator_addr);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryRedelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_addr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.src_validator_addr = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.dst_validator_addr = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_addr: isSet85(object.delegator_addr) ? globalThis.String(object.delegator_addr) : "",
      src_validator_addr: isSet85(object.src_validator_addr) ? globalThis.String(object.src_validator_addr) : "",
      dst_validator_addr: isSet85(object.dst_validator_addr) ? globalThis.String(object.dst_validator_addr) : "",
      pagination: isSet85(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_addr !== "") {
      obj.delegator_addr = message.delegator_addr;
    }
    if (message.src_validator_addr !== "") {
      obj.src_validator_addr = message.src_validator_addr;
    }
    if (message.dst_validator_addr !== "") {
      obj.dst_validator_addr = message.dst_validator_addr;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryRedelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryRedelegationsRequest();
    message.delegator_addr = object.delegator_addr ?? "";
    message.src_validator_addr = object.src_validator_addr ?? "";
    message.dst_validator_addr = object.dst_validator_addr ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryRedelegationsResponse = {
  $type: "cosmos.staking.v1beta1.QueryRedelegationsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.redelegation_responses) {
      RedelegationResponse.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryRedelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.redelegation_responses.push(RedelegationResponse.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      redelegation_responses: globalThis.Array.isArray(object == null ? void 0 : object.redelegation_responses) ? object.redelegation_responses.map((e) => RedelegationResponse.fromJSON(e)) : [],
      pagination: isSet85(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.redelegation_responses) == null ? void 0 : _a.length) {
      obj.redelegation_responses = message.redelegation_responses.map((e) => RedelegationResponse.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryRedelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryRedelegationsResponse();
    message.redelegation_responses = ((_a = object.redelegation_responses) == null ? void 0 : _a.map((e) => RedelegationResponse.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryDelegatorValidatorsRequest2 = {
  $type: "cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_addr !== "") {
      writer.uint32(10).string(message.delegator_addr);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorValidatorsRequest2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_addr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_addr: isSet85(object.delegator_addr) ? globalThis.String(object.delegator_addr) : "",
      pagination: isSet85(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_addr !== "") {
      obj.delegator_addr = message.delegator_addr;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryDelegatorValidatorsRequest2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDelegatorValidatorsRequest2();
    message.delegator_addr = object.delegator_addr ?? "";
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryDelegatorValidatorsResponse2 = {
  $type: "cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.validators) {
      Validator4.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorValidatorsResponse2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validators.push(Validator4.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validators: globalThis.Array.isArray(object == null ? void 0 : object.validators) ? object.validators.map((e) => Validator4.fromJSON(e)) : [],
      pagination: isSet85(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.validators) == null ? void 0 : _a.length) {
      obj.validators = message.validators.map((e) => Validator4.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryDelegatorValidatorsResponse2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryDelegatorValidatorsResponse2();
    message.validators = ((_a = object.validators) == null ? void 0 : _a.map((e) => Validator4.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var QueryDelegatorValidatorRequest = {
  $type: "cosmos.staking.v1beta1.QueryDelegatorValidatorRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_addr !== "") {
      writer.uint32(10).string(message.delegator_addr);
    }
    if (message.validator_addr !== "") {
      writer.uint32(18).string(message.validator_addr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorValidatorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_addr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_addr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_addr: isSet85(object.delegator_addr) ? globalThis.String(object.delegator_addr) : "",
      validator_addr: isSet85(object.validator_addr) ? globalThis.String(object.validator_addr) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_addr !== "") {
      obj.delegator_addr = message.delegator_addr;
    }
    if (message.validator_addr !== "") {
      obj.validator_addr = message.validator_addr;
    }
    return obj;
  },
  create(base) {
    return QueryDelegatorValidatorRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDelegatorValidatorRequest();
    message.delegator_addr = object.delegator_addr ?? "";
    message.validator_addr = object.validator_addr ?? "";
    return message;
  }
};
var QueryDelegatorValidatorResponse = {
  $type: "cosmos.staking.v1beta1.QueryDelegatorValidatorResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator !== void 0) {
      Validator4.encode(message.validator, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorValidatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator = Validator4.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { validator: isSet85(object.validator) ? Validator4.fromJSON(object.validator) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator !== void 0) {
      obj.validator = Validator4.toJSON(message.validator);
    }
    return obj;
  },
  create(base) {
    return QueryDelegatorValidatorResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDelegatorValidatorResponse();
    message.validator = object.validator !== void 0 && object.validator !== null ? Validator4.fromPartial(object.validator) : void 0;
    return message;
  }
};
var QueryHistoricalInfoRequest = {
  $type: "cosmos.staking.v1beta1.QueryHistoricalInfoRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryHistoricalInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber38(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { height: isSet85(object.height) ? globalThis.Number(object.height) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },
  create(base) {
    return QueryHistoricalInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryHistoricalInfoRequest();
    message.height = object.height ?? 0;
    return message;
  }
};
var QueryHistoricalInfoResponse = {
  $type: "cosmos.staking.v1beta1.QueryHistoricalInfoResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.hist !== void 0) {
      HistoricalInfo.encode(message.hist, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryHistoricalInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.hist = HistoricalInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { hist: isSet85(object.hist) ? HistoricalInfo.fromJSON(object.hist) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.hist !== void 0) {
      obj.hist = HistoricalInfo.toJSON(message.hist);
    }
    return obj;
  },
  create(base) {
    return QueryHistoricalInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryHistoricalInfoResponse();
    message.hist = object.hist !== void 0 && object.hist !== null ? HistoricalInfo.fromPartial(object.hist) : void 0;
    return message;
  }
};
var QueryPoolRequest = {
  $type: "cosmos.staking.v1beta1.QueryPoolRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryPoolRequest();
    return message;
  }
};
var QueryPoolResponse = {
  $type: "cosmos.staking.v1beta1.QueryPoolResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.pool !== void 0) {
      Pool.encode(message.pool, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pool = Pool.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { pool: isSet85(object.pool) ? Pool.fromJSON(object.pool) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.pool !== void 0) {
      obj.pool = Pool.toJSON(message.pool);
    }
    return obj;
  },
  create(base) {
    return QueryPoolResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryPoolResponse();
    message.pool = object.pool !== void 0 && object.pool !== null ? Pool.fromPartial(object.pool) : void 0;
    return message;
  }
};
var QueryParamsRequest9 = {
  $type: "cosmos.staking.v1beta1.QueryParamsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest9();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryParamsRequest9.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest9();
    return message;
  }
};
var QueryParamsResponse9 = {
  $type: "cosmos.staking.v1beta1.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params8.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse9();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params8.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { params: isSet85(object.params) ? Params8.fromJSON(object.params) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params8.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse9.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse9();
    message.params = object.params !== void 0 && object.params !== null ? Params8.fromPartial(object.params) : void 0;
    return message;
  }
};
function createBaseQueryValidatorsRequest() {
  return { status: "", pagination: void 0 };
}
function createBaseQueryValidatorsResponse() {
  return { validators: [], pagination: void 0 };
}
function createBaseQueryValidatorRequest() {
  return { validator_addr: "" };
}
function createBaseQueryValidatorResponse() {
  return { validator: void 0 };
}
function createBaseQueryValidatorDelegationsRequest() {
  return { validator_addr: "", pagination: void 0 };
}
function createBaseQueryValidatorDelegationsResponse() {
  return { delegation_responses: [], pagination: void 0 };
}
function createBaseQueryValidatorUnbondingDelegationsRequest() {
  return { validator_addr: "", pagination: void 0 };
}
function createBaseQueryValidatorUnbondingDelegationsResponse() {
  return { unbonding_responses: [], pagination: void 0 };
}
function createBaseQueryDelegationRequest() {
  return { delegator_addr: "", validator_addr: "" };
}
function createBaseQueryDelegationResponse() {
  return { delegation_response: void 0 };
}
function createBaseQueryUnbondingDelegationRequest() {
  return { delegator_addr: "", validator_addr: "" };
}
function createBaseQueryUnbondingDelegationResponse() {
  return { unbond: void 0 };
}
function createBaseQueryDelegatorDelegationsRequest() {
  return { delegator_addr: "", pagination: void 0 };
}
function createBaseQueryDelegatorDelegationsResponse() {
  return { delegation_responses: [], pagination: void 0 };
}
function createBaseQueryDelegatorUnbondingDelegationsRequest() {
  return { delegator_addr: "", pagination: void 0 };
}
function createBaseQueryDelegatorUnbondingDelegationsResponse() {
  return { unbonding_responses: [], pagination: void 0 };
}
function createBaseQueryRedelegationsRequest() {
  return { delegator_addr: "", src_validator_addr: "", dst_validator_addr: "", pagination: void 0 };
}
function createBaseQueryRedelegationsResponse() {
  return { redelegation_responses: [], pagination: void 0 };
}
function createBaseQueryDelegatorValidatorsRequest2() {
  return { delegator_addr: "", pagination: void 0 };
}
function createBaseQueryDelegatorValidatorsResponse2() {
  return { validators: [], pagination: void 0 };
}
function createBaseQueryDelegatorValidatorRequest() {
  return { delegator_addr: "", validator_addr: "" };
}
function createBaseQueryDelegatorValidatorResponse() {
  return { validator: void 0 };
}
function createBaseQueryHistoricalInfoRequest() {
  return { height: 0 };
}
function createBaseQueryHistoricalInfoResponse() {
  return { hist: void 0 };
}
function createBaseQueryPoolRequest() {
  return {};
}
function createBaseQueryPoolResponse() {
  return { pool: void 0 };
}
function createBaseQueryParamsRequest9() {
  return {};
}
function createBaseQueryParamsResponse9() {
  return { params: void 0 };
}
function longToNumber38(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet85(value) {
  return value !== null && value !== void 0;
}
var registry90 = [
  ["/cosmos.staking.v1beta1.QueryValidatorsRequest", QueryValidatorsRequest],
  ["/cosmos.staking.v1beta1.QueryValidatorsResponse", QueryValidatorsResponse],
  ["/cosmos.staking.v1beta1.QueryValidatorRequest", QueryValidatorRequest],
  ["/cosmos.staking.v1beta1.QueryValidatorResponse", QueryValidatorResponse],
  ["/cosmos.staking.v1beta1.QueryValidatorDelegationsRequest", QueryValidatorDelegationsRequest],
  ["/cosmos.staking.v1beta1.QueryValidatorDelegationsResponse", QueryValidatorDelegationsResponse],
  ["/cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest", QueryValidatorUnbondingDelegationsRequest],
  ["/cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse", QueryValidatorUnbondingDelegationsResponse],
  ["/cosmos.staking.v1beta1.QueryDelegationRequest", QueryDelegationRequest],
  ["/cosmos.staking.v1beta1.QueryDelegationResponse", QueryDelegationResponse],
  ["/cosmos.staking.v1beta1.QueryUnbondingDelegationRequest", QueryUnbondingDelegationRequest],
  ["/cosmos.staking.v1beta1.QueryUnbondingDelegationResponse", QueryUnbondingDelegationResponse],
  ["/cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest", QueryDelegatorDelegationsRequest],
  ["/cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse", QueryDelegatorDelegationsResponse],
  ["/cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest", QueryDelegatorUnbondingDelegationsRequest],
  ["/cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse", QueryDelegatorUnbondingDelegationsResponse],
  ["/cosmos.staking.v1beta1.QueryRedelegationsRequest", QueryRedelegationsRequest],
  ["/cosmos.staking.v1beta1.QueryRedelegationsResponse", QueryRedelegationsResponse],
  ["/cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest", QueryDelegatorValidatorsRequest2],
  ["/cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse", QueryDelegatorValidatorsResponse2],
  ["/cosmos.staking.v1beta1.QueryDelegatorValidatorRequest", QueryDelegatorValidatorRequest],
  ["/cosmos.staking.v1beta1.QueryDelegatorValidatorResponse", QueryDelegatorValidatorResponse],
  ["/cosmos.staking.v1beta1.QueryHistoricalInfoRequest", QueryHistoricalInfoRequest],
  ["/cosmos.staking.v1beta1.QueryHistoricalInfoResponse", QueryHistoricalInfoResponse],
  ["/cosmos.staking.v1beta1.QueryPoolRequest", QueryPoolRequest],
  ["/cosmos.staking.v1beta1.QueryPoolResponse", QueryPoolResponse],
  ["/cosmos.staking.v1beta1.QueryParamsRequest", QueryParamsRequest9],
  ["/cosmos.staking.v1beta1.QueryParamsResponse", QueryParamsResponse9]
];
var aminoConverters90 = {
  "/cosmos.staking.v1beta1.QueryValidatorsRequest": {
    aminoType: "cosmos-sdk/QueryValidatorsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryValidatorsResponse": {
    aminoType: "cosmos-sdk/QueryValidatorsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryValidatorRequest": {
    aminoType: "cosmos-sdk/QueryValidatorRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryValidatorResponse": {
    aminoType: "cosmos-sdk/QueryValidatorResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryValidatorDelegationsRequest": {
    aminoType: "cosmos-sdk/QueryValidatorDelegationsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryValidatorDelegationsResponse": {
    aminoType: "cosmos-sdk/QueryValidatorDelegationsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest": {
    aminoType: "cosmos-sdk/QueryValidatorUnbondingDelegationsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse": {
    aminoType: "cosmos-sdk/QueryValidatorUnbondingDelegationsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryDelegationRequest": {
    aminoType: "cosmos-sdk/QueryDelegationRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryDelegationResponse": {
    aminoType: "cosmos-sdk/QueryDelegationResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryUnbondingDelegationRequest": {
    aminoType: "cosmos-sdk/QueryUnbondingDelegationRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryUnbondingDelegationResponse": {
    aminoType: "cosmos-sdk/QueryUnbondingDelegationResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest": {
    aminoType: "cosmos-sdk/QueryDelegatorDelegationsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse": {
    aminoType: "cosmos-sdk/QueryDelegatorDelegationsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest": {
    aminoType: "cosmos-sdk/QueryDelegatorUnbondingDelegationsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse": {
    aminoType: "cosmos-sdk/QueryDelegatorUnbondingDelegationsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryRedelegationsRequest": {
    aminoType: "cosmos-sdk/QueryRedelegationsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryRedelegationsResponse": {
    aminoType: "cosmos-sdk/QueryRedelegationsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest": {
    aminoType: "cosmos-sdk/QueryDelegatorValidatorsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse": {
    aminoType: "cosmos-sdk/QueryDelegatorValidatorsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryDelegatorValidatorRequest": {
    aminoType: "cosmos-sdk/QueryDelegatorValidatorRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryDelegatorValidatorResponse": {
    aminoType: "cosmos-sdk/QueryDelegatorValidatorResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryHistoricalInfoRequest": {
    aminoType: "cosmos-sdk/QueryHistoricalInfoRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryHistoricalInfoResponse": {
    aminoType: "cosmos-sdk/QueryHistoricalInfoResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryPoolRequest": {
    aminoType: "cosmos-sdk/QueryPoolRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryPoolResponse": {
    aminoType: "cosmos-sdk/QueryPoolResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryParamsRequest": {
    aminoType: "cosmos-sdk/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.QueryParamsResponse": {
    aminoType: "cosmos-sdk/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/staking/v1beta1/tx.js
var MsgCreateValidator = {
  $type: "cosmos.staking.v1beta1.MsgCreateValidator",
  encode(message, writer = new BinaryWriter()) {
    if (message.description !== void 0) {
      Description.encode(message.description, writer.uint32(10).fork()).join();
    }
    if (message.commission !== void 0) {
      CommissionRates.encode(message.commission, writer.uint32(18).fork()).join();
    }
    if (message.min_self_delegation !== "") {
      writer.uint32(26).string(message.min_self_delegation);
    }
    if (message.delegator_address !== "") {
      writer.uint32(34).string(message.delegator_address);
    }
    if (message.validator_address !== "") {
      writer.uint32(42).string(message.validator_address);
    }
    if (message.pubkey !== void 0) {
      Any.encode(message.pubkey, writer.uint32(50).fork()).join();
    }
    if (message.value !== void 0) {
      Coin.encode(message.value, writer.uint32(58).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.description = Description.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.commission = CommissionRates.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.min_self_delegation = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.pubkey = Any.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.value = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      description: isSet86(object.description) ? Description.fromJSON(object.description) : void 0,
      commission: isSet86(object.commission) ? CommissionRates.fromJSON(object.commission) : void 0,
      min_self_delegation: isSet86(object.min_self_delegation) ? globalThis.String(object.min_self_delegation) : "",
      delegator_address: isSet86(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      validator_address: isSet86(object.validator_address) ? globalThis.String(object.validator_address) : "",
      pubkey: isSet86(object.pubkey) ? Any.fromJSON(object.pubkey) : void 0,
      value: isSet86(object.value) ? Coin.fromJSON(object.value) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.description !== void 0) {
      obj.description = Description.toJSON(message.description);
    }
    if (message.commission !== void 0) {
      obj.commission = CommissionRates.toJSON(message.commission);
    }
    if (message.min_self_delegation !== "") {
      obj.min_self_delegation = message.min_self_delegation;
    }
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if (message.pubkey !== void 0) {
      obj.pubkey = Any.toJSON(message.pubkey);
    }
    if (message.value !== void 0) {
      obj.value = Coin.toJSON(message.value);
    }
    return obj;
  },
  create(base) {
    return MsgCreateValidator.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateValidator();
    message.description = object.description !== void 0 && object.description !== null ? Description.fromPartial(object.description) : void 0;
    message.commission = object.commission !== void 0 && object.commission !== null ? CommissionRates.fromPartial(object.commission) : void 0;
    message.min_self_delegation = object.min_self_delegation ?? "";
    message.delegator_address = object.delegator_address ?? "";
    message.validator_address = object.validator_address ?? "";
    message.pubkey = object.pubkey !== void 0 && object.pubkey !== null ? Any.fromPartial(object.pubkey) : void 0;
    message.value = object.value !== void 0 && object.value !== null ? Coin.fromPartial(object.value) : void 0;
    return message;
  }
};
var MsgCreateValidatorResponse = {
  $type: "cosmos.staking.v1beta1.MsgCreateValidatorResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateValidatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgCreateValidatorResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgCreateValidatorResponse();
    return message;
  }
};
var MsgEditValidator = {
  $type: "cosmos.staking.v1beta1.MsgEditValidator",
  encode(message, writer = new BinaryWriter()) {
    if (message.description !== void 0) {
      Description.encode(message.description, writer.uint32(10).fork()).join();
    }
    if (message.validator_address !== "") {
      writer.uint32(18).string(message.validator_address);
    }
    if (message.commission_rate !== "") {
      writer.uint32(26).string(message.commission_rate);
    }
    if (message.min_self_delegation !== "") {
      writer.uint32(34).string(message.min_self_delegation);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgEditValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.description = Description.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.commission_rate = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.min_self_delegation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      description: isSet86(object.description) ? Description.fromJSON(object.description) : void 0,
      validator_address: isSet86(object.validator_address) ? globalThis.String(object.validator_address) : "",
      commission_rate: isSet86(object.commission_rate) ? globalThis.String(object.commission_rate) : "",
      min_self_delegation: isSet86(object.min_self_delegation) ? globalThis.String(object.min_self_delegation) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.description !== void 0) {
      obj.description = Description.toJSON(message.description);
    }
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if (message.commission_rate !== "") {
      obj.commission_rate = message.commission_rate;
    }
    if (message.min_self_delegation !== "") {
      obj.min_self_delegation = message.min_self_delegation;
    }
    return obj;
  },
  create(base) {
    return MsgEditValidator.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgEditValidator();
    message.description = object.description !== void 0 && object.description !== null ? Description.fromPartial(object.description) : void 0;
    message.validator_address = object.validator_address ?? "";
    message.commission_rate = object.commission_rate ?? "";
    message.min_self_delegation = object.min_self_delegation ?? "";
    return message;
  }
};
var MsgEditValidatorResponse = {
  $type: "cosmos.staking.v1beta1.MsgEditValidatorResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgEditValidatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgEditValidatorResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgEditValidatorResponse();
    return message;
  }
};
var MsgDelegate = {
  $type: "cosmos.staking.v1beta1.MsgDelegate",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.validator_address !== "") {
      writer.uint32(18).string(message.validator_address);
    }
    if (message.amount !== void 0) {
      Coin.encode(message.amount, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.amount = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet86(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      validator_address: isSet86(object.validator_address) ? globalThis.String(object.validator_address) : "",
      amount: isSet86(object.amount) ? Coin.fromJSON(object.amount) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if (message.amount !== void 0) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },
  create(base) {
    return MsgDelegate.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgDelegate();
    message.delegator_address = object.delegator_address ?? "";
    message.validator_address = object.validator_address ?? "";
    message.amount = object.amount !== void 0 && object.amount !== null ? Coin.fromPartial(object.amount) : void 0;
    return message;
  }
};
var MsgDelegateResponse = {
  $type: "cosmos.staking.v1beta1.MsgDelegateResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgDelegateResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgDelegateResponse();
    return message;
  }
};
var MsgBeginRedelegate = {
  $type: "cosmos.staking.v1beta1.MsgBeginRedelegate",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.validator_src_address !== "") {
      writer.uint32(18).string(message.validator_src_address);
    }
    if (message.validator_dst_address !== "") {
      writer.uint32(26).string(message.validator_dst_address);
    }
    if (message.amount !== void 0) {
      Coin.encode(message.amount, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgBeginRedelegate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_src_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.validator_dst_address = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.amount = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet86(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      validator_src_address: isSet86(object.validator_src_address) ? globalThis.String(object.validator_src_address) : "",
      validator_dst_address: isSet86(object.validator_dst_address) ? globalThis.String(object.validator_dst_address) : "",
      amount: isSet86(object.amount) ? Coin.fromJSON(object.amount) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.validator_src_address !== "") {
      obj.validator_src_address = message.validator_src_address;
    }
    if (message.validator_dst_address !== "") {
      obj.validator_dst_address = message.validator_dst_address;
    }
    if (message.amount !== void 0) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },
  create(base) {
    return MsgBeginRedelegate.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgBeginRedelegate();
    message.delegator_address = object.delegator_address ?? "";
    message.validator_src_address = object.validator_src_address ?? "";
    message.validator_dst_address = object.validator_dst_address ?? "";
    message.amount = object.amount !== void 0 && object.amount !== null ? Coin.fromPartial(object.amount) : void 0;
    return message;
  }
};
var MsgBeginRedelegateResponse = {
  $type: "cosmos.staking.v1beta1.MsgBeginRedelegateResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.completion_time !== void 0) {
      Timestamp.encode(toTimestamp11(message.completion_time), writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgBeginRedelegateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.completion_time = fromTimestamp11(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { completion_time: isSet86(object.completion_time) ? fromJsonTimestamp11(object.completion_time) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.completion_time !== void 0) {
      obj.completion_time = message.completion_time.toISOString();
    }
    return obj;
  },
  create(base) {
    return MsgBeginRedelegateResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgBeginRedelegateResponse();
    message.completion_time = object.completion_time ?? void 0;
    return message;
  }
};
var MsgUndelegate = {
  $type: "cosmos.staking.v1beta1.MsgUndelegate",
  encode(message, writer = new BinaryWriter()) {
    if (message.delegator_address !== "") {
      writer.uint32(10).string(message.delegator_address);
    }
    if (message.validator_address !== "") {
      writer.uint32(18).string(message.validator_address);
    }
    if (message.amount !== void 0) {
      Coin.encode(message.amount, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgUndelegate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.delegator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.amount = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delegator_address: isSet86(object.delegator_address) ? globalThis.String(object.delegator_address) : "",
      validator_address: isSet86(object.validator_address) ? globalThis.String(object.validator_address) : "",
      amount: isSet86(object.amount) ? Coin.fromJSON(object.amount) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delegator_address !== "") {
      obj.delegator_address = message.delegator_address;
    }
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if (message.amount !== void 0) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },
  create(base) {
    return MsgUndelegate.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgUndelegate();
    message.delegator_address = object.delegator_address ?? "";
    message.validator_address = object.validator_address ?? "";
    message.amount = object.amount !== void 0 && object.amount !== null ? Coin.fromPartial(object.amount) : void 0;
    return message;
  }
};
var MsgUndelegateResponse = {
  $type: "cosmos.staking.v1beta1.MsgUndelegateResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.completion_time !== void 0) {
      Timestamp.encode(toTimestamp11(message.completion_time), writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgUndelegateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.completion_time = fromTimestamp11(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { completion_time: isSet86(object.completion_time) ? fromJsonTimestamp11(object.completion_time) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.completion_time !== void 0) {
      obj.completion_time = message.completion_time.toISOString();
    }
    return obj;
  },
  create(base) {
    return MsgUndelegateResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgUndelegateResponse();
    message.completion_time = object.completion_time ?? void 0;
    return message;
  }
};
function createBaseMsgCreateValidator() {
  return {
    description: void 0,
    commission: void 0,
    min_self_delegation: "",
    delegator_address: "",
    validator_address: "",
    pubkey: void 0,
    value: void 0
  };
}
function createBaseMsgCreateValidatorResponse() {
  return {};
}
function createBaseMsgEditValidator() {
  return { description: void 0, validator_address: "", commission_rate: "", min_self_delegation: "" };
}
function createBaseMsgEditValidatorResponse() {
  return {};
}
function createBaseMsgDelegate() {
  return { delegator_address: "", validator_address: "", amount: void 0 };
}
function createBaseMsgDelegateResponse() {
  return {};
}
function createBaseMsgBeginRedelegate() {
  return { delegator_address: "", validator_src_address: "", validator_dst_address: "", amount: void 0 };
}
function createBaseMsgBeginRedelegateResponse() {
  return { completion_time: void 0 };
}
function createBaseMsgUndelegate() {
  return { delegator_address: "", validator_address: "", amount: void 0 };
}
function createBaseMsgUndelegateResponse() {
  return { completion_time: void 0 };
}
function toTimestamp11(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp11(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp11(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp11(Timestamp.fromJSON(o));
  }
}
function isSet86(value) {
  return value !== null && value !== void 0;
}
var registry91 = [
  ["/cosmos.staking.v1beta1.MsgCreateValidator", MsgCreateValidator],
  ["/cosmos.staking.v1beta1.MsgCreateValidatorResponse", MsgCreateValidatorResponse],
  ["/cosmos.staking.v1beta1.MsgEditValidator", MsgEditValidator],
  ["/cosmos.staking.v1beta1.MsgEditValidatorResponse", MsgEditValidatorResponse],
  ["/cosmos.staking.v1beta1.MsgDelegate", MsgDelegate],
  ["/cosmos.staking.v1beta1.MsgDelegateResponse", MsgDelegateResponse],
  ["/cosmos.staking.v1beta1.MsgBeginRedelegate", MsgBeginRedelegate],
  ["/cosmos.staking.v1beta1.MsgBeginRedelegateResponse", MsgBeginRedelegateResponse],
  ["/cosmos.staking.v1beta1.MsgUndelegate", MsgUndelegate],
  ["/cosmos.staking.v1beta1.MsgUndelegateResponse", MsgUndelegateResponse]
];
var aminoConverters91 = {
  "/cosmos.staking.v1beta1.MsgCreateValidator": {
    aminoType: "cosmos-sdk/MsgCreateValidator",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.MsgCreateValidatorResponse": {
    aminoType: "cosmos-sdk/MsgCreateValidatorResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.MsgEditValidator": {
    aminoType: "cosmos-sdk/MsgEditValidator",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.MsgEditValidatorResponse": {
    aminoType: "cosmos-sdk/MsgEditValidatorResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.MsgDelegate": {
    aminoType: "cosmos-sdk/MsgDelegate",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.MsgDelegateResponse": {
    aminoType: "cosmos-sdk/MsgDelegateResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.MsgBeginRedelegate": {
    aminoType: "cosmos-sdk/MsgBeginRedelegate",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.MsgBeginRedelegateResponse": {
    aminoType: "cosmos-sdk/MsgBeginRedelegateResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.MsgUndelegate": {
    aminoType: "cosmos-sdk/MsgUndelegate",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.staking.v1beta1.MsgUndelegateResponse": {
    aminoType: "cosmos-sdk/MsgUndelegateResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/tx/signing/v1beta1/index.js
var v1beta1_exports23 = {};
__export(v1beta1_exports23, {
  SignatureDescriptor: () => SignatureDescriptor,
  SignatureDescriptorData: () => SignatureDescriptorData,
  SignatureDescriptorDataMulti: () => SignatureDescriptorDataMulti,
  SignatureDescriptorDataSingle: () => SignatureDescriptorDataSingle,
  SignatureDescriptors: () => SignatureDescriptors,
  aminoConverters: () => aminoConverters93,
  registry: () => registry93,
  signModeFromJSON: () => signModeFromJSON,
  signModeToJSON: () => signModeToJSON
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/crypto/multisig/v1beta1/multisig.js
var MultiSignature = {
  $type: "cosmos.crypto.multisig.v1beta1.MultiSignature",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.signatures) {
      writer.uint32(10).bytes(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMultiSignature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.signatures.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      signatures: globalThis.Array.isArray(object == null ? void 0 : object.signatures) ? object.signatures.map((e) => bytesFromBase6433(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.signatures) == null ? void 0 : _a.length) {
      obj.signatures = message.signatures.map((e) => base64FromBytes33(e));
    }
    return obj;
  },
  create(base) {
    return MultiSignature.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMultiSignature();
    message.signatures = ((_a = object.signatures) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var CompactBitArray = {
  $type: "cosmos.crypto.multisig.v1beta1.CompactBitArray",
  encode(message, writer = new BinaryWriter()) {
    if (message.extra_bits_stored !== 0) {
      writer.uint32(8).uint32(message.extra_bits_stored);
    }
    if (message.elems.length !== 0) {
      writer.uint32(18).bytes(message.elems);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCompactBitArray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.extra_bits_stored = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.elems = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      extra_bits_stored: isSet87(object.extra_bits_stored) ? globalThis.Number(object.extra_bits_stored) : 0,
      elems: isSet87(object.elems) ? bytesFromBase6433(object.elems) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.extra_bits_stored !== 0) {
      obj.extra_bits_stored = Math.round(message.extra_bits_stored);
    }
    if (message.elems.length !== 0) {
      obj.elems = base64FromBytes33(message.elems);
    }
    return obj;
  },
  create(base) {
    return CompactBitArray.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCompactBitArray();
    message.extra_bits_stored = object.extra_bits_stored ?? 0;
    message.elems = object.elems ?? new Uint8Array(0);
    return message;
  }
};
function createBaseMultiSignature() {
  return { signatures: [] };
}
function createBaseCompactBitArray() {
  return { extra_bits_stored: 0, elems: new Uint8Array(0) };
}
function bytesFromBase6433(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes33(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet87(value) {
  return value !== null && value !== void 0;
}
var registry92 = [
  ["/cosmos.crypto.multisig.v1beta1.MultiSignature", MultiSignature],
  ["/cosmos.crypto.multisig.v1beta1.CompactBitArray", CompactBitArray]
];
var aminoConverters92 = {
  "/cosmos.crypto.multisig.v1beta1.MultiSignature": {
    aminoType: "cosmos-sdk/MultiSignature",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.crypto.multisig.v1beta1.CompactBitArray": {
    aminoType: "cosmos-sdk/CompactBitArray",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/types/cosmos/tx/signing/v1beta1/signing.js
var SignMode;
(function(SignMode2) {
  SignMode2[SignMode2["SIGN_MODE_UNSPECIFIED"] = 0] = "SIGN_MODE_UNSPECIFIED";
  SignMode2[SignMode2["SIGN_MODE_DIRECT"] = 1] = "SIGN_MODE_DIRECT";
  SignMode2[SignMode2["SIGN_MODE_TEXTUAL"] = 2] = "SIGN_MODE_TEXTUAL";
  SignMode2[SignMode2["SIGN_MODE_LEGACY_AMINO_JSON"] = 127] = "SIGN_MODE_LEGACY_AMINO_JSON";
  SignMode2[SignMode2["SIGN_MODE_EIP_191"] = 191] = "SIGN_MODE_EIP_191";
  SignMode2[SignMode2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SignMode || (SignMode = {}));

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/tx/signing/v1beta1/signing.js
var SignatureDescriptors = {
  $type: "cosmos.tx.signing.v1beta1.SignatureDescriptors",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.signatures) {
      SignatureDescriptor.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignatureDescriptors();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.signatures.push(SignatureDescriptor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      signatures: globalThis.Array.isArray(object == null ? void 0 : object.signatures) ? object.signatures.map((e) => SignatureDescriptor.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.signatures) == null ? void 0 : _a.length) {
      obj.signatures = message.signatures.map((e) => SignatureDescriptor.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return SignatureDescriptors.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseSignatureDescriptors();
    message.signatures = ((_a = object.signatures) == null ? void 0 : _a.map((e) => SignatureDescriptor.fromPartial(e))) || [];
    return message;
  }
};
var SignatureDescriptor = {
  $type: "cosmos.tx.signing.v1beta1.SignatureDescriptor",
  encode(message, writer = new BinaryWriter()) {
    if (message.public_key !== void 0) {
      Any.encode(message.public_key, writer.uint32(10).fork()).join();
    }
    if (message.data !== void 0) {
      SignatureDescriptorData.encode(message.data, writer.uint32(18).fork()).join();
    }
    if (message.sequence !== 0) {
      writer.uint32(24).uint64(message.sequence);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignatureDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.public_key = Any.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.data = SignatureDescriptorData.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.sequence = longToNumber39(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      public_key: isSet88(object.public_key) ? Any.fromJSON(object.public_key) : void 0,
      data: isSet88(object.data) ? SignatureDescriptorData.fromJSON(object.data) : void 0,
      sequence: isSet88(object.sequence) ? globalThis.Number(object.sequence) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.public_key !== void 0) {
      obj.public_key = Any.toJSON(message.public_key);
    }
    if (message.data !== void 0) {
      obj.data = SignatureDescriptorData.toJSON(message.data);
    }
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    return obj;
  },
  create(base) {
    return SignatureDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSignatureDescriptor();
    message.public_key = object.public_key !== void 0 && object.public_key !== null ? Any.fromPartial(object.public_key) : void 0;
    message.data = object.data !== void 0 && object.data !== null ? SignatureDescriptorData.fromPartial(object.data) : void 0;
    message.sequence = object.sequence ?? 0;
    return message;
  }
};
var SignatureDescriptorData = {
  $type: "cosmos.tx.signing.v1beta1.SignatureDescriptor.Data",
  encode(message, writer = new BinaryWriter()) {
    if (message.single !== void 0) {
      SignatureDescriptorDataSingle.encode(message.single, writer.uint32(10).fork()).join();
    }
    if (message.multi !== void 0) {
      SignatureDescriptorDataMulti.encode(message.multi, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignatureDescriptorData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.single = SignatureDescriptorDataSingle.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.multi = SignatureDescriptorDataMulti.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      single: isSet88(object.single) ? SignatureDescriptorDataSingle.fromJSON(object.single) : void 0,
      multi: isSet88(object.multi) ? SignatureDescriptorDataMulti.fromJSON(object.multi) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.single !== void 0) {
      obj.single = SignatureDescriptorDataSingle.toJSON(message.single);
    }
    if (message.multi !== void 0) {
      obj.multi = SignatureDescriptorDataMulti.toJSON(message.multi);
    }
    return obj;
  },
  create(base) {
    return SignatureDescriptorData.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSignatureDescriptorData();
    message.single = object.single !== void 0 && object.single !== null ? SignatureDescriptorDataSingle.fromPartial(object.single) : void 0;
    message.multi = object.multi !== void 0 && object.multi !== null ? SignatureDescriptorDataMulti.fromPartial(object.multi) : void 0;
    return message;
  }
};
var SignatureDescriptorDataSingle = {
  $type: "cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single",
  encode(message, writer = new BinaryWriter()) {
    if (message.mode !== 0) {
      writer.uint32(8).int32(message.mode);
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignatureDescriptorDataSingle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.mode = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.signature = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      mode: isSet88(object.mode) ? signModeFromJSON(object.mode) : 0,
      signature: isSet88(object.signature) ? bytesFromBase6434(object.signature) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.mode !== 0) {
      obj.mode = signModeToJSON(message.mode);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes34(message.signature);
    }
    return obj;
  },
  create(base) {
    return SignatureDescriptorDataSingle.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSignatureDescriptorDataSingle();
    message.mode = object.mode ?? 0;
    message.signature = object.signature ?? new Uint8Array(0);
    return message;
  }
};
var SignatureDescriptorDataMulti = {
  $type: "cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi",
  encode(message, writer = new BinaryWriter()) {
    if (message.bitarray !== void 0) {
      CompactBitArray.encode(message.bitarray, writer.uint32(10).fork()).join();
    }
    for (const v of message.signatures) {
      SignatureDescriptorData.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignatureDescriptorDataMulti();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.bitarray = CompactBitArray.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.signatures.push(SignatureDescriptorData.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      bitarray: isSet88(object.bitarray) ? CompactBitArray.fromJSON(object.bitarray) : void 0,
      signatures: globalThis.Array.isArray(object == null ? void 0 : object.signatures) ? object.signatures.map((e) => SignatureDescriptorData.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.bitarray !== void 0) {
      obj.bitarray = CompactBitArray.toJSON(message.bitarray);
    }
    if ((_a = message.signatures) == null ? void 0 : _a.length) {
      obj.signatures = message.signatures.map((e) => SignatureDescriptorData.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return SignatureDescriptorDataMulti.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseSignatureDescriptorDataMulti();
    message.bitarray = object.bitarray !== void 0 && object.bitarray !== null ? CompactBitArray.fromPartial(object.bitarray) : void 0;
    message.signatures = ((_a = object.signatures) == null ? void 0 : _a.map((e) => SignatureDescriptorData.fromPartial(e))) || [];
    return message;
  }
};
function signModeFromJSON(object) {
  switch (object) {
    case 0:
    case "SIGN_MODE_UNSPECIFIED":
      return SignMode.SIGN_MODE_UNSPECIFIED;
    case 1:
    case "SIGN_MODE_DIRECT":
      return SignMode.SIGN_MODE_DIRECT;
    case 2:
    case "SIGN_MODE_TEXTUAL":
      return SignMode.SIGN_MODE_TEXTUAL;
    case 127:
    case "SIGN_MODE_LEGACY_AMINO_JSON":
      return SignMode.SIGN_MODE_LEGACY_AMINO_JSON;
    case 191:
    case "SIGN_MODE_EIP_191":
      return SignMode.SIGN_MODE_EIP_191;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SignMode.UNRECOGNIZED;
  }
}
function signModeToJSON(object) {
  switch (object) {
    case SignMode.SIGN_MODE_UNSPECIFIED:
      return "SIGN_MODE_UNSPECIFIED";
    case SignMode.SIGN_MODE_DIRECT:
      return "SIGN_MODE_DIRECT";
    case SignMode.SIGN_MODE_TEXTUAL:
      return "SIGN_MODE_TEXTUAL";
    case SignMode.SIGN_MODE_LEGACY_AMINO_JSON:
      return "SIGN_MODE_LEGACY_AMINO_JSON";
    case SignMode.SIGN_MODE_EIP_191:
      return "SIGN_MODE_EIP_191";
    case SignMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function createBaseSignatureDescriptors() {
  return { signatures: [] };
}
function createBaseSignatureDescriptor() {
  return { public_key: void 0, data: void 0, sequence: 0 };
}
function createBaseSignatureDescriptorData() {
  return { single: void 0, multi: void 0 };
}
function createBaseSignatureDescriptorDataSingle() {
  return { mode: 0, signature: new Uint8Array(0) };
}
function createBaseSignatureDescriptorDataMulti() {
  return { bitarray: void 0, signatures: [] };
}
function bytesFromBase6434(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes34(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber39(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet88(value) {
  return value !== null && value !== void 0;
}
var registry93 = [
  ["/cosmos.tx.signing.v1beta1.SignatureDescriptors", SignatureDescriptors],
  ["/cosmos.tx.signing.v1beta1.SignatureDescriptor", SignatureDescriptor],
  ["/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data", SignatureDescriptorData],
  ["/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single", SignatureDescriptorDataSingle],
  ["/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi", SignatureDescriptorDataMulti]
];
var aminoConverters93 = {
  "/cosmos.tx.signing.v1beta1.SignatureDescriptors": {
    aminoType: "cosmos-sdk/SignatureDescriptors",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.signing.v1beta1.SignatureDescriptor": {
    aminoType: "cosmos-sdk/SignatureDescriptor",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data": {
    aminoType: "cosmos-sdk/Data",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single": {
    aminoType: "cosmos-sdk/Single",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi": {
    aminoType: "cosmos-sdk/Multi",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/tx/v1beta1/index.js
var v1beta1_exports24 = {};
__export(v1beta1_exports24, {
  AuthInfo: () => AuthInfo,
  BroadcastTxRequest: () => BroadcastTxRequest,
  BroadcastTxResponse: () => BroadcastTxResponse,
  Fee: () => Fee,
  GetBlockWithTxsRequest: () => GetBlockWithTxsRequest,
  GetBlockWithTxsResponse: () => GetBlockWithTxsResponse,
  GetTxRequest: () => GetTxRequest,
  GetTxResponse: () => GetTxResponse,
  GetTxsEventRequest: () => GetTxsEventRequest,
  GetTxsEventResponse: () => GetTxsEventResponse,
  ModeInfo: () => ModeInfo,
  ModeInfoMulti: () => ModeInfoMulti,
  ModeInfoSingle: () => ModeInfoSingle,
  SignDoc: () => SignDoc,
  SignerInfo: () => SignerInfo,
  SimulateRequest: () => SimulateRequest,
  SimulateResponse: () => SimulateResponse,
  Tx: () => Tx,
  TxBody: () => TxBody,
  TxRaw: () => TxRaw,
  broadcastModeFromJSON: () => broadcastModeFromJSON,
  broadcastModeToJSON: () => broadcastModeToJSON,
  orderByFromJSON: () => orderByFromJSON,
  orderByToJSON: () => orderByToJSON
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/tx/v1beta1/tx.js
var Tx = {
  $type: "cosmos.tx.v1beta1.Tx",
  encode(message, writer = new BinaryWriter()) {
    if (message.body !== void 0) {
      TxBody.encode(message.body, writer.uint32(10).fork()).join();
    }
    if (message.auth_info !== void 0) {
      AuthInfo.encode(message.auth_info, writer.uint32(18).fork()).join();
    }
    for (const v of message.signatures) {
      writer.uint32(26).bytes(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.body = TxBody.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.auth_info = AuthInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.signatures.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      body: isSet89(object.body) ? TxBody.fromJSON(object.body) : void 0,
      auth_info: isSet89(object.auth_info) ? AuthInfo.fromJSON(object.auth_info) : void 0,
      signatures: globalThis.Array.isArray(object == null ? void 0 : object.signatures) ? object.signatures.map((e) => bytesFromBase6435(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.body !== void 0) {
      obj.body = TxBody.toJSON(message.body);
    }
    if (message.auth_info !== void 0) {
      obj.auth_info = AuthInfo.toJSON(message.auth_info);
    }
    if ((_a = message.signatures) == null ? void 0 : _a.length) {
      obj.signatures = message.signatures.map((e) => base64FromBytes35(e));
    }
    return obj;
  },
  create(base) {
    return Tx.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseTx();
    message.body = object.body !== void 0 && object.body !== null ? TxBody.fromPartial(object.body) : void 0;
    message.auth_info = object.auth_info !== void 0 && object.auth_info !== null ? AuthInfo.fromPartial(object.auth_info) : void 0;
    message.signatures = ((_a = object.signatures) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var TxRaw = {
  $type: "cosmos.tx.v1beta1.TxRaw",
  encode(message, writer = new BinaryWriter()) {
    if (message.body_bytes.length !== 0) {
      writer.uint32(10).bytes(message.body_bytes);
    }
    if (message.auth_info_bytes.length !== 0) {
      writer.uint32(18).bytes(message.auth_info_bytes);
    }
    for (const v of message.signatures) {
      writer.uint32(26).bytes(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTxRaw();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.body_bytes = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.auth_info_bytes = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.signatures.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      body_bytes: isSet89(object.body_bytes) ? bytesFromBase6435(object.body_bytes) : new Uint8Array(0),
      auth_info_bytes: isSet89(object.auth_info_bytes) ? bytesFromBase6435(object.auth_info_bytes) : new Uint8Array(0),
      signatures: globalThis.Array.isArray(object == null ? void 0 : object.signatures) ? object.signatures.map((e) => bytesFromBase6435(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.body_bytes.length !== 0) {
      obj.body_bytes = base64FromBytes35(message.body_bytes);
    }
    if (message.auth_info_bytes.length !== 0) {
      obj.auth_info_bytes = base64FromBytes35(message.auth_info_bytes);
    }
    if ((_a = message.signatures) == null ? void 0 : _a.length) {
      obj.signatures = message.signatures.map((e) => base64FromBytes35(e));
    }
    return obj;
  },
  create(base) {
    return TxRaw.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseTxRaw();
    message.body_bytes = object.body_bytes ?? new Uint8Array(0);
    message.auth_info_bytes = object.auth_info_bytes ?? new Uint8Array(0);
    message.signatures = ((_a = object.signatures) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var SignDoc = {
  $type: "cosmos.tx.v1beta1.SignDoc",
  encode(message, writer = new BinaryWriter()) {
    if (message.body_bytes.length !== 0) {
      writer.uint32(10).bytes(message.body_bytes);
    }
    if (message.auth_info_bytes.length !== 0) {
      writer.uint32(18).bytes(message.auth_info_bytes);
    }
    if (message.chain_id !== "") {
      writer.uint32(26).string(message.chain_id);
    }
    if (message.account_number !== 0) {
      writer.uint32(32).uint64(message.account_number);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignDoc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.body_bytes = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.auth_info_bytes = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.chain_id = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.account_number = longToNumber40(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      body_bytes: isSet89(object.body_bytes) ? bytesFromBase6435(object.body_bytes) : new Uint8Array(0),
      auth_info_bytes: isSet89(object.auth_info_bytes) ? bytesFromBase6435(object.auth_info_bytes) : new Uint8Array(0),
      chain_id: isSet89(object.chain_id) ? globalThis.String(object.chain_id) : "",
      account_number: isSet89(object.account_number) ? globalThis.Number(object.account_number) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.body_bytes.length !== 0) {
      obj.body_bytes = base64FromBytes35(message.body_bytes);
    }
    if (message.auth_info_bytes.length !== 0) {
      obj.auth_info_bytes = base64FromBytes35(message.auth_info_bytes);
    }
    if (message.chain_id !== "") {
      obj.chain_id = message.chain_id;
    }
    if (message.account_number !== 0) {
      obj.account_number = Math.round(message.account_number);
    }
    return obj;
  },
  create(base) {
    return SignDoc.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSignDoc();
    message.body_bytes = object.body_bytes ?? new Uint8Array(0);
    message.auth_info_bytes = object.auth_info_bytes ?? new Uint8Array(0);
    message.chain_id = object.chain_id ?? "";
    message.account_number = object.account_number ?? 0;
    return message;
  }
};
var TxBody = {
  $type: "cosmos.tx.v1beta1.TxBody",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.messages) {
      Any.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.memo !== "") {
      writer.uint32(18).string(message.memo);
    }
    if (message.timeout_height !== 0) {
      writer.uint32(24).uint64(message.timeout_height);
    }
    for (const v of message.extension_options) {
      Any.encode(v, writer.uint32(8186).fork()).join();
    }
    for (const v of message.non_critical_extension_options) {
      Any.encode(v, writer.uint32(16378).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTxBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.messages.push(Any.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.memo = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.timeout_height = longToNumber40(reader.uint64());
          continue;
        case 1023:
          if (tag !== 8186) {
            break;
          }
          message.extension_options.push(Any.decode(reader, reader.uint32()));
          continue;
        case 2047:
          if (tag !== 16378) {
            break;
          }
          message.non_critical_extension_options.push(Any.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      messages: globalThis.Array.isArray(object == null ? void 0 : object.messages) ? object.messages.map((e) => Any.fromJSON(e)) : [],
      memo: isSet89(object.memo) ? globalThis.String(object.memo) : "",
      timeout_height: isSet89(object.timeout_height) ? globalThis.Number(object.timeout_height) : 0,
      extension_options: globalThis.Array.isArray(object == null ? void 0 : object.extension_options) ? object.extension_options.map((e) => Any.fromJSON(e)) : [],
      non_critical_extension_options: globalThis.Array.isArray(object == null ? void 0 : object.non_critical_extension_options) ? object.non_critical_extension_options.map((e) => Any.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b, _c;
    const obj = {};
    if ((_a = message.messages) == null ? void 0 : _a.length) {
      obj.messages = message.messages.map((e) => Any.toJSON(e));
    }
    if (message.memo !== "") {
      obj.memo = message.memo;
    }
    if (message.timeout_height !== 0) {
      obj.timeout_height = Math.round(message.timeout_height);
    }
    if ((_b = message.extension_options) == null ? void 0 : _b.length) {
      obj.extension_options = message.extension_options.map((e) => Any.toJSON(e));
    }
    if ((_c = message.non_critical_extension_options) == null ? void 0 : _c.length) {
      obj.non_critical_extension_options = message.non_critical_extension_options.map((e) => Any.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return TxBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseTxBody();
    message.messages = ((_a = object.messages) == null ? void 0 : _a.map((e) => Any.fromPartial(e))) || [];
    message.memo = object.memo ?? "";
    message.timeout_height = object.timeout_height ?? 0;
    message.extension_options = ((_b = object.extension_options) == null ? void 0 : _b.map((e) => Any.fromPartial(e))) || [];
    message.non_critical_extension_options = ((_c = object.non_critical_extension_options) == null ? void 0 : _c.map((e) => Any.fromPartial(e))) || [];
    return message;
  }
};
var AuthInfo = {
  $type: "cosmos.tx.v1beta1.AuthInfo",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.signer_infos) {
      SignerInfo.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.fee !== void 0) {
      Fee.encode(message.fee, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAuthInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.signer_infos.push(SignerInfo.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.fee = Fee.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      signer_infos: globalThis.Array.isArray(object == null ? void 0 : object.signer_infos) ? object.signer_infos.map((e) => SignerInfo.fromJSON(e)) : [],
      fee: isSet89(object.fee) ? Fee.fromJSON(object.fee) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.signer_infos) == null ? void 0 : _a.length) {
      obj.signer_infos = message.signer_infos.map((e) => SignerInfo.toJSON(e));
    }
    if (message.fee !== void 0) {
      obj.fee = Fee.toJSON(message.fee);
    }
    return obj;
  },
  create(base) {
    return AuthInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseAuthInfo();
    message.signer_infos = ((_a = object.signer_infos) == null ? void 0 : _a.map((e) => SignerInfo.fromPartial(e))) || [];
    message.fee = object.fee !== void 0 && object.fee !== null ? Fee.fromPartial(object.fee) : void 0;
    return message;
  }
};
var SignerInfo = {
  $type: "cosmos.tx.v1beta1.SignerInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.public_key !== void 0) {
      Any.encode(message.public_key, writer.uint32(10).fork()).join();
    }
    if (message.mode_info !== void 0) {
      ModeInfo.encode(message.mode_info, writer.uint32(18).fork()).join();
    }
    if (message.sequence !== 0) {
      writer.uint32(24).uint64(message.sequence);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.public_key = Any.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.mode_info = ModeInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.sequence = longToNumber40(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      public_key: isSet89(object.public_key) ? Any.fromJSON(object.public_key) : void 0,
      mode_info: isSet89(object.mode_info) ? ModeInfo.fromJSON(object.mode_info) : void 0,
      sequence: isSet89(object.sequence) ? globalThis.Number(object.sequence) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.public_key !== void 0) {
      obj.public_key = Any.toJSON(message.public_key);
    }
    if (message.mode_info !== void 0) {
      obj.mode_info = ModeInfo.toJSON(message.mode_info);
    }
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    return obj;
  },
  create(base) {
    return SignerInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSignerInfo();
    message.public_key = object.public_key !== void 0 && object.public_key !== null ? Any.fromPartial(object.public_key) : void 0;
    message.mode_info = object.mode_info !== void 0 && object.mode_info !== null ? ModeInfo.fromPartial(object.mode_info) : void 0;
    message.sequence = object.sequence ?? 0;
    return message;
  }
};
var ModeInfo = {
  $type: "cosmos.tx.v1beta1.ModeInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.single !== void 0) {
      ModeInfoSingle.encode(message.single, writer.uint32(10).fork()).join();
    }
    if (message.multi !== void 0) {
      ModeInfoMulti.encode(message.multi, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseModeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.single = ModeInfoSingle.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.multi = ModeInfoMulti.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      single: isSet89(object.single) ? ModeInfoSingle.fromJSON(object.single) : void 0,
      multi: isSet89(object.multi) ? ModeInfoMulti.fromJSON(object.multi) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.single !== void 0) {
      obj.single = ModeInfoSingle.toJSON(message.single);
    }
    if (message.multi !== void 0) {
      obj.multi = ModeInfoMulti.toJSON(message.multi);
    }
    return obj;
  },
  create(base) {
    return ModeInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseModeInfo();
    message.single = object.single !== void 0 && object.single !== null ? ModeInfoSingle.fromPartial(object.single) : void 0;
    message.multi = object.multi !== void 0 && object.multi !== null ? ModeInfoMulti.fromPartial(object.multi) : void 0;
    return message;
  }
};
var ModeInfoSingle = {
  $type: "cosmos.tx.v1beta1.ModeInfo.Single",
  encode(message, writer = new BinaryWriter()) {
    if (message.mode !== 0) {
      writer.uint32(8).int32(message.mode);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseModeInfoSingle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.mode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { mode: isSet89(object.mode) ? signModeFromJSON(object.mode) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.mode !== 0) {
      obj.mode = signModeToJSON(message.mode);
    }
    return obj;
  },
  create(base) {
    return ModeInfoSingle.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseModeInfoSingle();
    message.mode = object.mode ?? 0;
    return message;
  }
};
var ModeInfoMulti = {
  $type: "cosmos.tx.v1beta1.ModeInfo.Multi",
  encode(message, writer = new BinaryWriter()) {
    if (message.bitarray !== void 0) {
      CompactBitArray.encode(message.bitarray, writer.uint32(10).fork()).join();
    }
    for (const v of message.mode_infos) {
      ModeInfo.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseModeInfoMulti();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.bitarray = CompactBitArray.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.mode_infos.push(ModeInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      bitarray: isSet89(object.bitarray) ? CompactBitArray.fromJSON(object.bitarray) : void 0,
      mode_infos: globalThis.Array.isArray(object == null ? void 0 : object.mode_infos) ? object.mode_infos.map((e) => ModeInfo.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.bitarray !== void 0) {
      obj.bitarray = CompactBitArray.toJSON(message.bitarray);
    }
    if ((_a = message.mode_infos) == null ? void 0 : _a.length) {
      obj.mode_infos = message.mode_infos.map((e) => ModeInfo.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ModeInfoMulti.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseModeInfoMulti();
    message.bitarray = object.bitarray !== void 0 && object.bitarray !== null ? CompactBitArray.fromPartial(object.bitarray) : void 0;
    message.mode_infos = ((_a = object.mode_infos) == null ? void 0 : _a.map((e) => ModeInfo.fromPartial(e))) || [];
    return message;
  }
};
var Fee = {
  $type: "cosmos.tx.v1beta1.Fee",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.amount) {
      Coin.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.gas_limit !== 0) {
      writer.uint32(16).uint64(message.gas_limit);
    }
    if (message.payer !== "") {
      writer.uint32(26).string(message.payer);
    }
    if (message.granter !== "") {
      writer.uint32(34).string(message.granter);
    }
    if (message.gas_estimate !== 0) {
      writer.uint32(40).uint64(message.gas_estimate);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.gas_limit = longToNumber40(reader.uint64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.payer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.granter = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.gas_estimate = longToNumber40(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      amount: globalThis.Array.isArray(object == null ? void 0 : object.amount) ? object.amount.map((e) => Coin.fromJSON(e)) : [],
      gas_limit: isSet89(object.gas_limit) ? globalThis.Number(object.gas_limit) : 0,
      payer: isSet89(object.payer) ? globalThis.String(object.payer) : "",
      granter: isSet89(object.granter) ? globalThis.String(object.granter) : "",
      gas_estimate: isSet89(object.gas_estimate) ? globalThis.Number(object.gas_estimate) : 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.amount) == null ? void 0 : _a.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    if (message.gas_limit !== 0) {
      obj.gas_limit = Math.round(message.gas_limit);
    }
    if (message.payer !== "") {
      obj.payer = message.payer;
    }
    if (message.granter !== "") {
      obj.granter = message.granter;
    }
    if (message.gas_estimate !== 0) {
      obj.gas_estimate = Math.round(message.gas_estimate);
    }
    return obj;
  },
  create(base) {
    return Fee.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseFee();
    message.amount = ((_a = object.amount) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    message.gas_limit = object.gas_limit ?? 0;
    message.payer = object.payer ?? "";
    message.granter = object.granter ?? "";
    message.gas_estimate = object.gas_estimate ?? 0;
    return message;
  }
};
function createBaseTx() {
  return { body: void 0, auth_info: void 0, signatures: [] };
}
function createBaseTxRaw() {
  return { body_bytes: new Uint8Array(0), auth_info_bytes: new Uint8Array(0), signatures: [] };
}
function createBaseSignDoc() {
  return { body_bytes: new Uint8Array(0), auth_info_bytes: new Uint8Array(0), chain_id: "", account_number: 0 };
}
function createBaseTxBody() {
  return { messages: [], memo: "", timeout_height: 0, extension_options: [], non_critical_extension_options: [] };
}
function createBaseAuthInfo() {
  return { signer_infos: [], fee: void 0 };
}
function createBaseSignerInfo() {
  return { public_key: void 0, mode_info: void 0, sequence: 0 };
}
function createBaseModeInfo() {
  return { single: void 0, multi: void 0 };
}
function createBaseModeInfoSingle() {
  return { mode: 0 };
}
function createBaseModeInfoMulti() {
  return { bitarray: void 0, mode_infos: [] };
}
function createBaseFee() {
  return { amount: [], gas_limit: 0, payer: "", granter: "", gas_estimate: 0 };
}
function bytesFromBase6435(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes35(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber40(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet89(value) {
  return value !== null && value !== void 0;
}
var registry94 = [
  ["/cosmos.tx.v1beta1.Tx", Tx],
  ["/cosmos.tx.v1beta1.TxRaw", TxRaw],
  ["/cosmos.tx.v1beta1.SignDoc", SignDoc],
  ["/cosmos.tx.v1beta1.TxBody", TxBody],
  ["/cosmos.tx.v1beta1.AuthInfo", AuthInfo],
  ["/cosmos.tx.v1beta1.SignerInfo", SignerInfo],
  ["/cosmos.tx.v1beta1.ModeInfo", ModeInfo],
  ["/cosmos.tx.v1beta1.ModeInfo.Single", ModeInfoSingle],
  ["/cosmos.tx.v1beta1.ModeInfo.Multi", ModeInfoMulti],
  ["/cosmos.tx.v1beta1.Fee", Fee]
];
var aminoConverters94 = {
  "/cosmos.tx.v1beta1.Tx": {
    aminoType: "cosmos-sdk/Tx",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.TxRaw": {
    aminoType: "cosmos-sdk/TxRaw",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.SignDoc": {
    aminoType: "cosmos-sdk/SignDoc",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.TxBody": {
    aminoType: "cosmos-sdk/TxBody",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.AuthInfo": {
    aminoType: "cosmos-sdk/AuthInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.SignerInfo": {
    aminoType: "cosmos-sdk/SignerInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.ModeInfo": {
    aminoType: "cosmos-sdk/ModeInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.ModeInfo.Single": {
    aminoType: "cosmos-sdk/Single",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.ModeInfo.Multi": {
    aminoType: "cosmos-sdk/Multi",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.Fee": {
    aminoType: "cosmos-sdk/Fee",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/types/cosmos/tx/v1beta1/service.js
var OrderBy;
(function(OrderBy2) {
  OrderBy2[OrderBy2["ORDER_BY_UNSPECIFIED"] = 0] = "ORDER_BY_UNSPECIFIED";
  OrderBy2[OrderBy2["ORDER_BY_ASC"] = 1] = "ORDER_BY_ASC";
  OrderBy2[OrderBy2["ORDER_BY_DESC"] = 2] = "ORDER_BY_DESC";
  OrderBy2[OrderBy2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(OrderBy || (OrderBy = {}));
var BroadcastMode;
(function(BroadcastMode2) {
  BroadcastMode2[BroadcastMode2["BROADCAST_MODE_UNSPECIFIED"] = 0] = "BROADCAST_MODE_UNSPECIFIED";
  BroadcastMode2[BroadcastMode2["BROADCAST_MODE_BLOCK"] = 1] = "BROADCAST_MODE_BLOCK";
  BroadcastMode2[BroadcastMode2["BROADCAST_MODE_SYNC"] = 2] = "BROADCAST_MODE_SYNC";
  BroadcastMode2[BroadcastMode2["BROADCAST_MODE_ASYNC"] = 3] = "BROADCAST_MODE_ASYNC";
  BroadcastMode2[BroadcastMode2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BroadcastMode || (BroadcastMode = {}));

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/tx/v1beta1/service.js
var GetTxsEventRequest = {
  $type: "cosmos.tx.v1beta1.GetTxsEventRequest",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.events) {
      writer.uint32(10).string(v);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    if (message.order_by !== 0) {
      writer.uint32(24).int32(message.order_by);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetTxsEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.events.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.order_by = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      events: globalThis.Array.isArray(object == null ? void 0 : object.events) ? object.events.map((e) => globalThis.String(e)) : [],
      pagination: isSet90(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0,
      order_by: isSet90(object.order_by) ? orderByFromJSON(object.order_by) : 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.events) == null ? void 0 : _a.length) {
      obj.events = message.events;
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.order_by !== 0) {
      obj.order_by = orderByToJSON(message.order_by);
    }
    return obj;
  },
  create(base) {
    return GetTxsEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGetTxsEventRequest();
    message.events = ((_a = object.events) == null ? void 0 : _a.map((e) => e)) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    message.order_by = object.order_by ?? 0;
    return message;
  }
};
var GetTxsEventResponse = {
  $type: "cosmos.tx.v1beta1.GetTxsEventResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.txs) {
      Tx.encode(v, writer.uint32(10).fork()).join();
    }
    for (const v of message.tx_responses) {
      TxResponse.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetTxsEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.txs.push(Tx.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.tx_responses.push(TxResponse.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      txs: globalThis.Array.isArray(object == null ? void 0 : object.txs) ? object.txs.map((e) => Tx.fromJSON(e)) : [],
      tx_responses: globalThis.Array.isArray(object == null ? void 0 : object.tx_responses) ? object.tx_responses.map((e) => TxResponse.fromJSON(e)) : [],
      pagination: isSet90(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if ((_a = message.txs) == null ? void 0 : _a.length) {
      obj.txs = message.txs.map((e) => Tx.toJSON(e));
    }
    if ((_b = message.tx_responses) == null ? void 0 : _b.length) {
      obj.tx_responses = message.tx_responses.map((e) => TxResponse.toJSON(e));
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return GetTxsEventResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseGetTxsEventResponse();
    message.txs = ((_a = object.txs) == null ? void 0 : _a.map((e) => Tx.fromPartial(e))) || [];
    message.tx_responses = ((_b = object.tx_responses) == null ? void 0 : _b.map((e) => TxResponse.fromPartial(e))) || [];
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var BroadcastTxRequest = {
  $type: "cosmos.tx.v1beta1.BroadcastTxRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.tx_bytes.length !== 0) {
      writer.uint32(10).bytes(message.tx_bytes);
    }
    if (message.mode !== 0) {
      writer.uint32(16).int32(message.mode);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBroadcastTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.tx_bytes = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.mode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      tx_bytes: isSet90(object.tx_bytes) ? bytesFromBase6436(object.tx_bytes) : new Uint8Array(0),
      mode: isSet90(object.mode) ? broadcastModeFromJSON(object.mode) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.tx_bytes.length !== 0) {
      obj.tx_bytes = base64FromBytes36(message.tx_bytes);
    }
    if (message.mode !== 0) {
      obj.mode = broadcastModeToJSON(message.mode);
    }
    return obj;
  },
  create(base) {
    return BroadcastTxRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBroadcastTxRequest();
    message.tx_bytes = object.tx_bytes ?? new Uint8Array(0);
    message.mode = object.mode ?? 0;
    return message;
  }
};
var BroadcastTxResponse = {
  $type: "cosmos.tx.v1beta1.BroadcastTxResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.tx_response !== void 0) {
      TxResponse.encode(message.tx_response, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBroadcastTxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.tx_response = TxResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { tx_response: isSet90(object.tx_response) ? TxResponse.fromJSON(object.tx_response) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.tx_response !== void 0) {
      obj.tx_response = TxResponse.toJSON(message.tx_response);
    }
    return obj;
  },
  create(base) {
    return BroadcastTxResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseBroadcastTxResponse();
    message.tx_response = object.tx_response !== void 0 && object.tx_response !== null ? TxResponse.fromPartial(object.tx_response) : void 0;
    return message;
  }
};
var SimulateRequest = {
  $type: "cosmos.tx.v1beta1.SimulateRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.tx !== void 0) {
      Tx.encode(message.tx, writer.uint32(10).fork()).join();
    }
    if (message.tx_bytes.length !== 0) {
      writer.uint32(18).bytes(message.tx_bytes);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSimulateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.tx = Tx.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.tx_bytes = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      tx: isSet90(object.tx) ? Tx.fromJSON(object.tx) : void 0,
      tx_bytes: isSet90(object.tx_bytes) ? bytesFromBase6436(object.tx_bytes) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.tx !== void 0) {
      obj.tx = Tx.toJSON(message.tx);
    }
    if (message.tx_bytes.length !== 0) {
      obj.tx_bytes = base64FromBytes36(message.tx_bytes);
    }
    return obj;
  },
  create(base) {
    return SimulateRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSimulateRequest();
    message.tx = object.tx !== void 0 && object.tx !== null ? Tx.fromPartial(object.tx) : void 0;
    message.tx_bytes = object.tx_bytes ?? new Uint8Array(0);
    return message;
  }
};
var SimulateResponse = {
  $type: "cosmos.tx.v1beta1.SimulateResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.gas_info !== void 0) {
      GasInfo.encode(message.gas_info, writer.uint32(10).fork()).join();
    }
    if (message.result !== void 0) {
      Result.encode(message.result, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSimulateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.gas_info = GasInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.result = Result.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      gas_info: isSet90(object.gas_info) ? GasInfo.fromJSON(object.gas_info) : void 0,
      result: isSet90(object.result) ? Result.fromJSON(object.result) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.gas_info !== void 0) {
      obj.gas_info = GasInfo.toJSON(message.gas_info);
    }
    if (message.result !== void 0) {
      obj.result = Result.toJSON(message.result);
    }
    return obj;
  },
  create(base) {
    return SimulateResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSimulateResponse();
    message.gas_info = object.gas_info !== void 0 && object.gas_info !== null ? GasInfo.fromPartial(object.gas_info) : void 0;
    message.result = object.result !== void 0 && object.result !== null ? Result.fromPartial(object.result) : void 0;
    return message;
  }
};
var GetTxRequest = {
  $type: "cosmos.tx.v1beta1.GetTxRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.hash !== "") {
      writer.uint32(10).string(message.hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.hash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { hash: isSet90(object.hash) ? globalThis.String(object.hash) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    return obj;
  },
  create(base) {
    return GetTxRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetTxRequest();
    message.hash = object.hash ?? "";
    return message;
  }
};
var GetTxResponse = {
  $type: "cosmos.tx.v1beta1.GetTxResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.tx !== void 0) {
      Tx.encode(message.tx, writer.uint32(10).fork()).join();
    }
    if (message.tx_response !== void 0) {
      TxResponse.encode(message.tx_response, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetTxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.tx = Tx.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.tx_response = TxResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      tx: isSet90(object.tx) ? Tx.fromJSON(object.tx) : void 0,
      tx_response: isSet90(object.tx_response) ? TxResponse.fromJSON(object.tx_response) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.tx !== void 0) {
      obj.tx = Tx.toJSON(message.tx);
    }
    if (message.tx_response !== void 0) {
      obj.tx_response = TxResponse.toJSON(message.tx_response);
    }
    return obj;
  },
  create(base) {
    return GetTxResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetTxResponse();
    message.tx = object.tx !== void 0 && object.tx !== null ? Tx.fromPartial(object.tx) : void 0;
    message.tx_response = object.tx_response !== void 0 && object.tx_response !== null ? TxResponse.fromPartial(object.tx_response) : void 0;
    return message;
  }
};
var GetBlockWithTxsRequest = {
  $type: "cosmos.tx.v1beta1.GetBlockWithTxsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    if (message.pagination !== void 0) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetBlockWithTxsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber41(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      height: isSet90(object.height) ? globalThis.Number(object.height) : 0,
      pagination: isSet90(object.pagination) ? PageRequest.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return GetBlockWithTxsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGetBlockWithTxsRequest();
    message.height = object.height ?? 0;
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : void 0;
    return message;
  }
};
var GetBlockWithTxsResponse = {
  $type: "cosmos.tx.v1beta1.GetBlockWithTxsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.txs) {
      Tx.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.block_id !== void 0) {
      BlockID.encode(message.block_id, writer.uint32(18).fork()).join();
    }
    if (message.block !== void 0) {
      Block.encode(message.block, writer.uint32(26).fork()).join();
    }
    if (message.pagination !== void 0) {
      PageResponse.encode(message.pagination, writer.uint32(34).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGetBlockWithTxsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.txs.push(Tx.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.block_id = BlockID.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.block = Block.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      txs: globalThis.Array.isArray(object == null ? void 0 : object.txs) ? object.txs.map((e) => Tx.fromJSON(e)) : [],
      block_id: isSet90(object.block_id) ? BlockID.fromJSON(object.block_id) : void 0,
      block: isSet90(object.block) ? Block.fromJSON(object.block) : void 0,
      pagination: isSet90(object.pagination) ? PageResponse.fromJSON(object.pagination) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.txs) == null ? void 0 : _a.length) {
      obj.txs = message.txs.map((e) => Tx.toJSON(e));
    }
    if (message.block_id !== void 0) {
      obj.block_id = BlockID.toJSON(message.block_id);
    }
    if (message.block !== void 0) {
      obj.block = Block.toJSON(message.block);
    }
    if (message.pagination !== void 0) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return GetBlockWithTxsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGetBlockWithTxsResponse();
    message.txs = ((_a = object.txs) == null ? void 0 : _a.map((e) => Tx.fromPartial(e))) || [];
    message.block_id = object.block_id !== void 0 && object.block_id !== null ? BlockID.fromPartial(object.block_id) : void 0;
    message.block = object.block !== void 0 && object.block !== null ? Block.fromPartial(object.block) : void 0;
    message.pagination = object.pagination !== void 0 && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : void 0;
    return message;
  }
};
function orderByFromJSON(object) {
  switch (object) {
    case 0:
    case "ORDER_BY_UNSPECIFIED":
      return OrderBy.ORDER_BY_UNSPECIFIED;
    case 1:
    case "ORDER_BY_ASC":
      return OrderBy.ORDER_BY_ASC;
    case 2:
    case "ORDER_BY_DESC":
      return OrderBy.ORDER_BY_DESC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OrderBy.UNRECOGNIZED;
  }
}
function orderByToJSON(object) {
  switch (object) {
    case OrderBy.ORDER_BY_UNSPECIFIED:
      return "ORDER_BY_UNSPECIFIED";
    case OrderBy.ORDER_BY_ASC:
      return "ORDER_BY_ASC";
    case OrderBy.ORDER_BY_DESC:
      return "ORDER_BY_DESC";
    case OrderBy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function broadcastModeFromJSON(object) {
  switch (object) {
    case 0:
    case "BROADCAST_MODE_UNSPECIFIED":
      return BroadcastMode.BROADCAST_MODE_UNSPECIFIED;
    case 1:
    case "BROADCAST_MODE_BLOCK":
      return BroadcastMode.BROADCAST_MODE_BLOCK;
    case 2:
    case "BROADCAST_MODE_SYNC":
      return BroadcastMode.BROADCAST_MODE_SYNC;
    case 3:
    case "BROADCAST_MODE_ASYNC":
      return BroadcastMode.BROADCAST_MODE_ASYNC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BroadcastMode.UNRECOGNIZED;
  }
}
function broadcastModeToJSON(object) {
  switch (object) {
    case BroadcastMode.BROADCAST_MODE_UNSPECIFIED:
      return "BROADCAST_MODE_UNSPECIFIED";
    case BroadcastMode.BROADCAST_MODE_BLOCK:
      return "BROADCAST_MODE_BLOCK";
    case BroadcastMode.BROADCAST_MODE_SYNC:
      return "BROADCAST_MODE_SYNC";
    case BroadcastMode.BROADCAST_MODE_ASYNC:
      return "BROADCAST_MODE_ASYNC";
    case BroadcastMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function createBaseGetTxsEventRequest() {
  return { events: [], pagination: void 0, order_by: 0 };
}
function createBaseGetTxsEventResponse() {
  return { txs: [], tx_responses: [], pagination: void 0 };
}
function createBaseBroadcastTxRequest() {
  return { tx_bytes: new Uint8Array(0), mode: 0 };
}
function createBaseBroadcastTxResponse() {
  return { tx_response: void 0 };
}
function createBaseSimulateRequest() {
  return { tx: void 0, tx_bytes: new Uint8Array(0) };
}
function createBaseSimulateResponse() {
  return { gas_info: void 0, result: void 0 };
}
function createBaseGetTxRequest() {
  return { hash: "" };
}
function createBaseGetTxResponse() {
  return { tx: void 0, tx_response: void 0 };
}
function createBaseGetBlockWithTxsRequest() {
  return { height: 0, pagination: void 0 };
}
function createBaseGetBlockWithTxsResponse() {
  return { txs: [], block_id: void 0, block: void 0, pagination: void 0 };
}
function bytesFromBase6436(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes36(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber41(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet90(value) {
  return value !== null && value !== void 0;
}
var registry95 = [
  ["/cosmos.tx.v1beta1.GetTxsEventRequest", GetTxsEventRequest],
  ["/cosmos.tx.v1beta1.GetTxsEventResponse", GetTxsEventResponse],
  ["/cosmos.tx.v1beta1.BroadcastTxRequest", BroadcastTxRequest],
  ["/cosmos.tx.v1beta1.BroadcastTxResponse", BroadcastTxResponse],
  ["/cosmos.tx.v1beta1.SimulateRequest", SimulateRequest],
  ["/cosmos.tx.v1beta1.SimulateResponse", SimulateResponse],
  ["/cosmos.tx.v1beta1.GetTxRequest", GetTxRequest],
  ["/cosmos.tx.v1beta1.GetTxResponse", GetTxResponse],
  ["/cosmos.tx.v1beta1.GetBlockWithTxsRequest", GetBlockWithTxsRequest],
  ["/cosmos.tx.v1beta1.GetBlockWithTxsResponse", GetBlockWithTxsResponse]
];
var aminoConverters95 = {
  "/cosmos.tx.v1beta1.GetTxsEventRequest": {
    aminoType: "cosmos-sdk/GetTxsEventRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.GetTxsEventResponse": {
    aminoType: "cosmos-sdk/GetTxsEventResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.BroadcastTxRequest": {
    aminoType: "cosmos-sdk/BroadcastTxRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.BroadcastTxResponse": {
    aminoType: "cosmos-sdk/BroadcastTxResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.SimulateRequest": {
    aminoType: "cosmos-sdk/SimulateRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.SimulateResponse": {
    aminoType: "cosmos-sdk/SimulateResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.GetTxRequest": {
    aminoType: "cosmos-sdk/GetTxRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.GetTxResponse": {
    aminoType: "cosmos-sdk/GetTxResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.GetBlockWithTxsRequest": {
    aminoType: "cosmos-sdk/GetBlockWithTxsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.tx.v1beta1.GetBlockWithTxsResponse": {
    aminoType: "cosmos-sdk/GetBlockWithTxsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/upgrade/v1beta1/index.js
var v1beta1_exports25 = {};
__export(v1beta1_exports25, {
  CancelSoftwareUpgradeProposal: () => CancelSoftwareUpgradeProposal,
  ModuleVersion: () => ModuleVersion,
  Plan: () => Plan,
  QueryAppliedPlanRequest: () => QueryAppliedPlanRequest,
  QueryAppliedPlanResponse: () => QueryAppliedPlanResponse,
  QueryCurrentPlanRequest: () => QueryCurrentPlanRequest,
  QueryCurrentPlanResponse: () => QueryCurrentPlanResponse,
  QueryModuleVersionsRequest: () => QueryModuleVersionsRequest,
  QueryModuleVersionsResponse: () => QueryModuleVersionsResponse,
  QueryUpgradedConsensusStateRequest: () => QueryUpgradedConsensusStateRequest,
  QueryUpgradedConsensusStateResponse: () => QueryUpgradedConsensusStateResponse,
  SoftwareUpgradeProposal: () => SoftwareUpgradeProposal
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/upgrade/v1beta1/upgrade.js
var Plan = {
  $type: "cosmos.upgrade.v1beta1.Plan",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.time !== void 0) {
      Timestamp.encode(toTimestamp12(message.time), writer.uint32(18).fork()).join();
    }
    if (message.height !== 0) {
      writer.uint32(24).int64(message.height);
    }
    if (message.info !== "") {
      writer.uint32(34).string(message.info);
    }
    if (message.upgraded_client_state !== void 0) {
      Any.encode(message.upgraded_client_state, writer.uint32(42).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.time = fromTimestamp12(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.height = longToNumber42(reader.int64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.info = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.upgraded_client_state = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet91(object.name) ? globalThis.String(object.name) : "",
      time: isSet91(object.time) ? fromJsonTimestamp12(object.time) : void 0,
      height: isSet91(object.height) ? globalThis.Number(object.height) : 0,
      info: isSet91(object.info) ? globalThis.String(object.info) : "",
      upgraded_client_state: isSet91(object.upgraded_client_state) ? Any.fromJSON(object.upgraded_client_state) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.time !== void 0) {
      obj.time = message.time.toISOString();
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.info !== "") {
      obj.info = message.info;
    }
    if (message.upgraded_client_state !== void 0) {
      obj.upgraded_client_state = Any.toJSON(message.upgraded_client_state);
    }
    return obj;
  },
  create(base) {
    return Plan.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePlan();
    message.name = object.name ?? "";
    message.time = object.time ?? void 0;
    message.height = object.height ?? 0;
    message.info = object.info ?? "";
    message.upgraded_client_state = object.upgraded_client_state !== void 0 && object.upgraded_client_state !== null ? Any.fromPartial(object.upgraded_client_state) : void 0;
    return message;
  }
};
var SoftwareUpgradeProposal = {
  $type: "cosmos.upgrade.v1beta1.SoftwareUpgradeProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.plan !== void 0) {
      Plan.encode(message.plan, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSoftwareUpgradeProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.plan = Plan.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet91(object.title) ? globalThis.String(object.title) : "",
      description: isSet91(object.description) ? globalThis.String(object.description) : "",
      plan: isSet91(object.plan) ? Plan.fromJSON(object.plan) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.plan !== void 0) {
      obj.plan = Plan.toJSON(message.plan);
    }
    return obj;
  },
  create(base) {
    return SoftwareUpgradeProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSoftwareUpgradeProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.plan = object.plan !== void 0 && object.plan !== null ? Plan.fromPartial(object.plan) : void 0;
    return message;
  }
};
var CancelSoftwareUpgradeProposal = {
  $type: "cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCancelSoftwareUpgradeProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet91(object.title) ? globalThis.String(object.title) : "",
      description: isSet91(object.description) ? globalThis.String(object.description) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },
  create(base) {
    return CancelSoftwareUpgradeProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCancelSoftwareUpgradeProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    return message;
  }
};
var ModuleVersion = {
  $type: "cosmos.upgrade.v1beta1.ModuleVersion",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.version !== 0) {
      writer.uint32(16).uint64(message.version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseModuleVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.version = longToNumber42(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet91(object.name) ? globalThis.String(object.name) : "",
      version: isSet91(object.version) ? globalThis.Number(object.version) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },
  create(base) {
    return ModuleVersion.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseModuleVersion();
    message.name = object.name ?? "";
    message.version = object.version ?? 0;
    return message;
  }
};
function createBasePlan() {
  return { name: "", time: void 0, height: 0, info: "", upgraded_client_state: void 0 };
}
function createBaseSoftwareUpgradeProposal() {
  return { title: "", description: "", plan: void 0 };
}
function createBaseCancelSoftwareUpgradeProposal() {
  return { title: "", description: "" };
}
function createBaseModuleVersion() {
  return { name: "", version: 0 };
}
function toTimestamp12(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp12(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp12(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp12(Timestamp.fromJSON(o));
  }
}
function longToNumber42(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet91(value) {
  return value !== null && value !== void 0;
}
var registry96 = [
  ["/cosmos.upgrade.v1beta1.Plan", Plan],
  ["/cosmos.upgrade.v1beta1.SoftwareUpgradeProposal", SoftwareUpgradeProposal],
  ["/cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal", CancelSoftwareUpgradeProposal],
  ["/cosmos.upgrade.v1beta1.ModuleVersion", ModuleVersion]
];
var aminoConverters96 = {
  "/cosmos.upgrade.v1beta1.Plan": {
    aminoType: "cosmos-sdk/Plan",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.upgrade.v1beta1.SoftwareUpgradeProposal": {
    aminoType: "cosmos-sdk/SoftwareUpgradeProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal": {
    aminoType: "cosmos-sdk/CancelSoftwareUpgradeProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.upgrade.v1beta1.ModuleVersion": {
    aminoType: "cosmos-sdk/ModuleVersion",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/upgrade/v1beta1/query.js
var QueryCurrentPlanRequest = {
  $type: "cosmos.upgrade.v1beta1.QueryCurrentPlanRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryCurrentPlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryCurrentPlanRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryCurrentPlanRequest();
    return message;
  }
};
var QueryCurrentPlanResponse = {
  $type: "cosmos.upgrade.v1beta1.QueryCurrentPlanResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.plan !== void 0) {
      Plan.encode(message.plan, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryCurrentPlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.plan = Plan.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { plan: isSet92(object.plan) ? Plan.fromJSON(object.plan) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.plan !== void 0) {
      obj.plan = Plan.toJSON(message.plan);
    }
    return obj;
  },
  create(base) {
    return QueryCurrentPlanResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryCurrentPlanResponse();
    message.plan = object.plan !== void 0 && object.plan !== null ? Plan.fromPartial(object.plan) : void 0;
    return message;
  }
};
var QueryAppliedPlanRequest = {
  $type: "cosmos.upgrade.v1beta1.QueryAppliedPlanRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAppliedPlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { name: isSet92(object.name) ? globalThis.String(object.name) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },
  create(base) {
    return QueryAppliedPlanRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryAppliedPlanRequest();
    message.name = object.name ?? "";
    return message;
  }
};
var QueryAppliedPlanResponse = {
  $type: "cosmos.upgrade.v1beta1.QueryAppliedPlanResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.height !== 0) {
      writer.uint32(8).int64(message.height);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryAppliedPlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.height = longToNumber43(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { height: isSet92(object.height) ? globalThis.Number(object.height) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },
  create(base) {
    return QueryAppliedPlanResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryAppliedPlanResponse();
    message.height = object.height ?? 0;
    return message;
  }
};
var QueryUpgradedConsensusStateRequest = {
  $type: "cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.last_height !== 0) {
      writer.uint32(8).int64(message.last_height);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryUpgradedConsensusStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.last_height = longToNumber43(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { last_height: isSet92(object.last_height) ? globalThis.Number(object.last_height) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.last_height !== 0) {
      obj.last_height = Math.round(message.last_height);
    }
    return obj;
  },
  create(base) {
    return QueryUpgradedConsensusStateRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryUpgradedConsensusStateRequest();
    message.last_height = object.last_height ?? 0;
    return message;
  }
};
var QueryUpgradedConsensusStateResponse = {
  $type: "cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.upgraded_consensus_state.length !== 0) {
      writer.uint32(18).bytes(message.upgraded_consensus_state);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryUpgradedConsensusStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }
          message.upgraded_consensus_state = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      upgraded_consensus_state: isSet92(object.upgraded_consensus_state) ? bytesFromBase6437(object.upgraded_consensus_state) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.upgraded_consensus_state.length !== 0) {
      obj.upgraded_consensus_state = base64FromBytes37(message.upgraded_consensus_state);
    }
    return obj;
  },
  create(base) {
    return QueryUpgradedConsensusStateResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryUpgradedConsensusStateResponse();
    message.upgraded_consensus_state = object.upgraded_consensus_state ?? new Uint8Array(0);
    return message;
  }
};
var QueryModuleVersionsRequest = {
  $type: "cosmos.upgrade.v1beta1.QueryModuleVersionsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.module_name !== "") {
      writer.uint32(10).string(message.module_name);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryModuleVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.module_name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { module_name: isSet92(object.module_name) ? globalThis.String(object.module_name) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.module_name !== "") {
      obj.module_name = message.module_name;
    }
    return obj;
  },
  create(base) {
    return QueryModuleVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryModuleVersionsRequest();
    message.module_name = object.module_name ?? "";
    return message;
  }
};
var QueryModuleVersionsResponse = {
  $type: "cosmos.upgrade.v1beta1.QueryModuleVersionsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.module_versions) {
      ModuleVersion.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryModuleVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.module_versions.push(ModuleVersion.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      module_versions: globalThis.Array.isArray(object == null ? void 0 : object.module_versions) ? object.module_versions.map((e) => ModuleVersion.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.module_versions) == null ? void 0 : _a.length) {
      obj.module_versions = message.module_versions.map((e) => ModuleVersion.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return QueryModuleVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryModuleVersionsResponse();
    message.module_versions = ((_a = object.module_versions) == null ? void 0 : _a.map((e) => ModuleVersion.fromPartial(e))) || [];
    return message;
  }
};
function createBaseQueryCurrentPlanRequest() {
  return {};
}
function createBaseQueryCurrentPlanResponse() {
  return { plan: void 0 };
}
function createBaseQueryAppliedPlanRequest() {
  return { name: "" };
}
function createBaseQueryAppliedPlanResponse() {
  return { height: 0 };
}
function createBaseQueryUpgradedConsensusStateRequest() {
  return { last_height: 0 };
}
function createBaseQueryUpgradedConsensusStateResponse() {
  return { upgraded_consensus_state: new Uint8Array(0) };
}
function createBaseQueryModuleVersionsRequest() {
  return { module_name: "" };
}
function createBaseQueryModuleVersionsResponse() {
  return { module_versions: [] };
}
function bytesFromBase6437(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes37(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber43(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet92(value) {
  return value !== null && value !== void 0;
}
var registry97 = [
  ["/cosmos.upgrade.v1beta1.QueryCurrentPlanRequest", QueryCurrentPlanRequest],
  ["/cosmos.upgrade.v1beta1.QueryCurrentPlanResponse", QueryCurrentPlanResponse],
  ["/cosmos.upgrade.v1beta1.QueryAppliedPlanRequest", QueryAppliedPlanRequest],
  ["/cosmos.upgrade.v1beta1.QueryAppliedPlanResponse", QueryAppliedPlanResponse],
  ["/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest", QueryUpgradedConsensusStateRequest],
  ["/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse", QueryUpgradedConsensusStateResponse],
  ["/cosmos.upgrade.v1beta1.QueryModuleVersionsRequest", QueryModuleVersionsRequest],
  ["/cosmos.upgrade.v1beta1.QueryModuleVersionsResponse", QueryModuleVersionsResponse]
];
var aminoConverters97 = {
  "/cosmos.upgrade.v1beta1.QueryCurrentPlanRequest": {
    aminoType: "cosmos-sdk/QueryCurrentPlanRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.upgrade.v1beta1.QueryCurrentPlanResponse": {
    aminoType: "cosmos-sdk/QueryCurrentPlanResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.upgrade.v1beta1.QueryAppliedPlanRequest": {
    aminoType: "cosmos-sdk/QueryAppliedPlanRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.upgrade.v1beta1.QueryAppliedPlanResponse": {
    aminoType: "cosmos-sdk/QueryAppliedPlanResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest": {
    aminoType: "cosmos-sdk/QueryUpgradedConsensusStateRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse": {
    aminoType: "cosmos-sdk/QueryUpgradedConsensusStateResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.upgrade.v1beta1.QueryModuleVersionsRequest": {
    aminoType: "cosmos-sdk/QueryModuleVersionsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.upgrade.v1beta1.QueryModuleVersionsResponse": {
    aminoType: "cosmos-sdk/QueryModuleVersionsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/vesting/v1beta1/index.js
var v1beta1_exports26 = {};
__export(v1beta1_exports26, {
  BaseVestingAccount: () => BaseVestingAccount,
  ContinuousVestingAccount: () => ContinuousVestingAccount,
  DelayedVestingAccount: () => DelayedVestingAccount,
  MsgCreateVestingAccount: () => MsgCreateVestingAccount,
  MsgCreateVestingAccountResponse: () => MsgCreateVestingAccountResponse,
  Period: () => Period,
  PeriodicVestingAccount: () => PeriodicVestingAccount,
  PermanentLockedAccount: () => PermanentLockedAccount
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/vesting/v1beta1/tx.js
var MsgCreateVestingAccount = {
  $type: "cosmos.vesting.v1beta1.MsgCreateVestingAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.from_address !== "") {
      writer.uint32(10).string(message.from_address);
    }
    if (message.to_address !== "") {
      writer.uint32(18).string(message.to_address);
    }
    for (const v of message.amount) {
      Coin.encode(v, writer.uint32(26).fork()).join();
    }
    if (message.end_time !== 0) {
      writer.uint32(32).int64(message.end_time);
    }
    if (message.delayed !== false) {
      writer.uint32(40).bool(message.delayed);
    }
    if (message.admin !== "") {
      writer.uint32(50).string(message.admin);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateVestingAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.from_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.to_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.end_time = longToNumber44(reader.int64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.delayed = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.admin = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      from_address: isSet93(object.from_address) ? globalThis.String(object.from_address) : "",
      to_address: isSet93(object.to_address) ? globalThis.String(object.to_address) : "",
      amount: globalThis.Array.isArray(object == null ? void 0 : object.amount) ? object.amount.map((e) => Coin.fromJSON(e)) : [],
      end_time: isSet93(object.end_time) ? globalThis.Number(object.end_time) : 0,
      delayed: isSet93(object.delayed) ? globalThis.Boolean(object.delayed) : false,
      admin: isSet93(object.admin) ? globalThis.String(object.admin) : ""
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.from_address !== "") {
      obj.from_address = message.from_address;
    }
    if (message.to_address !== "") {
      obj.to_address = message.to_address;
    }
    if ((_a = message.amount) == null ? void 0 : _a.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    if (message.end_time !== 0) {
      obj.end_time = Math.round(message.end_time);
    }
    if (message.delayed !== false) {
      obj.delayed = message.delayed;
    }
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    return obj;
  },
  create(base) {
    return MsgCreateVestingAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgCreateVestingAccount();
    message.from_address = object.from_address ?? "";
    message.to_address = object.to_address ?? "";
    message.amount = ((_a = object.amount) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    message.end_time = object.end_time ?? 0;
    message.delayed = object.delayed ?? false;
    message.admin = object.admin ?? "";
    return message;
  }
};
var MsgCreateVestingAccountResponse = {
  $type: "cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateVestingAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgCreateVestingAccountResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgCreateVestingAccountResponse();
    return message;
  }
};
function createBaseMsgCreateVestingAccount() {
  return { from_address: "", to_address: "", amount: [], end_time: 0, delayed: false, admin: "" };
}
function createBaseMsgCreateVestingAccountResponse() {
  return {};
}
function longToNumber44(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet93(value) {
  return value !== null && value !== void 0;
}
var registry98 = [
  ["/cosmos.vesting.v1beta1.MsgCreateVestingAccount", MsgCreateVestingAccount],
  ["/cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse", MsgCreateVestingAccountResponse]
];
var aminoConverters98 = {
  "/cosmos.vesting.v1beta1.MsgCreateVestingAccount": {
    aminoType: "cosmos-sdk/MsgCreateVestingAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse": {
    aminoType: "cosmos-sdk/MsgCreateVestingAccountResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/cosmos/vesting/v1beta1/vesting.js
var BaseVestingAccount = {
  $type: "cosmos.vesting.v1beta1.BaseVestingAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.base_account !== void 0) {
      BaseAccount.encode(message.base_account, writer.uint32(10).fork()).join();
    }
    for (const v of message.original_vesting) {
      Coin.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.delegated_free) {
      Coin.encode(v, writer.uint32(26).fork()).join();
    }
    for (const v of message.delegated_vesting) {
      Coin.encode(v, writer.uint32(34).fork()).join();
    }
    if (message.end_time !== 0) {
      writer.uint32(40).int64(message.end_time);
    }
    if (message.admin !== "") {
      writer.uint32(50).string(message.admin);
    }
    if (message.cancelled_time !== 0) {
      writer.uint32(56).int64(message.cancelled_time);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBaseVestingAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.base_account = BaseAccount.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.original_vesting.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.delegated_free.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.delegated_vesting.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.end_time = longToNumber45(reader.int64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.admin = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.cancelled_time = longToNumber45(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      base_account: isSet94(object.base_account) ? BaseAccount.fromJSON(object.base_account) : void 0,
      original_vesting: globalThis.Array.isArray(object == null ? void 0 : object.original_vesting) ? object.original_vesting.map((e) => Coin.fromJSON(e)) : [],
      delegated_free: globalThis.Array.isArray(object == null ? void 0 : object.delegated_free) ? object.delegated_free.map((e) => Coin.fromJSON(e)) : [],
      delegated_vesting: globalThis.Array.isArray(object == null ? void 0 : object.delegated_vesting) ? object.delegated_vesting.map((e) => Coin.fromJSON(e)) : [],
      end_time: isSet94(object.end_time) ? globalThis.Number(object.end_time) : 0,
      admin: isSet94(object.admin) ? globalThis.String(object.admin) : "",
      cancelled_time: isSet94(object.cancelled_time) ? globalThis.Number(object.cancelled_time) : 0
    };
  },
  toJSON(message) {
    var _a, _b, _c;
    const obj = {};
    if (message.base_account !== void 0) {
      obj.base_account = BaseAccount.toJSON(message.base_account);
    }
    if ((_a = message.original_vesting) == null ? void 0 : _a.length) {
      obj.original_vesting = message.original_vesting.map((e) => Coin.toJSON(e));
    }
    if ((_b = message.delegated_free) == null ? void 0 : _b.length) {
      obj.delegated_free = message.delegated_free.map((e) => Coin.toJSON(e));
    }
    if ((_c = message.delegated_vesting) == null ? void 0 : _c.length) {
      obj.delegated_vesting = message.delegated_vesting.map((e) => Coin.toJSON(e));
    }
    if (message.end_time !== 0) {
      obj.end_time = Math.round(message.end_time);
    }
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    if (message.cancelled_time !== 0) {
      obj.cancelled_time = Math.round(message.cancelled_time);
    }
    return obj;
  },
  create(base) {
    return BaseVestingAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseBaseVestingAccount();
    message.base_account = object.base_account !== void 0 && object.base_account !== null ? BaseAccount.fromPartial(object.base_account) : void 0;
    message.original_vesting = ((_a = object.original_vesting) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    message.delegated_free = ((_b = object.delegated_free) == null ? void 0 : _b.map((e) => Coin.fromPartial(e))) || [];
    message.delegated_vesting = ((_c = object.delegated_vesting) == null ? void 0 : _c.map((e) => Coin.fromPartial(e))) || [];
    message.end_time = object.end_time ?? 0;
    message.admin = object.admin ?? "";
    message.cancelled_time = object.cancelled_time ?? 0;
    return message;
  }
};
var ContinuousVestingAccount = {
  $type: "cosmos.vesting.v1beta1.ContinuousVestingAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.base_vesting_account !== void 0) {
      BaseVestingAccount.encode(message.base_vesting_account, writer.uint32(10).fork()).join();
    }
    if (message.start_time !== 0) {
      writer.uint32(16).int64(message.start_time);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseContinuousVestingAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.base_vesting_account = BaseVestingAccount.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.start_time = longToNumber45(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      base_vesting_account: isSet94(object.base_vesting_account) ? BaseVestingAccount.fromJSON(object.base_vesting_account) : void 0,
      start_time: isSet94(object.start_time) ? globalThis.Number(object.start_time) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.base_vesting_account !== void 0) {
      obj.base_vesting_account = BaseVestingAccount.toJSON(message.base_vesting_account);
    }
    if (message.start_time !== 0) {
      obj.start_time = Math.round(message.start_time);
    }
    return obj;
  },
  create(base) {
    return ContinuousVestingAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseContinuousVestingAccount();
    message.base_vesting_account = object.base_vesting_account !== void 0 && object.base_vesting_account !== null ? BaseVestingAccount.fromPartial(object.base_vesting_account) : void 0;
    message.start_time = object.start_time ?? 0;
    return message;
  }
};
var DelayedVestingAccount = {
  $type: "cosmos.vesting.v1beta1.DelayedVestingAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.base_vesting_account !== void 0) {
      BaseVestingAccount.encode(message.base_vesting_account, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDelayedVestingAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.base_vesting_account = BaseVestingAccount.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      base_vesting_account: isSet94(object.base_vesting_account) ? BaseVestingAccount.fromJSON(object.base_vesting_account) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.base_vesting_account !== void 0) {
      obj.base_vesting_account = BaseVestingAccount.toJSON(message.base_vesting_account);
    }
    return obj;
  },
  create(base) {
    return DelayedVestingAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDelayedVestingAccount();
    message.base_vesting_account = object.base_vesting_account !== void 0 && object.base_vesting_account !== null ? BaseVestingAccount.fromPartial(object.base_vesting_account) : void 0;
    return message;
  }
};
var Period = {
  $type: "cosmos.vesting.v1beta1.Period",
  encode(message, writer = new BinaryWriter()) {
    if (message.length !== 0) {
      writer.uint32(8).int64(message.length);
    }
    for (const v of message.amount) {
      Coin.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePeriod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.length = longToNumber45(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      length: isSet94(object.length) ? globalThis.Number(object.length) : 0,
      amount: globalThis.Array.isArray(object == null ? void 0 : object.amount) ? object.amount.map((e) => Coin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    if ((_a = message.amount) == null ? void 0 : _a.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Period.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBasePeriod();
    message.length = object.length ?? 0;
    message.amount = ((_a = object.amount) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    return message;
  }
};
var PeriodicVestingAccount = {
  $type: "cosmos.vesting.v1beta1.PeriodicVestingAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.base_vesting_account !== void 0) {
      BaseVestingAccount.encode(message.base_vesting_account, writer.uint32(10).fork()).join();
    }
    if (message.start_time !== 0) {
      writer.uint32(16).int64(message.start_time);
    }
    for (const v of message.vesting_periods) {
      Period.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePeriodicVestingAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.base_vesting_account = BaseVestingAccount.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.start_time = longToNumber45(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.vesting_periods.push(Period.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      base_vesting_account: isSet94(object.base_vesting_account) ? BaseVestingAccount.fromJSON(object.base_vesting_account) : void 0,
      start_time: isSet94(object.start_time) ? globalThis.Number(object.start_time) : 0,
      vesting_periods: globalThis.Array.isArray(object == null ? void 0 : object.vesting_periods) ? object.vesting_periods.map((e) => Period.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.base_vesting_account !== void 0) {
      obj.base_vesting_account = BaseVestingAccount.toJSON(message.base_vesting_account);
    }
    if (message.start_time !== 0) {
      obj.start_time = Math.round(message.start_time);
    }
    if ((_a = message.vesting_periods) == null ? void 0 : _a.length) {
      obj.vesting_periods = message.vesting_periods.map((e) => Period.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return PeriodicVestingAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBasePeriodicVestingAccount();
    message.base_vesting_account = object.base_vesting_account !== void 0 && object.base_vesting_account !== null ? BaseVestingAccount.fromPartial(object.base_vesting_account) : void 0;
    message.start_time = object.start_time ?? 0;
    message.vesting_periods = ((_a = object.vesting_periods) == null ? void 0 : _a.map((e) => Period.fromPartial(e))) || [];
    return message;
  }
};
var PermanentLockedAccount = {
  $type: "cosmos.vesting.v1beta1.PermanentLockedAccount",
  encode(message, writer = new BinaryWriter()) {
    if (message.base_vesting_account !== void 0) {
      BaseVestingAccount.encode(message.base_vesting_account, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePermanentLockedAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.base_vesting_account = BaseVestingAccount.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      base_vesting_account: isSet94(object.base_vesting_account) ? BaseVestingAccount.fromJSON(object.base_vesting_account) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.base_vesting_account !== void 0) {
      obj.base_vesting_account = BaseVestingAccount.toJSON(message.base_vesting_account);
    }
    return obj;
  },
  create(base) {
    return PermanentLockedAccount.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePermanentLockedAccount();
    message.base_vesting_account = object.base_vesting_account !== void 0 && object.base_vesting_account !== null ? BaseVestingAccount.fromPartial(object.base_vesting_account) : void 0;
    return message;
  }
};
function createBaseBaseVestingAccount() {
  return {
    base_account: void 0,
    original_vesting: [],
    delegated_free: [],
    delegated_vesting: [],
    end_time: 0,
    admin: "",
    cancelled_time: 0
  };
}
function createBaseContinuousVestingAccount() {
  return { base_vesting_account: void 0, start_time: 0 };
}
function createBaseDelayedVestingAccount() {
  return { base_vesting_account: void 0 };
}
function createBasePeriod() {
  return { length: 0, amount: [] };
}
function createBasePeriodicVestingAccount() {
  return { base_vesting_account: void 0, start_time: 0, vesting_periods: [] };
}
function createBasePermanentLockedAccount() {
  return { base_vesting_account: void 0 };
}
function longToNumber45(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet94(value) {
  return value !== null && value !== void 0;
}
var registry99 = [
  ["/cosmos.vesting.v1beta1.BaseVestingAccount", BaseVestingAccount],
  ["/cosmos.vesting.v1beta1.ContinuousVestingAccount", ContinuousVestingAccount],
  ["/cosmos.vesting.v1beta1.DelayedVestingAccount", DelayedVestingAccount],
  ["/cosmos.vesting.v1beta1.Period", Period],
  ["/cosmos.vesting.v1beta1.PeriodicVestingAccount", PeriodicVestingAccount],
  ["/cosmos.vesting.v1beta1.PermanentLockedAccount", PermanentLockedAccount]
];
var aminoConverters99 = {
  "/cosmos.vesting.v1beta1.BaseVestingAccount": {
    aminoType: "cosmos-sdk/BaseVestingAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.vesting.v1beta1.ContinuousVestingAccount": {
    aminoType: "cosmos-sdk/ContinuousVestingAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.vesting.v1beta1.DelayedVestingAccount": {
    aminoType: "cosmos-sdk/DelayedVestingAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.vesting.v1beta1.Period": {
    aminoType: "cosmos-sdk/Period",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.vesting.v1beta1.PeriodicVestingAccount": {
    aminoType: "cosmos-sdk/PeriodicVestingAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/cosmos.vesting.v1beta1.PermanentLockedAccount": {
    aminoType: "cosmos-sdk/PermanentLockedAccount",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/epoch/index.js
var epoch_exports = {};
__export(epoch_exports, {
  Epoch: () => Epoch,
  GenesisState: () => GenesisState17,
  Params: () => Params9,
  QueryEpochRequest: () => QueryEpochRequest,
  QueryEpochResponse: () => QueryEpochResponse,
  QueryParamsRequest: () => QueryParamsRequest10,
  QueryParamsResponse: () => QueryParamsResponse10
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/epoch/epoch.js
var Epoch = {
  $type: "seiprotocol.seichain.epoch.Epoch",
  encode(message, writer = new BinaryWriter()) {
    if (message.genesis_time !== void 0) {
      Timestamp.encode(toTimestamp13(message.genesis_time), writer.uint32(10).fork()).join();
    }
    if (message.epoch_duration !== void 0) {
      Duration.encode(message.epoch_duration, writer.uint32(18).fork()).join();
    }
    if (message.current_epoch !== 0) {
      writer.uint32(24).uint64(message.current_epoch);
    }
    if (message.current_epoch_start_time !== void 0) {
      Timestamp.encode(toTimestamp13(message.current_epoch_start_time), writer.uint32(34).fork()).join();
    }
    if (message.current_epoch_height !== 0) {
      writer.uint32(40).int64(message.current_epoch_height);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEpoch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.genesis_time = fromTimestamp13(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.epoch_duration = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.current_epoch = longToNumber46(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.current_epoch_start_time = fromTimestamp13(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.current_epoch_height = longToNumber46(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      genesis_time: isSet95(object.genesis_time) ? fromJsonTimestamp13(object.genesis_time) : void 0,
      epoch_duration: isSet95(object.epoch_duration) ? Duration.fromJSON(object.epoch_duration) : void 0,
      current_epoch: isSet95(object.current_epoch) ? globalThis.Number(object.current_epoch) : 0,
      current_epoch_start_time: isSet95(object.current_epoch_start_time) ? fromJsonTimestamp13(object.current_epoch_start_time) : void 0,
      current_epoch_height: isSet95(object.current_epoch_height) ? globalThis.Number(object.current_epoch_height) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.genesis_time !== void 0) {
      obj.genesis_time = message.genesis_time.toISOString();
    }
    if (message.epoch_duration !== void 0) {
      obj.epoch_duration = Duration.toJSON(message.epoch_duration);
    }
    if (message.current_epoch !== 0) {
      obj.current_epoch = Math.round(message.current_epoch);
    }
    if (message.current_epoch_start_time !== void 0) {
      obj.current_epoch_start_time = message.current_epoch_start_time.toISOString();
    }
    if (message.current_epoch_height !== 0) {
      obj.current_epoch_height = Math.round(message.current_epoch_height);
    }
    return obj;
  },
  create(base) {
    return Epoch.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEpoch();
    message.genesis_time = object.genesis_time ?? void 0;
    message.epoch_duration = object.epoch_duration !== void 0 && object.epoch_duration !== null ? Duration.fromPartial(object.epoch_duration) : void 0;
    message.current_epoch = object.current_epoch ?? 0;
    message.current_epoch_start_time = object.current_epoch_start_time ?? void 0;
    message.current_epoch_height = object.current_epoch_height ?? 0;
    return message;
  }
};
function createBaseEpoch() {
  return {
    genesis_time: void 0,
    epoch_duration: void 0,
    current_epoch: 0,
    current_epoch_start_time: void 0,
    current_epoch_height: 0
  };
}
function toTimestamp13(date) {
  const seconds = Math.trunc(date.getTime() / 1e3);
  const nanos = date.getTime() % 1e3 * 1e6;
  return { seconds, nanos };
}
function fromTimestamp13(t) {
  let millis = (t.seconds || 0) * 1e3;
  millis += (t.nanos || 0) / 1e6;
  return new globalThis.Date(millis);
}
function fromJsonTimestamp13(o) {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp13(Timestamp.fromJSON(o));
  }
}
function longToNumber46(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet95(value) {
  return value !== null && value !== void 0;
}
var registry100 = [["/seiprotocol.seichain.epoch.Epoch", Epoch]];
var aminoConverters100 = {
  "/seiprotocol.seichain.epoch.Epoch": {
    aminoType: "epoch/Epoch",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/epoch/params.js
var Params9 = {
  $type: "seiprotocol.seichain.epoch.Params",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams9();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return Params9.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseParams9();
    return message;
  }
};
function createBaseParams9() {
  return {};
}
var registry101 = [["/seiprotocol.seichain.epoch.Params", Params9]];
var aminoConverters101 = {
  "/seiprotocol.seichain.epoch.Params": {
    aminoType: "epoch/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/epoch/genesis.js
var GenesisState17 = {
  $type: "seiprotocol.seichain.epoch.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params9.encode(message.params, writer.uint32(10).fork()).join();
    }
    if (message.epoch !== void 0) {
      Epoch.encode(message.epoch, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState17();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params9.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.epoch = Epoch.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet96(object.params) ? Params9.fromJSON(object.params) : void 0,
      epoch: isSet96(object.epoch) ? Epoch.fromJSON(object.epoch) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params9.toJSON(message.params);
    }
    if (message.epoch !== void 0) {
      obj.epoch = Epoch.toJSON(message.epoch);
    }
    return obj;
  },
  create(base) {
    return GenesisState17.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGenesisState17();
    message.params = object.params !== void 0 && object.params !== null ? Params9.fromPartial(object.params) : void 0;
    message.epoch = object.epoch !== void 0 && object.epoch !== null ? Epoch.fromPartial(object.epoch) : void 0;
    return message;
  }
};
function createBaseGenesisState17() {
  return { params: void 0, epoch: void 0 };
}
function isSet96(value) {
  return value !== null && value !== void 0;
}
var registry102 = [["/seiprotocol.seichain.epoch.GenesisState", GenesisState17]];
var aminoConverters102 = {
  "/seiprotocol.seichain.epoch.GenesisState": {
    aminoType: "epoch/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/epoch/query.js
var QueryParamsRequest10 = {
  $type: "seiprotocol.seichain.epoch.QueryParamsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest10();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryParamsRequest10.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest10();
    return message;
  }
};
var QueryParamsResponse10 = {
  $type: "seiprotocol.seichain.epoch.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params9.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse10();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params9.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { params: isSet97(object.params) ? Params9.fromJSON(object.params) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params9.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse10.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse10();
    message.params = object.params !== void 0 && object.params !== null ? Params9.fromPartial(object.params) : void 0;
    return message;
  }
};
var QueryEpochRequest = {
  $type: "seiprotocol.seichain.epoch.QueryEpochRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryEpochRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryEpochRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryEpochRequest();
    return message;
  }
};
var QueryEpochResponse = {
  $type: "seiprotocol.seichain.epoch.QueryEpochResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.epoch !== void 0) {
      Epoch.encode(message.epoch, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryEpochResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.epoch = Epoch.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { epoch: isSet97(object.epoch) ? Epoch.fromJSON(object.epoch) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.epoch !== void 0) {
      obj.epoch = Epoch.toJSON(message.epoch);
    }
    return obj;
  },
  create(base) {
    return QueryEpochResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryEpochResponse();
    message.epoch = object.epoch !== void 0 && object.epoch !== null ? Epoch.fromPartial(object.epoch) : void 0;
    return message;
  }
};
function createBaseQueryParamsRequest10() {
  return {};
}
function createBaseQueryParamsResponse10() {
  return { params: void 0 };
}
function createBaseQueryEpochRequest() {
  return {};
}
function createBaseQueryEpochResponse() {
  return { epoch: void 0 };
}
function isSet97(value) {
  return value !== null && value !== void 0;
}
var registry103 = [
  ["/seiprotocol.seichain.epoch.QueryParamsRequest", QueryParamsRequest10],
  ["/seiprotocol.seichain.epoch.QueryParamsResponse", QueryParamsResponse10],
  ["/seiprotocol.seichain.epoch.QueryEpochRequest", QueryEpochRequest],
  ["/seiprotocol.seichain.epoch.QueryEpochResponse", QueryEpochResponse]
];
var aminoConverters103 = {
  "/seiprotocol.seichain.epoch.QueryParamsRequest": {
    aminoType: "epoch/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.epoch.QueryParamsResponse": {
    aminoType: "epoch/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.epoch.QueryEpochRequest": {
    aminoType: "epoch/QueryEpochRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.epoch.QueryEpochResponse": {
    aminoType: "epoch/QueryEpochResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/eth/index.js
var eth_exports = {};
__export(eth_exports, {
  AccessListTx: () => AccessListTx,
  AccessTuple: () => AccessTuple,
  AssociateTx: () => AssociateTx,
  BlobTx: () => BlobTx,
  BlobTxSidecar: () => BlobTxSidecar,
  DynamicFeeTx: () => DynamicFeeTx,
  ExtensionOptionsEthereumTx: () => ExtensionOptionsEthereumTx,
  LegacyTx: () => LegacyTx,
  aminoConverters: () => aminoConverters104,
  registry: () => registry104
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/eth/tx.js
var AccessTuple = {
  $type: "seiprotocol.seichain.eth.AccessTuple",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.storage_keys) {
      writer.uint32(18).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAccessTuple();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.storage_keys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet98(object.address) ? globalThis.String(object.address) : "",
      storage_keys: globalThis.Array.isArray(object == null ? void 0 : object.storage_keys) ? object.storage_keys.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if ((_a = message.storage_keys) == null ? void 0 : _a.length) {
      obj.storage_keys = message.storage_keys;
    }
    return obj;
  },
  create(base) {
    return AccessTuple.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseAccessTuple();
    message.address = object.address ?? "";
    message.storage_keys = ((_a = object.storage_keys) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var AssociateTx = {
  $type: "seiprotocol.seichain.eth.AssociateTx",
  encode(message, writer = new BinaryWriter()) {
    if (message.v.length !== 0) {
      writer.uint32(10).bytes(message.v);
    }
    if (message.r.length !== 0) {
      writer.uint32(18).bytes(message.r);
    }
    if (message.s.length !== 0) {
      writer.uint32(26).bytes(message.s);
    }
    if (message.custom_message !== "") {
      writer.uint32(34).string(message.custom_message);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAssociateTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.v = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.r = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.s = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.custom_message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      v: isSet98(object.v) ? bytesFromBase6438(object.v) : new Uint8Array(0),
      r: isSet98(object.r) ? bytesFromBase6438(object.r) : new Uint8Array(0),
      s: isSet98(object.s) ? bytesFromBase6438(object.s) : new Uint8Array(0),
      custom_message: isSet98(object.custom_message) ? globalThis.String(object.custom_message) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.v.length !== 0) {
      obj.v = base64FromBytes38(message.v);
    }
    if (message.r.length !== 0) {
      obj.r = base64FromBytes38(message.r);
    }
    if (message.s.length !== 0) {
      obj.s = base64FromBytes38(message.s);
    }
    if (message.custom_message !== "") {
      obj.custom_message = message.custom_message;
    }
    return obj;
  },
  create(base) {
    return AssociateTx.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAssociateTx();
    message.v = object.v ?? new Uint8Array(0);
    message.r = object.r ?? new Uint8Array(0);
    message.s = object.s ?? new Uint8Array(0);
    message.custom_message = object.custom_message ?? "";
    return message;
  }
};
var LegacyTx = {
  $type: "seiprotocol.seichain.eth.LegacyTx",
  encode(message, writer = new BinaryWriter()) {
    if (message.nonce !== 0) {
      writer.uint32(8).uint64(message.nonce);
    }
    if (message.gas_price !== "") {
      writer.uint32(18).string(message.gas_price);
    }
    if (message.gas_limit !== 0) {
      writer.uint32(24).uint64(message.gas_limit);
    }
    if (message.to !== "") {
      writer.uint32(34).string(message.to);
    }
    if (message.value !== "") {
      writer.uint32(42).string(message.value);
    }
    if (message.data.length !== 0) {
      writer.uint32(50).bytes(message.data);
    }
    if (message.v.length !== 0) {
      writer.uint32(58).bytes(message.v);
    }
    if (message.r.length !== 0) {
      writer.uint32(66).bytes(message.r);
    }
    if (message.s.length !== 0) {
      writer.uint32(74).bytes(message.s);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLegacyTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.nonce = longToNumber47(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.gas_price = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.gas_limit = longToNumber47(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.to = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.value = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.v = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.r = reader.bytes();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.s = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      nonce: isSet98(object.nonce) ? globalThis.Number(object.nonce) : 0,
      gas_price: isSet98(object.gas_price) ? globalThis.String(object.gas_price) : "",
      gas_limit: isSet98(object.gas_limit) ? globalThis.Number(object.gas_limit) : 0,
      to: isSet98(object.to) ? globalThis.String(object.to) : "",
      value: isSet98(object.value) ? globalThis.String(object.value) : "",
      data: isSet98(object.data) ? bytesFromBase6438(object.data) : new Uint8Array(0),
      v: isSet98(object.v) ? bytesFromBase6438(object.v) : new Uint8Array(0),
      r: isSet98(object.r) ? bytesFromBase6438(object.r) : new Uint8Array(0),
      s: isSet98(object.s) ? bytesFromBase6438(object.s) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.nonce !== 0) {
      obj.nonce = Math.round(message.nonce);
    }
    if (message.gas_price !== "") {
      obj.gas_price = message.gas_price;
    }
    if (message.gas_limit !== 0) {
      obj.gas_limit = Math.round(message.gas_limit);
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes38(message.data);
    }
    if (message.v.length !== 0) {
      obj.v = base64FromBytes38(message.v);
    }
    if (message.r.length !== 0) {
      obj.r = base64FromBytes38(message.r);
    }
    if (message.s.length !== 0) {
      obj.s = base64FromBytes38(message.s);
    }
    return obj;
  },
  create(base) {
    return LegacyTx.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseLegacyTx();
    message.nonce = object.nonce ?? 0;
    message.gas_price = object.gas_price ?? "";
    message.gas_limit = object.gas_limit ?? 0;
    message.to = object.to ?? "";
    message.value = object.value ?? "";
    message.data = object.data ?? new Uint8Array(0);
    message.v = object.v ?? new Uint8Array(0);
    message.r = object.r ?? new Uint8Array(0);
    message.s = object.s ?? new Uint8Array(0);
    return message;
  }
};
var AccessListTx = {
  $type: "seiprotocol.seichain.eth.AccessListTx",
  encode(message, writer = new BinaryWriter()) {
    if (message.chain_id !== "") {
      writer.uint32(10).string(message.chain_id);
    }
    if (message.nonce !== 0) {
      writer.uint32(16).uint64(message.nonce);
    }
    if (message.gas_price !== "") {
      writer.uint32(26).string(message.gas_price);
    }
    if (message.gas_limit !== 0) {
      writer.uint32(32).uint64(message.gas_limit);
    }
    if (message.to !== "") {
      writer.uint32(42).string(message.to);
    }
    if (message.value !== "") {
      writer.uint32(50).string(message.value);
    }
    if (message.data.length !== 0) {
      writer.uint32(58).bytes(message.data);
    }
    for (const v of message.accesses) {
      AccessTuple.encode(v, writer.uint32(66).fork()).join();
    }
    if (message.v.length !== 0) {
      writer.uint32(74).bytes(message.v);
    }
    if (message.r.length !== 0) {
      writer.uint32(82).bytes(message.r);
    }
    if (message.s.length !== 0) {
      writer.uint32(90).bytes(message.s);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAccessListTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.chain_id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.nonce = longToNumber47(reader.uint64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.gas_price = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.gas_limit = longToNumber47(reader.uint64());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.to = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.value = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.accesses.push(AccessTuple.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.v = reader.bytes();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.r = reader.bytes();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.s = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      chain_id: isSet98(object.chain_id) ? globalThis.String(object.chain_id) : "",
      nonce: isSet98(object.nonce) ? globalThis.Number(object.nonce) : 0,
      gas_price: isSet98(object.gas_price) ? globalThis.String(object.gas_price) : "",
      gas_limit: isSet98(object.gas_limit) ? globalThis.Number(object.gas_limit) : 0,
      to: isSet98(object.to) ? globalThis.String(object.to) : "",
      value: isSet98(object.value) ? globalThis.String(object.value) : "",
      data: isSet98(object.data) ? bytesFromBase6438(object.data) : new Uint8Array(0),
      accesses: globalThis.Array.isArray(object == null ? void 0 : object.accesses) ? object.accesses.map((e) => AccessTuple.fromJSON(e)) : [],
      v: isSet98(object.v) ? bytesFromBase6438(object.v) : new Uint8Array(0),
      r: isSet98(object.r) ? bytesFromBase6438(object.r) : new Uint8Array(0),
      s: isSet98(object.s) ? bytesFromBase6438(object.s) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.chain_id !== "") {
      obj.chain_id = message.chain_id;
    }
    if (message.nonce !== 0) {
      obj.nonce = Math.round(message.nonce);
    }
    if (message.gas_price !== "") {
      obj.gas_price = message.gas_price;
    }
    if (message.gas_limit !== 0) {
      obj.gas_limit = Math.round(message.gas_limit);
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes38(message.data);
    }
    if ((_a = message.accesses) == null ? void 0 : _a.length) {
      obj.accesses = message.accesses.map((e) => AccessTuple.toJSON(e));
    }
    if (message.v.length !== 0) {
      obj.v = base64FromBytes38(message.v);
    }
    if (message.r.length !== 0) {
      obj.r = base64FromBytes38(message.r);
    }
    if (message.s.length !== 0) {
      obj.s = base64FromBytes38(message.s);
    }
    return obj;
  },
  create(base) {
    return AccessListTx.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseAccessListTx();
    message.chain_id = object.chain_id ?? "";
    message.nonce = object.nonce ?? 0;
    message.gas_price = object.gas_price ?? "";
    message.gas_limit = object.gas_limit ?? 0;
    message.to = object.to ?? "";
    message.value = object.value ?? "";
    message.data = object.data ?? new Uint8Array(0);
    message.accesses = ((_a = object.accesses) == null ? void 0 : _a.map((e) => AccessTuple.fromPartial(e))) || [];
    message.v = object.v ?? new Uint8Array(0);
    message.r = object.r ?? new Uint8Array(0);
    message.s = object.s ?? new Uint8Array(0);
    return message;
  }
};
var DynamicFeeTx = {
  $type: "seiprotocol.seichain.eth.DynamicFeeTx",
  encode(message, writer = new BinaryWriter()) {
    if (message.chain_id !== "") {
      writer.uint32(10).string(message.chain_id);
    }
    if (message.nonce !== 0) {
      writer.uint32(16).uint64(message.nonce);
    }
    if (message.gas_tip_cap !== "") {
      writer.uint32(26).string(message.gas_tip_cap);
    }
    if (message.gas_fee_cap !== "") {
      writer.uint32(34).string(message.gas_fee_cap);
    }
    if (message.gas_limit !== 0) {
      writer.uint32(40).uint64(message.gas_limit);
    }
    if (message.to !== "") {
      writer.uint32(50).string(message.to);
    }
    if (message.value !== "") {
      writer.uint32(58).string(message.value);
    }
    if (message.data.length !== 0) {
      writer.uint32(66).bytes(message.data);
    }
    for (const v of message.accesses) {
      AccessTuple.encode(v, writer.uint32(74).fork()).join();
    }
    if (message.v.length !== 0) {
      writer.uint32(82).bytes(message.v);
    }
    if (message.r.length !== 0) {
      writer.uint32(90).bytes(message.r);
    }
    if (message.s.length !== 0) {
      writer.uint32(98).bytes(message.s);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDynamicFeeTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.chain_id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.nonce = longToNumber47(reader.uint64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.gas_tip_cap = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.gas_fee_cap = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.gas_limit = longToNumber47(reader.uint64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.to = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.value = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.accesses.push(AccessTuple.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.v = reader.bytes();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.r = reader.bytes();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }
          message.s = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      chain_id: isSet98(object.chain_id) ? globalThis.String(object.chain_id) : "",
      nonce: isSet98(object.nonce) ? globalThis.Number(object.nonce) : 0,
      gas_tip_cap: isSet98(object.gas_tip_cap) ? globalThis.String(object.gas_tip_cap) : "",
      gas_fee_cap: isSet98(object.gas_fee_cap) ? globalThis.String(object.gas_fee_cap) : "",
      gas_limit: isSet98(object.gas_limit) ? globalThis.Number(object.gas_limit) : 0,
      to: isSet98(object.to) ? globalThis.String(object.to) : "",
      value: isSet98(object.value) ? globalThis.String(object.value) : "",
      data: isSet98(object.data) ? bytesFromBase6438(object.data) : new Uint8Array(0),
      accesses: globalThis.Array.isArray(object == null ? void 0 : object.accesses) ? object.accesses.map((e) => AccessTuple.fromJSON(e)) : [],
      v: isSet98(object.v) ? bytesFromBase6438(object.v) : new Uint8Array(0),
      r: isSet98(object.r) ? bytesFromBase6438(object.r) : new Uint8Array(0),
      s: isSet98(object.s) ? bytesFromBase6438(object.s) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.chain_id !== "") {
      obj.chain_id = message.chain_id;
    }
    if (message.nonce !== 0) {
      obj.nonce = Math.round(message.nonce);
    }
    if (message.gas_tip_cap !== "") {
      obj.gas_tip_cap = message.gas_tip_cap;
    }
    if (message.gas_fee_cap !== "") {
      obj.gas_fee_cap = message.gas_fee_cap;
    }
    if (message.gas_limit !== 0) {
      obj.gas_limit = Math.round(message.gas_limit);
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes38(message.data);
    }
    if ((_a = message.accesses) == null ? void 0 : _a.length) {
      obj.accesses = message.accesses.map((e) => AccessTuple.toJSON(e));
    }
    if (message.v.length !== 0) {
      obj.v = base64FromBytes38(message.v);
    }
    if (message.r.length !== 0) {
      obj.r = base64FromBytes38(message.r);
    }
    if (message.s.length !== 0) {
      obj.s = base64FromBytes38(message.s);
    }
    return obj;
  },
  create(base) {
    return DynamicFeeTx.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseDynamicFeeTx();
    message.chain_id = object.chain_id ?? "";
    message.nonce = object.nonce ?? 0;
    message.gas_tip_cap = object.gas_tip_cap ?? "";
    message.gas_fee_cap = object.gas_fee_cap ?? "";
    message.gas_limit = object.gas_limit ?? 0;
    message.to = object.to ?? "";
    message.value = object.value ?? "";
    message.data = object.data ?? new Uint8Array(0);
    message.accesses = ((_a = object.accesses) == null ? void 0 : _a.map((e) => AccessTuple.fromPartial(e))) || [];
    message.v = object.v ?? new Uint8Array(0);
    message.r = object.r ?? new Uint8Array(0);
    message.s = object.s ?? new Uint8Array(0);
    return message;
  }
};
var BlobTx = {
  $type: "seiprotocol.seichain.eth.BlobTx",
  encode(message, writer = new BinaryWriter()) {
    if (message.chain_id !== "") {
      writer.uint32(10).string(message.chain_id);
    }
    if (message.nonce !== 0) {
      writer.uint32(16).uint64(message.nonce);
    }
    if (message.gas_tip_cap !== "") {
      writer.uint32(26).string(message.gas_tip_cap);
    }
    if (message.gas_fee_cap !== "") {
      writer.uint32(34).string(message.gas_fee_cap);
    }
    if (message.gas_limit !== 0) {
      writer.uint32(40).uint64(message.gas_limit);
    }
    if (message.to !== "") {
      writer.uint32(50).string(message.to);
    }
    if (message.value !== "") {
      writer.uint32(58).string(message.value);
    }
    if (message.data.length !== 0) {
      writer.uint32(66).bytes(message.data);
    }
    for (const v of message.accesses) {
      AccessTuple.encode(v, writer.uint32(74).fork()).join();
    }
    if (message.blob_fee_cap !== "") {
      writer.uint32(82).string(message.blob_fee_cap);
    }
    for (const v of message.blob_hashes) {
      writer.uint32(90).bytes(v);
    }
    if (message.sidecar !== void 0) {
      BlobTxSidecar.encode(message.sidecar, writer.uint32(98).fork()).join();
    }
    if (message.v.length !== 0) {
      writer.uint32(106).bytes(message.v);
    }
    if (message.r.length !== 0) {
      writer.uint32(114).bytes(message.r);
    }
    if (message.s.length !== 0) {
      writer.uint32(122).bytes(message.s);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBlobTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.chain_id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.nonce = longToNumber47(reader.uint64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.gas_tip_cap = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.gas_fee_cap = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.gas_limit = longToNumber47(reader.uint64());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.to = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.value = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.accesses.push(AccessTuple.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.blob_fee_cap = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.blob_hashes.push(reader.bytes());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }
          message.sidecar = BlobTxSidecar.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }
          message.v = reader.bytes();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }
          message.r = reader.bytes();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }
          message.s = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      chain_id: isSet98(object.chain_id) ? globalThis.String(object.chain_id) : "",
      nonce: isSet98(object.nonce) ? globalThis.Number(object.nonce) : 0,
      gas_tip_cap: isSet98(object.gas_tip_cap) ? globalThis.String(object.gas_tip_cap) : "",
      gas_fee_cap: isSet98(object.gas_fee_cap) ? globalThis.String(object.gas_fee_cap) : "",
      gas_limit: isSet98(object.gas_limit) ? globalThis.Number(object.gas_limit) : 0,
      to: isSet98(object.to) ? globalThis.String(object.to) : "",
      value: isSet98(object.value) ? globalThis.String(object.value) : "",
      data: isSet98(object.data) ? bytesFromBase6438(object.data) : new Uint8Array(0),
      accesses: globalThis.Array.isArray(object == null ? void 0 : object.accesses) ? object.accesses.map((e) => AccessTuple.fromJSON(e)) : [],
      blob_fee_cap: isSet98(object.blob_fee_cap) ? globalThis.String(object.blob_fee_cap) : "",
      blob_hashes: globalThis.Array.isArray(object == null ? void 0 : object.blob_hashes) ? object.blob_hashes.map((e) => bytesFromBase6438(e)) : [],
      sidecar: isSet98(object.sidecar) ? BlobTxSidecar.fromJSON(object.sidecar) : void 0,
      v: isSet98(object.v) ? bytesFromBase6438(object.v) : new Uint8Array(0),
      r: isSet98(object.r) ? bytesFromBase6438(object.r) : new Uint8Array(0),
      s: isSet98(object.s) ? bytesFromBase6438(object.s) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if (message.chain_id !== "") {
      obj.chain_id = message.chain_id;
    }
    if (message.nonce !== 0) {
      obj.nonce = Math.round(message.nonce);
    }
    if (message.gas_tip_cap !== "") {
      obj.gas_tip_cap = message.gas_tip_cap;
    }
    if (message.gas_fee_cap !== "") {
      obj.gas_fee_cap = message.gas_fee_cap;
    }
    if (message.gas_limit !== 0) {
      obj.gas_limit = Math.round(message.gas_limit);
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes38(message.data);
    }
    if ((_a = message.accesses) == null ? void 0 : _a.length) {
      obj.accesses = message.accesses.map((e) => AccessTuple.toJSON(e));
    }
    if (message.blob_fee_cap !== "") {
      obj.blob_fee_cap = message.blob_fee_cap;
    }
    if ((_b = message.blob_hashes) == null ? void 0 : _b.length) {
      obj.blob_hashes = message.blob_hashes.map((e) => base64FromBytes38(e));
    }
    if (message.sidecar !== void 0) {
      obj.sidecar = BlobTxSidecar.toJSON(message.sidecar);
    }
    if (message.v.length !== 0) {
      obj.v = base64FromBytes38(message.v);
    }
    if (message.r.length !== 0) {
      obj.r = base64FromBytes38(message.r);
    }
    if (message.s.length !== 0) {
      obj.s = base64FromBytes38(message.s);
    }
    return obj;
  },
  create(base) {
    return BlobTx.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseBlobTx();
    message.chain_id = object.chain_id ?? "";
    message.nonce = object.nonce ?? 0;
    message.gas_tip_cap = object.gas_tip_cap ?? "";
    message.gas_fee_cap = object.gas_fee_cap ?? "";
    message.gas_limit = object.gas_limit ?? 0;
    message.to = object.to ?? "";
    message.value = object.value ?? "";
    message.data = object.data ?? new Uint8Array(0);
    message.accesses = ((_a = object.accesses) == null ? void 0 : _a.map((e) => AccessTuple.fromPartial(e))) || [];
    message.blob_fee_cap = object.blob_fee_cap ?? "";
    message.blob_hashes = ((_b = object.blob_hashes) == null ? void 0 : _b.map((e) => e)) || [];
    message.sidecar = object.sidecar !== void 0 && object.sidecar !== null ? BlobTxSidecar.fromPartial(object.sidecar) : void 0;
    message.v = object.v ?? new Uint8Array(0);
    message.r = object.r ?? new Uint8Array(0);
    message.s = object.s ?? new Uint8Array(0);
    return message;
  }
};
var BlobTxSidecar = {
  $type: "seiprotocol.seichain.eth.BlobTxSidecar",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.blobs) {
      writer.uint32(10).bytes(v);
    }
    for (const v of message.commitments) {
      writer.uint32(18).bytes(v);
    }
    for (const v of message.proofs) {
      writer.uint32(26).bytes(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBlobTxSidecar();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.blobs.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.commitments.push(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.proofs.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      blobs: globalThis.Array.isArray(object == null ? void 0 : object.blobs) ? object.blobs.map((e) => bytesFromBase6438(e)) : [],
      commitments: globalThis.Array.isArray(object == null ? void 0 : object.commitments) ? object.commitments.map((e) => bytesFromBase6438(e)) : [],
      proofs: globalThis.Array.isArray(object == null ? void 0 : object.proofs) ? object.proofs.map((e) => bytesFromBase6438(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b, _c;
    const obj = {};
    if ((_a = message.blobs) == null ? void 0 : _a.length) {
      obj.blobs = message.blobs.map((e) => base64FromBytes38(e));
    }
    if ((_b = message.commitments) == null ? void 0 : _b.length) {
      obj.commitments = message.commitments.map((e) => base64FromBytes38(e));
    }
    if ((_c = message.proofs) == null ? void 0 : _c.length) {
      obj.proofs = message.proofs.map((e) => base64FromBytes38(e));
    }
    return obj;
  },
  create(base) {
    return BlobTxSidecar.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseBlobTxSidecar();
    message.blobs = ((_a = object.blobs) == null ? void 0 : _a.map((e) => e)) || [];
    message.commitments = ((_b = object.commitments) == null ? void 0 : _b.map((e) => e)) || [];
    message.proofs = ((_c = object.proofs) == null ? void 0 : _c.map((e) => e)) || [];
    return message;
  }
};
var ExtensionOptionsEthereumTx = {
  $type: "seiprotocol.seichain.eth.ExtensionOptionsEthereumTx",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseExtensionOptionsEthereumTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return ExtensionOptionsEthereumTx.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseExtensionOptionsEthereumTx();
    return message;
  }
};
function createBaseAccessTuple() {
  return { address: "", storage_keys: [] };
}
function createBaseAssociateTx() {
  return { v: new Uint8Array(0), r: new Uint8Array(0), s: new Uint8Array(0), custom_message: "" };
}
function createBaseLegacyTx() {
  return {
    nonce: 0,
    gas_price: "",
    gas_limit: 0,
    to: "",
    value: "",
    data: new Uint8Array(0),
    v: new Uint8Array(0),
    r: new Uint8Array(0),
    s: new Uint8Array(0)
  };
}
function createBaseAccessListTx() {
  return {
    chain_id: "",
    nonce: 0,
    gas_price: "",
    gas_limit: 0,
    to: "",
    value: "",
    data: new Uint8Array(0),
    accesses: [],
    v: new Uint8Array(0),
    r: new Uint8Array(0),
    s: new Uint8Array(0)
  };
}
function createBaseDynamicFeeTx() {
  return {
    chain_id: "",
    nonce: 0,
    gas_tip_cap: "",
    gas_fee_cap: "",
    gas_limit: 0,
    to: "",
    value: "",
    data: new Uint8Array(0),
    accesses: [],
    v: new Uint8Array(0),
    r: new Uint8Array(0),
    s: new Uint8Array(0)
  };
}
function createBaseBlobTx() {
  return {
    chain_id: "",
    nonce: 0,
    gas_tip_cap: "",
    gas_fee_cap: "",
    gas_limit: 0,
    to: "",
    value: "",
    data: new Uint8Array(0),
    accesses: [],
    blob_fee_cap: "",
    blob_hashes: [],
    sidecar: void 0,
    v: new Uint8Array(0),
    r: new Uint8Array(0),
    s: new Uint8Array(0)
  };
}
function createBaseBlobTxSidecar() {
  return { blobs: [], commitments: [], proofs: [] };
}
function createBaseExtensionOptionsEthereumTx() {
  return {};
}
function bytesFromBase6438(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes38(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber47(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet98(value) {
  return value !== null && value !== void 0;
}
var registry104 = [
  ["/seiprotocol.seichain.eth.AccessTuple", AccessTuple],
  ["/seiprotocol.seichain.eth.AssociateTx", AssociateTx],
  ["/seiprotocol.seichain.eth.LegacyTx", LegacyTx],
  ["/seiprotocol.seichain.eth.AccessListTx", AccessListTx],
  ["/seiprotocol.seichain.eth.DynamicFeeTx", DynamicFeeTx],
  ["/seiprotocol.seichain.eth.BlobTx", BlobTx],
  ["/seiprotocol.seichain.eth.BlobTxSidecar", BlobTxSidecar],
  ["/seiprotocol.seichain.eth.ExtensionOptionsEthereumTx", ExtensionOptionsEthereumTx]
];
var aminoConverters104 = {
  "/seiprotocol.seichain.eth.AccessTuple": {
    aminoType: "eth/AccessTuple",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.eth.AssociateTx": {
    aminoType: "eth/AssociateTx",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.eth.LegacyTx": {
    aminoType: "eth/LegacyTx",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.eth.AccessListTx": {
    aminoType: "eth/AccessListTx",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.eth.DynamicFeeTx": {
    aminoType: "eth/DynamicFeeTx",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.eth.BlobTx": {
    aminoType: "eth/BlobTx",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.eth.BlobTxSidecar": {
    aminoType: "eth/BlobTxSidecar",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.eth.ExtensionOptionsEthereumTx": {
    aminoType: "eth/ExtensionOptionsEthereumTx",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/evm/index.js
var evm_exports = {};
__export(evm_exports, {
  AddCWERC1155PointerProposal: () => AddCWERC1155PointerProposal,
  AddCWERC20PointerProposal: () => AddCWERC20PointerProposal,
  AddCWERC721PointerProposal: () => AddCWERC721PointerProposal,
  AddERCCW1155PointerProposal: () => AddERCCW1155PointerProposal,
  AddERCCW20PointerProposal: () => AddERCCW20PointerProposal,
  AddERCCW721PointerProposal: () => AddERCCW721PointerProposal,
  AddERCNativePointerProposal: () => AddERCNativePointerProposal,
  AddERCNativePointerProposalV2: () => AddERCNativePointerProposalV2,
  AddressAssociation: () => AddressAssociation,
  ChainConfig: () => ChainConfig,
  Code: () => Code,
  ContractState: () => ContractState,
  DeferredInfo: () => DeferredInfo,
  GenesisState: () => GenesisState18,
  Log: () => Log,
  MsgAssociate: () => MsgAssociate,
  MsgAssociateContractAddress: () => MsgAssociateContractAddress,
  MsgAssociateContractAddressResponse: () => MsgAssociateContractAddressResponse,
  MsgAssociateResponse: () => MsgAssociateResponse,
  MsgEVMTransaction: () => MsgEVMTransaction,
  MsgEVMTransactionResponse: () => MsgEVMTransactionResponse,
  MsgInternalEVMCall: () => MsgInternalEVMCall,
  MsgInternalEVMCallResponse: () => MsgInternalEVMCallResponse,
  MsgInternalEVMDelegateCall: () => MsgInternalEVMDelegateCall,
  MsgInternalEVMDelegateCallResponse: () => MsgInternalEVMDelegateCallResponse,
  MsgRegisterPointer: () => MsgRegisterPointer,
  MsgRegisterPointerResponse: () => MsgRegisterPointerResponse,
  MsgSend: () => MsgSend2,
  MsgSendResponse: () => MsgSendResponse2,
  Nonce: () => Nonce,
  Params: () => Params10,
  ParamsPreV580: () => ParamsPreV580,
  QueryEVMAddressBySeiAddressRequest: () => QueryEVMAddressBySeiAddressRequest,
  QueryEVMAddressBySeiAddressResponse: () => QueryEVMAddressBySeiAddressResponse,
  QueryPointeeRequest: () => QueryPointeeRequest,
  QueryPointeeResponse: () => QueryPointeeResponse,
  QueryPointerRequest: () => QueryPointerRequest,
  QueryPointerResponse: () => QueryPointerResponse,
  QueryPointerVersionRequest: () => QueryPointerVersionRequest,
  QueryPointerVersionResponse: () => QueryPointerVersionResponse,
  QuerySeiAddressByEVMAddressRequest: () => QuerySeiAddressByEVMAddressRequest,
  QuerySeiAddressByEVMAddressResponse: () => QuerySeiAddressByEVMAddressResponse,
  QueryStaticCallRequest: () => QueryStaticCallRequest,
  QueryStaticCallResponse: () => QueryStaticCallResponse,
  Receipt: () => Receipt,
  Serialized: () => Serialized,
  Whitelist: () => Whitelist,
  pointerTypeFromJSON: () => pointerTypeFromJSON,
  pointerTypeToJSON: () => pointerTypeToJSON
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/evm/config.js
var ChainConfig = {
  $type: "seiprotocol.seichain.evm.ChainConfig",
  encode(message, writer = new BinaryWriter()) {
    if (message.cancun_time !== 0) {
      writer.uint32(8).int64(message.cancun_time);
    }
    if (message.prague_time !== 0) {
      writer.uint32(16).int64(message.prague_time);
    }
    if (message.verkle_time !== 0) {
      writer.uint32(24).int64(message.verkle_time);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseChainConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.cancun_time = longToNumber48(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.prague_time = longToNumber48(reader.int64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.verkle_time = longToNumber48(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      cancun_time: isSet99(object.cancun_time) ? globalThis.Number(object.cancun_time) : 0,
      prague_time: isSet99(object.prague_time) ? globalThis.Number(object.prague_time) : 0,
      verkle_time: isSet99(object.verkle_time) ? globalThis.Number(object.verkle_time) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.cancun_time !== 0) {
      obj.cancun_time = Math.round(message.cancun_time);
    }
    if (message.prague_time !== 0) {
      obj.prague_time = Math.round(message.prague_time);
    }
    if (message.verkle_time !== 0) {
      obj.verkle_time = Math.round(message.verkle_time);
    }
    return obj;
  },
  create(base) {
    return ChainConfig.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseChainConfig();
    message.cancun_time = object.cancun_time ?? 0;
    message.prague_time = object.prague_time ?? 0;
    message.verkle_time = object.verkle_time ?? 0;
    return message;
  }
};
function createBaseChainConfig() {
  return { cancun_time: 0, prague_time: 0, verkle_time: 0 };
}
function longToNumber48(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet99(value) {
  return value !== null && value !== void 0;
}
var registry105 = [["/seiprotocol.seichain.evm.ChainConfig", ChainConfig]];
var aminoConverters105 = {
  "/seiprotocol.seichain.evm.ChainConfig": {
    aminoType: "evm/ChainConfig",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/types/evm/enums.js
var PointerType;
(function(PointerType2) {
  PointerType2[PointerType2["ERC20"] = 0] = "ERC20";
  PointerType2[PointerType2["ERC721"] = 1] = "ERC721";
  PointerType2[PointerType2["NATIVE"] = 2] = "NATIVE";
  PointerType2[PointerType2["CW20"] = 3] = "CW20";
  PointerType2[PointerType2["CW721"] = 4] = "CW721";
  PointerType2[PointerType2["ERC1155"] = 5] = "ERC1155";
  PointerType2[PointerType2["CW1155"] = 6] = "CW1155";
  PointerType2[PointerType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PointerType || (PointerType = {}));

// node_modules/@sei-js/cosmos/dist/esm/encoding/evm/enums.js
function pointerTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "ERC20":
      return PointerType.ERC20;
    case 1:
    case "ERC721":
      return PointerType.ERC721;
    case 2:
    case "NATIVE":
      return PointerType.NATIVE;
    case 3:
    case "CW20":
      return PointerType.CW20;
    case 4:
    case "CW721":
      return PointerType.CW721;
    case 5:
    case "ERC1155":
      return PointerType.ERC1155;
    case 6:
    case "CW1155":
      return PointerType.CW1155;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PointerType.UNRECOGNIZED;
  }
}
function pointerTypeToJSON(object) {
  switch (object) {
    case PointerType.ERC20:
      return "ERC20";
    case PointerType.ERC721:
      return "ERC721";
    case PointerType.NATIVE:
      return "NATIVE";
    case PointerType.CW20:
      return "CW20";
    case PointerType.CW721:
      return "CW721";
    case PointerType.ERC1155:
      return "ERC1155";
    case PointerType.CW1155:
      return "CW1155";
    case PointerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

// node_modules/@sei-js/cosmos/dist/esm/encoding/evm/params.js
var Params10 = {
  $type: "seiprotocol.seichain.evm.Params",
  encode(message, writer = new BinaryWriter()) {
    if (message.priority_normalizer !== "") {
      writer.uint32(18).string(message.priority_normalizer);
    }
    if (message.base_fee_per_gas !== "") {
      writer.uint32(26).string(message.base_fee_per_gas);
    }
    if (message.minimum_fee_per_gas !== "") {
      writer.uint32(34).string(message.minimum_fee_per_gas);
    }
    for (const v of message.whitelisted_cw_code_hashes_for_delegate_call) {
      writer.uint32(66).bytes(v);
    }
    if (message.deliver_tx_hook_wasm_gas_limit !== 0) {
      writer.uint32(72).uint64(message.deliver_tx_hook_wasm_gas_limit);
    }
    if (message.max_dynamic_base_fee_upward_adjustment !== "") {
      writer.uint32(82).string(message.max_dynamic_base_fee_upward_adjustment);
    }
    if (message.max_dynamic_base_fee_downward_adjustment !== "") {
      writer.uint32(90).string(message.max_dynamic_base_fee_downward_adjustment);
    }
    if (message.target_gas_used_per_block !== 0) {
      writer.uint32(96).uint64(message.target_gas_used_per_block);
    }
    if (message.maximum_fee_per_gas !== "") {
      writer.uint32(106).string(message.maximum_fee_per_gas);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams10();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }
          message.priority_normalizer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.base_fee_per_gas = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.minimum_fee_per_gas = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.whitelisted_cw_code_hashes_for_delegate_call.push(reader.bytes());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }
          message.deliver_tx_hook_wasm_gas_limit = longToNumber49(reader.uint64());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.max_dynamic_base_fee_upward_adjustment = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.max_dynamic_base_fee_downward_adjustment = reader.string();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }
          message.target_gas_used_per_block = longToNumber49(reader.uint64());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }
          message.maximum_fee_per_gas = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      priority_normalizer: isSet100(object.priority_normalizer) ? globalThis.String(object.priority_normalizer) : "",
      base_fee_per_gas: isSet100(object.base_fee_per_gas) ? globalThis.String(object.base_fee_per_gas) : "",
      minimum_fee_per_gas: isSet100(object.minimum_fee_per_gas) ? globalThis.String(object.minimum_fee_per_gas) : "",
      whitelisted_cw_code_hashes_for_delegate_call: globalThis.Array.isArray(object == null ? void 0 : object.whitelisted_cw_code_hashes_for_delegate_call) ? object.whitelisted_cw_code_hashes_for_delegate_call.map((e) => bytesFromBase6439(e)) : [],
      deliver_tx_hook_wasm_gas_limit: isSet100(object.deliver_tx_hook_wasm_gas_limit) ? globalThis.Number(object.deliver_tx_hook_wasm_gas_limit) : 0,
      max_dynamic_base_fee_upward_adjustment: isSet100(object.max_dynamic_base_fee_upward_adjustment) ? globalThis.String(object.max_dynamic_base_fee_upward_adjustment) : "",
      max_dynamic_base_fee_downward_adjustment: isSet100(object.max_dynamic_base_fee_downward_adjustment) ? globalThis.String(object.max_dynamic_base_fee_downward_adjustment) : "",
      target_gas_used_per_block: isSet100(object.target_gas_used_per_block) ? globalThis.Number(object.target_gas_used_per_block) : 0,
      maximum_fee_per_gas: isSet100(object.maximum_fee_per_gas) ? globalThis.String(object.maximum_fee_per_gas) : ""
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.priority_normalizer !== "") {
      obj.priority_normalizer = message.priority_normalizer;
    }
    if (message.base_fee_per_gas !== "") {
      obj.base_fee_per_gas = message.base_fee_per_gas;
    }
    if (message.minimum_fee_per_gas !== "") {
      obj.minimum_fee_per_gas = message.minimum_fee_per_gas;
    }
    if ((_a = message.whitelisted_cw_code_hashes_for_delegate_call) == null ? void 0 : _a.length) {
      obj.whitelisted_cw_code_hashes_for_delegate_call = message.whitelisted_cw_code_hashes_for_delegate_call.map((e) => base64FromBytes39(e));
    }
    if (message.deliver_tx_hook_wasm_gas_limit !== 0) {
      obj.deliver_tx_hook_wasm_gas_limit = Math.round(message.deliver_tx_hook_wasm_gas_limit);
    }
    if (message.max_dynamic_base_fee_upward_adjustment !== "") {
      obj.max_dynamic_base_fee_upward_adjustment = message.max_dynamic_base_fee_upward_adjustment;
    }
    if (message.max_dynamic_base_fee_downward_adjustment !== "") {
      obj.max_dynamic_base_fee_downward_adjustment = message.max_dynamic_base_fee_downward_adjustment;
    }
    if (message.target_gas_used_per_block !== 0) {
      obj.target_gas_used_per_block = Math.round(message.target_gas_used_per_block);
    }
    if (message.maximum_fee_per_gas !== "") {
      obj.maximum_fee_per_gas = message.maximum_fee_per_gas;
    }
    return obj;
  },
  create(base) {
    return Params10.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseParams10();
    message.priority_normalizer = object.priority_normalizer ?? "";
    message.base_fee_per_gas = object.base_fee_per_gas ?? "";
    message.minimum_fee_per_gas = object.minimum_fee_per_gas ?? "";
    message.whitelisted_cw_code_hashes_for_delegate_call = ((_a = object.whitelisted_cw_code_hashes_for_delegate_call) == null ? void 0 : _a.map((e) => e)) || [];
    message.deliver_tx_hook_wasm_gas_limit = object.deliver_tx_hook_wasm_gas_limit ?? 0;
    message.max_dynamic_base_fee_upward_adjustment = object.max_dynamic_base_fee_upward_adjustment ?? "";
    message.max_dynamic_base_fee_downward_adjustment = object.max_dynamic_base_fee_downward_adjustment ?? "";
    message.target_gas_used_per_block = object.target_gas_used_per_block ?? 0;
    message.maximum_fee_per_gas = object.maximum_fee_per_gas ?? "";
    return message;
  }
};
var ParamsPreV580 = {
  $type: "seiprotocol.seichain.evm.ParamsPreV580",
  encode(message, writer = new BinaryWriter()) {
    if (message.priority_normalizer !== "") {
      writer.uint32(18).string(message.priority_normalizer);
    }
    if (message.base_fee_per_gas !== "") {
      writer.uint32(26).string(message.base_fee_per_gas);
    }
    if (message.minimum_fee_per_gas !== "") {
      writer.uint32(34).string(message.minimum_fee_per_gas);
    }
    for (const v of message.whitelisted_cw_code_hashes_for_delegate_call) {
      writer.uint32(66).bytes(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParamsPreV580();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }
          message.priority_normalizer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.base_fee_per_gas = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.minimum_fee_per_gas = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.whitelisted_cw_code_hashes_for_delegate_call.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      priority_normalizer: isSet100(object.priority_normalizer) ? globalThis.String(object.priority_normalizer) : "",
      base_fee_per_gas: isSet100(object.base_fee_per_gas) ? globalThis.String(object.base_fee_per_gas) : "",
      minimum_fee_per_gas: isSet100(object.minimum_fee_per_gas) ? globalThis.String(object.minimum_fee_per_gas) : "",
      whitelisted_cw_code_hashes_for_delegate_call: globalThis.Array.isArray(object == null ? void 0 : object.whitelisted_cw_code_hashes_for_delegate_call) ? object.whitelisted_cw_code_hashes_for_delegate_call.map((e) => bytesFromBase6439(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.priority_normalizer !== "") {
      obj.priority_normalizer = message.priority_normalizer;
    }
    if (message.base_fee_per_gas !== "") {
      obj.base_fee_per_gas = message.base_fee_per_gas;
    }
    if (message.minimum_fee_per_gas !== "") {
      obj.minimum_fee_per_gas = message.minimum_fee_per_gas;
    }
    if ((_a = message.whitelisted_cw_code_hashes_for_delegate_call) == null ? void 0 : _a.length) {
      obj.whitelisted_cw_code_hashes_for_delegate_call = message.whitelisted_cw_code_hashes_for_delegate_call.map((e) => base64FromBytes39(e));
    }
    return obj;
  },
  create(base) {
    return ParamsPreV580.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseParamsPreV580();
    message.priority_normalizer = object.priority_normalizer ?? "";
    message.base_fee_per_gas = object.base_fee_per_gas ?? "";
    message.minimum_fee_per_gas = object.minimum_fee_per_gas ?? "";
    message.whitelisted_cw_code_hashes_for_delegate_call = ((_a = object.whitelisted_cw_code_hashes_for_delegate_call) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
function createBaseParams10() {
  return {
    priority_normalizer: "",
    base_fee_per_gas: "",
    minimum_fee_per_gas: "",
    whitelisted_cw_code_hashes_for_delegate_call: [],
    deliver_tx_hook_wasm_gas_limit: 0,
    max_dynamic_base_fee_upward_adjustment: "",
    max_dynamic_base_fee_downward_adjustment: "",
    target_gas_used_per_block: 0,
    maximum_fee_per_gas: ""
  };
}
function createBaseParamsPreV580() {
  return {
    priority_normalizer: "",
    base_fee_per_gas: "",
    minimum_fee_per_gas: "",
    whitelisted_cw_code_hashes_for_delegate_call: []
  };
}
function bytesFromBase6439(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes39(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber49(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet100(value) {
  return value !== null && value !== void 0;
}
var registry106 = [
  ["/seiprotocol.seichain.evm.Params", Params10],
  ["/seiprotocol.seichain.evm.ParamsPreV580", ParamsPreV580]
];
var aminoConverters106 = {
  "/seiprotocol.seichain.evm.Params": {
    aminoType: "evm/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.ParamsPreV580": {
    aminoType: "evm/ParamsPreV580",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/evm/genesis.js
var AddressAssociation = {
  $type: "seiprotocol.seichain.evm.AddressAssociation",
  encode(message, writer = new BinaryWriter()) {
    if (message.sei_address !== "") {
      writer.uint32(10).string(message.sei_address);
    }
    if (message.eth_address !== "") {
      writer.uint32(18).string(message.eth_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAddressAssociation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sei_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.eth_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sei_address: isSet101(object.sei_address) ? globalThis.String(object.sei_address) : "",
      eth_address: isSet101(object.eth_address) ? globalThis.String(object.eth_address) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sei_address !== "") {
      obj.sei_address = message.sei_address;
    }
    if (message.eth_address !== "") {
      obj.eth_address = message.eth_address;
    }
    return obj;
  },
  create(base) {
    return AddressAssociation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAddressAssociation();
    message.sei_address = object.sei_address ?? "";
    message.eth_address = object.eth_address ?? "";
    return message;
  }
};
var Code = {
  $type: "seiprotocol.seichain.evm.Code",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.code.length !== 0) {
      writer.uint32(18).bytes(message.code);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.code = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet101(object.address) ? globalThis.String(object.address) : "",
      code: isSet101(object.code) ? bytesFromBase6440(object.code) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.code.length !== 0) {
      obj.code = base64FromBytes40(message.code);
    }
    return obj;
  },
  create(base) {
    return Code.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCode();
    message.address = object.address ?? "";
    message.code = object.code ?? new Uint8Array(0);
    return message;
  }
};
var ContractState = {
  $type: "seiprotocol.seichain.evm.ContractState",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.key.length !== 0) {
      writer.uint32(18).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(26).bytes(message.value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseContractState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet101(object.address) ? globalThis.String(object.address) : "",
      key: isSet101(object.key) ? bytesFromBase6440(object.key) : new Uint8Array(0),
      value: isSet101(object.value) ? bytesFromBase6440(object.value) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.key.length !== 0) {
      obj.key = base64FromBytes40(message.key);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes40(message.value);
    }
    return obj;
  },
  create(base) {
    return ContractState.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseContractState();
    message.address = object.address ?? "";
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    return message;
  }
};
var Nonce = {
  $type: "seiprotocol.seichain.evm.Nonce",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.nonce !== 0) {
      writer.uint32(16).uint64(message.nonce);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseNonce();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.nonce = longToNumber50(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet101(object.address) ? globalThis.String(object.address) : "",
      nonce: isSet101(object.nonce) ? globalThis.Number(object.nonce) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.nonce !== 0) {
      obj.nonce = Math.round(message.nonce);
    }
    return obj;
  },
  create(base) {
    return Nonce.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseNonce();
    message.address = object.address ?? "";
    message.nonce = object.nonce ?? 0;
    return message;
  }
};
var Serialized = {
  $type: "seiprotocol.seichain.evm.Serialized",
  encode(message, writer = new BinaryWriter()) {
    if (message.prefix.length !== 0) {
      writer.uint32(10).bytes(message.prefix);
    }
    if (message.key.length !== 0) {
      writer.uint32(18).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(26).bytes(message.value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSerialized();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.prefix = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      prefix: isSet101(object.prefix) ? bytesFromBase6440(object.prefix) : new Uint8Array(0),
      key: isSet101(object.key) ? bytesFromBase6440(object.key) : new Uint8Array(0),
      value: isSet101(object.value) ? bytesFromBase6440(object.value) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.prefix.length !== 0) {
      obj.prefix = base64FromBytes40(message.prefix);
    }
    if (message.key.length !== 0) {
      obj.key = base64FromBytes40(message.key);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes40(message.value);
    }
    return obj;
  },
  create(base) {
    return Serialized.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSerialized();
    message.prefix = object.prefix ?? new Uint8Array(0);
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    return message;
  }
};
var GenesisState18 = {
  $type: "seiprotocol.seichain.evm.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params10.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.address_associations) {
      AddressAssociation.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.codes) {
      Code.encode(v, writer.uint32(26).fork()).join();
    }
    for (const v of message.states) {
      ContractState.encode(v, writer.uint32(34).fork()).join();
    }
    for (const v of message.nonces) {
      Nonce.encode(v, writer.uint32(42).fork()).join();
    }
    for (const v of message.serialized) {
      Serialized.encode(v, writer.uint32(50).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState18();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params10.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.address_associations.push(AddressAssociation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.codes.push(Code.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.states.push(ContractState.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.nonces.push(Nonce.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.serialized.push(Serialized.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet101(object.params) ? Params10.fromJSON(object.params) : void 0,
      address_associations: globalThis.Array.isArray(object == null ? void 0 : object.address_associations) ? object.address_associations.map((e) => AddressAssociation.fromJSON(e)) : [],
      codes: globalThis.Array.isArray(object == null ? void 0 : object.codes) ? object.codes.map((e) => Code.fromJSON(e)) : [],
      states: globalThis.Array.isArray(object == null ? void 0 : object.states) ? object.states.map((e) => ContractState.fromJSON(e)) : [],
      nonces: globalThis.Array.isArray(object == null ? void 0 : object.nonces) ? object.nonces.map((e) => Nonce.fromJSON(e)) : [],
      serialized: globalThis.Array.isArray(object == null ? void 0 : object.serialized) ? object.serialized.map((e) => Serialized.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b, _c, _d, _e;
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params10.toJSON(message.params);
    }
    if ((_a = message.address_associations) == null ? void 0 : _a.length) {
      obj.address_associations = message.address_associations.map((e) => AddressAssociation.toJSON(e));
    }
    if ((_b = message.codes) == null ? void 0 : _b.length) {
      obj.codes = message.codes.map((e) => Code.toJSON(e));
    }
    if ((_c = message.states) == null ? void 0 : _c.length) {
      obj.states = message.states.map((e) => ContractState.toJSON(e));
    }
    if ((_d = message.nonces) == null ? void 0 : _d.length) {
      obj.nonces = message.nonces.map((e) => Nonce.toJSON(e));
    }
    if ((_e = message.serialized) == null ? void 0 : _e.length) {
      obj.serialized = message.serialized.map((e) => Serialized.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState18.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e;
    const message = createBaseGenesisState18();
    message.params = object.params !== void 0 && object.params !== null ? Params10.fromPartial(object.params) : void 0;
    message.address_associations = ((_a = object.address_associations) == null ? void 0 : _a.map((e) => AddressAssociation.fromPartial(e))) || [];
    message.codes = ((_b = object.codes) == null ? void 0 : _b.map((e) => Code.fromPartial(e))) || [];
    message.states = ((_c = object.states) == null ? void 0 : _c.map((e) => ContractState.fromPartial(e))) || [];
    message.nonces = ((_d = object.nonces) == null ? void 0 : _d.map((e) => Nonce.fromPartial(e))) || [];
    message.serialized = ((_e = object.serialized) == null ? void 0 : _e.map((e) => Serialized.fromPartial(e))) || [];
    return message;
  }
};
function createBaseAddressAssociation() {
  return { sei_address: "", eth_address: "" };
}
function createBaseCode() {
  return { address: "", code: new Uint8Array(0) };
}
function createBaseContractState() {
  return { address: "", key: new Uint8Array(0), value: new Uint8Array(0) };
}
function createBaseNonce() {
  return { address: "", nonce: 0 };
}
function createBaseSerialized() {
  return { prefix: new Uint8Array(0), key: new Uint8Array(0), value: new Uint8Array(0) };
}
function createBaseGenesisState18() {
  return { params: void 0, address_associations: [], codes: [], states: [], nonces: [], serialized: [] };
}
function bytesFromBase6440(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes40(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber50(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet101(value) {
  return value !== null && value !== void 0;
}
var registry107 = [
  ["/seiprotocol.seichain.evm.AddressAssociation", AddressAssociation],
  ["/seiprotocol.seichain.evm.Code", Code],
  ["/seiprotocol.seichain.evm.ContractState", ContractState],
  ["/seiprotocol.seichain.evm.Nonce", Nonce],
  ["/seiprotocol.seichain.evm.Serialized", Serialized],
  ["/seiprotocol.seichain.evm.GenesisState", GenesisState18]
];
var aminoConverters107 = {
  "/seiprotocol.seichain.evm.AddressAssociation": {
    aminoType: "evm/AddressAssociation",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.Code": {
    aminoType: "evm/Code",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.ContractState": {
    aminoType: "evm/ContractState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.Nonce": {
    aminoType: "evm/Nonce",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.Serialized": {
    aminoType: "evm/Serialized",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.GenesisState": {
    aminoType: "evm/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/evm/gov.js
var AddERCNativePointerProposal = {
  $type: "seiprotocol.seichain.evm.AddERCNativePointerProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.token !== "") {
      writer.uint32(26).string(message.token);
    }
    if (message.pointer !== "") {
      writer.uint32(34).string(message.pointer);
    }
    if (message.version !== 0) {
      writer.uint32(40).uint32(message.version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAddERCNativePointerProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.token = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pointer = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.version = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet102(object.title) ? globalThis.String(object.title) : "",
      description: isSet102(object.description) ? globalThis.String(object.description) : "",
      token: isSet102(object.token) ? globalThis.String(object.token) : "",
      pointer: isSet102(object.pointer) ? globalThis.String(object.pointer) : "",
      version: isSet102(object.version) ? globalThis.Number(object.version) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.pointer !== "") {
      obj.pointer = message.pointer;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },
  create(base) {
    return AddERCNativePointerProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAddERCNativePointerProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.token = object.token ?? "";
    message.pointer = object.pointer ?? "";
    message.version = object.version ?? 0;
    return message;
  }
};
var AddERCCW20PointerProposal = {
  $type: "seiprotocol.seichain.evm.AddERCCW20PointerProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.pointee !== "") {
      writer.uint32(26).string(message.pointee);
    }
    if (message.pointer !== "") {
      writer.uint32(34).string(message.pointer);
    }
    if (message.version !== 0) {
      writer.uint32(40).uint32(message.version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAddERCCW20PointerProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pointee = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pointer = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.version = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet102(object.title) ? globalThis.String(object.title) : "",
      description: isSet102(object.description) ? globalThis.String(object.description) : "",
      pointee: isSet102(object.pointee) ? globalThis.String(object.pointee) : "",
      pointer: isSet102(object.pointer) ? globalThis.String(object.pointer) : "",
      version: isSet102(object.version) ? globalThis.Number(object.version) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.pointee !== "") {
      obj.pointee = message.pointee;
    }
    if (message.pointer !== "") {
      obj.pointer = message.pointer;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },
  create(base) {
    return AddERCCW20PointerProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAddERCCW20PointerProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.pointee = object.pointee ?? "";
    message.pointer = object.pointer ?? "";
    message.version = object.version ?? 0;
    return message;
  }
};
var AddERCCW721PointerProposal = {
  $type: "seiprotocol.seichain.evm.AddERCCW721PointerProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.pointee !== "") {
      writer.uint32(26).string(message.pointee);
    }
    if (message.pointer !== "") {
      writer.uint32(34).string(message.pointer);
    }
    if (message.version !== 0) {
      writer.uint32(40).uint32(message.version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAddERCCW721PointerProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pointee = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pointer = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.version = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet102(object.title) ? globalThis.String(object.title) : "",
      description: isSet102(object.description) ? globalThis.String(object.description) : "",
      pointee: isSet102(object.pointee) ? globalThis.String(object.pointee) : "",
      pointer: isSet102(object.pointer) ? globalThis.String(object.pointer) : "",
      version: isSet102(object.version) ? globalThis.Number(object.version) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.pointee !== "") {
      obj.pointee = message.pointee;
    }
    if (message.pointer !== "") {
      obj.pointer = message.pointer;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },
  create(base) {
    return AddERCCW721PointerProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAddERCCW721PointerProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.pointee = object.pointee ?? "";
    message.pointer = object.pointer ?? "";
    message.version = object.version ?? 0;
    return message;
  }
};
var AddERCCW1155PointerProposal = {
  $type: "seiprotocol.seichain.evm.AddERCCW1155PointerProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.pointee !== "") {
      writer.uint32(26).string(message.pointee);
    }
    if (message.pointer !== "") {
      writer.uint32(34).string(message.pointer);
    }
    if (message.version !== 0) {
      writer.uint32(40).uint32(message.version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAddERCCW1155PointerProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pointee = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pointer = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.version = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet102(object.title) ? globalThis.String(object.title) : "",
      description: isSet102(object.description) ? globalThis.String(object.description) : "",
      pointee: isSet102(object.pointee) ? globalThis.String(object.pointee) : "",
      pointer: isSet102(object.pointer) ? globalThis.String(object.pointer) : "",
      version: isSet102(object.version) ? globalThis.Number(object.version) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.pointee !== "") {
      obj.pointee = message.pointee;
    }
    if (message.pointer !== "") {
      obj.pointer = message.pointer;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },
  create(base) {
    return AddERCCW1155PointerProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAddERCCW1155PointerProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.pointee = object.pointee ?? "";
    message.pointer = object.pointer ?? "";
    message.version = object.version ?? 0;
    return message;
  }
};
var AddCWERC20PointerProposal = {
  $type: "seiprotocol.seichain.evm.AddCWERC20PointerProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.pointee !== "") {
      writer.uint32(26).string(message.pointee);
    }
    if (message.pointer !== "") {
      writer.uint32(34).string(message.pointer);
    }
    if (message.version !== 0) {
      writer.uint32(40).uint32(message.version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAddCWERC20PointerProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pointee = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pointer = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.version = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet102(object.title) ? globalThis.String(object.title) : "",
      description: isSet102(object.description) ? globalThis.String(object.description) : "",
      pointee: isSet102(object.pointee) ? globalThis.String(object.pointee) : "",
      pointer: isSet102(object.pointer) ? globalThis.String(object.pointer) : "",
      version: isSet102(object.version) ? globalThis.Number(object.version) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.pointee !== "") {
      obj.pointee = message.pointee;
    }
    if (message.pointer !== "") {
      obj.pointer = message.pointer;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },
  create(base) {
    return AddCWERC20PointerProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAddCWERC20PointerProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.pointee = object.pointee ?? "";
    message.pointer = object.pointer ?? "";
    message.version = object.version ?? 0;
    return message;
  }
};
var AddCWERC721PointerProposal = {
  $type: "seiprotocol.seichain.evm.AddCWERC721PointerProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.pointee !== "") {
      writer.uint32(26).string(message.pointee);
    }
    if (message.pointer !== "") {
      writer.uint32(34).string(message.pointer);
    }
    if (message.version !== 0) {
      writer.uint32(40).uint32(message.version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAddCWERC721PointerProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pointee = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pointer = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.version = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet102(object.title) ? globalThis.String(object.title) : "",
      description: isSet102(object.description) ? globalThis.String(object.description) : "",
      pointee: isSet102(object.pointee) ? globalThis.String(object.pointee) : "",
      pointer: isSet102(object.pointer) ? globalThis.String(object.pointer) : "",
      version: isSet102(object.version) ? globalThis.Number(object.version) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.pointee !== "") {
      obj.pointee = message.pointee;
    }
    if (message.pointer !== "") {
      obj.pointer = message.pointer;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },
  create(base) {
    return AddCWERC721PointerProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAddCWERC721PointerProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.pointee = object.pointee ?? "";
    message.pointer = object.pointer ?? "";
    message.version = object.version ?? 0;
    return message;
  }
};
var AddCWERC1155PointerProposal = {
  $type: "seiprotocol.seichain.evm.AddCWERC1155PointerProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.pointee !== "") {
      writer.uint32(26).string(message.pointee);
    }
    if (message.pointer !== "") {
      writer.uint32(34).string(message.pointer);
    }
    if (message.version !== 0) {
      writer.uint32(40).uint32(message.version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAddCWERC1155PointerProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.pointee = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.pointer = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.version = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet102(object.title) ? globalThis.String(object.title) : "",
      description: isSet102(object.description) ? globalThis.String(object.description) : "",
      pointee: isSet102(object.pointee) ? globalThis.String(object.pointee) : "",
      pointer: isSet102(object.pointer) ? globalThis.String(object.pointer) : "",
      version: isSet102(object.version) ? globalThis.Number(object.version) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.pointee !== "") {
      obj.pointee = message.pointee;
    }
    if (message.pointer !== "") {
      obj.pointer = message.pointer;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },
  create(base) {
    return AddCWERC1155PointerProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAddCWERC1155PointerProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.pointee = object.pointee ?? "";
    message.pointer = object.pointer ?? "";
    message.version = object.version ?? 0;
    return message;
  }
};
var AddERCNativePointerProposalV2 = {
  $type: "seiprotocol.seichain.evm.AddERCNativePointerProposalV2",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.token !== "") {
      writer.uint32(26).string(message.token);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.symbol !== "") {
      writer.uint32(42).string(message.symbol);
    }
    if (message.decimals !== 0) {
      writer.uint32(48).uint32(message.decimals);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAddERCNativePointerProposalV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.token = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.symbol = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.decimals = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet102(object.title) ? globalThis.String(object.title) : "",
      description: isSet102(object.description) ? globalThis.String(object.description) : "",
      token: isSet102(object.token) ? globalThis.String(object.token) : "",
      name: isSet102(object.name) ? globalThis.String(object.name) : "",
      symbol: isSet102(object.symbol) ? globalThis.String(object.symbol) : "",
      decimals: isSet102(object.decimals) ? globalThis.Number(object.decimals) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.decimals !== 0) {
      obj.decimals = Math.round(message.decimals);
    }
    return obj;
  },
  create(base) {
    return AddERCNativePointerProposalV2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseAddERCNativePointerProposalV2();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.token = object.token ?? "";
    message.name = object.name ?? "";
    message.symbol = object.symbol ?? "";
    message.decimals = object.decimals ?? 0;
    return message;
  }
};
function createBaseAddERCNativePointerProposal() {
  return { title: "", description: "", token: "", pointer: "", version: 0 };
}
function createBaseAddERCCW20PointerProposal() {
  return { title: "", description: "", pointee: "", pointer: "", version: 0 };
}
function createBaseAddERCCW721PointerProposal() {
  return { title: "", description: "", pointee: "", pointer: "", version: 0 };
}
function createBaseAddERCCW1155PointerProposal() {
  return { title: "", description: "", pointee: "", pointer: "", version: 0 };
}
function createBaseAddCWERC20PointerProposal() {
  return { title: "", description: "", pointee: "", pointer: "", version: 0 };
}
function createBaseAddCWERC721PointerProposal() {
  return { title: "", description: "", pointee: "", pointer: "", version: 0 };
}
function createBaseAddCWERC1155PointerProposal() {
  return { title: "", description: "", pointee: "", pointer: "", version: 0 };
}
function createBaseAddERCNativePointerProposalV2() {
  return { title: "", description: "", token: "", name: "", symbol: "", decimals: 0 };
}
function isSet102(value) {
  return value !== null && value !== void 0;
}
var registry108 = [
  ["/seiprotocol.seichain.evm.AddERCNativePointerProposal", AddERCNativePointerProposal],
  ["/seiprotocol.seichain.evm.AddERCCW20PointerProposal", AddERCCW20PointerProposal],
  ["/seiprotocol.seichain.evm.AddERCCW721PointerProposal", AddERCCW721PointerProposal],
  ["/seiprotocol.seichain.evm.AddERCCW1155PointerProposal", AddERCCW1155PointerProposal],
  ["/seiprotocol.seichain.evm.AddCWERC20PointerProposal", AddCWERC20PointerProposal],
  ["/seiprotocol.seichain.evm.AddCWERC721PointerProposal", AddCWERC721PointerProposal],
  ["/seiprotocol.seichain.evm.AddCWERC1155PointerProposal", AddCWERC1155PointerProposal],
  ["/seiprotocol.seichain.evm.AddERCNativePointerProposalV2", AddERCNativePointerProposalV2]
];
var aminoConverters108 = {
  "/seiprotocol.seichain.evm.AddERCNativePointerProposal": {
    aminoType: "evm/AddERCNativePointerProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.AddERCCW20PointerProposal": {
    aminoType: "evm/AddERCCW20PointerProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.AddERCCW721PointerProposal": {
    aminoType: "evm/AddERCCW721PointerProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.AddERCCW1155PointerProposal": {
    aminoType: "evm/AddERCCW1155PointerProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.AddCWERC20PointerProposal": {
    aminoType: "evm/AddCWERC20PointerProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.AddCWERC721PointerProposal": {
    aminoType: "evm/AddCWERC721PointerProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.AddCWERC1155PointerProposal": {
    aminoType: "evm/AddCWERC1155PointerProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.AddERCNativePointerProposalV2": {
    aminoType: "evm/AddERCNativePointerProposalV2",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/evm/query.js
var QuerySeiAddressByEVMAddressRequest = {
  $type: "seiprotocol.seichain.evm.QuerySeiAddressByEVMAddressRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.evm_address !== "") {
      writer.uint32(10).string(message.evm_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQuerySeiAddressByEVMAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.evm_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { evm_address: isSet103(object.evm_address) ? globalThis.String(object.evm_address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.evm_address !== "") {
      obj.evm_address = message.evm_address;
    }
    return obj;
  },
  create(base) {
    return QuerySeiAddressByEVMAddressRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQuerySeiAddressByEVMAddressRequest();
    message.evm_address = object.evm_address ?? "";
    return message;
  }
};
var QuerySeiAddressByEVMAddressResponse = {
  $type: "seiprotocol.seichain.evm.QuerySeiAddressByEVMAddressResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.sei_address !== "") {
      writer.uint32(10).string(message.sei_address);
    }
    if (message.associated !== false) {
      writer.uint32(16).bool(message.associated);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQuerySeiAddressByEVMAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sei_address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.associated = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sei_address: isSet103(object.sei_address) ? globalThis.String(object.sei_address) : "",
      associated: isSet103(object.associated) ? globalThis.Boolean(object.associated) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sei_address !== "") {
      obj.sei_address = message.sei_address;
    }
    if (message.associated !== false) {
      obj.associated = message.associated;
    }
    return obj;
  },
  create(base) {
    return QuerySeiAddressByEVMAddressResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQuerySeiAddressByEVMAddressResponse();
    message.sei_address = object.sei_address ?? "";
    message.associated = object.associated ?? false;
    return message;
  }
};
var QueryEVMAddressBySeiAddressRequest = {
  $type: "seiprotocol.seichain.evm.QueryEVMAddressBySeiAddressRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.sei_address !== "") {
      writer.uint32(10).string(message.sei_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryEVMAddressBySeiAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sei_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { sei_address: isSet103(object.sei_address) ? globalThis.String(object.sei_address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.sei_address !== "") {
      obj.sei_address = message.sei_address;
    }
    return obj;
  },
  create(base) {
    return QueryEVMAddressBySeiAddressRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryEVMAddressBySeiAddressRequest();
    message.sei_address = object.sei_address ?? "";
    return message;
  }
};
var QueryEVMAddressBySeiAddressResponse = {
  $type: "seiprotocol.seichain.evm.QueryEVMAddressBySeiAddressResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.evm_address !== "") {
      writer.uint32(10).string(message.evm_address);
    }
    if (message.associated !== false) {
      writer.uint32(16).bool(message.associated);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryEVMAddressBySeiAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.evm_address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.associated = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      evm_address: isSet103(object.evm_address) ? globalThis.String(object.evm_address) : "",
      associated: isSet103(object.associated) ? globalThis.Boolean(object.associated) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.evm_address !== "") {
      obj.evm_address = message.evm_address;
    }
    if (message.associated !== false) {
      obj.associated = message.associated;
    }
    return obj;
  },
  create(base) {
    return QueryEVMAddressBySeiAddressResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryEVMAddressBySeiAddressResponse();
    message.evm_address = object.evm_address ?? "";
    message.associated = object.associated ?? false;
    return message;
  }
};
var QueryStaticCallRequest = {
  $type: "seiprotocol.seichain.evm.QueryStaticCallRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    if (message.to !== "") {
      writer.uint32(18).string(message.to);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryStaticCallRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.to = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      data: isSet103(object.data) ? bytesFromBase6441(object.data) : new Uint8Array(0),
      to: isSet103(object.to) ? globalThis.String(object.to) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes41(message.data);
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    return obj;
  },
  create(base) {
    return QueryStaticCallRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryStaticCallRequest();
    message.data = object.data ?? new Uint8Array(0);
    message.to = object.to ?? "";
    return message;
  }
};
var QueryStaticCallResponse = {
  $type: "seiprotocol.seichain.evm.QueryStaticCallResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryStaticCallResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { data: isSet103(object.data) ? bytesFromBase6441(object.data) : new Uint8Array(0) };
  },
  toJSON(message) {
    const obj = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes41(message.data);
    }
    return obj;
  },
  create(base) {
    return QueryStaticCallResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryStaticCallResponse();
    message.data = object.data ?? new Uint8Array(0);
    return message;
  }
};
var QueryPointerRequest = {
  $type: "seiprotocol.seichain.evm.QueryPointerRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.pointer_type !== 0) {
      writer.uint32(8).int32(message.pointer_type);
    }
    if (message.pointee !== "") {
      writer.uint32(18).string(message.pointee);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryPointerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.pointer_type = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pointee = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pointer_type: isSet103(object.pointer_type) ? pointerTypeFromJSON(object.pointer_type) : 0,
      pointee: isSet103(object.pointee) ? globalThis.String(object.pointee) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pointer_type !== 0) {
      obj.pointer_type = pointerTypeToJSON(message.pointer_type);
    }
    if (message.pointee !== "") {
      obj.pointee = message.pointee;
    }
    return obj;
  },
  create(base) {
    return QueryPointerRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryPointerRequest();
    message.pointer_type = object.pointer_type ?? 0;
    message.pointee = object.pointee ?? "";
    return message;
  }
};
var QueryPointerResponse = {
  $type: "seiprotocol.seichain.evm.QueryPointerResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.pointer !== "") {
      writer.uint32(10).string(message.pointer);
    }
    if (message.version !== 0) {
      writer.uint32(16).uint32(message.version);
    }
    if (message.exists !== false) {
      writer.uint32(24).bool(message.exists);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryPointerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pointer = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.version = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.exists = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pointer: isSet103(object.pointer) ? globalThis.String(object.pointer) : "",
      version: isSet103(object.version) ? globalThis.Number(object.version) : 0,
      exists: isSet103(object.exists) ? globalThis.Boolean(object.exists) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pointer !== "") {
      obj.pointer = message.pointer;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.exists !== false) {
      obj.exists = message.exists;
    }
    return obj;
  },
  create(base) {
    return QueryPointerResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryPointerResponse();
    message.pointer = object.pointer ?? "";
    message.version = object.version ?? 0;
    message.exists = object.exists ?? false;
    return message;
  }
};
var QueryPointerVersionRequest = {
  $type: "seiprotocol.seichain.evm.QueryPointerVersionRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.pointer_type !== 0) {
      writer.uint32(8).int32(message.pointer_type);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryPointerVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.pointer_type = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { pointer_type: isSet103(object.pointer_type) ? pointerTypeFromJSON(object.pointer_type) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.pointer_type !== 0) {
      obj.pointer_type = pointerTypeToJSON(message.pointer_type);
    }
    return obj;
  },
  create(base) {
    return QueryPointerVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryPointerVersionRequest();
    message.pointer_type = object.pointer_type ?? 0;
    return message;
  }
};
var QueryPointerVersionResponse = {
  $type: "seiprotocol.seichain.evm.QueryPointerVersionResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.version !== 0) {
      writer.uint32(8).uint32(message.version);
    }
    if (message.cw_code_id !== 0) {
      writer.uint32(16).uint64(message.cw_code_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryPointerVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.version = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.cw_code_id = longToNumber51(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      version: isSet103(object.version) ? globalThis.Number(object.version) : 0,
      cw_code_id: isSet103(object.cw_code_id) ? globalThis.Number(object.cw_code_id) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.cw_code_id !== 0) {
      obj.cw_code_id = Math.round(message.cw_code_id);
    }
    return obj;
  },
  create(base) {
    return QueryPointerVersionResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryPointerVersionResponse();
    message.version = object.version ?? 0;
    message.cw_code_id = object.cw_code_id ?? 0;
    return message;
  }
};
var QueryPointeeRequest = {
  $type: "seiprotocol.seichain.evm.QueryPointeeRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.pointer_type !== 0) {
      writer.uint32(8).int32(message.pointer_type);
    }
    if (message.pointer !== "") {
      writer.uint32(18).string(message.pointer);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryPointeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.pointer_type = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pointer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pointer_type: isSet103(object.pointer_type) ? pointerTypeFromJSON(object.pointer_type) : 0,
      pointer: isSet103(object.pointer) ? globalThis.String(object.pointer) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pointer_type !== 0) {
      obj.pointer_type = pointerTypeToJSON(message.pointer_type);
    }
    if (message.pointer !== "") {
      obj.pointer = message.pointer;
    }
    return obj;
  },
  create(base) {
    return QueryPointeeRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryPointeeRequest();
    message.pointer_type = object.pointer_type ?? 0;
    message.pointer = object.pointer ?? "";
    return message;
  }
};
var QueryPointeeResponse = {
  $type: "seiprotocol.seichain.evm.QueryPointeeResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.pointee !== "") {
      writer.uint32(10).string(message.pointee);
    }
    if (message.version !== 0) {
      writer.uint32(16).uint32(message.version);
    }
    if (message.exists !== false) {
      writer.uint32(24).bool(message.exists);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryPointeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pointee = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.version = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.exists = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pointee: isSet103(object.pointee) ? globalThis.String(object.pointee) : "",
      version: isSet103(object.version) ? globalThis.Number(object.version) : 0,
      exists: isSet103(object.exists) ? globalThis.Boolean(object.exists) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pointee !== "") {
      obj.pointee = message.pointee;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.exists !== false) {
      obj.exists = message.exists;
    }
    return obj;
  },
  create(base) {
    return QueryPointeeResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryPointeeResponse();
    message.pointee = object.pointee ?? "";
    message.version = object.version ?? 0;
    message.exists = object.exists ?? false;
    return message;
  }
};
function createBaseQuerySeiAddressByEVMAddressRequest() {
  return { evm_address: "" };
}
function createBaseQuerySeiAddressByEVMAddressResponse() {
  return { sei_address: "", associated: false };
}
function createBaseQueryEVMAddressBySeiAddressRequest() {
  return { sei_address: "" };
}
function createBaseQueryEVMAddressBySeiAddressResponse() {
  return { evm_address: "", associated: false };
}
function createBaseQueryStaticCallRequest() {
  return { data: new Uint8Array(0), to: "" };
}
function createBaseQueryStaticCallResponse() {
  return { data: new Uint8Array(0) };
}
function createBaseQueryPointerRequest() {
  return { pointer_type: 0, pointee: "" };
}
function createBaseQueryPointerResponse() {
  return { pointer: "", version: 0, exists: false };
}
function createBaseQueryPointerVersionRequest() {
  return { pointer_type: 0 };
}
function createBaseQueryPointerVersionResponse() {
  return { version: 0, cw_code_id: 0 };
}
function createBaseQueryPointeeRequest() {
  return { pointer_type: 0, pointer: "" };
}
function createBaseQueryPointeeResponse() {
  return { pointee: "", version: 0, exists: false };
}
function bytesFromBase6441(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes41(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber51(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet103(value) {
  return value !== null && value !== void 0;
}
var registry109 = [
  ["/seiprotocol.seichain.evm.QuerySeiAddressByEVMAddressRequest", QuerySeiAddressByEVMAddressRequest],
  ["/seiprotocol.seichain.evm.QuerySeiAddressByEVMAddressResponse", QuerySeiAddressByEVMAddressResponse],
  ["/seiprotocol.seichain.evm.QueryEVMAddressBySeiAddressRequest", QueryEVMAddressBySeiAddressRequest],
  ["/seiprotocol.seichain.evm.QueryEVMAddressBySeiAddressResponse", QueryEVMAddressBySeiAddressResponse],
  ["/seiprotocol.seichain.evm.QueryStaticCallRequest", QueryStaticCallRequest],
  ["/seiprotocol.seichain.evm.QueryStaticCallResponse", QueryStaticCallResponse],
  ["/seiprotocol.seichain.evm.QueryPointerRequest", QueryPointerRequest],
  ["/seiprotocol.seichain.evm.QueryPointerResponse", QueryPointerResponse],
  ["/seiprotocol.seichain.evm.QueryPointerVersionRequest", QueryPointerVersionRequest],
  ["/seiprotocol.seichain.evm.QueryPointerVersionResponse", QueryPointerVersionResponse],
  ["/seiprotocol.seichain.evm.QueryPointeeRequest", QueryPointeeRequest],
  ["/seiprotocol.seichain.evm.QueryPointeeResponse", QueryPointeeResponse]
];
var aminoConverters109 = {
  "/seiprotocol.seichain.evm.QuerySeiAddressByEVMAddressRequest": {
    aminoType: "evm/QuerySeiAddressByEVMAddressRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.QuerySeiAddressByEVMAddressResponse": {
    aminoType: "evm/QuerySeiAddressByEVMAddressResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.QueryEVMAddressBySeiAddressRequest": {
    aminoType: "evm/QueryEVMAddressBySeiAddressRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.QueryEVMAddressBySeiAddressResponse": {
    aminoType: "evm/QueryEVMAddressBySeiAddressResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.QueryStaticCallRequest": {
    aminoType: "evm/QueryStaticCallRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.QueryStaticCallResponse": {
    aminoType: "evm/QueryStaticCallResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.QueryPointerRequest": {
    aminoType: "evm/QueryPointerRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.QueryPointerResponse": {
    aminoType: "evm/QueryPointerResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.QueryPointerVersionRequest": {
    aminoType: "evm/QueryPointerVersionRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.QueryPointerVersionResponse": {
    aminoType: "evm/QueryPointerVersionResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.QueryPointeeRequest": {
    aminoType: "evm/QueryPointeeRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.QueryPointeeResponse": {
    aminoType: "evm/QueryPointeeResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/evm/receipt.js
var Log = {
  $type: "seiprotocol.seichain.evm.Log",
  encode(message, writer = new BinaryWriter()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.topics) {
      writer.uint32(18).string(v);
    }
    if (message.data.length !== 0) {
      writer.uint32(26).bytes(message.data);
    }
    if (message.index !== 0) {
      writer.uint32(32).uint32(message.index);
    }
    if (message.synthetic !== false) {
      writer.uint32(40).bool(message.synthetic);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.topics.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.index = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.synthetic = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet104(object.address) ? globalThis.String(object.address) : "",
      topics: globalThis.Array.isArray(object == null ? void 0 : object.topics) ? object.topics.map((e) => globalThis.String(e)) : [],
      data: isSet104(object.data) ? bytesFromBase6442(object.data) : new Uint8Array(0),
      index: isSet104(object.index) ? globalThis.Number(object.index) : 0,
      synthetic: isSet104(object.synthetic) ? globalThis.Boolean(object.synthetic) : false
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if ((_a = message.topics) == null ? void 0 : _a.length) {
      obj.topics = message.topics;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes42(message.data);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.synthetic !== false) {
      obj.synthetic = message.synthetic;
    }
    return obj;
  },
  create(base) {
    return Log.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseLog();
    message.address = object.address ?? "";
    message.topics = ((_a = object.topics) == null ? void 0 : _a.map((e) => e)) || [];
    message.data = object.data ?? new Uint8Array(0);
    message.index = object.index ?? 0;
    message.synthetic = object.synthetic ?? false;
    return message;
  }
};
var Receipt = {
  $type: "seiprotocol.seichain.evm.Receipt",
  encode(message, writer = new BinaryWriter()) {
    if (message.tx_type !== 0) {
      writer.uint32(8).uint32(message.tx_type);
    }
    if (message.cumulative_gas_used !== 0) {
      writer.uint32(16).uint64(message.cumulative_gas_used);
    }
    if (message.contract_address !== "") {
      writer.uint32(26).string(message.contract_address);
    }
    if (message.tx_hash_hex !== "") {
      writer.uint32(34).string(message.tx_hash_hex);
    }
    if (message.gas_used !== 0) {
      writer.uint32(40).uint64(message.gas_used);
    }
    if (message.effective_gas_price !== 0) {
      writer.uint32(48).uint64(message.effective_gas_price);
    }
    if (message.block_number !== 0) {
      writer.uint32(56).uint64(message.block_number);
    }
    if (message.transaction_index !== 0) {
      writer.uint32(64).uint32(message.transaction_index);
    }
    if (message.status !== 0) {
      writer.uint32(72).uint32(message.status);
    }
    if (message.from !== "") {
      writer.uint32(82).string(message.from);
    }
    if (message.to !== "") {
      writer.uint32(90).string(message.to);
    }
    if (message.vm_error !== "") {
      writer.uint32(98).string(message.vm_error);
    }
    for (const v of message.logs) {
      Log.encode(v, writer.uint32(106).fork()).join();
    }
    if (message.logsBloom.length !== 0) {
      writer.uint32(114).bytes(message.logsBloom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseReceipt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.tx_type = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.cumulative_gas_used = longToNumber52(reader.uint64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.contract_address = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.tx_hash_hex = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.gas_used = longToNumber52(reader.uint64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.effective_gas_price = longToNumber52(reader.uint64());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.block_number = longToNumber52(reader.uint64());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }
          message.transaction_index = reader.uint32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }
          message.status = reader.uint32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.from = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.to = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }
          message.vm_error = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }
          message.logs.push(Log.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }
          message.logsBloom = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      tx_type: isSet104(object.tx_type) ? globalThis.Number(object.tx_type) : 0,
      cumulative_gas_used: isSet104(object.cumulative_gas_used) ? globalThis.Number(object.cumulative_gas_used) : 0,
      contract_address: isSet104(object.contract_address) ? globalThis.String(object.contract_address) : "",
      tx_hash_hex: isSet104(object.tx_hash_hex) ? globalThis.String(object.tx_hash_hex) : "",
      gas_used: isSet104(object.gas_used) ? globalThis.Number(object.gas_used) : 0,
      effective_gas_price: isSet104(object.effective_gas_price) ? globalThis.Number(object.effective_gas_price) : 0,
      block_number: isSet104(object.block_number) ? globalThis.Number(object.block_number) : 0,
      transaction_index: isSet104(object.transaction_index) ? globalThis.Number(object.transaction_index) : 0,
      status: isSet104(object.status) ? globalThis.Number(object.status) : 0,
      from: isSet104(object.from) ? globalThis.String(object.from) : "",
      to: isSet104(object.to) ? globalThis.String(object.to) : "",
      vm_error: isSet104(object.vm_error) ? globalThis.String(object.vm_error) : "",
      logs: globalThis.Array.isArray(object == null ? void 0 : object.logs) ? object.logs.map((e) => Log.fromJSON(e)) : [],
      logsBloom: isSet104(object.logsBloom) ? bytesFromBase6442(object.logsBloom) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.tx_type !== 0) {
      obj.tx_type = Math.round(message.tx_type);
    }
    if (message.cumulative_gas_used !== 0) {
      obj.cumulative_gas_used = Math.round(message.cumulative_gas_used);
    }
    if (message.contract_address !== "") {
      obj.contract_address = message.contract_address;
    }
    if (message.tx_hash_hex !== "") {
      obj.tx_hash_hex = message.tx_hash_hex;
    }
    if (message.gas_used !== 0) {
      obj.gas_used = Math.round(message.gas_used);
    }
    if (message.effective_gas_price !== 0) {
      obj.effective_gas_price = Math.round(message.effective_gas_price);
    }
    if (message.block_number !== 0) {
      obj.block_number = Math.round(message.block_number);
    }
    if (message.transaction_index !== 0) {
      obj.transaction_index = Math.round(message.transaction_index);
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.from !== "") {
      obj.from = message.from;
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.vm_error !== "") {
      obj.vm_error = message.vm_error;
    }
    if ((_a = message.logs) == null ? void 0 : _a.length) {
      obj.logs = message.logs.map((e) => Log.toJSON(e));
    }
    if (message.logsBloom.length !== 0) {
      obj.logsBloom = base64FromBytes42(message.logsBloom);
    }
    return obj;
  },
  create(base) {
    return Receipt.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseReceipt();
    message.tx_type = object.tx_type ?? 0;
    message.cumulative_gas_used = object.cumulative_gas_used ?? 0;
    message.contract_address = object.contract_address ?? "";
    message.tx_hash_hex = object.tx_hash_hex ?? "";
    message.gas_used = object.gas_used ?? 0;
    message.effective_gas_price = object.effective_gas_price ?? 0;
    message.block_number = object.block_number ?? 0;
    message.transaction_index = object.transaction_index ?? 0;
    message.status = object.status ?? 0;
    message.from = object.from ?? "";
    message.to = object.to ?? "";
    message.vm_error = object.vm_error ?? "";
    message.logs = ((_a = object.logs) == null ? void 0 : _a.map((e) => Log.fromPartial(e))) || [];
    message.logsBloom = object.logsBloom ?? new Uint8Array(0);
    return message;
  }
};
function createBaseLog() {
  return { address: "", topics: [], data: new Uint8Array(0), index: 0, synthetic: false };
}
function createBaseReceipt() {
  return {
    tx_type: 0,
    cumulative_gas_used: 0,
    contract_address: "",
    tx_hash_hex: "",
    gas_used: 0,
    effective_gas_price: 0,
    block_number: 0,
    transaction_index: 0,
    status: 0,
    from: "",
    to: "",
    vm_error: "",
    logs: [],
    logsBloom: new Uint8Array(0)
  };
}
function bytesFromBase6442(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes42(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber52(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet104(value) {
  return value !== null && value !== void 0;
}
var registry110 = [
  ["/seiprotocol.seichain.evm.Log", Log],
  ["/seiprotocol.seichain.evm.Receipt", Receipt]
];
var aminoConverters110 = {
  "/seiprotocol.seichain.evm.Log": {
    aminoType: "evm/Log",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.Receipt": {
    aminoType: "evm/Receipt",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/evm/tx.js
var MsgEVMTransaction = {
  $type: "seiprotocol.seichain.evm.MsgEVMTransaction",
  encode(message, writer = new BinaryWriter()) {
    if (message.data !== void 0) {
      Any.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.derived.length !== 0) {
      writer.uint32(18).bytes(message.derived);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgEVMTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.data = Any.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.derived = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      data: isSet105(object.data) ? Any.fromJSON(object.data) : void 0,
      derived: isSet105(object.derived) ? bytesFromBase6443(object.derived) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.data !== void 0) {
      obj.data = Any.toJSON(message.data);
    }
    if (message.derived.length !== 0) {
      obj.derived = base64FromBytes43(message.derived);
    }
    return obj;
  },
  create(base) {
    return MsgEVMTransaction.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgEVMTransaction();
    message.data = object.data !== void 0 && object.data !== null ? Any.fromPartial(object.data) : void 0;
    message.derived = object.derived ?? new Uint8Array(0);
    return message;
  }
};
var MsgEVMTransactionResponse = {
  $type: "seiprotocol.seichain.evm.MsgEVMTransactionResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.gas_used !== 0) {
      writer.uint32(8).uint64(message.gas_used);
    }
    if (message.vm_error !== "") {
      writer.uint32(18).string(message.vm_error);
    }
    if (message.return_data.length !== 0) {
      writer.uint32(26).bytes(message.return_data);
    }
    if (message.hash !== "") {
      writer.uint32(34).string(message.hash);
    }
    for (const v of message.logs) {
      Log.encode(v, writer.uint32(42).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgEVMTransactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.gas_used = longToNumber53(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.vm_error = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.return_data = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.hash = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.logs.push(Log.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      gas_used: isSet105(object.gas_used) ? globalThis.Number(object.gas_used) : 0,
      vm_error: isSet105(object.vm_error) ? globalThis.String(object.vm_error) : "",
      return_data: isSet105(object.return_data) ? bytesFromBase6443(object.return_data) : new Uint8Array(0),
      hash: isSet105(object.hash) ? globalThis.String(object.hash) : "",
      logs: globalThis.Array.isArray(object == null ? void 0 : object.logs) ? object.logs.map((e) => Log.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.gas_used !== 0) {
      obj.gas_used = Math.round(message.gas_used);
    }
    if (message.vm_error !== "") {
      obj.vm_error = message.vm_error;
    }
    if (message.return_data.length !== 0) {
      obj.return_data = base64FromBytes43(message.return_data);
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    if ((_a = message.logs) == null ? void 0 : _a.length) {
      obj.logs = message.logs.map((e) => Log.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return MsgEVMTransactionResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgEVMTransactionResponse();
    message.gas_used = object.gas_used ?? 0;
    message.vm_error = object.vm_error ?? "";
    message.return_data = object.return_data ?? new Uint8Array(0);
    message.hash = object.hash ?? "";
    message.logs = ((_a = object.logs) == null ? void 0 : _a.map((e) => Log.fromPartial(e))) || [];
    return message;
  }
};
var MsgInternalEVMCall = {
  $type: "seiprotocol.seichain.evm.MsgInternalEVMCall",
  encode(message, writer = new BinaryWriter()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.to !== "") {
      writer.uint32(26).string(message.to);
    }
    if (message.data.length !== 0) {
      writer.uint32(34).bytes(message.data);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgInternalEVMCall();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.to = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet105(object.sender) ? globalThis.String(object.sender) : "",
      value: isSet105(object.value) ? globalThis.String(object.value) : "",
      to: isSet105(object.to) ? globalThis.String(object.to) : "",
      data: isSet105(object.data) ? bytesFromBase6443(object.data) : new Uint8Array(0)
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes43(message.data);
    }
    return obj;
  },
  create(base) {
    return MsgInternalEVMCall.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgInternalEVMCall();
    message.sender = object.sender ?? "";
    message.value = object.value ?? "";
    message.to = object.to ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  }
};
var MsgInternalEVMCallResponse = {
  $type: "seiprotocol.seichain.evm.MsgInternalEVMCallResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgInternalEVMCallResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgInternalEVMCallResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgInternalEVMCallResponse();
    return message;
  }
};
var MsgInternalEVMDelegateCall = {
  $type: "seiprotocol.seichain.evm.MsgInternalEVMDelegateCall",
  encode(message, writer = new BinaryWriter()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.codeHash.length !== 0) {
      writer.uint32(18).bytes(message.codeHash);
    }
    if (message.to !== "") {
      writer.uint32(26).string(message.to);
    }
    if (message.data.length !== 0) {
      writer.uint32(34).bytes(message.data);
    }
    if (message.fromContract !== "") {
      writer.uint32(42).string(message.fromContract);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgInternalEVMDelegateCall();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.codeHash = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.to = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.fromContract = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet105(object.sender) ? globalThis.String(object.sender) : "",
      codeHash: isSet105(object.codeHash) ? bytesFromBase6443(object.codeHash) : new Uint8Array(0),
      to: isSet105(object.to) ? globalThis.String(object.to) : "",
      data: isSet105(object.data) ? bytesFromBase6443(object.data) : new Uint8Array(0),
      fromContract: isSet105(object.fromContract) ? globalThis.String(object.fromContract) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.codeHash.length !== 0) {
      obj.codeHash = base64FromBytes43(message.codeHash);
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes43(message.data);
    }
    if (message.fromContract !== "") {
      obj.fromContract = message.fromContract;
    }
    return obj;
  },
  create(base) {
    return MsgInternalEVMDelegateCall.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgInternalEVMDelegateCall();
    message.sender = object.sender ?? "";
    message.codeHash = object.codeHash ?? new Uint8Array(0);
    message.to = object.to ?? "";
    message.data = object.data ?? new Uint8Array(0);
    message.fromContract = object.fromContract ?? "";
    return message;
  }
};
var MsgInternalEVMDelegateCallResponse = {
  $type: "seiprotocol.seichain.evm.MsgInternalEVMDelegateCallResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgInternalEVMDelegateCallResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgInternalEVMDelegateCallResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgInternalEVMDelegateCallResponse();
    return message;
  }
};
var MsgSend2 = {
  $type: "seiprotocol.seichain.evm.MsgSend",
  encode(message, writer = new BinaryWriter()) {
    if (message.from_address !== "") {
      writer.uint32(10).string(message.from_address);
    }
    if (message.to_address !== "") {
      writer.uint32(18).string(message.to_address);
    }
    for (const v of message.amount) {
      Coin.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgSend2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.from_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.to_address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      from_address: isSet105(object.from_address) ? globalThis.String(object.from_address) : "",
      to_address: isSet105(object.to_address) ? globalThis.String(object.to_address) : "",
      amount: globalThis.Array.isArray(object == null ? void 0 : object.amount) ? object.amount.map((e) => Coin.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.from_address !== "") {
      obj.from_address = message.from_address;
    }
    if (message.to_address !== "") {
      obj.to_address = message.to_address;
    }
    if ((_a = message.amount) == null ? void 0 : _a.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return MsgSend2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMsgSend2();
    message.from_address = object.from_address ?? "";
    message.to_address = object.to_address ?? "";
    message.amount = ((_a = object.amount) == null ? void 0 : _a.map((e) => Coin.fromPartial(e))) || [];
    return message;
  }
};
var MsgSendResponse2 = {
  $type: "seiprotocol.seichain.evm.MsgSendResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgSendResponse2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgSendResponse2.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgSendResponse2();
    return message;
  }
};
var MsgRegisterPointer = {
  $type: "seiprotocol.seichain.evm.MsgRegisterPointer",
  encode(message, writer = new BinaryWriter()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.pointer_type !== 0) {
      writer.uint32(16).int32(message.pointer_type);
    }
    if (message.erc_address !== "") {
      writer.uint32(26).string(message.erc_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterPointer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.pointer_type = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.erc_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet105(object.sender) ? globalThis.String(object.sender) : "",
      pointer_type: isSet105(object.pointer_type) ? pointerTypeFromJSON(object.pointer_type) : 0,
      erc_address: isSet105(object.erc_address) ? globalThis.String(object.erc_address) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.pointer_type !== 0) {
      obj.pointer_type = pointerTypeToJSON(message.pointer_type);
    }
    if (message.erc_address !== "") {
      obj.erc_address = message.erc_address;
    }
    return obj;
  },
  create(base) {
    return MsgRegisterPointer.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgRegisterPointer();
    message.sender = object.sender ?? "";
    message.pointer_type = object.pointer_type ?? 0;
    message.erc_address = object.erc_address ?? "";
    return message;
  }
};
var MsgRegisterPointerResponse = {
  $type: "seiprotocol.seichain.evm.MsgRegisterPointerResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.pointer_address !== "") {
      writer.uint32(10).string(message.pointer_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterPointerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pointer_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { pointer_address: isSet105(object.pointer_address) ? globalThis.String(object.pointer_address) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.pointer_address !== "") {
      obj.pointer_address = message.pointer_address;
    }
    return obj;
  },
  create(base) {
    return MsgRegisterPointerResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgRegisterPointerResponse();
    message.pointer_address = object.pointer_address ?? "";
    return message;
  }
};
var MsgAssociateContractAddress = {
  $type: "seiprotocol.seichain.evm.MsgAssociateContractAddress",
  encode(message, writer = new BinaryWriter()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgAssociateContractAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet105(object.sender) ? globalThis.String(object.sender) : "",
      address: isSet105(object.address) ? globalThis.String(object.address) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },
  create(base) {
    return MsgAssociateContractAddress.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgAssociateContractAddress();
    message.sender = object.sender ?? "";
    message.address = object.address ?? "";
    return message;
  }
};
var MsgAssociateContractAddressResponse = {
  $type: "seiprotocol.seichain.evm.MsgAssociateContractAddressResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgAssociateContractAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgAssociateContractAddressResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgAssociateContractAddressResponse();
    return message;
  }
};
var MsgAssociate = {
  $type: "seiprotocol.seichain.evm.MsgAssociate",
  encode(message, writer = new BinaryWriter()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.custom_message !== "") {
      writer.uint32(18).string(message.custom_message);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgAssociate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.custom_message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet105(object.sender) ? globalThis.String(object.sender) : "",
      custom_message: isSet105(object.custom_message) ? globalThis.String(object.custom_message) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.custom_message !== "") {
      obj.custom_message = message.custom_message;
    }
    return obj;
  },
  create(base) {
    return MsgAssociate.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgAssociate();
    message.sender = object.sender ?? "";
    message.custom_message = object.custom_message ?? "";
    return message;
  }
};
var MsgAssociateResponse = {
  $type: "seiprotocol.seichain.evm.MsgAssociateResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgAssociateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgAssociateResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgAssociateResponse();
    return message;
  }
};
function createBaseMsgEVMTransaction() {
  return { data: void 0, derived: new Uint8Array(0) };
}
function createBaseMsgEVMTransactionResponse() {
  return { gas_used: 0, vm_error: "", return_data: new Uint8Array(0), hash: "", logs: [] };
}
function createBaseMsgInternalEVMCall() {
  return { sender: "", value: "", to: "", data: new Uint8Array(0) };
}
function createBaseMsgInternalEVMCallResponse() {
  return {};
}
function createBaseMsgInternalEVMDelegateCall() {
  return { sender: "", codeHash: new Uint8Array(0), to: "", data: new Uint8Array(0), fromContract: "" };
}
function createBaseMsgInternalEVMDelegateCallResponse() {
  return {};
}
function createBaseMsgSend2() {
  return { from_address: "", to_address: "", amount: [] };
}
function createBaseMsgSendResponse2() {
  return {};
}
function createBaseMsgRegisterPointer() {
  return { sender: "", pointer_type: 0, erc_address: "" };
}
function createBaseMsgRegisterPointerResponse() {
  return { pointer_address: "" };
}
function createBaseMsgAssociateContractAddress() {
  return { sender: "", address: "" };
}
function createBaseMsgAssociateContractAddressResponse() {
  return {};
}
function createBaseMsgAssociate() {
  return { sender: "", custom_message: "" };
}
function createBaseMsgAssociateResponse() {
  return {};
}
function bytesFromBase6443(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes43(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber53(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet105(value) {
  return value !== null && value !== void 0;
}
var registry111 = [
  ["/seiprotocol.seichain.evm.MsgEVMTransaction", MsgEVMTransaction],
  ["/seiprotocol.seichain.evm.MsgEVMTransactionResponse", MsgEVMTransactionResponse],
  ["/seiprotocol.seichain.evm.MsgInternalEVMCall", MsgInternalEVMCall],
  ["/seiprotocol.seichain.evm.MsgInternalEVMCallResponse", MsgInternalEVMCallResponse],
  ["/seiprotocol.seichain.evm.MsgInternalEVMDelegateCall", MsgInternalEVMDelegateCall],
  ["/seiprotocol.seichain.evm.MsgInternalEVMDelegateCallResponse", MsgInternalEVMDelegateCallResponse],
  ["/seiprotocol.seichain.evm.MsgSend", MsgSend2],
  ["/seiprotocol.seichain.evm.MsgSendResponse", MsgSendResponse2],
  ["/seiprotocol.seichain.evm.MsgRegisterPointer", MsgRegisterPointer],
  ["/seiprotocol.seichain.evm.MsgRegisterPointerResponse", MsgRegisterPointerResponse],
  ["/seiprotocol.seichain.evm.MsgAssociateContractAddress", MsgAssociateContractAddress],
  ["/seiprotocol.seichain.evm.MsgAssociateContractAddressResponse", MsgAssociateContractAddressResponse],
  ["/seiprotocol.seichain.evm.MsgAssociate", MsgAssociate],
  ["/seiprotocol.seichain.evm.MsgAssociateResponse", MsgAssociateResponse]
];
var aminoConverters111 = {
  "/seiprotocol.seichain.evm.MsgEVMTransaction": {
    aminoType: "evm/MsgEVMTransaction",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgEVMTransactionResponse": {
    aminoType: "evm/MsgEVMTransactionResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgInternalEVMCall": {
    aminoType: "evm/MsgInternalEVMCall",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgInternalEVMCallResponse": {
    aminoType: "evm/MsgInternalEVMCallResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgInternalEVMDelegateCall": {
    aminoType: "evm/MsgInternalEVMDelegateCall",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgInternalEVMDelegateCallResponse": {
    aminoType: "evm/MsgInternalEVMDelegateCallResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgSend": {
    aminoType: "evm/MsgSend",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgSendResponse": {
    aminoType: "evm/MsgSendResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgRegisterPointer": {
    aminoType: "evm/MsgRegisterPointer",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgRegisterPointerResponse": {
    aminoType: "evm/MsgRegisterPointerResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgAssociateContractAddress": {
    aminoType: "evm/MsgAssociateContractAddress",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgAssociateContractAddressResponse": {
    aminoType: "evm/MsgAssociateContractAddressResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgAssociate": {
    aminoType: "evm/MsgAssociate",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.MsgAssociateResponse": {
    aminoType: "evm/MsgAssociateResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/evm/types.js
var Whitelist = {
  $type: "seiprotocol.seichain.evm.Whitelist",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.hashes) {
      writer.uint32(10).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseWhitelist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.hashes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      hashes: globalThis.Array.isArray(object == null ? void 0 : object.hashes) ? object.hashes.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.hashes) == null ? void 0 : _a.length) {
      obj.hashes = message.hashes;
    }
    return obj;
  },
  create(base) {
    return Whitelist.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseWhitelist();
    message.hashes = ((_a = object.hashes) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var DeferredInfo = {
  $type: "seiprotocol.seichain.evm.DeferredInfo",
  encode(message, writer = new BinaryWriter()) {
    if (message.tx_index !== 0) {
      writer.uint32(8).uint32(message.tx_index);
    }
    if (message.tx_hash.length !== 0) {
      writer.uint32(18).bytes(message.tx_hash);
    }
    if (message.tx_bloom.length !== 0) {
      writer.uint32(26).bytes(message.tx_bloom);
    }
    if (message.surplus !== "") {
      writer.uint32(34).string(message.surplus);
    }
    if (message.error !== "") {
      writer.uint32(42).string(message.error);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDeferredInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.tx_index = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.tx_hash = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.tx_bloom = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.surplus = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      tx_index: isSet106(object.tx_index) ? globalThis.Number(object.tx_index) : 0,
      tx_hash: isSet106(object.tx_hash) ? bytesFromBase6444(object.tx_hash) : new Uint8Array(0),
      tx_bloom: isSet106(object.tx_bloom) ? bytesFromBase6444(object.tx_bloom) : new Uint8Array(0),
      surplus: isSet106(object.surplus) ? globalThis.String(object.surplus) : "",
      error: isSet106(object.error) ? globalThis.String(object.error) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.tx_index !== 0) {
      obj.tx_index = Math.round(message.tx_index);
    }
    if (message.tx_hash.length !== 0) {
      obj.tx_hash = base64FromBytes44(message.tx_hash);
    }
    if (message.tx_bloom.length !== 0) {
      obj.tx_bloom = base64FromBytes44(message.tx_bloom);
    }
    if (message.surplus !== "") {
      obj.surplus = message.surplus;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },
  create(base) {
    return DeferredInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDeferredInfo();
    message.tx_index = object.tx_index ?? 0;
    message.tx_hash = object.tx_hash ?? new Uint8Array(0);
    message.tx_bloom = object.tx_bloom ?? new Uint8Array(0);
    message.surplus = object.surplus ?? "";
    message.error = object.error ?? "";
    return message;
  }
};
function createBaseWhitelist() {
  return { hashes: [] };
}
function createBaseDeferredInfo() {
  return { tx_index: 0, tx_hash: new Uint8Array(0), tx_bloom: new Uint8Array(0), surplus: "", error: "" };
}
function bytesFromBase6444(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes44(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet106(value) {
  return value !== null && value !== void 0;
}
var registry112 = [
  ["/seiprotocol.seichain.evm.Whitelist", Whitelist],
  ["/seiprotocol.seichain.evm.DeferredInfo", DeferredInfo]
];
var aminoConverters112 = {
  "/seiprotocol.seichain.evm.Whitelist": {
    aminoType: "evm/Whitelist",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.evm.DeferredInfo": {
    aminoType: "evm/DeferredInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/google/api/index.js
var api_exports = {};
__export(api_exports, {
  CustomHttpPattern: () => CustomHttpPattern,
  Http: () => Http,
  HttpBody: () => HttpBody,
  HttpRule: () => HttpRule
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/google/api/http.js
var Http = {
  $type: "google.api.Http",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.rules) {
      HttpRule.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.fully_decode_reserved_expansion !== false) {
      writer.uint32(16).bool(message.fully_decode_reserved_expansion);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseHttp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.rules.push(HttpRule.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.fully_decode_reserved_expansion = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      rules: globalThis.Array.isArray(object == null ? void 0 : object.rules) ? object.rules.map((e) => HttpRule.fromJSON(e)) : [],
      fully_decode_reserved_expansion: isSet107(object.fully_decode_reserved_expansion) ? globalThis.Boolean(object.fully_decode_reserved_expansion) : false
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.rules) == null ? void 0 : _a.length) {
      obj.rules = message.rules.map((e) => HttpRule.toJSON(e));
    }
    if (message.fully_decode_reserved_expansion !== false) {
      obj.fully_decode_reserved_expansion = message.fully_decode_reserved_expansion;
    }
    return obj;
  },
  create(base) {
    return Http.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseHttp();
    message.rules = ((_a = object.rules) == null ? void 0 : _a.map((e) => HttpRule.fromPartial(e))) || [];
    message.fully_decode_reserved_expansion = object.fully_decode_reserved_expansion ?? false;
    return message;
  }
};
var HttpRule = {
  $type: "google.api.HttpRule",
  encode(message, writer = new BinaryWriter()) {
    if (message.selector !== "") {
      writer.uint32(10).string(message.selector);
    }
    if (message.get !== void 0) {
      writer.uint32(18).string(message.get);
    }
    if (message.put !== void 0) {
      writer.uint32(26).string(message.put);
    }
    if (message.post !== void 0) {
      writer.uint32(34).string(message.post);
    }
    if (message.delete !== void 0) {
      writer.uint32(42).string(message.delete);
    }
    if (message.patch !== void 0) {
      writer.uint32(50).string(message.patch);
    }
    if (message.custom !== void 0) {
      CustomHttpPattern.encode(message.custom, writer.uint32(66).fork()).join();
    }
    if (message.body !== "") {
      writer.uint32(58).string(message.body);
    }
    if (message.response_body !== "") {
      writer.uint32(98).string(message.response_body);
    }
    for (const v of message.additional_bindings) {
      HttpRule.encode(v, writer.uint32(90).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseHttpRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.selector = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.get = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.put = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.post = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.delete = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.patch = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.custom = CustomHttpPattern.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.body = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }
          message.response_body = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.additional_bindings.push(HttpRule.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      selector: isSet107(object.selector) ? globalThis.String(object.selector) : "",
      get: isSet107(object.get) ? globalThis.String(object.get) : void 0,
      put: isSet107(object.put) ? globalThis.String(object.put) : void 0,
      post: isSet107(object.post) ? globalThis.String(object.post) : void 0,
      delete: isSet107(object.delete) ? globalThis.String(object.delete) : void 0,
      patch: isSet107(object.patch) ? globalThis.String(object.patch) : void 0,
      custom: isSet107(object.custom) ? CustomHttpPattern.fromJSON(object.custom) : void 0,
      body: isSet107(object.body) ? globalThis.String(object.body) : "",
      response_body: isSet107(object.response_body) ? globalThis.String(object.response_body) : "",
      additional_bindings: globalThis.Array.isArray(object == null ? void 0 : object.additional_bindings) ? object.additional_bindings.map((e) => HttpRule.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.selector !== "") {
      obj.selector = message.selector;
    }
    if (message.get !== void 0) {
      obj.get = message.get;
    }
    if (message.put !== void 0) {
      obj.put = message.put;
    }
    if (message.post !== void 0) {
      obj.post = message.post;
    }
    if (message.delete !== void 0) {
      obj.delete = message.delete;
    }
    if (message.patch !== void 0) {
      obj.patch = message.patch;
    }
    if (message.custom !== void 0) {
      obj.custom = CustomHttpPattern.toJSON(message.custom);
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.response_body !== "") {
      obj.response_body = message.response_body;
    }
    if ((_a = message.additional_bindings) == null ? void 0 : _a.length) {
      obj.additional_bindings = message.additional_bindings.map((e) => HttpRule.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return HttpRule.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseHttpRule();
    message.selector = object.selector ?? "";
    message.get = object.get ?? void 0;
    message.put = object.put ?? void 0;
    message.post = object.post ?? void 0;
    message.delete = object.delete ?? void 0;
    message.patch = object.patch ?? void 0;
    message.custom = object.custom !== void 0 && object.custom !== null ? CustomHttpPattern.fromPartial(object.custom) : void 0;
    message.body = object.body ?? "";
    message.response_body = object.response_body ?? "";
    message.additional_bindings = ((_a = object.additional_bindings) == null ? void 0 : _a.map((e) => HttpRule.fromPartial(e))) || [];
    return message;
  }
};
var CustomHttpPattern = {
  $type: "google.api.CustomHttpPattern",
  encode(message, writer = new BinaryWriter()) {
    if (message.kind !== "") {
      writer.uint32(10).string(message.kind);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCustomHttpPattern();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.kind = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.path = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      kind: isSet107(object.kind) ? globalThis.String(object.kind) : "",
      path: isSet107(object.path) ? globalThis.String(object.path) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },
  create(base) {
    return CustomHttpPattern.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseCustomHttpPattern();
    message.kind = object.kind ?? "";
    message.path = object.path ?? "";
    return message;
  }
};
function createBaseHttp() {
  return { rules: [], fully_decode_reserved_expansion: false };
}
function createBaseHttpRule() {
  return {
    selector: "",
    get: void 0,
    put: void 0,
    post: void 0,
    delete: void 0,
    patch: void 0,
    custom: void 0,
    body: "",
    response_body: "",
    additional_bindings: []
  };
}
function createBaseCustomHttpPattern() {
  return { kind: "", path: "" };
}
function isSet107(value) {
  return value !== null && value !== void 0;
}
var registry113 = [
  ["/google.api.Http", Http],
  ["/google.api.HttpRule", HttpRule],
  ["/google.api.CustomHttpPattern", CustomHttpPattern]
];
var aminoConverters113 = {
  "/google.api.Http": {
    aminoType: "google.api.Http",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.api.HttpRule": {
    aminoType: "google.api.HttpRule",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.api.CustomHttpPattern": {
    aminoType: "google.api.CustomHttpPattern",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/google/api/httpbody.js
var HttpBody = {
  $type: "google.api.HttpBody",
  encode(message, writer = new BinaryWriter()) {
    if (message.content_type !== "") {
      writer.uint32(10).string(message.content_type);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    for (const v of message.extensions) {
      Any.encode(v, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseHttpBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.content_type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.data = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.extensions.push(Any.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      content_type: isSet108(object.content_type) ? globalThis.String(object.content_type) : "",
      data: isSet108(object.data) ? bytesFromBase6445(object.data) : new Uint8Array(0),
      extensions: globalThis.Array.isArray(object == null ? void 0 : object.extensions) ? object.extensions.map((e) => Any.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.content_type !== "") {
      obj.content_type = message.content_type;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes45(message.data);
    }
    if ((_a = message.extensions) == null ? void 0 : _a.length) {
      obj.extensions = message.extensions.map((e) => Any.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return HttpBody.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseHttpBody();
    message.content_type = object.content_type ?? "";
    message.data = object.data ?? new Uint8Array(0);
    message.extensions = ((_a = object.extensions) == null ? void 0 : _a.map((e) => Any.fromPartial(e))) || [];
    return message;
  }
};
function createBaseHttpBody() {
  return { content_type: "", data: new Uint8Array(0), extensions: [] };
}
function bytesFromBase6445(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes45(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function isSet108(value) {
  return value !== null && value !== void 0;
}
var registry114 = [["/google.api.HttpBody", HttpBody]];
var aminoConverters114 = {
  "/google.api.HttpBody": {
    aminoType: "google.api.HttpBody",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/google/protobuf/index.js
var protobuf_exports = {};
__export(protobuf_exports, {
  Any: () => Any,
  DescriptorProto: () => DescriptorProto,
  DescriptorProtoExtensionRange: () => DescriptorProtoExtensionRange,
  DescriptorProtoReservedRange: () => DescriptorProtoReservedRange,
  Duration: () => Duration,
  EnumDescriptorProto: () => EnumDescriptorProto,
  EnumDescriptorProtoEnumReservedRange: () => EnumDescriptorProtoEnumReservedRange,
  EnumOptions: () => EnumOptions,
  EnumValueDescriptorProto: () => EnumValueDescriptorProto,
  EnumValueOptions: () => EnumValueOptions,
  ExtensionRangeOptions: () => ExtensionRangeOptions,
  ExtensionRangeOptionsDeclaration: () => ExtensionRangeOptionsDeclaration,
  FeatureSet: () => FeatureSet,
  FeatureSetDefaults: () => FeatureSetDefaults,
  FeatureSetDefaultsFeatureSetEditionDefault: () => FeatureSetDefaultsFeatureSetEditionDefault,
  FieldDescriptorProto: () => FieldDescriptorProto,
  FieldOptions: () => FieldOptions,
  FieldOptionsEditionDefault: () => FieldOptionsEditionDefault,
  FieldOptionsFeatureSupport: () => FieldOptionsFeatureSupport,
  FileDescriptorProto: () => FileDescriptorProto,
  FileDescriptorSet: () => FileDescriptorSet,
  FileOptions: () => FileOptions,
  GeneratedCodeInfo: () => GeneratedCodeInfo,
  GeneratedCodeInfoAnnotation: () => GeneratedCodeInfoAnnotation,
  MessageOptions: () => MessageOptions,
  MethodDescriptorProto: () => MethodDescriptorProto,
  MethodOptions: () => MethodOptions,
  OneofDescriptorProto: () => OneofDescriptorProto,
  OneofOptions: () => OneofOptions,
  ServiceDescriptorProto: () => ServiceDescriptorProto,
  ServiceOptions: () => ServiceOptions,
  SourceCodeInfo: () => SourceCodeInfo,
  SourceCodeInfoLocation: () => SourceCodeInfoLocation,
  Timestamp: () => Timestamp,
  UninterpretedOption: () => UninterpretedOption,
  UninterpretedOptionNamePart: () => UninterpretedOptionNamePart,
  editionFromJSON: () => editionFromJSON,
  editionToJSON: () => editionToJSON,
  extensionRangeOptionsVerificationStateFromJSON: () => extensionRangeOptionsVerificationStateFromJSON,
  extensionRangeOptionsVerificationStateToJSON: () => extensionRangeOptionsVerificationStateToJSON,
  featureSetEnumTypeFromJSON: () => featureSetEnumTypeFromJSON,
  featureSetEnumTypeToJSON: () => featureSetEnumTypeToJSON,
  featureSetFieldPresenceFromJSON: () => featureSetFieldPresenceFromJSON,
  featureSetFieldPresenceToJSON: () => featureSetFieldPresenceToJSON,
  featureSetJsonFormatFromJSON: () => featureSetJsonFormatFromJSON,
  featureSetJsonFormatToJSON: () => featureSetJsonFormatToJSON,
  featureSetMessageEncodingFromJSON: () => featureSetMessageEncodingFromJSON,
  featureSetMessageEncodingToJSON: () => featureSetMessageEncodingToJSON,
  featureSetRepeatedFieldEncodingFromJSON: () => featureSetRepeatedFieldEncodingFromJSON,
  featureSetRepeatedFieldEncodingToJSON: () => featureSetRepeatedFieldEncodingToJSON,
  featureSetUtf8ValidationFromJSON: () => featureSetUtf8ValidationFromJSON,
  featureSetUtf8ValidationToJSON: () => featureSetUtf8ValidationToJSON,
  fieldDescriptorProtoLabelFromJSON: () => fieldDescriptorProtoLabelFromJSON,
  fieldDescriptorProtoLabelToJSON: () => fieldDescriptorProtoLabelToJSON,
  fieldDescriptorProtoTypeFromJSON: () => fieldDescriptorProtoTypeFromJSON,
  fieldDescriptorProtoTypeToJSON: () => fieldDescriptorProtoTypeToJSON,
  fieldOptionsCTypeFromJSON: () => fieldOptionsCTypeFromJSON,
  fieldOptionsCTypeToJSON: () => fieldOptionsCTypeToJSON,
  fieldOptionsJSTypeFromJSON: () => fieldOptionsJSTypeFromJSON,
  fieldOptionsJSTypeToJSON: () => fieldOptionsJSTypeToJSON,
  fieldOptionsOptionRetentionFromJSON: () => fieldOptionsOptionRetentionFromJSON,
  fieldOptionsOptionRetentionToJSON: () => fieldOptionsOptionRetentionToJSON,
  fieldOptionsOptionTargetTypeFromJSON: () => fieldOptionsOptionTargetTypeFromJSON,
  fieldOptionsOptionTargetTypeToJSON: () => fieldOptionsOptionTargetTypeToJSON,
  fileOptionsOptimizeModeFromJSON: () => fileOptionsOptimizeModeFromJSON,
  fileOptionsOptimizeModeToJSON: () => fileOptionsOptimizeModeToJSON,
  generatedCodeInfoAnnotationSemanticFromJSON: () => generatedCodeInfoAnnotationSemanticFromJSON,
  generatedCodeInfoAnnotationSemanticToJSON: () => generatedCodeInfoAnnotationSemanticToJSON,
  methodOptionsIdempotencyLevelFromJSON: () => methodOptionsIdempotencyLevelFromJSON,
  methodOptionsIdempotencyLevelToJSON: () => methodOptionsIdempotencyLevelToJSON
});

// node_modules/@sei-js/cosmos/dist/esm/types/google/protobuf/descriptor.js
var Edition;
(function(Edition2) {
  Edition2[Edition2["EDITION_UNKNOWN"] = 0] = "EDITION_UNKNOWN";
  Edition2[Edition2["EDITION_LEGACY"] = 900] = "EDITION_LEGACY";
  Edition2[Edition2["EDITION_PROTO2"] = 998] = "EDITION_PROTO2";
  Edition2[Edition2["EDITION_PROTO3"] = 999] = "EDITION_PROTO3";
  Edition2[Edition2["EDITION_2023"] = 1e3] = "EDITION_2023";
  Edition2[Edition2["EDITION_2024"] = 1001] = "EDITION_2024";
  Edition2[Edition2["EDITION_1_TEST_ONLY"] = 1] = "EDITION_1_TEST_ONLY";
  Edition2[Edition2["EDITION_2_TEST_ONLY"] = 2] = "EDITION_2_TEST_ONLY";
  Edition2[Edition2["EDITION_99997_TEST_ONLY"] = 99997] = "EDITION_99997_TEST_ONLY";
  Edition2[Edition2["EDITION_99998_TEST_ONLY"] = 99998] = "EDITION_99998_TEST_ONLY";
  Edition2[Edition2["EDITION_99999_TEST_ONLY"] = 99999] = "EDITION_99999_TEST_ONLY";
  Edition2[Edition2["EDITION_MAX"] = 2147483647] = "EDITION_MAX";
  Edition2[Edition2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Edition || (Edition = {}));
var ExtensionRangeOptionsVerificationState;
(function(ExtensionRangeOptionsVerificationState2) {
  ExtensionRangeOptionsVerificationState2[ExtensionRangeOptionsVerificationState2["DECLARATION"] = 0] = "DECLARATION";
  ExtensionRangeOptionsVerificationState2[ExtensionRangeOptionsVerificationState2["UNVERIFIED"] = 1] = "UNVERIFIED";
  ExtensionRangeOptionsVerificationState2[ExtensionRangeOptionsVerificationState2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ExtensionRangeOptionsVerificationState || (ExtensionRangeOptionsVerificationState = {}));
var FieldDescriptorProtoType;
(function(FieldDescriptorProtoType2) {
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_DOUBLE"] = 1] = "TYPE_DOUBLE";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_FLOAT"] = 2] = "TYPE_FLOAT";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_INT64"] = 3] = "TYPE_INT64";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_UINT64"] = 4] = "TYPE_UINT64";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_INT32"] = 5] = "TYPE_INT32";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_FIXED64"] = 6] = "TYPE_FIXED64";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_FIXED32"] = 7] = "TYPE_FIXED32";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_BOOL"] = 8] = "TYPE_BOOL";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_STRING"] = 9] = "TYPE_STRING";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_GROUP"] = 10] = "TYPE_GROUP";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_MESSAGE"] = 11] = "TYPE_MESSAGE";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_BYTES"] = 12] = "TYPE_BYTES";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_UINT32"] = 13] = "TYPE_UINT32";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_ENUM"] = 14] = "TYPE_ENUM";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_SFIXED32"] = 15] = "TYPE_SFIXED32";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_SFIXED64"] = 16] = "TYPE_SFIXED64";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_SINT32"] = 17] = "TYPE_SINT32";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["TYPE_SINT64"] = 18] = "TYPE_SINT64";
  FieldDescriptorProtoType2[FieldDescriptorProtoType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FieldDescriptorProtoType || (FieldDescriptorProtoType = {}));
var FieldDescriptorProtoLabel;
(function(FieldDescriptorProtoLabel2) {
  FieldDescriptorProtoLabel2[FieldDescriptorProtoLabel2["LABEL_OPTIONAL"] = 1] = "LABEL_OPTIONAL";
  FieldDescriptorProtoLabel2[FieldDescriptorProtoLabel2["LABEL_REPEATED"] = 3] = "LABEL_REPEATED";
  FieldDescriptorProtoLabel2[FieldDescriptorProtoLabel2["LABEL_REQUIRED"] = 2] = "LABEL_REQUIRED";
  FieldDescriptorProtoLabel2[FieldDescriptorProtoLabel2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FieldDescriptorProtoLabel || (FieldDescriptorProtoLabel = {}));
var FileOptionsOptimizeMode;
(function(FileOptionsOptimizeMode2) {
  FileOptionsOptimizeMode2[FileOptionsOptimizeMode2["SPEED"] = 1] = "SPEED";
  FileOptionsOptimizeMode2[FileOptionsOptimizeMode2["CODE_SIZE"] = 2] = "CODE_SIZE";
  FileOptionsOptimizeMode2[FileOptionsOptimizeMode2["LITE_RUNTIME"] = 3] = "LITE_RUNTIME";
  FileOptionsOptimizeMode2[FileOptionsOptimizeMode2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FileOptionsOptimizeMode || (FileOptionsOptimizeMode = {}));
var FieldOptionsCType;
(function(FieldOptionsCType2) {
  FieldOptionsCType2[FieldOptionsCType2["STRING"] = 0] = "STRING";
  FieldOptionsCType2[FieldOptionsCType2["CORD"] = 1] = "CORD";
  FieldOptionsCType2[FieldOptionsCType2["STRING_PIECE"] = 2] = "STRING_PIECE";
  FieldOptionsCType2[FieldOptionsCType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FieldOptionsCType || (FieldOptionsCType = {}));
var FieldOptionsJSType;
(function(FieldOptionsJSType2) {
  FieldOptionsJSType2[FieldOptionsJSType2["JS_NORMAL"] = 0] = "JS_NORMAL";
  FieldOptionsJSType2[FieldOptionsJSType2["JS_STRING"] = 1] = "JS_STRING";
  FieldOptionsJSType2[FieldOptionsJSType2["JS_NUMBER"] = 2] = "JS_NUMBER";
  FieldOptionsJSType2[FieldOptionsJSType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FieldOptionsJSType || (FieldOptionsJSType = {}));
var FieldOptionsOptionRetention;
(function(FieldOptionsOptionRetention2) {
  FieldOptionsOptionRetention2[FieldOptionsOptionRetention2["RETENTION_UNKNOWN"] = 0] = "RETENTION_UNKNOWN";
  FieldOptionsOptionRetention2[FieldOptionsOptionRetention2["RETENTION_RUNTIME"] = 1] = "RETENTION_RUNTIME";
  FieldOptionsOptionRetention2[FieldOptionsOptionRetention2["RETENTION_SOURCE"] = 2] = "RETENTION_SOURCE";
  FieldOptionsOptionRetention2[FieldOptionsOptionRetention2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FieldOptionsOptionRetention || (FieldOptionsOptionRetention = {}));
var FieldOptionsOptionTargetType;
(function(FieldOptionsOptionTargetType2) {
  FieldOptionsOptionTargetType2[FieldOptionsOptionTargetType2["TARGET_TYPE_UNKNOWN"] = 0] = "TARGET_TYPE_UNKNOWN";
  FieldOptionsOptionTargetType2[FieldOptionsOptionTargetType2["TARGET_TYPE_FILE"] = 1] = "TARGET_TYPE_FILE";
  FieldOptionsOptionTargetType2[FieldOptionsOptionTargetType2["TARGET_TYPE_EXTENSION_RANGE"] = 2] = "TARGET_TYPE_EXTENSION_RANGE";
  FieldOptionsOptionTargetType2[FieldOptionsOptionTargetType2["TARGET_TYPE_MESSAGE"] = 3] = "TARGET_TYPE_MESSAGE";
  FieldOptionsOptionTargetType2[FieldOptionsOptionTargetType2["TARGET_TYPE_FIELD"] = 4] = "TARGET_TYPE_FIELD";
  FieldOptionsOptionTargetType2[FieldOptionsOptionTargetType2["TARGET_TYPE_ONEOF"] = 5] = "TARGET_TYPE_ONEOF";
  FieldOptionsOptionTargetType2[FieldOptionsOptionTargetType2["TARGET_TYPE_ENUM"] = 6] = "TARGET_TYPE_ENUM";
  FieldOptionsOptionTargetType2[FieldOptionsOptionTargetType2["TARGET_TYPE_ENUM_ENTRY"] = 7] = "TARGET_TYPE_ENUM_ENTRY";
  FieldOptionsOptionTargetType2[FieldOptionsOptionTargetType2["TARGET_TYPE_SERVICE"] = 8] = "TARGET_TYPE_SERVICE";
  FieldOptionsOptionTargetType2[FieldOptionsOptionTargetType2["TARGET_TYPE_METHOD"] = 9] = "TARGET_TYPE_METHOD";
  FieldOptionsOptionTargetType2[FieldOptionsOptionTargetType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FieldOptionsOptionTargetType || (FieldOptionsOptionTargetType = {}));
var MethodOptionsIdempotencyLevel;
(function(MethodOptionsIdempotencyLevel2) {
  MethodOptionsIdempotencyLevel2[MethodOptionsIdempotencyLevel2["IDEMPOTENCY_UNKNOWN"] = 0] = "IDEMPOTENCY_UNKNOWN";
  MethodOptionsIdempotencyLevel2[MethodOptionsIdempotencyLevel2["NO_SIDE_EFFECTS"] = 1] = "NO_SIDE_EFFECTS";
  MethodOptionsIdempotencyLevel2[MethodOptionsIdempotencyLevel2["IDEMPOTENT"] = 2] = "IDEMPOTENT";
  MethodOptionsIdempotencyLevel2[MethodOptionsIdempotencyLevel2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MethodOptionsIdempotencyLevel || (MethodOptionsIdempotencyLevel = {}));
var FeatureSetFieldPresence;
(function(FeatureSetFieldPresence2) {
  FeatureSetFieldPresence2[FeatureSetFieldPresence2["FIELD_PRESENCE_UNKNOWN"] = 0] = "FIELD_PRESENCE_UNKNOWN";
  FeatureSetFieldPresence2[FeatureSetFieldPresence2["EXPLICIT"] = 1] = "EXPLICIT";
  FeatureSetFieldPresence2[FeatureSetFieldPresence2["IMPLICIT"] = 2] = "IMPLICIT";
  FeatureSetFieldPresence2[FeatureSetFieldPresence2["LEGACY_REQUIRED"] = 3] = "LEGACY_REQUIRED";
  FeatureSetFieldPresence2[FeatureSetFieldPresence2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FeatureSetFieldPresence || (FeatureSetFieldPresence = {}));
var FeatureSetEnumType;
(function(FeatureSetEnumType2) {
  FeatureSetEnumType2[FeatureSetEnumType2["ENUM_TYPE_UNKNOWN"] = 0] = "ENUM_TYPE_UNKNOWN";
  FeatureSetEnumType2[FeatureSetEnumType2["OPEN"] = 1] = "OPEN";
  FeatureSetEnumType2[FeatureSetEnumType2["CLOSED"] = 2] = "CLOSED";
  FeatureSetEnumType2[FeatureSetEnumType2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FeatureSetEnumType || (FeatureSetEnumType = {}));
var FeatureSetRepeatedFieldEncoding;
(function(FeatureSetRepeatedFieldEncoding2) {
  FeatureSetRepeatedFieldEncoding2[FeatureSetRepeatedFieldEncoding2["REPEATED_FIELD_ENCODING_UNKNOWN"] = 0] = "REPEATED_FIELD_ENCODING_UNKNOWN";
  FeatureSetRepeatedFieldEncoding2[FeatureSetRepeatedFieldEncoding2["PACKED"] = 1] = "PACKED";
  FeatureSetRepeatedFieldEncoding2[FeatureSetRepeatedFieldEncoding2["EXPANDED"] = 2] = "EXPANDED";
  FeatureSetRepeatedFieldEncoding2[FeatureSetRepeatedFieldEncoding2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FeatureSetRepeatedFieldEncoding || (FeatureSetRepeatedFieldEncoding = {}));
var FeatureSetUtf8Validation;
(function(FeatureSetUtf8Validation2) {
  FeatureSetUtf8Validation2[FeatureSetUtf8Validation2["UTF8_VALIDATION_UNKNOWN"] = 0] = "UTF8_VALIDATION_UNKNOWN";
  FeatureSetUtf8Validation2[FeatureSetUtf8Validation2["VERIFY"] = 2] = "VERIFY";
  FeatureSetUtf8Validation2[FeatureSetUtf8Validation2["NONE"] = 3] = "NONE";
  FeatureSetUtf8Validation2[FeatureSetUtf8Validation2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FeatureSetUtf8Validation || (FeatureSetUtf8Validation = {}));
var FeatureSetMessageEncoding;
(function(FeatureSetMessageEncoding2) {
  FeatureSetMessageEncoding2[FeatureSetMessageEncoding2["MESSAGE_ENCODING_UNKNOWN"] = 0] = "MESSAGE_ENCODING_UNKNOWN";
  FeatureSetMessageEncoding2[FeatureSetMessageEncoding2["LENGTH_PREFIXED"] = 1] = "LENGTH_PREFIXED";
  FeatureSetMessageEncoding2[FeatureSetMessageEncoding2["DELIMITED"] = 2] = "DELIMITED";
  FeatureSetMessageEncoding2[FeatureSetMessageEncoding2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FeatureSetMessageEncoding || (FeatureSetMessageEncoding = {}));
var FeatureSetJsonFormat;
(function(FeatureSetJsonFormat2) {
  FeatureSetJsonFormat2[FeatureSetJsonFormat2["JSON_FORMAT_UNKNOWN"] = 0] = "JSON_FORMAT_UNKNOWN";
  FeatureSetJsonFormat2[FeatureSetJsonFormat2["ALLOW"] = 1] = "ALLOW";
  FeatureSetJsonFormat2[FeatureSetJsonFormat2["LEGACY_BEST_EFFORT"] = 2] = "LEGACY_BEST_EFFORT";
  FeatureSetJsonFormat2[FeatureSetJsonFormat2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FeatureSetJsonFormat || (FeatureSetJsonFormat = {}));
var GeneratedCodeInfoAnnotationSemantic;
(function(GeneratedCodeInfoAnnotationSemantic2) {
  GeneratedCodeInfoAnnotationSemantic2[GeneratedCodeInfoAnnotationSemantic2["NONE"] = 0] = "NONE";
  GeneratedCodeInfoAnnotationSemantic2[GeneratedCodeInfoAnnotationSemantic2["SET"] = 1] = "SET";
  GeneratedCodeInfoAnnotationSemantic2[GeneratedCodeInfoAnnotationSemantic2["ALIAS"] = 2] = "ALIAS";
  GeneratedCodeInfoAnnotationSemantic2[GeneratedCodeInfoAnnotationSemantic2["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GeneratedCodeInfoAnnotationSemantic || (GeneratedCodeInfoAnnotationSemantic = {}));

// node_modules/@sei-js/cosmos/dist/esm/encoding/google/protobuf/descriptor.js
var FileDescriptorSet = {
  $type: "google.protobuf.FileDescriptorSet",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.file) {
      FileDescriptorProto.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFileDescriptorSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.file.push(FileDescriptorProto.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      file: globalThis.Array.isArray(object == null ? void 0 : object.file) ? object.file.map((e) => FileDescriptorProto.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.file) == null ? void 0 : _a.length) {
      obj.file = message.file.map((e) => FileDescriptorProto.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return FileDescriptorSet.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseFileDescriptorSet();
    message.file = ((_a = object.file) == null ? void 0 : _a.map((e) => FileDescriptorProto.fromPartial(e))) || [];
    return message;
  }
};
var FileDescriptorProto = {
  $type: "google.protobuf.FileDescriptorProto",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== void 0 && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.package !== void 0 && message.package !== "") {
      writer.uint32(18).string(message.package);
    }
    for (const v of message.dependency) {
      writer.uint32(26).string(v);
    }
    writer.uint32(82).fork();
    for (const v of message.public_dependency) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(90).fork();
    for (const v of message.weak_dependency) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.message_type) {
      DescriptorProto.encode(v, writer.uint32(34).fork()).join();
    }
    for (const v of message.enum_type) {
      EnumDescriptorProto.encode(v, writer.uint32(42).fork()).join();
    }
    for (const v of message.service) {
      ServiceDescriptorProto.encode(v, writer.uint32(50).fork()).join();
    }
    for (const v of message.extension) {
      FieldDescriptorProto.encode(v, writer.uint32(58).fork()).join();
    }
    if (message.options !== void 0) {
      FileOptions.encode(message.options, writer.uint32(66).fork()).join();
    }
    if (message.source_code_info !== void 0) {
      SourceCodeInfo.encode(message.source_code_info, writer.uint32(74).fork()).join();
    }
    if (message.syntax !== void 0 && message.syntax !== "") {
      writer.uint32(98).string(message.syntax);
    }
    if (message.edition !== void 0 && message.edition !== 0) {
      writer.uint32(112).int32(message.edition);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFileDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.package = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.dependency.push(reader.string());
          continue;
        case 10:
          if (tag === 80) {
            message.public_dependency.push(reader.int32());
            continue;
          }
          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.public_dependency.push(reader.int32());
            }
            continue;
          }
          break;
        case 11:
          if (tag === 88) {
            message.weak_dependency.push(reader.int32());
            continue;
          }
          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.weak_dependency.push(reader.int32());
            }
            continue;
          }
          break;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.message_type.push(DescriptorProto.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.enum_type.push(EnumDescriptorProto.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.service.push(ServiceDescriptorProto.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.extension.push(FieldDescriptorProto.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.options = FileOptions.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.source_code_info = SourceCodeInfo.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }
          message.syntax = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }
          message.edition = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet109(object.name) ? globalThis.String(object.name) : "",
      package: isSet109(object.package) ? globalThis.String(object.package) : "",
      dependency: globalThis.Array.isArray(object == null ? void 0 : object.dependency) ? object.dependency.map((e) => globalThis.String(e)) : [],
      public_dependency: globalThis.Array.isArray(object == null ? void 0 : object.public_dependency) ? object.public_dependency.map((e) => globalThis.Number(e)) : [],
      weak_dependency: globalThis.Array.isArray(object == null ? void 0 : object.weak_dependency) ? object.weak_dependency.map((e) => globalThis.Number(e)) : [],
      message_type: globalThis.Array.isArray(object == null ? void 0 : object.message_type) ? object.message_type.map((e) => DescriptorProto.fromJSON(e)) : [],
      enum_type: globalThis.Array.isArray(object == null ? void 0 : object.enum_type) ? object.enum_type.map((e) => EnumDescriptorProto.fromJSON(e)) : [],
      service: globalThis.Array.isArray(object == null ? void 0 : object.service) ? object.service.map((e) => ServiceDescriptorProto.fromJSON(e)) : [],
      extension: globalThis.Array.isArray(object == null ? void 0 : object.extension) ? object.extension.map((e) => FieldDescriptorProto.fromJSON(e)) : [],
      options: isSet109(object.options) ? FileOptions.fromJSON(object.options) : void 0,
      source_code_info: isSet109(object.source_code_info) ? SourceCodeInfo.fromJSON(object.source_code_info) : void 0,
      syntax: isSet109(object.syntax) ? globalThis.String(object.syntax) : "",
      edition: isSet109(object.edition) ? editionFromJSON(object.edition) : 0
    };
  },
  toJSON(message) {
    var _a, _b, _c, _d, _e, _f, _g;
    const obj = {};
    if (message.name !== void 0 && message.name !== "") {
      obj.name = message.name;
    }
    if (message.package !== void 0 && message.package !== "") {
      obj.package = message.package;
    }
    if ((_a = message.dependency) == null ? void 0 : _a.length) {
      obj.dependency = message.dependency;
    }
    if ((_b = message.public_dependency) == null ? void 0 : _b.length) {
      obj.public_dependency = message.public_dependency.map((e) => Math.round(e));
    }
    if ((_c = message.weak_dependency) == null ? void 0 : _c.length) {
      obj.weak_dependency = message.weak_dependency.map((e) => Math.round(e));
    }
    if ((_d = message.message_type) == null ? void 0 : _d.length) {
      obj.message_type = message.message_type.map((e) => DescriptorProto.toJSON(e));
    }
    if ((_e = message.enum_type) == null ? void 0 : _e.length) {
      obj.enum_type = message.enum_type.map((e) => EnumDescriptorProto.toJSON(e));
    }
    if ((_f = message.service) == null ? void 0 : _f.length) {
      obj.service = message.service.map((e) => ServiceDescriptorProto.toJSON(e));
    }
    if ((_g = message.extension) == null ? void 0 : _g.length) {
      obj.extension = message.extension.map((e) => FieldDescriptorProto.toJSON(e));
    }
    if (message.options !== void 0) {
      obj.options = FileOptions.toJSON(message.options);
    }
    if (message.source_code_info !== void 0) {
      obj.source_code_info = SourceCodeInfo.toJSON(message.source_code_info);
    }
    if (message.syntax !== void 0 && message.syntax !== "") {
      obj.syntax = message.syntax;
    }
    if (message.edition !== void 0 && message.edition !== 0) {
      obj.edition = editionToJSON(message.edition);
    }
    return obj;
  },
  create(base) {
    return FileDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e, _f, _g;
    const message = createBaseFileDescriptorProto();
    message.name = object.name ?? "";
    message.package = object.package ?? "";
    message.dependency = ((_a = object.dependency) == null ? void 0 : _a.map((e) => e)) || [];
    message.public_dependency = ((_b = object.public_dependency) == null ? void 0 : _b.map((e) => e)) || [];
    message.weak_dependency = ((_c = object.weak_dependency) == null ? void 0 : _c.map((e) => e)) || [];
    message.message_type = ((_d = object.message_type) == null ? void 0 : _d.map((e) => DescriptorProto.fromPartial(e))) || [];
    message.enum_type = ((_e = object.enum_type) == null ? void 0 : _e.map((e) => EnumDescriptorProto.fromPartial(e))) || [];
    message.service = ((_f = object.service) == null ? void 0 : _f.map((e) => ServiceDescriptorProto.fromPartial(e))) || [];
    message.extension = ((_g = object.extension) == null ? void 0 : _g.map((e) => FieldDescriptorProto.fromPartial(e))) || [];
    message.options = object.options !== void 0 && object.options !== null ? FileOptions.fromPartial(object.options) : void 0;
    message.source_code_info = object.source_code_info !== void 0 && object.source_code_info !== null ? SourceCodeInfo.fromPartial(object.source_code_info) : void 0;
    message.syntax = object.syntax ?? "";
    message.edition = object.edition ?? 0;
    return message;
  }
};
var DescriptorProto = {
  $type: "google.protobuf.DescriptorProto",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== void 0 && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.field) {
      FieldDescriptorProto.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.extension) {
      FieldDescriptorProto.encode(v, writer.uint32(50).fork()).join();
    }
    for (const v of message.nested_type) {
      DescriptorProto.encode(v, writer.uint32(26).fork()).join();
    }
    for (const v of message.enum_type) {
      EnumDescriptorProto.encode(v, writer.uint32(34).fork()).join();
    }
    for (const v of message.extension_range) {
      DescriptorProtoExtensionRange.encode(v, writer.uint32(42).fork()).join();
    }
    for (const v of message.oneof_decl) {
      OneofDescriptorProto.encode(v, writer.uint32(66).fork()).join();
    }
    if (message.options !== void 0) {
      MessageOptions.encode(message.options, writer.uint32(58).fork()).join();
    }
    for (const v of message.reserved_range) {
      DescriptorProtoReservedRange.encode(v, writer.uint32(74).fork()).join();
    }
    for (const v of message.reserved_name) {
      writer.uint32(82).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.field.push(FieldDescriptorProto.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.extension.push(FieldDescriptorProto.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.nested_type.push(DescriptorProto.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.enum_type.push(EnumDescriptorProto.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.extension_range.push(DescriptorProtoExtensionRange.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.oneof_decl.push(OneofDescriptorProto.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.options = MessageOptions.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.reserved_range.push(DescriptorProtoReservedRange.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.reserved_name.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet109(object.name) ? globalThis.String(object.name) : "",
      field: globalThis.Array.isArray(object == null ? void 0 : object.field) ? object.field.map((e) => FieldDescriptorProto.fromJSON(e)) : [],
      extension: globalThis.Array.isArray(object == null ? void 0 : object.extension) ? object.extension.map((e) => FieldDescriptorProto.fromJSON(e)) : [],
      nested_type: globalThis.Array.isArray(object == null ? void 0 : object.nested_type) ? object.nested_type.map((e) => DescriptorProto.fromJSON(e)) : [],
      enum_type: globalThis.Array.isArray(object == null ? void 0 : object.enum_type) ? object.enum_type.map((e) => EnumDescriptorProto.fromJSON(e)) : [],
      extension_range: globalThis.Array.isArray(object == null ? void 0 : object.extension_range) ? object.extension_range.map((e) => DescriptorProtoExtensionRange.fromJSON(e)) : [],
      oneof_decl: globalThis.Array.isArray(object == null ? void 0 : object.oneof_decl) ? object.oneof_decl.map((e) => OneofDescriptorProto.fromJSON(e)) : [],
      options: isSet109(object.options) ? MessageOptions.fromJSON(object.options) : void 0,
      reserved_range: globalThis.Array.isArray(object == null ? void 0 : object.reserved_range) ? object.reserved_range.map((e) => DescriptorProtoReservedRange.fromJSON(e)) : [],
      reserved_name: globalThis.Array.isArray(object == null ? void 0 : object.reserved_name) ? object.reserved_name.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const obj = {};
    if (message.name !== void 0 && message.name !== "") {
      obj.name = message.name;
    }
    if ((_a = message.field) == null ? void 0 : _a.length) {
      obj.field = message.field.map((e) => FieldDescriptorProto.toJSON(e));
    }
    if ((_b = message.extension) == null ? void 0 : _b.length) {
      obj.extension = message.extension.map((e) => FieldDescriptorProto.toJSON(e));
    }
    if ((_c = message.nested_type) == null ? void 0 : _c.length) {
      obj.nested_type = message.nested_type.map((e) => DescriptorProto.toJSON(e));
    }
    if ((_d = message.enum_type) == null ? void 0 : _d.length) {
      obj.enum_type = message.enum_type.map((e) => EnumDescriptorProto.toJSON(e));
    }
    if ((_e = message.extension_range) == null ? void 0 : _e.length) {
      obj.extension_range = message.extension_range.map((e) => DescriptorProtoExtensionRange.toJSON(e));
    }
    if ((_f = message.oneof_decl) == null ? void 0 : _f.length) {
      obj.oneof_decl = message.oneof_decl.map((e) => OneofDescriptorProto.toJSON(e));
    }
    if (message.options !== void 0) {
      obj.options = MessageOptions.toJSON(message.options);
    }
    if ((_g = message.reserved_range) == null ? void 0 : _g.length) {
      obj.reserved_range = message.reserved_range.map((e) => DescriptorProtoReservedRange.toJSON(e));
    }
    if ((_h = message.reserved_name) == null ? void 0 : _h.length) {
      obj.reserved_name = message.reserved_name;
    }
    return obj;
  },
  create(base) {
    return DescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const message = createBaseDescriptorProto();
    message.name = object.name ?? "";
    message.field = ((_a = object.field) == null ? void 0 : _a.map((e) => FieldDescriptorProto.fromPartial(e))) || [];
    message.extension = ((_b = object.extension) == null ? void 0 : _b.map((e) => FieldDescriptorProto.fromPartial(e))) || [];
    message.nested_type = ((_c = object.nested_type) == null ? void 0 : _c.map((e) => DescriptorProto.fromPartial(e))) || [];
    message.enum_type = ((_d = object.enum_type) == null ? void 0 : _d.map((e) => EnumDescriptorProto.fromPartial(e))) || [];
    message.extension_range = ((_e = object.extension_range) == null ? void 0 : _e.map((e) => DescriptorProtoExtensionRange.fromPartial(e))) || [];
    message.oneof_decl = ((_f = object.oneof_decl) == null ? void 0 : _f.map((e) => OneofDescriptorProto.fromPartial(e))) || [];
    message.options = object.options !== void 0 && object.options !== null ? MessageOptions.fromPartial(object.options) : void 0;
    message.reserved_range = ((_g = object.reserved_range) == null ? void 0 : _g.map((e) => DescriptorProtoReservedRange.fromPartial(e))) || [];
    message.reserved_name = ((_h = object.reserved_name) == null ? void 0 : _h.map((e) => e)) || [];
    return message;
  }
};
var DescriptorProtoExtensionRange = {
  $type: "google.protobuf.DescriptorProto.ExtensionRange",
  encode(message, writer = new BinaryWriter()) {
    if (message.start !== void 0 && message.start !== 0) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== void 0 && message.end !== 0) {
      writer.uint32(16).int32(message.end);
    }
    if (message.options !== void 0) {
      ExtensionRangeOptions.encode(message.options, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDescriptorProtoExtensionRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.start = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.end = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.options = ExtensionRangeOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      start: isSet109(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet109(object.end) ? globalThis.Number(object.end) : 0,
      options: isSet109(object.options) ? ExtensionRangeOptions.fromJSON(object.options) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.start !== void 0 && message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== void 0 && message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    if (message.options !== void 0) {
      obj.options = ExtensionRangeOptions.toJSON(message.options);
    }
    return obj;
  },
  create(base) {
    return DescriptorProtoExtensionRange.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDescriptorProtoExtensionRange();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    message.options = object.options !== void 0 && object.options !== null ? ExtensionRangeOptions.fromPartial(object.options) : void 0;
    return message;
  }
};
var DescriptorProtoReservedRange = {
  $type: "google.protobuf.DescriptorProto.ReservedRange",
  encode(message, writer = new BinaryWriter()) {
    if (message.start !== void 0 && message.start !== 0) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== void 0 && message.end !== 0) {
      writer.uint32(16).int32(message.end);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDescriptorProtoReservedRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.start = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.end = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      start: isSet109(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet109(object.end) ? globalThis.Number(object.end) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.start !== void 0 && message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== void 0 && message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    return obj;
  },
  create(base) {
    return DescriptorProtoReservedRange.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDescriptorProtoReservedRange();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    return message;
  }
};
var ExtensionRangeOptions = {
  $type: "google.protobuf.ExtensionRangeOptions",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).join();
    }
    for (const v of message.declaration) {
      ExtensionRangeOptionsDeclaration.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.features !== void 0) {
      FeatureSet.encode(message.features, writer.uint32(402).fork()).join();
    }
    if (message.verification !== void 0 && message.verification !== 1) {
      writer.uint32(24).int32(message.verification);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseExtensionRangeOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.declaration.push(ExtensionRangeOptionsDeclaration.decode(reader, reader.uint32()));
          continue;
        case 50:
          if (tag !== 402) {
            break;
          }
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.verification = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      uninterpreted_option: globalThis.Array.isArray(object == null ? void 0 : object.uninterpreted_option) ? object.uninterpreted_option.map((e) => UninterpretedOption.fromJSON(e)) : [],
      declaration: globalThis.Array.isArray(object == null ? void 0 : object.declaration) ? object.declaration.map((e) => ExtensionRangeOptionsDeclaration.fromJSON(e)) : [],
      features: isSet109(object.features) ? FeatureSet.fromJSON(object.features) : void 0,
      verification: isSet109(object.verification) ? extensionRangeOptionsVerificationStateFromJSON(object.verification) : 1
    };
  },
  toJSON(message) {
    var _a, _b;
    const obj = {};
    if ((_a = message.uninterpreted_option) == null ? void 0 : _a.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) => UninterpretedOption.toJSON(e));
    }
    if ((_b = message.declaration) == null ? void 0 : _b.length) {
      obj.declaration = message.declaration.map((e) => ExtensionRangeOptionsDeclaration.toJSON(e));
    }
    if (message.features !== void 0) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (message.verification !== void 0 && message.verification !== 1) {
      obj.verification = extensionRangeOptionsVerificationStateToJSON(message.verification);
    }
    return obj;
  },
  create(base) {
    return ExtensionRangeOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b;
    const message = createBaseExtensionRangeOptions();
    message.uninterpreted_option = ((_a = object.uninterpreted_option) == null ? void 0 : _a.map((e) => UninterpretedOption.fromPartial(e))) || [];
    message.declaration = ((_b = object.declaration) == null ? void 0 : _b.map((e) => ExtensionRangeOptionsDeclaration.fromPartial(e))) || [];
    message.features = object.features !== void 0 && object.features !== null ? FeatureSet.fromPartial(object.features) : void 0;
    message.verification = object.verification ?? 1;
    return message;
  }
};
var ExtensionRangeOptionsDeclaration = {
  $type: "google.protobuf.ExtensionRangeOptions.Declaration",
  encode(message, writer = new BinaryWriter()) {
    if (message.number !== void 0 && message.number !== 0) {
      writer.uint32(8).int32(message.number);
    }
    if (message.full_name !== void 0 && message.full_name !== "") {
      writer.uint32(18).string(message.full_name);
    }
    if (message.type !== void 0 && message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.reserved !== void 0 && message.reserved !== false) {
      writer.uint32(40).bool(message.reserved);
    }
    if (message.repeated !== void 0 && message.repeated !== false) {
      writer.uint32(48).bool(message.repeated);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseExtensionRangeOptionsDeclaration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.number = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.full_name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.type = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.reserved = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.repeated = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      number: isSet109(object.number) ? globalThis.Number(object.number) : 0,
      full_name: isSet109(object.full_name) ? globalThis.String(object.full_name) : "",
      type: isSet109(object.type) ? globalThis.String(object.type) : "",
      reserved: isSet109(object.reserved) ? globalThis.Boolean(object.reserved) : false,
      repeated: isSet109(object.repeated) ? globalThis.Boolean(object.repeated) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.number !== void 0 && message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (message.full_name !== void 0 && message.full_name !== "") {
      obj.full_name = message.full_name;
    }
    if (message.type !== void 0 && message.type !== "") {
      obj.type = message.type;
    }
    if (message.reserved !== void 0 && message.reserved !== false) {
      obj.reserved = message.reserved;
    }
    if (message.repeated !== void 0 && message.repeated !== false) {
      obj.repeated = message.repeated;
    }
    return obj;
  },
  create(base) {
    return ExtensionRangeOptionsDeclaration.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseExtensionRangeOptionsDeclaration();
    message.number = object.number ?? 0;
    message.full_name = object.full_name ?? "";
    message.type = object.type ?? "";
    message.reserved = object.reserved ?? false;
    message.repeated = object.repeated ?? false;
    return message;
  }
};
var FieldDescriptorProto = {
  $type: "google.protobuf.FieldDescriptorProto",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== void 0 && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.number !== void 0 && message.number !== 0) {
      writer.uint32(24).int32(message.number);
    }
    if (message.label !== void 0 && message.label !== 1) {
      writer.uint32(32).int32(message.label);
    }
    if (message.type !== void 0 && message.type !== 1) {
      writer.uint32(40).int32(message.type);
    }
    if (message.type_name !== void 0 && message.type_name !== "") {
      writer.uint32(50).string(message.type_name);
    }
    if (message.extendee !== void 0 && message.extendee !== "") {
      writer.uint32(18).string(message.extendee);
    }
    if (message.default_value !== void 0 && message.default_value !== "") {
      writer.uint32(58).string(message.default_value);
    }
    if (message.oneof_index !== void 0 && message.oneof_index !== 0) {
      writer.uint32(72).int32(message.oneof_index);
    }
    if (message.json_name !== void 0 && message.json_name !== "") {
      writer.uint32(82).string(message.json_name);
    }
    if (message.options !== void 0) {
      FieldOptions.encode(message.options, writer.uint32(66).fork()).join();
    }
    if (message.proto3_optional !== void 0 && message.proto3_optional !== false) {
      writer.uint32(136).bool(message.proto3_optional);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFieldDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.number = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.label = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.type_name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.extendee = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.default_value = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }
          message.oneof_index = reader.int32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.json_name = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.options = FieldOptions.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }
          message.proto3_optional = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet109(object.name) ? globalThis.String(object.name) : "",
      number: isSet109(object.number) ? globalThis.Number(object.number) : 0,
      label: isSet109(object.label) ? fieldDescriptorProtoLabelFromJSON(object.label) : 1,
      type: isSet109(object.type) ? fieldDescriptorProtoTypeFromJSON(object.type) : 1,
      type_name: isSet109(object.type_name) ? globalThis.String(object.type_name) : "",
      extendee: isSet109(object.extendee) ? globalThis.String(object.extendee) : "",
      default_value: isSet109(object.default_value) ? globalThis.String(object.default_value) : "",
      oneof_index: isSet109(object.oneof_index) ? globalThis.Number(object.oneof_index) : 0,
      json_name: isSet109(object.json_name) ? globalThis.String(object.json_name) : "",
      options: isSet109(object.options) ? FieldOptions.fromJSON(object.options) : void 0,
      proto3_optional: isSet109(object.proto3_optional) ? globalThis.Boolean(object.proto3_optional) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== void 0 && message.name !== "") {
      obj.name = message.name;
    }
    if (message.number !== void 0 && message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (message.label !== void 0 && message.label !== 1) {
      obj.label = fieldDescriptorProtoLabelToJSON(message.label);
    }
    if (message.type !== void 0 && message.type !== 1) {
      obj.type = fieldDescriptorProtoTypeToJSON(message.type);
    }
    if (message.type_name !== void 0 && message.type_name !== "") {
      obj.type_name = message.type_name;
    }
    if (message.extendee !== void 0 && message.extendee !== "") {
      obj.extendee = message.extendee;
    }
    if (message.default_value !== void 0 && message.default_value !== "") {
      obj.default_value = message.default_value;
    }
    if (message.oneof_index !== void 0 && message.oneof_index !== 0) {
      obj.oneof_index = Math.round(message.oneof_index);
    }
    if (message.json_name !== void 0 && message.json_name !== "") {
      obj.json_name = message.json_name;
    }
    if (message.options !== void 0) {
      obj.options = FieldOptions.toJSON(message.options);
    }
    if (message.proto3_optional !== void 0 && message.proto3_optional !== false) {
      obj.proto3_optional = message.proto3_optional;
    }
    return obj;
  },
  create(base) {
    return FieldDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFieldDescriptorProto();
    message.name = object.name ?? "";
    message.number = object.number ?? 0;
    message.label = object.label ?? 1;
    message.type = object.type ?? 1;
    message.type_name = object.type_name ?? "";
    message.extendee = object.extendee ?? "";
    message.default_value = object.default_value ?? "";
    message.oneof_index = object.oneof_index ?? 0;
    message.json_name = object.json_name ?? "";
    message.options = object.options !== void 0 && object.options !== null ? FieldOptions.fromPartial(object.options) : void 0;
    message.proto3_optional = object.proto3_optional ?? false;
    return message;
  }
};
var OneofDescriptorProto = {
  $type: "google.protobuf.OneofDescriptorProto",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== void 0 && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.options !== void 0) {
      OneofOptions.encode(message.options, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseOneofDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.options = OneofOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet109(object.name) ? globalThis.String(object.name) : "",
      options: isSet109(object.options) ? OneofOptions.fromJSON(object.options) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== void 0 && message.name !== "") {
      obj.name = message.name;
    }
    if (message.options !== void 0) {
      obj.options = OneofOptions.toJSON(message.options);
    }
    return obj;
  },
  create(base) {
    return OneofDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseOneofDescriptorProto();
    message.name = object.name ?? "";
    message.options = object.options !== void 0 && object.options !== null ? OneofOptions.fromPartial(object.options) : void 0;
    return message;
  }
};
var EnumDescriptorProto = {
  $type: "google.protobuf.EnumDescriptorProto",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== void 0 && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.value) {
      EnumValueDescriptorProto.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.options !== void 0) {
      EnumOptions.encode(message.options, writer.uint32(26).fork()).join();
    }
    for (const v of message.reserved_range) {
      EnumDescriptorProtoEnumReservedRange.encode(v, writer.uint32(34).fork()).join();
    }
    for (const v of message.reserved_name) {
      writer.uint32(42).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEnumDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value.push(EnumValueDescriptorProto.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.options = EnumOptions.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.reserved_range.push(EnumDescriptorProtoEnumReservedRange.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.reserved_name.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet109(object.name) ? globalThis.String(object.name) : "",
      value: globalThis.Array.isArray(object == null ? void 0 : object.value) ? object.value.map((e) => EnumValueDescriptorProto.fromJSON(e)) : [],
      options: isSet109(object.options) ? EnumOptions.fromJSON(object.options) : void 0,
      reserved_range: globalThis.Array.isArray(object == null ? void 0 : object.reserved_range) ? object.reserved_range.map((e) => EnumDescriptorProtoEnumReservedRange.fromJSON(e)) : [],
      reserved_name: globalThis.Array.isArray(object == null ? void 0 : object.reserved_name) ? object.reserved_name.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b, _c;
    const obj = {};
    if (message.name !== void 0 && message.name !== "") {
      obj.name = message.name;
    }
    if ((_a = message.value) == null ? void 0 : _a.length) {
      obj.value = message.value.map((e) => EnumValueDescriptorProto.toJSON(e));
    }
    if (message.options !== void 0) {
      obj.options = EnumOptions.toJSON(message.options);
    }
    if ((_b = message.reserved_range) == null ? void 0 : _b.length) {
      obj.reserved_range = message.reserved_range.map((e) => EnumDescriptorProtoEnumReservedRange.toJSON(e));
    }
    if ((_c = message.reserved_name) == null ? void 0 : _c.length) {
      obj.reserved_name = message.reserved_name;
    }
    return obj;
  },
  create(base) {
    return EnumDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseEnumDescriptorProto();
    message.name = object.name ?? "";
    message.value = ((_a = object.value) == null ? void 0 : _a.map((e) => EnumValueDescriptorProto.fromPartial(e))) || [];
    message.options = object.options !== void 0 && object.options !== null ? EnumOptions.fromPartial(object.options) : void 0;
    message.reserved_range = ((_b = object.reserved_range) == null ? void 0 : _b.map((e) => EnumDescriptorProtoEnumReservedRange.fromPartial(e))) || [];
    message.reserved_name = ((_c = object.reserved_name) == null ? void 0 : _c.map((e) => e)) || [];
    return message;
  }
};
var EnumDescriptorProtoEnumReservedRange = {
  $type: "google.protobuf.EnumDescriptorProto.EnumReservedRange",
  encode(message, writer = new BinaryWriter()) {
    if (message.start !== void 0 && message.start !== 0) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== void 0 && message.end !== 0) {
      writer.uint32(16).int32(message.end);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEnumDescriptorProtoEnumReservedRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.start = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.end = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      start: isSet109(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet109(object.end) ? globalThis.Number(object.end) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.start !== void 0 && message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== void 0 && message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    return obj;
  },
  create(base) {
    return EnumDescriptorProtoEnumReservedRange.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEnumDescriptorProtoEnumReservedRange();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    return message;
  }
};
var EnumValueDescriptorProto = {
  $type: "google.protobuf.EnumValueDescriptorProto",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== void 0 && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.number !== void 0 && message.number !== 0) {
      writer.uint32(16).int32(message.number);
    }
    if (message.options !== void 0) {
      EnumValueOptions.encode(message.options, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEnumValueDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.number = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.options = EnumValueOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet109(object.name) ? globalThis.String(object.name) : "",
      number: isSet109(object.number) ? globalThis.Number(object.number) : 0,
      options: isSet109(object.options) ? EnumValueOptions.fromJSON(object.options) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== void 0 && message.name !== "") {
      obj.name = message.name;
    }
    if (message.number !== void 0 && message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (message.options !== void 0) {
      obj.options = EnumValueOptions.toJSON(message.options);
    }
    return obj;
  },
  create(base) {
    return EnumValueDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEnumValueDescriptorProto();
    message.name = object.name ?? "";
    message.number = object.number ?? 0;
    message.options = object.options !== void 0 && object.options !== null ? EnumValueOptions.fromPartial(object.options) : void 0;
    return message;
  }
};
var ServiceDescriptorProto = {
  $type: "google.protobuf.ServiceDescriptorProto",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== void 0 && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.method) {
      MethodDescriptorProto.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.options !== void 0) {
      ServiceOptions.encode(message.options, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseServiceDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.method.push(MethodDescriptorProto.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.options = ServiceOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet109(object.name) ? globalThis.String(object.name) : "",
      method: globalThis.Array.isArray(object == null ? void 0 : object.method) ? object.method.map((e) => MethodDescriptorProto.fromJSON(e)) : [],
      options: isSet109(object.options) ? ServiceOptions.fromJSON(object.options) : void 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.name !== void 0 && message.name !== "") {
      obj.name = message.name;
    }
    if ((_a = message.method) == null ? void 0 : _a.length) {
      obj.method = message.method.map((e) => MethodDescriptorProto.toJSON(e));
    }
    if (message.options !== void 0) {
      obj.options = ServiceOptions.toJSON(message.options);
    }
    return obj;
  },
  create(base) {
    return ServiceDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseServiceDescriptorProto();
    message.name = object.name ?? "";
    message.method = ((_a = object.method) == null ? void 0 : _a.map((e) => MethodDescriptorProto.fromPartial(e))) || [];
    message.options = object.options !== void 0 && object.options !== null ? ServiceOptions.fromPartial(object.options) : void 0;
    return message;
  }
};
var MethodDescriptorProto = {
  $type: "google.protobuf.MethodDescriptorProto",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== void 0 && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.input_type !== void 0 && message.input_type !== "") {
      writer.uint32(18).string(message.input_type);
    }
    if (message.output_type !== void 0 && message.output_type !== "") {
      writer.uint32(26).string(message.output_type);
    }
    if (message.options !== void 0) {
      MethodOptions.encode(message.options, writer.uint32(34).fork()).join();
    }
    if (message.client_streaming !== void 0 && message.client_streaming !== false) {
      writer.uint32(40).bool(message.client_streaming);
    }
    if (message.server_streaming !== void 0 && message.server_streaming !== false) {
      writer.uint32(48).bool(message.server_streaming);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMethodDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.input_type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.output_type = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.options = MethodOptions.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.client_streaming = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.server_streaming = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet109(object.name) ? globalThis.String(object.name) : "",
      input_type: isSet109(object.input_type) ? globalThis.String(object.input_type) : "",
      output_type: isSet109(object.output_type) ? globalThis.String(object.output_type) : "",
      options: isSet109(object.options) ? MethodOptions.fromJSON(object.options) : void 0,
      client_streaming: isSet109(object.client_streaming) ? globalThis.Boolean(object.client_streaming) : false,
      server_streaming: isSet109(object.server_streaming) ? globalThis.Boolean(object.server_streaming) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== void 0 && message.name !== "") {
      obj.name = message.name;
    }
    if (message.input_type !== void 0 && message.input_type !== "") {
      obj.input_type = message.input_type;
    }
    if (message.output_type !== void 0 && message.output_type !== "") {
      obj.output_type = message.output_type;
    }
    if (message.options !== void 0) {
      obj.options = MethodOptions.toJSON(message.options);
    }
    if (message.client_streaming !== void 0 && message.client_streaming !== false) {
      obj.client_streaming = message.client_streaming;
    }
    if (message.server_streaming !== void 0 && message.server_streaming !== false) {
      obj.server_streaming = message.server_streaming;
    }
    return obj;
  },
  create(base) {
    return MethodDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMethodDescriptorProto();
    message.name = object.name ?? "";
    message.input_type = object.input_type ?? "";
    message.output_type = object.output_type ?? "";
    message.options = object.options !== void 0 && object.options !== null ? MethodOptions.fromPartial(object.options) : void 0;
    message.client_streaming = object.client_streaming ?? false;
    message.server_streaming = object.server_streaming ?? false;
    return message;
  }
};
var FileOptions = {
  $type: "google.protobuf.FileOptions",
  encode(message, writer = new BinaryWriter()) {
    if (message.java_package !== void 0 && message.java_package !== "") {
      writer.uint32(10).string(message.java_package);
    }
    if (message.java_outer_classname !== void 0 && message.java_outer_classname !== "") {
      writer.uint32(66).string(message.java_outer_classname);
    }
    if (message.java_multiple_files !== void 0 && message.java_multiple_files !== false) {
      writer.uint32(80).bool(message.java_multiple_files);
    }
    if (message.java_generate_equals_and_hash !== void 0 && message.java_generate_equals_and_hash !== false) {
      writer.uint32(160).bool(message.java_generate_equals_and_hash);
    }
    if (message.java_string_check_utf8 !== void 0 && message.java_string_check_utf8 !== false) {
      writer.uint32(216).bool(message.java_string_check_utf8);
    }
    if (message.optimize_for !== void 0 && message.optimize_for !== 1) {
      writer.uint32(72).int32(message.optimize_for);
    }
    if (message.go_package !== void 0 && message.go_package !== "") {
      writer.uint32(90).string(message.go_package);
    }
    if (message.cc_generic_services !== void 0 && message.cc_generic_services !== false) {
      writer.uint32(128).bool(message.cc_generic_services);
    }
    if (message.java_generic_services !== void 0 && message.java_generic_services !== false) {
      writer.uint32(136).bool(message.java_generic_services);
    }
    if (message.py_generic_services !== void 0 && message.py_generic_services !== false) {
      writer.uint32(144).bool(message.py_generic_services);
    }
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      writer.uint32(184).bool(message.deprecated);
    }
    if (message.cc_enable_arenas !== void 0 && message.cc_enable_arenas !== true) {
      writer.uint32(248).bool(message.cc_enable_arenas);
    }
    if (message.objc_class_prefix !== void 0 && message.objc_class_prefix !== "") {
      writer.uint32(290).string(message.objc_class_prefix);
    }
    if (message.csharp_namespace !== void 0 && message.csharp_namespace !== "") {
      writer.uint32(298).string(message.csharp_namespace);
    }
    if (message.swift_prefix !== void 0 && message.swift_prefix !== "") {
      writer.uint32(314).string(message.swift_prefix);
    }
    if (message.php_class_prefix !== void 0 && message.php_class_prefix !== "") {
      writer.uint32(322).string(message.php_class_prefix);
    }
    if (message.php_namespace !== void 0 && message.php_namespace !== "") {
      writer.uint32(330).string(message.php_namespace);
    }
    if (message.php_metadata_namespace !== void 0 && message.php_metadata_namespace !== "") {
      writer.uint32(354).string(message.php_metadata_namespace);
    }
    if (message.ruby_package !== void 0 && message.ruby_package !== "") {
      writer.uint32(362).string(message.ruby_package);
    }
    if (message.features !== void 0) {
      FeatureSet.encode(message.features, writer.uint32(402).fork()).join();
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFileOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.java_package = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.java_outer_classname = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }
          message.java_multiple_files = reader.bool();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }
          message.java_generate_equals_and_hash = reader.bool();
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }
          message.java_string_check_utf8 = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }
          message.optimize_for = reader.int32();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.go_package = reader.string();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }
          message.cc_generic_services = reader.bool();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }
          message.java_generic_services = reader.bool();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }
          message.py_generic_services = reader.bool();
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 31:
          if (tag !== 248) {
            break;
          }
          message.cc_enable_arenas = reader.bool();
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }
          message.objc_class_prefix = reader.string();
          continue;
        case 37:
          if (tag !== 298) {
            break;
          }
          message.csharp_namespace = reader.string();
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }
          message.swift_prefix = reader.string();
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }
          message.php_class_prefix = reader.string();
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }
          message.php_namespace = reader.string();
          continue;
        case 44:
          if (tag !== 354) {
            break;
          }
          message.php_metadata_namespace = reader.string();
          continue;
        case 45:
          if (tag !== 362) {
            break;
          }
          message.ruby_package = reader.string();
          continue;
        case 50:
          if (tag !== 402) {
            break;
          }
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      java_package: isSet109(object.java_package) ? globalThis.String(object.java_package) : "",
      java_outer_classname: isSet109(object.java_outer_classname) ? globalThis.String(object.java_outer_classname) : "",
      java_multiple_files: isSet109(object.java_multiple_files) ? globalThis.Boolean(object.java_multiple_files) : false,
      java_generate_equals_and_hash: isSet109(object.java_generate_equals_and_hash) ? globalThis.Boolean(object.java_generate_equals_and_hash) : false,
      java_string_check_utf8: isSet109(object.java_string_check_utf8) ? globalThis.Boolean(object.java_string_check_utf8) : false,
      optimize_for: isSet109(object.optimize_for) ? fileOptionsOptimizeModeFromJSON(object.optimize_for) : 1,
      go_package: isSet109(object.go_package) ? globalThis.String(object.go_package) : "",
      cc_generic_services: isSet109(object.cc_generic_services) ? globalThis.Boolean(object.cc_generic_services) : false,
      java_generic_services: isSet109(object.java_generic_services) ? globalThis.Boolean(object.java_generic_services) : false,
      py_generic_services: isSet109(object.py_generic_services) ? globalThis.Boolean(object.py_generic_services) : false,
      deprecated: isSet109(object.deprecated) ? globalThis.Boolean(object.deprecated) : false,
      cc_enable_arenas: isSet109(object.cc_enable_arenas) ? globalThis.Boolean(object.cc_enable_arenas) : true,
      objc_class_prefix: isSet109(object.objc_class_prefix) ? globalThis.String(object.objc_class_prefix) : "",
      csharp_namespace: isSet109(object.csharp_namespace) ? globalThis.String(object.csharp_namespace) : "",
      swift_prefix: isSet109(object.swift_prefix) ? globalThis.String(object.swift_prefix) : "",
      php_class_prefix: isSet109(object.php_class_prefix) ? globalThis.String(object.php_class_prefix) : "",
      php_namespace: isSet109(object.php_namespace) ? globalThis.String(object.php_namespace) : "",
      php_metadata_namespace: isSet109(object.php_metadata_namespace) ? globalThis.String(object.php_metadata_namespace) : "",
      ruby_package: isSet109(object.ruby_package) ? globalThis.String(object.ruby_package) : "",
      features: isSet109(object.features) ? FeatureSet.fromJSON(object.features) : void 0,
      uninterpreted_option: globalThis.Array.isArray(object == null ? void 0 : object.uninterpreted_option) ? object.uninterpreted_option.map((e) => UninterpretedOption.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.java_package !== void 0 && message.java_package !== "") {
      obj.java_package = message.java_package;
    }
    if (message.java_outer_classname !== void 0 && message.java_outer_classname !== "") {
      obj.java_outer_classname = message.java_outer_classname;
    }
    if (message.java_multiple_files !== void 0 && message.java_multiple_files !== false) {
      obj.java_multiple_files = message.java_multiple_files;
    }
    if (message.java_generate_equals_and_hash !== void 0 && message.java_generate_equals_and_hash !== false) {
      obj.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
    }
    if (message.java_string_check_utf8 !== void 0 && message.java_string_check_utf8 !== false) {
      obj.java_string_check_utf8 = message.java_string_check_utf8;
    }
    if (message.optimize_for !== void 0 && message.optimize_for !== 1) {
      obj.optimize_for = fileOptionsOptimizeModeToJSON(message.optimize_for);
    }
    if (message.go_package !== void 0 && message.go_package !== "") {
      obj.go_package = message.go_package;
    }
    if (message.cc_generic_services !== void 0 && message.cc_generic_services !== false) {
      obj.cc_generic_services = message.cc_generic_services;
    }
    if (message.java_generic_services !== void 0 && message.java_generic_services !== false) {
      obj.java_generic_services = message.java_generic_services;
    }
    if (message.py_generic_services !== void 0 && message.py_generic_services !== false) {
      obj.py_generic_services = message.py_generic_services;
    }
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.cc_enable_arenas !== void 0 && message.cc_enable_arenas !== true) {
      obj.cc_enable_arenas = message.cc_enable_arenas;
    }
    if (message.objc_class_prefix !== void 0 && message.objc_class_prefix !== "") {
      obj.objc_class_prefix = message.objc_class_prefix;
    }
    if (message.csharp_namespace !== void 0 && message.csharp_namespace !== "") {
      obj.csharp_namespace = message.csharp_namespace;
    }
    if (message.swift_prefix !== void 0 && message.swift_prefix !== "") {
      obj.swift_prefix = message.swift_prefix;
    }
    if (message.php_class_prefix !== void 0 && message.php_class_prefix !== "") {
      obj.php_class_prefix = message.php_class_prefix;
    }
    if (message.php_namespace !== void 0 && message.php_namespace !== "") {
      obj.php_namespace = message.php_namespace;
    }
    if (message.php_metadata_namespace !== void 0 && message.php_metadata_namespace !== "") {
      obj.php_metadata_namespace = message.php_metadata_namespace;
    }
    if (message.ruby_package !== void 0 && message.ruby_package !== "") {
      obj.ruby_package = message.ruby_package;
    }
    if (message.features !== void 0) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if ((_a = message.uninterpreted_option) == null ? void 0 : _a.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) => UninterpretedOption.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return FileOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseFileOptions();
    message.java_package = object.java_package ?? "";
    message.java_outer_classname = object.java_outer_classname ?? "";
    message.java_multiple_files = object.java_multiple_files ?? false;
    message.java_generate_equals_and_hash = object.java_generate_equals_and_hash ?? false;
    message.java_string_check_utf8 = object.java_string_check_utf8 ?? false;
    message.optimize_for = object.optimize_for ?? 1;
    message.go_package = object.go_package ?? "";
    message.cc_generic_services = object.cc_generic_services ?? false;
    message.java_generic_services = object.java_generic_services ?? false;
    message.py_generic_services = object.py_generic_services ?? false;
    message.deprecated = object.deprecated ?? false;
    message.cc_enable_arenas = object.cc_enable_arenas ?? true;
    message.objc_class_prefix = object.objc_class_prefix ?? "";
    message.csharp_namespace = object.csharp_namespace ?? "";
    message.swift_prefix = object.swift_prefix ?? "";
    message.php_class_prefix = object.php_class_prefix ?? "";
    message.php_namespace = object.php_namespace ?? "";
    message.php_metadata_namespace = object.php_metadata_namespace ?? "";
    message.ruby_package = object.ruby_package ?? "";
    message.features = object.features !== void 0 && object.features !== null ? FeatureSet.fromPartial(object.features) : void 0;
    message.uninterpreted_option = ((_a = object.uninterpreted_option) == null ? void 0 : _a.map((e) => UninterpretedOption.fromPartial(e))) || [];
    return message;
  }
};
var MessageOptions = {
  $type: "google.protobuf.MessageOptions",
  encode(message, writer = new BinaryWriter()) {
    if (message.message_set_wire_format !== void 0 && message.message_set_wire_format !== false) {
      writer.uint32(8).bool(message.message_set_wire_format);
    }
    if (message.no_standard_descriptor_accessor !== void 0 && message.no_standard_descriptor_accessor !== false) {
      writer.uint32(16).bool(message.no_standard_descriptor_accessor);
    }
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      writer.uint32(24).bool(message.deprecated);
    }
    if (message.map_entry !== void 0 && message.map_entry !== false) {
      writer.uint32(56).bool(message.map_entry);
    }
    if (message.deprecated_legacy_json_field_conflicts !== void 0 && message.deprecated_legacy_json_field_conflicts !== false) {
      writer.uint32(88).bool(message.deprecated_legacy_json_field_conflicts);
    }
    if (message.features !== void 0) {
      FeatureSet.encode(message.features, writer.uint32(98).fork()).join();
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMessageOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.message_set_wire_format = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.no_standard_descriptor_accessor = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.map_entry = reader.bool();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }
          message.deprecated_legacy_json_field_conflicts = reader.bool();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message_set_wire_format: isSet109(object.message_set_wire_format) ? globalThis.Boolean(object.message_set_wire_format) : false,
      no_standard_descriptor_accessor: isSet109(object.no_standard_descriptor_accessor) ? globalThis.Boolean(object.no_standard_descriptor_accessor) : false,
      deprecated: isSet109(object.deprecated) ? globalThis.Boolean(object.deprecated) : false,
      map_entry: isSet109(object.map_entry) ? globalThis.Boolean(object.map_entry) : false,
      deprecated_legacy_json_field_conflicts: isSet109(object.deprecated_legacy_json_field_conflicts) ? globalThis.Boolean(object.deprecated_legacy_json_field_conflicts) : false,
      features: isSet109(object.features) ? FeatureSet.fromJSON(object.features) : void 0,
      uninterpreted_option: globalThis.Array.isArray(object == null ? void 0 : object.uninterpreted_option) ? object.uninterpreted_option.map((e) => UninterpretedOption.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.message_set_wire_format !== void 0 && message.message_set_wire_format !== false) {
      obj.message_set_wire_format = message.message_set_wire_format;
    }
    if (message.no_standard_descriptor_accessor !== void 0 && message.no_standard_descriptor_accessor !== false) {
      obj.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
    }
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.map_entry !== void 0 && message.map_entry !== false) {
      obj.map_entry = message.map_entry;
    }
    if (message.deprecated_legacy_json_field_conflicts !== void 0 && message.deprecated_legacy_json_field_conflicts !== false) {
      obj.deprecated_legacy_json_field_conflicts = message.deprecated_legacy_json_field_conflicts;
    }
    if (message.features !== void 0) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if ((_a = message.uninterpreted_option) == null ? void 0 : _a.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) => UninterpretedOption.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return MessageOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMessageOptions();
    message.message_set_wire_format = object.message_set_wire_format ?? false;
    message.no_standard_descriptor_accessor = object.no_standard_descriptor_accessor ?? false;
    message.deprecated = object.deprecated ?? false;
    message.map_entry = object.map_entry ?? false;
    message.deprecated_legacy_json_field_conflicts = object.deprecated_legacy_json_field_conflicts ?? false;
    message.features = object.features !== void 0 && object.features !== null ? FeatureSet.fromPartial(object.features) : void 0;
    message.uninterpreted_option = ((_a = object.uninterpreted_option) == null ? void 0 : _a.map((e) => UninterpretedOption.fromPartial(e))) || [];
    return message;
  }
};
var FieldOptions = {
  $type: "google.protobuf.FieldOptions",
  encode(message, writer = new BinaryWriter()) {
    if (message.ctype !== void 0 && message.ctype !== 0) {
      writer.uint32(8).int32(message.ctype);
    }
    if (message.packed !== void 0 && message.packed !== false) {
      writer.uint32(16).bool(message.packed);
    }
    if (message.jstype !== void 0 && message.jstype !== 0) {
      writer.uint32(48).int32(message.jstype);
    }
    if (message.lazy !== void 0 && message.lazy !== false) {
      writer.uint32(40).bool(message.lazy);
    }
    if (message.unverified_lazy !== void 0 && message.unverified_lazy !== false) {
      writer.uint32(120).bool(message.unverified_lazy);
    }
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      writer.uint32(24).bool(message.deprecated);
    }
    if (message.weak !== void 0 && message.weak !== false) {
      writer.uint32(80).bool(message.weak);
    }
    if (message.debug_redact !== void 0 && message.debug_redact !== false) {
      writer.uint32(128).bool(message.debug_redact);
    }
    if (message.retention !== void 0 && message.retention !== 0) {
      writer.uint32(136).int32(message.retention);
    }
    writer.uint32(154).fork();
    for (const v of message.targets) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.edition_defaults) {
      FieldOptionsEditionDefault.encode(v, writer.uint32(162).fork()).join();
    }
    if (message.features !== void 0) {
      FeatureSet.encode(message.features, writer.uint32(170).fork()).join();
    }
    if (message.feature_support !== void 0) {
      FieldOptionsFeatureSupport.encode(message.feature_support, writer.uint32(178).fork()).join();
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFieldOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.ctype = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.packed = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.jstype = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.lazy = reader.bool();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }
          message.unverified_lazy = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }
          message.weak = reader.bool();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }
          message.debug_redact = reader.bool();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }
          message.retention = reader.int32();
          continue;
        case 19:
          if (tag === 152) {
            message.targets.push(reader.int32());
            continue;
          }
          if (tag === 154) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.targets.push(reader.int32());
            }
            continue;
          }
          break;
        case 20:
          if (tag !== 162) {
            break;
          }
          message.edition_defaults.push(FieldOptionsEditionDefault.decode(reader, reader.uint32()));
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }
          message.feature_support = FieldOptionsFeatureSupport.decode(reader, reader.uint32());
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      ctype: isSet109(object.ctype) ? fieldOptionsCTypeFromJSON(object.ctype) : 0,
      packed: isSet109(object.packed) ? globalThis.Boolean(object.packed) : false,
      jstype: isSet109(object.jstype) ? fieldOptionsJSTypeFromJSON(object.jstype) : 0,
      lazy: isSet109(object.lazy) ? globalThis.Boolean(object.lazy) : false,
      unverified_lazy: isSet109(object.unverified_lazy) ? globalThis.Boolean(object.unverified_lazy) : false,
      deprecated: isSet109(object.deprecated) ? globalThis.Boolean(object.deprecated) : false,
      weak: isSet109(object.weak) ? globalThis.Boolean(object.weak) : false,
      debug_redact: isSet109(object.debug_redact) ? globalThis.Boolean(object.debug_redact) : false,
      retention: isSet109(object.retention) ? fieldOptionsOptionRetentionFromJSON(object.retention) : 0,
      targets: globalThis.Array.isArray(object == null ? void 0 : object.targets) ? object.targets.map((e) => fieldOptionsOptionTargetTypeFromJSON(e)) : [],
      edition_defaults: globalThis.Array.isArray(object == null ? void 0 : object.edition_defaults) ? object.edition_defaults.map((e) => FieldOptionsEditionDefault.fromJSON(e)) : [],
      features: isSet109(object.features) ? FeatureSet.fromJSON(object.features) : void 0,
      feature_support: isSet109(object.feature_support) ? FieldOptionsFeatureSupport.fromJSON(object.feature_support) : void 0,
      uninterpreted_option: globalThis.Array.isArray(object == null ? void 0 : object.uninterpreted_option) ? object.uninterpreted_option.map((e) => UninterpretedOption.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b, _c;
    const obj = {};
    if (message.ctype !== void 0 && message.ctype !== 0) {
      obj.ctype = fieldOptionsCTypeToJSON(message.ctype);
    }
    if (message.packed !== void 0 && message.packed !== false) {
      obj.packed = message.packed;
    }
    if (message.jstype !== void 0 && message.jstype !== 0) {
      obj.jstype = fieldOptionsJSTypeToJSON(message.jstype);
    }
    if (message.lazy !== void 0 && message.lazy !== false) {
      obj.lazy = message.lazy;
    }
    if (message.unverified_lazy !== void 0 && message.unverified_lazy !== false) {
      obj.unverified_lazy = message.unverified_lazy;
    }
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.weak !== void 0 && message.weak !== false) {
      obj.weak = message.weak;
    }
    if (message.debug_redact !== void 0 && message.debug_redact !== false) {
      obj.debug_redact = message.debug_redact;
    }
    if (message.retention !== void 0 && message.retention !== 0) {
      obj.retention = fieldOptionsOptionRetentionToJSON(message.retention);
    }
    if ((_a = message.targets) == null ? void 0 : _a.length) {
      obj.targets = message.targets.map((e) => fieldOptionsOptionTargetTypeToJSON(e));
    }
    if ((_b = message.edition_defaults) == null ? void 0 : _b.length) {
      obj.edition_defaults = message.edition_defaults.map((e) => FieldOptionsEditionDefault.toJSON(e));
    }
    if (message.features !== void 0) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (message.feature_support !== void 0) {
      obj.feature_support = FieldOptionsFeatureSupport.toJSON(message.feature_support);
    }
    if ((_c = message.uninterpreted_option) == null ? void 0 : _c.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) => UninterpretedOption.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return FieldOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseFieldOptions();
    message.ctype = object.ctype ?? 0;
    message.packed = object.packed ?? false;
    message.jstype = object.jstype ?? 0;
    message.lazy = object.lazy ?? false;
    message.unverified_lazy = object.unverified_lazy ?? false;
    message.deprecated = object.deprecated ?? false;
    message.weak = object.weak ?? false;
    message.debug_redact = object.debug_redact ?? false;
    message.retention = object.retention ?? 0;
    message.targets = ((_a = object.targets) == null ? void 0 : _a.map((e) => e)) || [];
    message.edition_defaults = ((_b = object.edition_defaults) == null ? void 0 : _b.map((e) => FieldOptionsEditionDefault.fromPartial(e))) || [];
    message.features = object.features !== void 0 && object.features !== null ? FeatureSet.fromPartial(object.features) : void 0;
    message.feature_support = object.feature_support !== void 0 && object.feature_support !== null ? FieldOptionsFeatureSupport.fromPartial(object.feature_support) : void 0;
    message.uninterpreted_option = ((_c = object.uninterpreted_option) == null ? void 0 : _c.map((e) => UninterpretedOption.fromPartial(e))) || [];
    return message;
  }
};
var FieldOptionsEditionDefault = {
  $type: "google.protobuf.FieldOptions.EditionDefault",
  encode(message, writer = new BinaryWriter()) {
    if (message.edition !== void 0 && message.edition !== 0) {
      writer.uint32(24).int32(message.edition);
    }
    if (message.value !== void 0 && message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFieldOptionsEditionDefault();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }
          message.edition = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      edition: isSet109(object.edition) ? editionFromJSON(object.edition) : 0,
      value: isSet109(object.value) ? globalThis.String(object.value) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.edition !== void 0 && message.edition !== 0) {
      obj.edition = editionToJSON(message.edition);
    }
    if (message.value !== void 0 && message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
  create(base) {
    return FieldOptionsEditionDefault.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFieldOptionsEditionDefault();
    message.edition = object.edition ?? 0;
    message.value = object.value ?? "";
    return message;
  }
};
var FieldOptionsFeatureSupport = {
  $type: "google.protobuf.FieldOptions.FeatureSupport",
  encode(message, writer = new BinaryWriter()) {
    if (message.edition_introduced !== void 0 && message.edition_introduced !== 0) {
      writer.uint32(8).int32(message.edition_introduced);
    }
    if (message.edition_deprecated !== void 0 && message.edition_deprecated !== 0) {
      writer.uint32(16).int32(message.edition_deprecated);
    }
    if (message.deprecation_warning !== void 0 && message.deprecation_warning !== "") {
      writer.uint32(26).string(message.deprecation_warning);
    }
    if (message.edition_removed !== void 0 && message.edition_removed !== 0) {
      writer.uint32(32).int32(message.edition_removed);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFieldOptionsFeatureSupport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.edition_introduced = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.edition_deprecated = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.deprecation_warning = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.edition_removed = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      edition_introduced: isSet109(object.edition_introduced) ? editionFromJSON(object.edition_introduced) : 0,
      edition_deprecated: isSet109(object.edition_deprecated) ? editionFromJSON(object.edition_deprecated) : 0,
      deprecation_warning: isSet109(object.deprecation_warning) ? globalThis.String(object.deprecation_warning) : "",
      edition_removed: isSet109(object.edition_removed) ? editionFromJSON(object.edition_removed) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.edition_introduced !== void 0 && message.edition_introduced !== 0) {
      obj.edition_introduced = editionToJSON(message.edition_introduced);
    }
    if (message.edition_deprecated !== void 0 && message.edition_deprecated !== 0) {
      obj.edition_deprecated = editionToJSON(message.edition_deprecated);
    }
    if (message.deprecation_warning !== void 0 && message.deprecation_warning !== "") {
      obj.deprecation_warning = message.deprecation_warning;
    }
    if (message.edition_removed !== void 0 && message.edition_removed !== 0) {
      obj.edition_removed = editionToJSON(message.edition_removed);
    }
    return obj;
  },
  create(base) {
    return FieldOptionsFeatureSupport.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFieldOptionsFeatureSupport();
    message.edition_introduced = object.edition_introduced ?? 0;
    message.edition_deprecated = object.edition_deprecated ?? 0;
    message.deprecation_warning = object.deprecation_warning ?? "";
    message.edition_removed = object.edition_removed ?? 0;
    return message;
  }
};
var OneofOptions = {
  $type: "google.protobuf.OneofOptions",
  encode(message, writer = new BinaryWriter()) {
    if (message.features !== void 0) {
      FeatureSet.encode(message.features, writer.uint32(10).fork()).join();
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseOneofOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      features: isSet109(object.features) ? FeatureSet.fromJSON(object.features) : void 0,
      uninterpreted_option: globalThis.Array.isArray(object == null ? void 0 : object.uninterpreted_option) ? object.uninterpreted_option.map((e) => UninterpretedOption.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.features !== void 0) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if ((_a = message.uninterpreted_option) == null ? void 0 : _a.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) => UninterpretedOption.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return OneofOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseOneofOptions();
    message.features = object.features !== void 0 && object.features !== null ? FeatureSet.fromPartial(object.features) : void 0;
    message.uninterpreted_option = ((_a = object.uninterpreted_option) == null ? void 0 : _a.map((e) => UninterpretedOption.fromPartial(e))) || [];
    return message;
  }
};
var EnumOptions = {
  $type: "google.protobuf.EnumOptions",
  encode(message, writer = new BinaryWriter()) {
    if (message.allow_alias !== void 0 && message.allow_alias !== false) {
      writer.uint32(16).bool(message.allow_alias);
    }
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      writer.uint32(24).bool(message.deprecated);
    }
    if (message.deprecated_legacy_json_field_conflicts !== void 0 && message.deprecated_legacy_json_field_conflicts !== false) {
      writer.uint32(48).bool(message.deprecated_legacy_json_field_conflicts);
    }
    if (message.features !== void 0) {
      FeatureSet.encode(message.features, writer.uint32(58).fork()).join();
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEnumOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }
          message.allow_alias = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.deprecated_legacy_json_field_conflicts = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      allow_alias: isSet109(object.allow_alias) ? globalThis.Boolean(object.allow_alias) : false,
      deprecated: isSet109(object.deprecated) ? globalThis.Boolean(object.deprecated) : false,
      deprecated_legacy_json_field_conflicts: isSet109(object.deprecated_legacy_json_field_conflicts) ? globalThis.Boolean(object.deprecated_legacy_json_field_conflicts) : false,
      features: isSet109(object.features) ? FeatureSet.fromJSON(object.features) : void 0,
      uninterpreted_option: globalThis.Array.isArray(object == null ? void 0 : object.uninterpreted_option) ? object.uninterpreted_option.map((e) => UninterpretedOption.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.allow_alias !== void 0 && message.allow_alias !== false) {
      obj.allow_alias = message.allow_alias;
    }
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.deprecated_legacy_json_field_conflicts !== void 0 && message.deprecated_legacy_json_field_conflicts !== false) {
      obj.deprecated_legacy_json_field_conflicts = message.deprecated_legacy_json_field_conflicts;
    }
    if (message.features !== void 0) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if ((_a = message.uninterpreted_option) == null ? void 0 : _a.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) => UninterpretedOption.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return EnumOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseEnumOptions();
    message.allow_alias = object.allow_alias ?? false;
    message.deprecated = object.deprecated ?? false;
    message.deprecated_legacy_json_field_conflicts = object.deprecated_legacy_json_field_conflicts ?? false;
    message.features = object.features !== void 0 && object.features !== null ? FeatureSet.fromPartial(object.features) : void 0;
    message.uninterpreted_option = ((_a = object.uninterpreted_option) == null ? void 0 : _a.map((e) => UninterpretedOption.fromPartial(e))) || [];
    return message;
  }
};
var EnumValueOptions = {
  $type: "google.protobuf.EnumValueOptions",
  encode(message, writer = new BinaryWriter()) {
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      writer.uint32(8).bool(message.deprecated);
    }
    if (message.features !== void 0) {
      FeatureSet.encode(message.features, writer.uint32(18).fork()).join();
    }
    if (message.debug_redact !== void 0 && message.debug_redact !== false) {
      writer.uint32(24).bool(message.debug_redact);
    }
    if (message.feature_support !== void 0) {
      FieldOptionsFeatureSupport.encode(message.feature_support, writer.uint32(34).fork()).join();
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEnumValueOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.debug_redact = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.feature_support = FieldOptionsFeatureSupport.decode(reader, reader.uint32());
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      deprecated: isSet109(object.deprecated) ? globalThis.Boolean(object.deprecated) : false,
      features: isSet109(object.features) ? FeatureSet.fromJSON(object.features) : void 0,
      debug_redact: isSet109(object.debug_redact) ? globalThis.Boolean(object.debug_redact) : false,
      feature_support: isSet109(object.feature_support) ? FieldOptionsFeatureSupport.fromJSON(object.feature_support) : void 0,
      uninterpreted_option: globalThis.Array.isArray(object == null ? void 0 : object.uninterpreted_option) ? object.uninterpreted_option.map((e) => UninterpretedOption.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.features !== void 0) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (message.debug_redact !== void 0 && message.debug_redact !== false) {
      obj.debug_redact = message.debug_redact;
    }
    if (message.feature_support !== void 0) {
      obj.feature_support = FieldOptionsFeatureSupport.toJSON(message.feature_support);
    }
    if ((_a = message.uninterpreted_option) == null ? void 0 : _a.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) => UninterpretedOption.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return EnumValueOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseEnumValueOptions();
    message.deprecated = object.deprecated ?? false;
    message.features = object.features !== void 0 && object.features !== null ? FeatureSet.fromPartial(object.features) : void 0;
    message.debug_redact = object.debug_redact ?? false;
    message.feature_support = object.feature_support !== void 0 && object.feature_support !== null ? FieldOptionsFeatureSupport.fromPartial(object.feature_support) : void 0;
    message.uninterpreted_option = ((_a = object.uninterpreted_option) == null ? void 0 : _a.map((e) => UninterpretedOption.fromPartial(e))) || [];
    return message;
  }
};
var ServiceOptions = {
  $type: "google.protobuf.ServiceOptions",
  encode(message, writer = new BinaryWriter()) {
    if (message.features !== void 0) {
      FeatureSet.encode(message.features, writer.uint32(274).fork()).join();
    }
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      writer.uint32(264).bool(message.deprecated);
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseServiceOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 34:
          if (tag !== 274) {
            break;
          }
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 264) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      features: isSet109(object.features) ? FeatureSet.fromJSON(object.features) : void 0,
      deprecated: isSet109(object.deprecated) ? globalThis.Boolean(object.deprecated) : false,
      uninterpreted_option: globalThis.Array.isArray(object == null ? void 0 : object.uninterpreted_option) ? object.uninterpreted_option.map((e) => UninterpretedOption.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.features !== void 0) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if ((_a = message.uninterpreted_option) == null ? void 0 : _a.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) => UninterpretedOption.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return ServiceOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseServiceOptions();
    message.features = object.features !== void 0 && object.features !== null ? FeatureSet.fromPartial(object.features) : void 0;
    message.deprecated = object.deprecated ?? false;
    message.uninterpreted_option = ((_a = object.uninterpreted_option) == null ? void 0 : _a.map((e) => UninterpretedOption.fromPartial(e))) || [];
    return message;
  }
};
var MethodOptions = {
  $type: "google.protobuf.MethodOptions",
  encode(message, writer = new BinaryWriter()) {
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      writer.uint32(264).bool(message.deprecated);
    }
    if (message.idempotency_level !== void 0 && message.idempotency_level !== 0) {
      writer.uint32(272).int32(message.idempotency_level);
    }
    if (message.features !== void 0) {
      FeatureSet.encode(message.features, writer.uint32(282).fork()).join();
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMethodOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 33:
          if (tag !== 264) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }
          message.idempotency_level = reader.int32();
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }
          message.features = FeatureSet.decode(reader, reader.uint32());
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(UninterpretedOption.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      deprecated: isSet109(object.deprecated) ? globalThis.Boolean(object.deprecated) : false,
      idempotency_level: isSet109(object.idempotency_level) ? methodOptionsIdempotencyLevelFromJSON(object.idempotency_level) : 0,
      features: isSet109(object.features) ? FeatureSet.fromJSON(object.features) : void 0,
      uninterpreted_option: globalThis.Array.isArray(object == null ? void 0 : object.uninterpreted_option) ? object.uninterpreted_option.map((e) => UninterpretedOption.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.deprecated !== void 0 && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.idempotency_level !== void 0 && message.idempotency_level !== 0) {
      obj.idempotency_level = methodOptionsIdempotencyLevelToJSON(message.idempotency_level);
    }
    if (message.features !== void 0) {
      obj.features = FeatureSet.toJSON(message.features);
    }
    if ((_a = message.uninterpreted_option) == null ? void 0 : _a.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) => UninterpretedOption.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return MethodOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseMethodOptions();
    message.deprecated = object.deprecated ?? false;
    message.idempotency_level = object.idempotency_level ?? 0;
    message.features = object.features !== void 0 && object.features !== null ? FeatureSet.fromPartial(object.features) : void 0;
    message.uninterpreted_option = ((_a = object.uninterpreted_option) == null ? void 0 : _a.map((e) => UninterpretedOption.fromPartial(e))) || [];
    return message;
  }
};
var UninterpretedOption = {
  $type: "google.protobuf.UninterpretedOption",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.name) {
      UninterpretedOptionNamePart.encode(v, writer.uint32(18).fork()).join();
    }
    if (message.identifier_value !== void 0 && message.identifier_value !== "") {
      writer.uint32(26).string(message.identifier_value);
    }
    if (message.positive_int_value !== void 0 && message.positive_int_value !== 0) {
      writer.uint32(32).uint64(message.positive_int_value);
    }
    if (message.negative_int_value !== void 0 && message.negative_int_value !== 0) {
      writer.uint32(40).int64(message.negative_int_value);
    }
    if (message.double_value !== void 0 && message.double_value !== 0) {
      writer.uint32(49).double(message.double_value);
    }
    if (message.string_value !== void 0 && message.string_value.length !== 0) {
      writer.uint32(58).bytes(message.string_value);
    }
    if (message.aggregate_value !== void 0 && message.aggregate_value !== "") {
      writer.uint32(66).string(message.aggregate_value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUninterpretedOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }
          message.name.push(UninterpretedOptionNamePart.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.identifier_value = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.positive_int_value = longToNumber54(reader.uint64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.negative_int_value = longToNumber54(reader.int64());
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }
          message.double_value = reader.double();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.string_value = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.aggregate_value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: globalThis.Array.isArray(object == null ? void 0 : object.name) ? object.name.map((e) => UninterpretedOptionNamePart.fromJSON(e)) : [],
      identifier_value: isSet109(object.identifier_value) ? globalThis.String(object.identifier_value) : "",
      positive_int_value: isSet109(object.positive_int_value) ? globalThis.Number(object.positive_int_value) : 0,
      negative_int_value: isSet109(object.negative_int_value) ? globalThis.Number(object.negative_int_value) : 0,
      double_value: isSet109(object.double_value) ? globalThis.Number(object.double_value) : 0,
      string_value: isSet109(object.string_value) ? bytesFromBase6446(object.string_value) : new Uint8Array(0),
      aggregate_value: isSet109(object.aggregate_value) ? globalThis.String(object.aggregate_value) : ""
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.name) == null ? void 0 : _a.length) {
      obj.name = message.name.map((e) => UninterpretedOptionNamePart.toJSON(e));
    }
    if (message.identifier_value !== void 0 && message.identifier_value !== "") {
      obj.identifier_value = message.identifier_value;
    }
    if (message.positive_int_value !== void 0 && message.positive_int_value !== 0) {
      obj.positive_int_value = Math.round(message.positive_int_value);
    }
    if (message.negative_int_value !== void 0 && message.negative_int_value !== 0) {
      obj.negative_int_value = Math.round(message.negative_int_value);
    }
    if (message.double_value !== void 0 && message.double_value !== 0) {
      obj.double_value = message.double_value;
    }
    if (message.string_value !== void 0 && message.string_value.length !== 0) {
      obj.string_value = base64FromBytes46(message.string_value);
    }
    if (message.aggregate_value !== void 0 && message.aggregate_value !== "") {
      obj.aggregate_value = message.aggregate_value;
    }
    return obj;
  },
  create(base) {
    return UninterpretedOption.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseUninterpretedOption();
    message.name = ((_a = object.name) == null ? void 0 : _a.map((e) => UninterpretedOptionNamePart.fromPartial(e))) || [];
    message.identifier_value = object.identifier_value ?? "";
    message.positive_int_value = object.positive_int_value ?? 0;
    message.negative_int_value = object.negative_int_value ?? 0;
    message.double_value = object.double_value ?? 0;
    message.string_value = object.string_value ?? new Uint8Array(0);
    message.aggregate_value = object.aggregate_value ?? "";
    return message;
  }
};
var UninterpretedOptionNamePart = {
  $type: "google.protobuf.UninterpretedOption.NamePart",
  encode(message, writer = new BinaryWriter()) {
    if (message.name_part !== "") {
      writer.uint32(10).string(message.name_part);
    }
    if (message.is_extension !== false) {
      writer.uint32(16).bool(message.is_extension);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUninterpretedOptionNamePart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name_part = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.is_extension = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name_part: isSet109(object.name_part) ? globalThis.String(object.name_part) : "",
      is_extension: isSet109(object.is_extension) ? globalThis.Boolean(object.is_extension) : false
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name_part !== "") {
      obj.name_part = message.name_part;
    }
    if (message.is_extension !== false) {
      obj.is_extension = message.is_extension;
    }
    return obj;
  },
  create(base) {
    return UninterpretedOptionNamePart.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseUninterpretedOptionNamePart();
    message.name_part = object.name_part ?? "";
    message.is_extension = object.is_extension ?? false;
    return message;
  }
};
var FeatureSet = {
  $type: "google.protobuf.FeatureSet",
  encode(message, writer = new BinaryWriter()) {
    if (message.field_presence !== void 0 && message.field_presence !== 0) {
      writer.uint32(8).int32(message.field_presence);
    }
    if (message.enum_type !== void 0 && message.enum_type !== 0) {
      writer.uint32(16).int32(message.enum_type);
    }
    if (message.repeated_field_encoding !== void 0 && message.repeated_field_encoding !== 0) {
      writer.uint32(24).int32(message.repeated_field_encoding);
    }
    if (message.utf8_validation !== void 0 && message.utf8_validation !== 0) {
      writer.uint32(32).int32(message.utf8_validation);
    }
    if (message.message_encoding !== void 0 && message.message_encoding !== 0) {
      writer.uint32(40).int32(message.message_encoding);
    }
    if (message.json_format !== void 0 && message.json_format !== 0) {
      writer.uint32(48).int32(message.json_format);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFeatureSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.field_presence = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.enum_type = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.repeated_field_encoding = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.utf8_validation = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.message_encoding = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.json_format = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      field_presence: isSet109(object.field_presence) ? featureSetFieldPresenceFromJSON(object.field_presence) : 0,
      enum_type: isSet109(object.enum_type) ? featureSetEnumTypeFromJSON(object.enum_type) : 0,
      repeated_field_encoding: isSet109(object.repeated_field_encoding) ? featureSetRepeatedFieldEncodingFromJSON(object.repeated_field_encoding) : 0,
      utf8_validation: isSet109(object.utf8_validation) ? featureSetUtf8ValidationFromJSON(object.utf8_validation) : 0,
      message_encoding: isSet109(object.message_encoding) ? featureSetMessageEncodingFromJSON(object.message_encoding) : 0,
      json_format: isSet109(object.json_format) ? featureSetJsonFormatFromJSON(object.json_format) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.field_presence !== void 0 && message.field_presence !== 0) {
      obj.field_presence = featureSetFieldPresenceToJSON(message.field_presence);
    }
    if (message.enum_type !== void 0 && message.enum_type !== 0) {
      obj.enum_type = featureSetEnumTypeToJSON(message.enum_type);
    }
    if (message.repeated_field_encoding !== void 0 && message.repeated_field_encoding !== 0) {
      obj.repeated_field_encoding = featureSetRepeatedFieldEncodingToJSON(message.repeated_field_encoding);
    }
    if (message.utf8_validation !== void 0 && message.utf8_validation !== 0) {
      obj.utf8_validation = featureSetUtf8ValidationToJSON(message.utf8_validation);
    }
    if (message.message_encoding !== void 0 && message.message_encoding !== 0) {
      obj.message_encoding = featureSetMessageEncodingToJSON(message.message_encoding);
    }
    if (message.json_format !== void 0 && message.json_format !== 0) {
      obj.json_format = featureSetJsonFormatToJSON(message.json_format);
    }
    return obj;
  },
  create(base) {
    return FeatureSet.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFeatureSet();
    message.field_presence = object.field_presence ?? 0;
    message.enum_type = object.enum_type ?? 0;
    message.repeated_field_encoding = object.repeated_field_encoding ?? 0;
    message.utf8_validation = object.utf8_validation ?? 0;
    message.message_encoding = object.message_encoding ?? 0;
    message.json_format = object.json_format ?? 0;
    return message;
  }
};
var FeatureSetDefaults = {
  $type: "google.protobuf.FeatureSetDefaults",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.defaults) {
      FeatureSetDefaultsFeatureSetEditionDefault.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.minimum_edition !== void 0 && message.minimum_edition !== 0) {
      writer.uint32(32).int32(message.minimum_edition);
    }
    if (message.maximum_edition !== void 0 && message.maximum_edition !== 0) {
      writer.uint32(40).int32(message.maximum_edition);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFeatureSetDefaults();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.defaults.push(FeatureSetDefaultsFeatureSetEditionDefault.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.minimum_edition = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.maximum_edition = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      defaults: globalThis.Array.isArray(object == null ? void 0 : object.defaults) ? object.defaults.map((e) => FeatureSetDefaultsFeatureSetEditionDefault.fromJSON(e)) : [],
      minimum_edition: isSet109(object.minimum_edition) ? editionFromJSON(object.minimum_edition) : 0,
      maximum_edition: isSet109(object.maximum_edition) ? editionFromJSON(object.maximum_edition) : 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.defaults) == null ? void 0 : _a.length) {
      obj.defaults = message.defaults.map((e) => FeatureSetDefaultsFeatureSetEditionDefault.toJSON(e));
    }
    if (message.minimum_edition !== void 0 && message.minimum_edition !== 0) {
      obj.minimum_edition = editionToJSON(message.minimum_edition);
    }
    if (message.maximum_edition !== void 0 && message.maximum_edition !== 0) {
      obj.maximum_edition = editionToJSON(message.maximum_edition);
    }
    return obj;
  },
  create(base) {
    return FeatureSetDefaults.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseFeatureSetDefaults();
    message.defaults = ((_a = object.defaults) == null ? void 0 : _a.map((e) => FeatureSetDefaultsFeatureSetEditionDefault.fromPartial(e))) || [];
    message.minimum_edition = object.minimum_edition ?? 0;
    message.maximum_edition = object.maximum_edition ?? 0;
    return message;
  }
};
var FeatureSetDefaultsFeatureSetEditionDefault = {
  $type: "google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault",
  encode(message, writer = new BinaryWriter()) {
    if (message.edition !== void 0 && message.edition !== 0) {
      writer.uint32(24).int32(message.edition);
    }
    if (message.overridable_features !== void 0) {
      FeatureSet.encode(message.overridable_features, writer.uint32(34).fork()).join();
    }
    if (message.fixed_features !== void 0) {
      FeatureSet.encode(message.fixed_features, writer.uint32(42).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFeatureSetDefaultsFeatureSetEditionDefault();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }
          message.edition = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.overridable_features = FeatureSet.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.fixed_features = FeatureSet.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      edition: isSet109(object.edition) ? editionFromJSON(object.edition) : 0,
      overridable_features: isSet109(object.overridable_features) ? FeatureSet.fromJSON(object.overridable_features) : void 0,
      fixed_features: isSet109(object.fixed_features) ? FeatureSet.fromJSON(object.fixed_features) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.edition !== void 0 && message.edition !== 0) {
      obj.edition = editionToJSON(message.edition);
    }
    if (message.overridable_features !== void 0) {
      obj.overridable_features = FeatureSet.toJSON(message.overridable_features);
    }
    if (message.fixed_features !== void 0) {
      obj.fixed_features = FeatureSet.toJSON(message.fixed_features);
    }
    return obj;
  },
  create(base) {
    return FeatureSetDefaultsFeatureSetEditionDefault.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFeatureSetDefaultsFeatureSetEditionDefault();
    message.edition = object.edition ?? 0;
    message.overridable_features = object.overridable_features !== void 0 && object.overridable_features !== null ? FeatureSet.fromPartial(object.overridable_features) : void 0;
    message.fixed_features = object.fixed_features !== void 0 && object.fixed_features !== null ? FeatureSet.fromPartial(object.fixed_features) : void 0;
    return message;
  }
};
var SourceCodeInfo = {
  $type: "google.protobuf.SourceCodeInfo",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.location) {
      SourceCodeInfoLocation.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSourceCodeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.location.push(SourceCodeInfoLocation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      location: globalThis.Array.isArray(object == null ? void 0 : object.location) ? object.location.map((e) => SourceCodeInfoLocation.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.location) == null ? void 0 : _a.length) {
      obj.location = message.location.map((e) => SourceCodeInfoLocation.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return SourceCodeInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseSourceCodeInfo();
    message.location = ((_a = object.location) == null ? void 0 : _a.map((e) => SourceCodeInfoLocation.fromPartial(e))) || [];
    return message;
  }
};
var SourceCodeInfoLocation = {
  $type: "google.protobuf.SourceCodeInfo.Location",
  encode(message, writer = new BinaryWriter()) {
    writer.uint32(10).fork();
    for (const v of message.path) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.span) {
      writer.int32(v);
    }
    writer.join();
    if (message.leading_comments !== void 0 && message.leading_comments !== "") {
      writer.uint32(26).string(message.leading_comments);
    }
    if (message.trailing_comments !== void 0 && message.trailing_comments !== "") {
      writer.uint32(34).string(message.trailing_comments);
    }
    for (const v of message.leading_detached_comments) {
      writer.uint32(50).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSourceCodeInfoLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.path.push(reader.int32());
            continue;
          }
          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.path.push(reader.int32());
            }
            continue;
          }
          break;
        case 2:
          if (tag === 16) {
            message.span.push(reader.int32());
            continue;
          }
          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.span.push(reader.int32());
            }
            continue;
          }
          break;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.leading_comments = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.trailing_comments = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.leading_detached_comments.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      path: globalThis.Array.isArray(object == null ? void 0 : object.path) ? object.path.map((e) => globalThis.Number(e)) : [],
      span: globalThis.Array.isArray(object == null ? void 0 : object.span) ? object.span.map((e) => globalThis.Number(e)) : [],
      leading_comments: isSet109(object.leading_comments) ? globalThis.String(object.leading_comments) : "",
      trailing_comments: isSet109(object.trailing_comments) ? globalThis.String(object.trailing_comments) : "",
      leading_detached_comments: globalThis.Array.isArray(object == null ? void 0 : object.leading_detached_comments) ? object.leading_detached_comments.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b, _c;
    const obj = {};
    if ((_a = message.path) == null ? void 0 : _a.length) {
      obj.path = message.path.map((e) => Math.round(e));
    }
    if ((_b = message.span) == null ? void 0 : _b.length) {
      obj.span = message.span.map((e) => Math.round(e));
    }
    if (message.leading_comments !== void 0 && message.leading_comments !== "") {
      obj.leading_comments = message.leading_comments;
    }
    if (message.trailing_comments !== void 0 && message.trailing_comments !== "") {
      obj.trailing_comments = message.trailing_comments;
    }
    if ((_c = message.leading_detached_comments) == null ? void 0 : _c.length) {
      obj.leading_detached_comments = message.leading_detached_comments;
    }
    return obj;
  },
  create(base) {
    return SourceCodeInfoLocation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c;
    const message = createBaseSourceCodeInfoLocation();
    message.path = ((_a = object.path) == null ? void 0 : _a.map((e) => e)) || [];
    message.span = ((_b = object.span) == null ? void 0 : _b.map((e) => e)) || [];
    message.leading_comments = object.leading_comments ?? "";
    message.trailing_comments = object.trailing_comments ?? "";
    message.leading_detached_comments = ((_c = object.leading_detached_comments) == null ? void 0 : _c.map((e) => e)) || [];
    return message;
  }
};
var GeneratedCodeInfo = {
  $type: "google.protobuf.GeneratedCodeInfo",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.annotation) {
      GeneratedCodeInfoAnnotation.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGeneratedCodeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.annotation.push(GeneratedCodeInfoAnnotation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      annotation: globalThis.Array.isArray(object == null ? void 0 : object.annotation) ? object.annotation.map((e) => GeneratedCodeInfoAnnotation.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.annotation) == null ? void 0 : _a.length) {
      obj.annotation = message.annotation.map((e) => GeneratedCodeInfoAnnotation.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GeneratedCodeInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGeneratedCodeInfo();
    message.annotation = ((_a = object.annotation) == null ? void 0 : _a.map((e) => GeneratedCodeInfoAnnotation.fromPartial(e))) || [];
    return message;
  }
};
var GeneratedCodeInfoAnnotation = {
  $type: "google.protobuf.GeneratedCodeInfo.Annotation",
  encode(message, writer = new BinaryWriter()) {
    writer.uint32(10).fork();
    for (const v of message.path) {
      writer.int32(v);
    }
    writer.join();
    if (message.source_file !== void 0 && message.source_file !== "") {
      writer.uint32(18).string(message.source_file);
    }
    if (message.begin !== void 0 && message.begin !== 0) {
      writer.uint32(24).int32(message.begin);
    }
    if (message.end !== void 0 && message.end !== 0) {
      writer.uint32(32).int32(message.end);
    }
    if (message.semantic !== void 0 && message.semantic !== 0) {
      writer.uint32(40).int32(message.semantic);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGeneratedCodeInfoAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.path.push(reader.int32());
            continue;
          }
          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.path.push(reader.int32());
            }
            continue;
          }
          break;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.source_file = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.begin = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.end = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.semantic = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      path: globalThis.Array.isArray(object == null ? void 0 : object.path) ? object.path.map((e) => globalThis.Number(e)) : [],
      source_file: isSet109(object.source_file) ? globalThis.String(object.source_file) : "",
      begin: isSet109(object.begin) ? globalThis.Number(object.begin) : 0,
      end: isSet109(object.end) ? globalThis.Number(object.end) : 0,
      semantic: isSet109(object.semantic) ? generatedCodeInfoAnnotationSemanticFromJSON(object.semantic) : 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.path) == null ? void 0 : _a.length) {
      obj.path = message.path.map((e) => Math.round(e));
    }
    if (message.source_file !== void 0 && message.source_file !== "") {
      obj.source_file = message.source_file;
    }
    if (message.begin !== void 0 && message.begin !== 0) {
      obj.begin = Math.round(message.begin);
    }
    if (message.end !== void 0 && message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    if (message.semantic !== void 0 && message.semantic !== 0) {
      obj.semantic = generatedCodeInfoAnnotationSemanticToJSON(message.semantic);
    }
    return obj;
  },
  create(base) {
    return GeneratedCodeInfoAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGeneratedCodeInfoAnnotation();
    message.path = ((_a = object.path) == null ? void 0 : _a.map((e) => e)) || [];
    message.source_file = object.source_file ?? "";
    message.begin = object.begin ?? 0;
    message.end = object.end ?? 0;
    message.semantic = object.semantic ?? 0;
    return message;
  }
};
function editionFromJSON(object) {
  switch (object) {
    case 0:
    case "EDITION_UNKNOWN":
      return Edition.EDITION_UNKNOWN;
    case 900:
    case "EDITION_LEGACY":
      return Edition.EDITION_LEGACY;
    case 998:
    case "EDITION_PROTO2":
      return Edition.EDITION_PROTO2;
    case 999:
    case "EDITION_PROTO3":
      return Edition.EDITION_PROTO3;
    case 1e3:
    case "EDITION_2023":
      return Edition.EDITION_2023;
    case 1001:
    case "EDITION_2024":
      return Edition.EDITION_2024;
    case 1:
    case "EDITION_1_TEST_ONLY":
      return Edition.EDITION_1_TEST_ONLY;
    case 2:
    case "EDITION_2_TEST_ONLY":
      return Edition.EDITION_2_TEST_ONLY;
    case 99997:
    case "EDITION_99997_TEST_ONLY":
      return Edition.EDITION_99997_TEST_ONLY;
    case 99998:
    case "EDITION_99998_TEST_ONLY":
      return Edition.EDITION_99998_TEST_ONLY;
    case 99999:
    case "EDITION_99999_TEST_ONLY":
      return Edition.EDITION_99999_TEST_ONLY;
    case 2147483647:
    case "EDITION_MAX":
      return Edition.EDITION_MAX;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Edition.UNRECOGNIZED;
  }
}
function editionToJSON(object) {
  switch (object) {
    case Edition.EDITION_UNKNOWN:
      return "EDITION_UNKNOWN";
    case Edition.EDITION_LEGACY:
      return "EDITION_LEGACY";
    case Edition.EDITION_PROTO2:
      return "EDITION_PROTO2";
    case Edition.EDITION_PROTO3:
      return "EDITION_PROTO3";
    case Edition.EDITION_2023:
      return "EDITION_2023";
    case Edition.EDITION_2024:
      return "EDITION_2024";
    case Edition.EDITION_1_TEST_ONLY:
      return "EDITION_1_TEST_ONLY";
    case Edition.EDITION_2_TEST_ONLY:
      return "EDITION_2_TEST_ONLY";
    case Edition.EDITION_99997_TEST_ONLY:
      return "EDITION_99997_TEST_ONLY";
    case Edition.EDITION_99998_TEST_ONLY:
      return "EDITION_99998_TEST_ONLY";
    case Edition.EDITION_99999_TEST_ONLY:
      return "EDITION_99999_TEST_ONLY";
    case Edition.EDITION_MAX:
      return "EDITION_MAX";
    case Edition.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function extensionRangeOptionsVerificationStateFromJSON(object) {
  switch (object) {
    case 0:
    case "DECLARATION":
      return ExtensionRangeOptionsVerificationState.DECLARATION;
    case 1:
    case "UNVERIFIED":
      return ExtensionRangeOptionsVerificationState.UNVERIFIED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExtensionRangeOptionsVerificationState.UNRECOGNIZED;
  }
}
function extensionRangeOptionsVerificationStateToJSON(object) {
  switch (object) {
    case ExtensionRangeOptionsVerificationState.DECLARATION:
      return "DECLARATION";
    case ExtensionRangeOptionsVerificationState.UNVERIFIED:
      return "UNVERIFIED";
    case ExtensionRangeOptionsVerificationState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function fieldDescriptorProtoTypeFromJSON(object) {
  switch (object) {
    case 1:
    case "TYPE_DOUBLE":
      return FieldDescriptorProtoType.TYPE_DOUBLE;
    case 2:
    case "TYPE_FLOAT":
      return FieldDescriptorProtoType.TYPE_FLOAT;
    case 3:
    case "TYPE_INT64":
      return FieldDescriptorProtoType.TYPE_INT64;
    case 4:
    case "TYPE_UINT64":
      return FieldDescriptorProtoType.TYPE_UINT64;
    case 5:
    case "TYPE_INT32":
      return FieldDescriptorProtoType.TYPE_INT32;
    case 6:
    case "TYPE_FIXED64":
      return FieldDescriptorProtoType.TYPE_FIXED64;
    case 7:
    case "TYPE_FIXED32":
      return FieldDescriptorProtoType.TYPE_FIXED32;
    case 8:
    case "TYPE_BOOL":
      return FieldDescriptorProtoType.TYPE_BOOL;
    case 9:
    case "TYPE_STRING":
      return FieldDescriptorProtoType.TYPE_STRING;
    case 10:
    case "TYPE_GROUP":
      return FieldDescriptorProtoType.TYPE_GROUP;
    case 11:
    case "TYPE_MESSAGE":
      return FieldDescriptorProtoType.TYPE_MESSAGE;
    case 12:
    case "TYPE_BYTES":
      return FieldDescriptorProtoType.TYPE_BYTES;
    case 13:
    case "TYPE_UINT32":
      return FieldDescriptorProtoType.TYPE_UINT32;
    case 14:
    case "TYPE_ENUM":
      return FieldDescriptorProtoType.TYPE_ENUM;
    case 15:
    case "TYPE_SFIXED32":
      return FieldDescriptorProtoType.TYPE_SFIXED32;
    case 16:
    case "TYPE_SFIXED64":
      return FieldDescriptorProtoType.TYPE_SFIXED64;
    case 17:
    case "TYPE_SINT32":
      return FieldDescriptorProtoType.TYPE_SINT32;
    case 18:
    case "TYPE_SINT64":
      return FieldDescriptorProtoType.TYPE_SINT64;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldDescriptorProtoType.UNRECOGNIZED;
  }
}
function fieldDescriptorProtoTypeToJSON(object) {
  switch (object) {
    case FieldDescriptorProtoType.TYPE_DOUBLE:
      return "TYPE_DOUBLE";
    case FieldDescriptorProtoType.TYPE_FLOAT:
      return "TYPE_FLOAT";
    case FieldDescriptorProtoType.TYPE_INT64:
      return "TYPE_INT64";
    case FieldDescriptorProtoType.TYPE_UINT64:
      return "TYPE_UINT64";
    case FieldDescriptorProtoType.TYPE_INT32:
      return "TYPE_INT32";
    case FieldDescriptorProtoType.TYPE_FIXED64:
      return "TYPE_FIXED64";
    case FieldDescriptorProtoType.TYPE_FIXED32:
      return "TYPE_FIXED32";
    case FieldDescriptorProtoType.TYPE_BOOL:
      return "TYPE_BOOL";
    case FieldDescriptorProtoType.TYPE_STRING:
      return "TYPE_STRING";
    case FieldDescriptorProtoType.TYPE_GROUP:
      return "TYPE_GROUP";
    case FieldDescriptorProtoType.TYPE_MESSAGE:
      return "TYPE_MESSAGE";
    case FieldDescriptorProtoType.TYPE_BYTES:
      return "TYPE_BYTES";
    case FieldDescriptorProtoType.TYPE_UINT32:
      return "TYPE_UINT32";
    case FieldDescriptorProtoType.TYPE_ENUM:
      return "TYPE_ENUM";
    case FieldDescriptorProtoType.TYPE_SFIXED32:
      return "TYPE_SFIXED32";
    case FieldDescriptorProtoType.TYPE_SFIXED64:
      return "TYPE_SFIXED64";
    case FieldDescriptorProtoType.TYPE_SINT32:
      return "TYPE_SINT32";
    case FieldDescriptorProtoType.TYPE_SINT64:
      return "TYPE_SINT64";
    case FieldDescriptorProtoType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function fieldDescriptorProtoLabelFromJSON(object) {
  switch (object) {
    case 1:
    case "LABEL_OPTIONAL":
      return FieldDescriptorProtoLabel.LABEL_OPTIONAL;
    case 3:
    case "LABEL_REPEATED":
      return FieldDescriptorProtoLabel.LABEL_REPEATED;
    case 2:
    case "LABEL_REQUIRED":
      return FieldDescriptorProtoLabel.LABEL_REQUIRED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldDescriptorProtoLabel.UNRECOGNIZED;
  }
}
function fieldDescriptorProtoLabelToJSON(object) {
  switch (object) {
    case FieldDescriptorProtoLabel.LABEL_OPTIONAL:
      return "LABEL_OPTIONAL";
    case FieldDescriptorProtoLabel.LABEL_REPEATED:
      return "LABEL_REPEATED";
    case FieldDescriptorProtoLabel.LABEL_REQUIRED:
      return "LABEL_REQUIRED";
    case FieldDescriptorProtoLabel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function fileOptionsOptimizeModeFromJSON(object) {
  switch (object) {
    case 1:
    case "SPEED":
      return FileOptionsOptimizeMode.SPEED;
    case 2:
    case "CODE_SIZE":
      return FileOptionsOptimizeMode.CODE_SIZE;
    case 3:
    case "LITE_RUNTIME":
      return FileOptionsOptimizeMode.LITE_RUNTIME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FileOptionsOptimizeMode.UNRECOGNIZED;
  }
}
function fileOptionsOptimizeModeToJSON(object) {
  switch (object) {
    case FileOptionsOptimizeMode.SPEED:
      return "SPEED";
    case FileOptionsOptimizeMode.CODE_SIZE:
      return "CODE_SIZE";
    case FileOptionsOptimizeMode.LITE_RUNTIME:
      return "LITE_RUNTIME";
    case FileOptionsOptimizeMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function fieldOptionsCTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "STRING":
      return FieldOptionsCType.STRING;
    case 1:
    case "CORD":
      return FieldOptionsCType.CORD;
    case 2:
    case "STRING_PIECE":
      return FieldOptionsCType.STRING_PIECE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldOptionsCType.UNRECOGNIZED;
  }
}
function fieldOptionsCTypeToJSON(object) {
  switch (object) {
    case FieldOptionsCType.STRING:
      return "STRING";
    case FieldOptionsCType.CORD:
      return "CORD";
    case FieldOptionsCType.STRING_PIECE:
      return "STRING_PIECE";
    case FieldOptionsCType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function fieldOptionsJSTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "JS_NORMAL":
      return FieldOptionsJSType.JS_NORMAL;
    case 1:
    case "JS_STRING":
      return FieldOptionsJSType.JS_STRING;
    case 2:
    case "JS_NUMBER":
      return FieldOptionsJSType.JS_NUMBER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldOptionsJSType.UNRECOGNIZED;
  }
}
function fieldOptionsJSTypeToJSON(object) {
  switch (object) {
    case FieldOptionsJSType.JS_NORMAL:
      return "JS_NORMAL";
    case FieldOptionsJSType.JS_STRING:
      return "JS_STRING";
    case FieldOptionsJSType.JS_NUMBER:
      return "JS_NUMBER";
    case FieldOptionsJSType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function fieldOptionsOptionRetentionFromJSON(object) {
  switch (object) {
    case 0:
    case "RETENTION_UNKNOWN":
      return FieldOptionsOptionRetention.RETENTION_UNKNOWN;
    case 1:
    case "RETENTION_RUNTIME":
      return FieldOptionsOptionRetention.RETENTION_RUNTIME;
    case 2:
    case "RETENTION_SOURCE":
      return FieldOptionsOptionRetention.RETENTION_SOURCE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldOptionsOptionRetention.UNRECOGNIZED;
  }
}
function fieldOptionsOptionRetentionToJSON(object) {
  switch (object) {
    case FieldOptionsOptionRetention.RETENTION_UNKNOWN:
      return "RETENTION_UNKNOWN";
    case FieldOptionsOptionRetention.RETENTION_RUNTIME:
      return "RETENTION_RUNTIME";
    case FieldOptionsOptionRetention.RETENTION_SOURCE:
      return "RETENTION_SOURCE";
    case FieldOptionsOptionRetention.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function fieldOptionsOptionTargetTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "TARGET_TYPE_UNKNOWN":
      return FieldOptionsOptionTargetType.TARGET_TYPE_UNKNOWN;
    case 1:
    case "TARGET_TYPE_FILE":
      return FieldOptionsOptionTargetType.TARGET_TYPE_FILE;
    case 2:
    case "TARGET_TYPE_EXTENSION_RANGE":
      return FieldOptionsOptionTargetType.TARGET_TYPE_EXTENSION_RANGE;
    case 3:
    case "TARGET_TYPE_MESSAGE":
      return FieldOptionsOptionTargetType.TARGET_TYPE_MESSAGE;
    case 4:
    case "TARGET_TYPE_FIELD":
      return FieldOptionsOptionTargetType.TARGET_TYPE_FIELD;
    case 5:
    case "TARGET_TYPE_ONEOF":
      return FieldOptionsOptionTargetType.TARGET_TYPE_ONEOF;
    case 6:
    case "TARGET_TYPE_ENUM":
      return FieldOptionsOptionTargetType.TARGET_TYPE_ENUM;
    case 7:
    case "TARGET_TYPE_ENUM_ENTRY":
      return FieldOptionsOptionTargetType.TARGET_TYPE_ENUM_ENTRY;
    case 8:
    case "TARGET_TYPE_SERVICE":
      return FieldOptionsOptionTargetType.TARGET_TYPE_SERVICE;
    case 9:
    case "TARGET_TYPE_METHOD":
      return FieldOptionsOptionTargetType.TARGET_TYPE_METHOD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FieldOptionsOptionTargetType.UNRECOGNIZED;
  }
}
function fieldOptionsOptionTargetTypeToJSON(object) {
  switch (object) {
    case FieldOptionsOptionTargetType.TARGET_TYPE_UNKNOWN:
      return "TARGET_TYPE_UNKNOWN";
    case FieldOptionsOptionTargetType.TARGET_TYPE_FILE:
      return "TARGET_TYPE_FILE";
    case FieldOptionsOptionTargetType.TARGET_TYPE_EXTENSION_RANGE:
      return "TARGET_TYPE_EXTENSION_RANGE";
    case FieldOptionsOptionTargetType.TARGET_TYPE_MESSAGE:
      return "TARGET_TYPE_MESSAGE";
    case FieldOptionsOptionTargetType.TARGET_TYPE_FIELD:
      return "TARGET_TYPE_FIELD";
    case FieldOptionsOptionTargetType.TARGET_TYPE_ONEOF:
      return "TARGET_TYPE_ONEOF";
    case FieldOptionsOptionTargetType.TARGET_TYPE_ENUM:
      return "TARGET_TYPE_ENUM";
    case FieldOptionsOptionTargetType.TARGET_TYPE_ENUM_ENTRY:
      return "TARGET_TYPE_ENUM_ENTRY";
    case FieldOptionsOptionTargetType.TARGET_TYPE_SERVICE:
      return "TARGET_TYPE_SERVICE";
    case FieldOptionsOptionTargetType.TARGET_TYPE_METHOD:
      return "TARGET_TYPE_METHOD";
    case FieldOptionsOptionTargetType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function methodOptionsIdempotencyLevelFromJSON(object) {
  switch (object) {
    case 0:
    case "IDEMPOTENCY_UNKNOWN":
      return MethodOptionsIdempotencyLevel.IDEMPOTENCY_UNKNOWN;
    case 1:
    case "NO_SIDE_EFFECTS":
      return MethodOptionsIdempotencyLevel.NO_SIDE_EFFECTS;
    case 2:
    case "IDEMPOTENT":
      return MethodOptionsIdempotencyLevel.IDEMPOTENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MethodOptionsIdempotencyLevel.UNRECOGNIZED;
  }
}
function methodOptionsIdempotencyLevelToJSON(object) {
  switch (object) {
    case MethodOptionsIdempotencyLevel.IDEMPOTENCY_UNKNOWN:
      return "IDEMPOTENCY_UNKNOWN";
    case MethodOptionsIdempotencyLevel.NO_SIDE_EFFECTS:
      return "NO_SIDE_EFFECTS";
    case MethodOptionsIdempotencyLevel.IDEMPOTENT:
      return "IDEMPOTENT";
    case MethodOptionsIdempotencyLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function featureSetFieldPresenceFromJSON(object) {
  switch (object) {
    case 0:
    case "FIELD_PRESENCE_UNKNOWN":
      return FeatureSetFieldPresence.FIELD_PRESENCE_UNKNOWN;
    case 1:
    case "EXPLICIT":
      return FeatureSetFieldPresence.EXPLICIT;
    case 2:
    case "IMPLICIT":
      return FeatureSetFieldPresence.IMPLICIT;
    case 3:
    case "LEGACY_REQUIRED":
      return FeatureSetFieldPresence.LEGACY_REQUIRED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureSetFieldPresence.UNRECOGNIZED;
  }
}
function featureSetFieldPresenceToJSON(object) {
  switch (object) {
    case FeatureSetFieldPresence.FIELD_PRESENCE_UNKNOWN:
      return "FIELD_PRESENCE_UNKNOWN";
    case FeatureSetFieldPresence.EXPLICIT:
      return "EXPLICIT";
    case FeatureSetFieldPresence.IMPLICIT:
      return "IMPLICIT";
    case FeatureSetFieldPresence.LEGACY_REQUIRED:
      return "LEGACY_REQUIRED";
    case FeatureSetFieldPresence.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function featureSetEnumTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "ENUM_TYPE_UNKNOWN":
      return FeatureSetEnumType.ENUM_TYPE_UNKNOWN;
    case 1:
    case "OPEN":
      return FeatureSetEnumType.OPEN;
    case 2:
    case "CLOSED":
      return FeatureSetEnumType.CLOSED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureSetEnumType.UNRECOGNIZED;
  }
}
function featureSetEnumTypeToJSON(object) {
  switch (object) {
    case FeatureSetEnumType.ENUM_TYPE_UNKNOWN:
      return "ENUM_TYPE_UNKNOWN";
    case FeatureSetEnumType.OPEN:
      return "OPEN";
    case FeatureSetEnumType.CLOSED:
      return "CLOSED";
    case FeatureSetEnumType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function featureSetRepeatedFieldEncodingFromJSON(object) {
  switch (object) {
    case 0:
    case "REPEATED_FIELD_ENCODING_UNKNOWN":
      return FeatureSetRepeatedFieldEncoding.REPEATED_FIELD_ENCODING_UNKNOWN;
    case 1:
    case "PACKED":
      return FeatureSetRepeatedFieldEncoding.PACKED;
    case 2:
    case "EXPANDED":
      return FeatureSetRepeatedFieldEncoding.EXPANDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureSetRepeatedFieldEncoding.UNRECOGNIZED;
  }
}
function featureSetRepeatedFieldEncodingToJSON(object) {
  switch (object) {
    case FeatureSetRepeatedFieldEncoding.REPEATED_FIELD_ENCODING_UNKNOWN:
      return "REPEATED_FIELD_ENCODING_UNKNOWN";
    case FeatureSetRepeatedFieldEncoding.PACKED:
      return "PACKED";
    case FeatureSetRepeatedFieldEncoding.EXPANDED:
      return "EXPANDED";
    case FeatureSetRepeatedFieldEncoding.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function featureSetUtf8ValidationFromJSON(object) {
  switch (object) {
    case 0:
    case "UTF8_VALIDATION_UNKNOWN":
      return FeatureSetUtf8Validation.UTF8_VALIDATION_UNKNOWN;
    case 2:
    case "VERIFY":
      return FeatureSetUtf8Validation.VERIFY;
    case 3:
    case "NONE":
      return FeatureSetUtf8Validation.NONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureSetUtf8Validation.UNRECOGNIZED;
  }
}
function featureSetUtf8ValidationToJSON(object) {
  switch (object) {
    case FeatureSetUtf8Validation.UTF8_VALIDATION_UNKNOWN:
      return "UTF8_VALIDATION_UNKNOWN";
    case FeatureSetUtf8Validation.VERIFY:
      return "VERIFY";
    case FeatureSetUtf8Validation.NONE:
      return "NONE";
    case FeatureSetUtf8Validation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function featureSetMessageEncodingFromJSON(object) {
  switch (object) {
    case 0:
    case "MESSAGE_ENCODING_UNKNOWN":
      return FeatureSetMessageEncoding.MESSAGE_ENCODING_UNKNOWN;
    case 1:
    case "LENGTH_PREFIXED":
      return FeatureSetMessageEncoding.LENGTH_PREFIXED;
    case 2:
    case "DELIMITED":
      return FeatureSetMessageEncoding.DELIMITED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureSetMessageEncoding.UNRECOGNIZED;
  }
}
function featureSetMessageEncodingToJSON(object) {
  switch (object) {
    case FeatureSetMessageEncoding.MESSAGE_ENCODING_UNKNOWN:
      return "MESSAGE_ENCODING_UNKNOWN";
    case FeatureSetMessageEncoding.LENGTH_PREFIXED:
      return "LENGTH_PREFIXED";
    case FeatureSetMessageEncoding.DELIMITED:
      return "DELIMITED";
    case FeatureSetMessageEncoding.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function featureSetJsonFormatFromJSON(object) {
  switch (object) {
    case 0:
    case "JSON_FORMAT_UNKNOWN":
      return FeatureSetJsonFormat.JSON_FORMAT_UNKNOWN;
    case 1:
    case "ALLOW":
      return FeatureSetJsonFormat.ALLOW;
    case 2:
    case "LEGACY_BEST_EFFORT":
      return FeatureSetJsonFormat.LEGACY_BEST_EFFORT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureSetJsonFormat.UNRECOGNIZED;
  }
}
function featureSetJsonFormatToJSON(object) {
  switch (object) {
    case FeatureSetJsonFormat.JSON_FORMAT_UNKNOWN:
      return "JSON_FORMAT_UNKNOWN";
    case FeatureSetJsonFormat.ALLOW:
      return "ALLOW";
    case FeatureSetJsonFormat.LEGACY_BEST_EFFORT:
      return "LEGACY_BEST_EFFORT";
    case FeatureSetJsonFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function generatedCodeInfoAnnotationSemanticFromJSON(object) {
  switch (object) {
    case 0:
    case "NONE":
      return GeneratedCodeInfoAnnotationSemantic.NONE;
    case 1:
    case "SET":
      return GeneratedCodeInfoAnnotationSemantic.SET;
    case 2:
    case "ALIAS":
      return GeneratedCodeInfoAnnotationSemantic.ALIAS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GeneratedCodeInfoAnnotationSemantic.UNRECOGNIZED;
  }
}
function generatedCodeInfoAnnotationSemanticToJSON(object) {
  switch (object) {
    case GeneratedCodeInfoAnnotationSemantic.NONE:
      return "NONE";
    case GeneratedCodeInfoAnnotationSemantic.SET:
      return "SET";
    case GeneratedCodeInfoAnnotationSemantic.ALIAS:
      return "ALIAS";
    case GeneratedCodeInfoAnnotationSemantic.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
function createBaseFileDescriptorSet() {
  return { file: [] };
}
function createBaseFileDescriptorProto() {
  return {
    name: "",
    package: "",
    dependency: [],
    public_dependency: [],
    weak_dependency: [],
    message_type: [],
    enum_type: [],
    service: [],
    extension: [],
    options: void 0,
    source_code_info: void 0,
    syntax: "",
    edition: 0
  };
}
function createBaseDescriptorProto() {
  return {
    name: "",
    field: [],
    extension: [],
    nested_type: [],
    enum_type: [],
    extension_range: [],
    oneof_decl: [],
    options: void 0,
    reserved_range: [],
    reserved_name: []
  };
}
function createBaseDescriptorProtoExtensionRange() {
  return { start: 0, end: 0, options: void 0 };
}
function createBaseDescriptorProtoReservedRange() {
  return { start: 0, end: 0 };
}
function createBaseExtensionRangeOptions() {
  return { uninterpreted_option: [], declaration: [], features: void 0, verification: 1 };
}
function createBaseExtensionRangeOptionsDeclaration() {
  return { number: 0, full_name: "", type: "", reserved: false, repeated: false };
}
function createBaseFieldDescriptorProto() {
  return {
    name: "",
    number: 0,
    label: 1,
    type: 1,
    type_name: "",
    extendee: "",
    default_value: "",
    oneof_index: 0,
    json_name: "",
    options: void 0,
    proto3_optional: false
  };
}
function createBaseOneofDescriptorProto() {
  return { name: "", options: void 0 };
}
function createBaseEnumDescriptorProto() {
  return { name: "", value: [], options: void 0, reserved_range: [], reserved_name: [] };
}
function createBaseEnumDescriptorProtoEnumReservedRange() {
  return { start: 0, end: 0 };
}
function createBaseEnumValueDescriptorProto() {
  return { name: "", number: 0, options: void 0 };
}
function createBaseServiceDescriptorProto() {
  return { name: "", method: [], options: void 0 };
}
function createBaseMethodDescriptorProto() {
  return {
    name: "",
    input_type: "",
    output_type: "",
    options: void 0,
    client_streaming: false,
    server_streaming: false
  };
}
function createBaseFileOptions() {
  return {
    java_package: "",
    java_outer_classname: "",
    java_multiple_files: false,
    java_generate_equals_and_hash: false,
    java_string_check_utf8: false,
    optimize_for: 1,
    go_package: "",
    cc_generic_services: false,
    java_generic_services: false,
    py_generic_services: false,
    deprecated: false,
    cc_enable_arenas: true,
    objc_class_prefix: "",
    csharp_namespace: "",
    swift_prefix: "",
    php_class_prefix: "",
    php_namespace: "",
    php_metadata_namespace: "",
    ruby_package: "",
    features: void 0,
    uninterpreted_option: []
  };
}
function createBaseMessageOptions() {
  return {
    message_set_wire_format: false,
    no_standard_descriptor_accessor: false,
    deprecated: false,
    map_entry: false,
    deprecated_legacy_json_field_conflicts: false,
    features: void 0,
    uninterpreted_option: []
  };
}
function createBaseFieldOptions() {
  return {
    ctype: 0,
    packed: false,
    jstype: 0,
    lazy: false,
    unverified_lazy: false,
    deprecated: false,
    weak: false,
    debug_redact: false,
    retention: 0,
    targets: [],
    edition_defaults: [],
    features: void 0,
    feature_support: void 0,
    uninterpreted_option: []
  };
}
function createBaseFieldOptionsEditionDefault() {
  return { edition: 0, value: "" };
}
function createBaseFieldOptionsFeatureSupport() {
  return { edition_introduced: 0, edition_deprecated: 0, deprecation_warning: "", edition_removed: 0 };
}
function createBaseOneofOptions() {
  return { features: void 0, uninterpreted_option: [] };
}
function createBaseEnumOptions() {
  return {
    allow_alias: false,
    deprecated: false,
    deprecated_legacy_json_field_conflicts: false,
    features: void 0,
    uninterpreted_option: []
  };
}
function createBaseEnumValueOptions() {
  return {
    deprecated: false,
    features: void 0,
    debug_redact: false,
    feature_support: void 0,
    uninterpreted_option: []
  };
}
function createBaseServiceOptions() {
  return { features: void 0, deprecated: false, uninterpreted_option: [] };
}
function createBaseMethodOptions() {
  return { deprecated: false, idempotency_level: 0, features: void 0, uninterpreted_option: [] };
}
function createBaseUninterpretedOption() {
  return {
    name: [],
    identifier_value: "",
    positive_int_value: 0,
    negative_int_value: 0,
    double_value: 0,
    string_value: new Uint8Array(0),
    aggregate_value: ""
  };
}
function createBaseUninterpretedOptionNamePart() {
  return { name_part: "", is_extension: false };
}
function createBaseFeatureSet() {
  return {
    field_presence: 0,
    enum_type: 0,
    repeated_field_encoding: 0,
    utf8_validation: 0,
    message_encoding: 0,
    json_format: 0
  };
}
function createBaseFeatureSetDefaults() {
  return { defaults: [], minimum_edition: 0, maximum_edition: 0 };
}
function createBaseFeatureSetDefaultsFeatureSetEditionDefault() {
  return { edition: 0, overridable_features: void 0, fixed_features: void 0 };
}
function createBaseSourceCodeInfo() {
  return { location: [] };
}
function createBaseSourceCodeInfoLocation() {
  return { path: [], span: [], leading_comments: "", trailing_comments: "", leading_detached_comments: [] };
}
function createBaseGeneratedCodeInfo() {
  return { annotation: [] };
}
function createBaseGeneratedCodeInfoAnnotation() {
  return { path: [], source_file: "", begin: 0, end: 0, semantic: 0 };
}
function bytesFromBase6446(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes46(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}
function longToNumber54(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet109(value) {
  return value !== null && value !== void 0;
}
var registry115 = [
  ["/google.protobuf.FileDescriptorSet", FileDescriptorSet],
  ["/google.protobuf.FileDescriptorProto", FileDescriptorProto],
  ["/google.protobuf.DescriptorProto", DescriptorProto],
  ["/google.protobuf.DescriptorProto.ExtensionRange", DescriptorProtoExtensionRange],
  ["/google.protobuf.DescriptorProto.ReservedRange", DescriptorProtoReservedRange],
  ["/google.protobuf.ExtensionRangeOptions", ExtensionRangeOptions],
  ["/google.protobuf.ExtensionRangeOptions.Declaration", ExtensionRangeOptionsDeclaration],
  ["/google.protobuf.FieldDescriptorProto", FieldDescriptorProto],
  ["/google.protobuf.OneofDescriptorProto", OneofDescriptorProto],
  ["/google.protobuf.EnumDescriptorProto", EnumDescriptorProto],
  ["/google.protobuf.EnumDescriptorProto.EnumReservedRange", EnumDescriptorProtoEnumReservedRange],
  ["/google.protobuf.EnumValueDescriptorProto", EnumValueDescriptorProto],
  ["/google.protobuf.ServiceDescriptorProto", ServiceDescriptorProto],
  ["/google.protobuf.MethodDescriptorProto", MethodDescriptorProto],
  ["/google.protobuf.FileOptions", FileOptions],
  ["/google.protobuf.MessageOptions", MessageOptions],
  ["/google.protobuf.FieldOptions", FieldOptions],
  ["/google.protobuf.FieldOptions.EditionDefault", FieldOptionsEditionDefault],
  ["/google.protobuf.FieldOptions.FeatureSupport", FieldOptionsFeatureSupport],
  ["/google.protobuf.OneofOptions", OneofOptions],
  ["/google.protobuf.EnumOptions", EnumOptions],
  ["/google.protobuf.EnumValueOptions", EnumValueOptions],
  ["/google.protobuf.ServiceOptions", ServiceOptions],
  ["/google.protobuf.MethodOptions", MethodOptions],
  ["/google.protobuf.UninterpretedOption", UninterpretedOption],
  ["/google.protobuf.UninterpretedOption.NamePart", UninterpretedOptionNamePart],
  ["/google.protobuf.FeatureSet", FeatureSet],
  ["/google.protobuf.FeatureSetDefaults", FeatureSetDefaults],
  ["/google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault", FeatureSetDefaultsFeatureSetEditionDefault],
  ["/google.protobuf.SourceCodeInfo", SourceCodeInfo],
  ["/google.protobuf.SourceCodeInfo.Location", SourceCodeInfoLocation],
  ["/google.protobuf.GeneratedCodeInfo", GeneratedCodeInfo],
  ["/google.protobuf.GeneratedCodeInfo.Annotation", GeneratedCodeInfoAnnotation]
];
var aminoConverters115 = {
  "/google.protobuf.FileDescriptorSet": {
    aminoType: "google.protobuf.FileDescriptorSet",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.FileDescriptorProto": {
    aminoType: "google.protobuf.FileDescriptorProto",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.DescriptorProto": {
    aminoType: "google.protobuf.DescriptorProto",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.DescriptorProto.ExtensionRange": {
    aminoType: "google.protobuf.DescriptorProto.ExtensionRange",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.DescriptorProto.ReservedRange": {
    aminoType: "google.protobuf.DescriptorProto.ReservedRange",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.ExtensionRangeOptions": {
    aminoType: "google.protobuf.ExtensionRangeOptions",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.ExtensionRangeOptions.Declaration": {
    aminoType: "google.protobuf.ExtensionRangeOptions.Declaration",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.FieldDescriptorProto": {
    aminoType: "google.protobuf.FieldDescriptorProto",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.OneofDescriptorProto": {
    aminoType: "google.protobuf.OneofDescriptorProto",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.EnumDescriptorProto": {
    aminoType: "google.protobuf.EnumDescriptorProto",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.EnumDescriptorProto.EnumReservedRange": {
    aminoType: "google.protobuf.EnumDescriptorProto.EnumReservedRange",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.EnumValueDescriptorProto": {
    aminoType: "google.protobuf.EnumValueDescriptorProto",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.ServiceDescriptorProto": {
    aminoType: "google.protobuf.ServiceDescriptorProto",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.MethodDescriptorProto": {
    aminoType: "google.protobuf.MethodDescriptorProto",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.FileOptions": {
    aminoType: "google.protobuf.FileOptions",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.MessageOptions": {
    aminoType: "google.protobuf.MessageOptions",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.FieldOptions": {
    aminoType: "google.protobuf.FieldOptions",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.FieldOptions.EditionDefault": {
    aminoType: "google.protobuf.FieldOptions.EditionDefault",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.FieldOptions.FeatureSupport": {
    aminoType: "google.protobuf.FieldOptions.FeatureSupport",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.OneofOptions": {
    aminoType: "google.protobuf.OneofOptions",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.EnumOptions": {
    aminoType: "google.protobuf.EnumOptions",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.EnumValueOptions": {
    aminoType: "google.protobuf.EnumValueOptions",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.ServiceOptions": {
    aminoType: "google.protobuf.ServiceOptions",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.MethodOptions": {
    aminoType: "google.protobuf.MethodOptions",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.UninterpretedOption": {
    aminoType: "google.protobuf.UninterpretedOption",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.UninterpretedOption.NamePart": {
    aminoType: "google.protobuf.UninterpretedOption.NamePart",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.FeatureSet": {
    aminoType: "google.protobuf.FeatureSet",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.FeatureSetDefaults": {
    aminoType: "google.protobuf.FeatureSetDefaults",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault": {
    aminoType: "google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.SourceCodeInfo": {
    aminoType: "google.protobuf.SourceCodeInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.SourceCodeInfo.Location": {
    aminoType: "google.protobuf.SourceCodeInfo.Location",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.GeneratedCodeInfo": {
    aminoType: "google.protobuf.GeneratedCodeInfo",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/google.protobuf.GeneratedCodeInfo.Annotation": {
    aminoType: "google.protobuf.GeneratedCodeInfo.Annotation",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/mint/v1beta1/index.js
var v1beta1_exports27 = {};
__export(v1beta1_exports27, {
  GenesisState: () => GenesisState19,
  Minter: () => Minter2,
  Params: () => Params11,
  QueryMinterRequest: () => QueryMinterRequest,
  QueryMinterResponse: () => QueryMinterResponse,
  QueryParamsRequest: () => QueryParamsRequest11,
  QueryParamsResponse: () => QueryParamsResponse11,
  ScheduledTokenRelease: () => ScheduledTokenRelease,
  UpdateMinterProposal: () => UpdateMinterProposal,
  Version2Minter: () => Version2Minter,
  Version2Params: () => Version2Params,
  Version2ScheduledTokenRelease: () => Version2ScheduledTokenRelease
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/mint/v1beta1/mint.js
var Minter2 = {
  $type: "seiprotocol.seichain.mint.Minter",
  encode(message, writer = new BinaryWriter()) {
    if (message.start_date !== "") {
      writer.uint32(10).string(message.start_date);
    }
    if (message.end_date !== "") {
      writer.uint32(18).string(message.end_date);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    if (message.total_mint_amount !== 0) {
      writer.uint32(32).uint64(message.total_mint_amount);
    }
    if (message.remaining_mint_amount !== 0) {
      writer.uint32(40).uint64(message.remaining_mint_amount);
    }
    if (message.last_mint_amount !== 0) {
      writer.uint32(48).uint64(message.last_mint_amount);
    }
    if (message.last_mint_date !== "") {
      writer.uint32(58).string(message.last_mint_date);
    }
    if (message.last_mint_height !== 0) {
      writer.uint32(64).uint64(message.last_mint_height);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMinter2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.start_date = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.end_date = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.total_mint_amount = longToNumber55(reader.uint64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.remaining_mint_amount = longToNumber55(reader.uint64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.last_mint_amount = longToNumber55(reader.uint64());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.last_mint_date = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }
          message.last_mint_height = longToNumber55(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      start_date: isSet110(object.start_date) ? globalThis.String(object.start_date) : "",
      end_date: isSet110(object.end_date) ? globalThis.String(object.end_date) : "",
      denom: isSet110(object.denom) ? globalThis.String(object.denom) : "",
      total_mint_amount: isSet110(object.total_mint_amount) ? globalThis.Number(object.total_mint_amount) : 0,
      remaining_mint_amount: isSet110(object.remaining_mint_amount) ? globalThis.Number(object.remaining_mint_amount) : 0,
      last_mint_amount: isSet110(object.last_mint_amount) ? globalThis.Number(object.last_mint_amount) : 0,
      last_mint_date: isSet110(object.last_mint_date) ? globalThis.String(object.last_mint_date) : "",
      last_mint_height: isSet110(object.last_mint_height) ? globalThis.Number(object.last_mint_height) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.start_date !== "") {
      obj.start_date = message.start_date;
    }
    if (message.end_date !== "") {
      obj.end_date = message.end_date;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.total_mint_amount !== 0) {
      obj.total_mint_amount = Math.round(message.total_mint_amount);
    }
    if (message.remaining_mint_amount !== 0) {
      obj.remaining_mint_amount = Math.round(message.remaining_mint_amount);
    }
    if (message.last_mint_amount !== 0) {
      obj.last_mint_amount = Math.round(message.last_mint_amount);
    }
    if (message.last_mint_date !== "") {
      obj.last_mint_date = message.last_mint_date;
    }
    if (message.last_mint_height !== 0) {
      obj.last_mint_height = Math.round(message.last_mint_height);
    }
    return obj;
  },
  create(base) {
    return Minter2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMinter2();
    message.start_date = object.start_date ?? "";
    message.end_date = object.end_date ?? "";
    message.denom = object.denom ?? "";
    message.total_mint_amount = object.total_mint_amount ?? 0;
    message.remaining_mint_amount = object.remaining_mint_amount ?? 0;
    message.last_mint_amount = object.last_mint_amount ?? 0;
    message.last_mint_date = object.last_mint_date ?? "";
    message.last_mint_height = object.last_mint_height ?? 0;
    return message;
  }
};
var ScheduledTokenRelease = {
  $type: "seiprotocol.seichain.mint.ScheduledTokenRelease",
  encode(message, writer = new BinaryWriter()) {
    if (message.start_date !== "") {
      writer.uint32(10).string(message.start_date);
    }
    if (message.end_date !== "") {
      writer.uint32(18).string(message.end_date);
    }
    if (message.token_release_amount !== 0) {
      writer.uint32(24).uint64(message.token_release_amount);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseScheduledTokenRelease();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.start_date = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.end_date = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.token_release_amount = longToNumber55(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      start_date: isSet110(object.start_date) ? globalThis.String(object.start_date) : "",
      end_date: isSet110(object.end_date) ? globalThis.String(object.end_date) : "",
      token_release_amount: isSet110(object.token_release_amount) ? globalThis.Number(object.token_release_amount) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.start_date !== "") {
      obj.start_date = message.start_date;
    }
    if (message.end_date !== "") {
      obj.end_date = message.end_date;
    }
    if (message.token_release_amount !== 0) {
      obj.token_release_amount = Math.round(message.token_release_amount);
    }
    return obj;
  },
  create(base) {
    return ScheduledTokenRelease.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseScheduledTokenRelease();
    message.start_date = object.start_date ?? "";
    message.end_date = object.end_date ?? "";
    message.token_release_amount = object.token_release_amount ?? 0;
    return message;
  }
};
var Params11 = {
  $type: "seiprotocol.seichain.mint.Params",
  encode(message, writer = new BinaryWriter()) {
    if (message.mint_denom !== "") {
      writer.uint32(10).string(message.mint_denom);
    }
    for (const v of message.token_release_schedule) {
      ScheduledTokenRelease.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams11();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.mint_denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.token_release_schedule.push(ScheduledTokenRelease.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      mint_denom: isSet110(object.mint_denom) ? globalThis.String(object.mint_denom) : "",
      token_release_schedule: globalThis.Array.isArray(object == null ? void 0 : object.token_release_schedule) ? object.token_release_schedule.map((e) => ScheduledTokenRelease.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.mint_denom !== "") {
      obj.mint_denom = message.mint_denom;
    }
    if ((_a = message.token_release_schedule) == null ? void 0 : _a.length) {
      obj.token_release_schedule = message.token_release_schedule.map((e) => ScheduledTokenRelease.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Params11.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseParams11();
    message.mint_denom = object.mint_denom ?? "";
    message.token_release_schedule = ((_a = object.token_release_schedule) == null ? void 0 : _a.map((e) => ScheduledTokenRelease.fromPartial(e))) || [];
    return message;
  }
};
var Version2Minter = {
  $type: "seiprotocol.seichain.mint.Version2Minter",
  encode(message, writer = new BinaryWriter()) {
    if (message.last_mint_amount !== "") {
      writer.uint32(10).string(message.last_mint_amount);
    }
    if (message.last_mint_date !== "") {
      writer.uint32(18).string(message.last_mint_date);
    }
    if (message.last_mint_height !== 0) {
      writer.uint32(24).int64(message.last_mint_height);
    }
    if (message.denom !== "") {
      writer.uint32(34).string(message.denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVersion2Minter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.last_mint_amount = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.last_mint_date = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.last_mint_height = longToNumber55(reader.int64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      last_mint_amount: isSet110(object.last_mint_amount) ? globalThis.String(object.last_mint_amount) : "",
      last_mint_date: isSet110(object.last_mint_date) ? globalThis.String(object.last_mint_date) : "",
      last_mint_height: isSet110(object.last_mint_height) ? globalThis.Number(object.last_mint_height) : 0,
      denom: isSet110(object.denom) ? globalThis.String(object.denom) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.last_mint_amount !== "") {
      obj.last_mint_amount = message.last_mint_amount;
    }
    if (message.last_mint_date !== "") {
      obj.last_mint_date = message.last_mint_date;
    }
    if (message.last_mint_height !== 0) {
      obj.last_mint_height = Math.round(message.last_mint_height);
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },
  create(base) {
    return Version2Minter.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseVersion2Minter();
    message.last_mint_amount = object.last_mint_amount ?? "";
    message.last_mint_date = object.last_mint_date ?? "";
    message.last_mint_height = object.last_mint_height ?? 0;
    message.denom = object.denom ?? "";
    return message;
  }
};
var Version2ScheduledTokenRelease = {
  $type: "seiprotocol.seichain.mint.Version2ScheduledTokenRelease",
  encode(message, writer = new BinaryWriter()) {
    if (message.date !== "") {
      writer.uint32(10).string(message.date);
    }
    if (message.token_release_amount !== 0) {
      writer.uint32(16).int64(message.token_release_amount);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVersion2ScheduledTokenRelease();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.date = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.token_release_amount = longToNumber55(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      date: isSet110(object.date) ? globalThis.String(object.date) : "",
      token_release_amount: isSet110(object.token_release_amount) ? globalThis.Number(object.token_release_amount) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.token_release_amount !== 0) {
      obj.token_release_amount = Math.round(message.token_release_amount);
    }
    return obj;
  },
  create(base) {
    return Version2ScheduledTokenRelease.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseVersion2ScheduledTokenRelease();
    message.date = object.date ?? "";
    message.token_release_amount = object.token_release_amount ?? 0;
    return message;
  }
};
var Version2Params = {
  $type: "seiprotocol.seichain.mint.Version2Params",
  encode(message, writer = new BinaryWriter()) {
    if (message.mint_denom !== "") {
      writer.uint32(10).string(message.mint_denom);
    }
    for (const v of message.token_release_schedule) {
      Version2ScheduledTokenRelease.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVersion2Params();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.mint_denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.token_release_schedule.push(Version2ScheduledTokenRelease.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      mint_denom: isSet110(object.mint_denom) ? globalThis.String(object.mint_denom) : "",
      token_release_schedule: globalThis.Array.isArray(object == null ? void 0 : object.token_release_schedule) ? object.token_release_schedule.map((e) => Version2ScheduledTokenRelease.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.mint_denom !== "") {
      obj.mint_denom = message.mint_denom;
    }
    if ((_a = message.token_release_schedule) == null ? void 0 : _a.length) {
      obj.token_release_schedule = message.token_release_schedule.map((e) => Version2ScheduledTokenRelease.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return Version2Params.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseVersion2Params();
    message.mint_denom = object.mint_denom ?? "";
    message.token_release_schedule = ((_a = object.token_release_schedule) == null ? void 0 : _a.map((e) => Version2ScheduledTokenRelease.fromPartial(e))) || [];
    return message;
  }
};
function createBaseMinter2() {
  return {
    start_date: "",
    end_date: "",
    denom: "",
    total_mint_amount: 0,
    remaining_mint_amount: 0,
    last_mint_amount: 0,
    last_mint_date: "",
    last_mint_height: 0
  };
}
function createBaseScheduledTokenRelease() {
  return { start_date: "", end_date: "", token_release_amount: 0 };
}
function createBaseParams11() {
  return { mint_denom: "", token_release_schedule: [] };
}
function createBaseVersion2Minter() {
  return { last_mint_amount: "", last_mint_date: "", last_mint_height: 0, denom: "" };
}
function createBaseVersion2ScheduledTokenRelease() {
  return { date: "", token_release_amount: 0 };
}
function createBaseVersion2Params() {
  return { mint_denom: "", token_release_schedule: [] };
}
function longToNumber55(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet110(value) {
  return value !== null && value !== void 0;
}
var registry116 = [
  ["/seiprotocol.seichain.mint.Minter", Minter2],
  ["/seiprotocol.seichain.mint.ScheduledTokenRelease", ScheduledTokenRelease],
  ["/seiprotocol.seichain.mint.Params", Params11],
  ["/seiprotocol.seichain.mint.Version2Minter", Version2Minter],
  ["/seiprotocol.seichain.mint.Version2ScheduledTokenRelease", Version2ScheduledTokenRelease],
  ["/seiprotocol.seichain.mint.Version2Params", Version2Params]
];
var aminoConverters116 = {
  "/seiprotocol.seichain.mint.Minter": {
    aminoType: "mint/Minter",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.mint.ScheduledTokenRelease": {
    aminoType: "mint/ScheduledTokenRelease",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.mint.Params": {
    aminoType: "mint/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.mint.Version2Minter": {
    aminoType: "mint/Version2Minter",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.mint.Version2ScheduledTokenRelease": {
    aminoType: "mint/Version2ScheduledTokenRelease",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.mint.Version2Params": {
    aminoType: "mint/Version2Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/mint/v1beta1/genesis.js
var GenesisState19 = {
  $type: "seiprotocol.seichain.mint.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.minter !== void 0) {
      Minter2.encode(message.minter, writer.uint32(10).fork()).join();
    }
    if (message.params !== void 0) {
      Params11.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState19();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.minter = Minter2.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.params = Params11.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      minter: isSet111(object.minter) ? Minter2.fromJSON(object.minter) : void 0,
      params: isSet111(object.params) ? Params11.fromJSON(object.params) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.minter !== void 0) {
      obj.minter = Minter2.toJSON(message.minter);
    }
    if (message.params !== void 0) {
      obj.params = Params11.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return GenesisState19.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGenesisState19();
    message.minter = object.minter !== void 0 && object.minter !== null ? Minter2.fromPartial(object.minter) : void 0;
    message.params = object.params !== void 0 && object.params !== null ? Params11.fromPartial(object.params) : void 0;
    return message;
  }
};
function createBaseGenesisState19() {
  return { minter: void 0, params: void 0 };
}
function isSet111(value) {
  return value !== null && value !== void 0;
}
var registry117 = [["/seiprotocol.seichain.mint.GenesisState", GenesisState19]];
var aminoConverters117 = {
  "/seiprotocol.seichain.mint.GenesisState": {
    aminoType: "mint/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/mint/v1beta1/gov.js
var UpdateMinterProposal = {
  $type: "seiprotocol.seichain.mint.UpdateMinterProposal",
  encode(message, writer = new BinaryWriter()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.minter !== void 0) {
      Minter2.encode(message.minter, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUpdateMinterProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.minter = Minter2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      title: isSet112(object.title) ? globalThis.String(object.title) : "",
      description: isSet112(object.description) ? globalThis.String(object.description) : "",
      minter: isSet112(object.minter) ? Minter2.fromJSON(object.minter) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.minter !== void 0) {
      obj.minter = Minter2.toJSON(message.minter);
    }
    return obj;
  },
  create(base) {
    return UpdateMinterProposal.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseUpdateMinterProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.minter = object.minter !== void 0 && object.minter !== null ? Minter2.fromPartial(object.minter) : void 0;
    return message;
  }
};
function createBaseUpdateMinterProposal() {
  return { title: "", description: "", minter: void 0 };
}
function isSet112(value) {
  return value !== null && value !== void 0;
}
var registry118 = [["/seiprotocol.seichain.mint.UpdateMinterProposal", UpdateMinterProposal]];
var aminoConverters118 = {
  "/seiprotocol.seichain.mint.UpdateMinterProposal": {
    aminoType: "mint/UpdateMinterProposal",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/mint/v1beta1/query.js
var QueryParamsRequest11 = {
  $type: "seiprotocol.seichain.mint.QueryParamsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest11();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryParamsRequest11.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest11();
    return message;
  }
};
var QueryParamsResponse11 = {
  $type: "seiprotocol.seichain.mint.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params11.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse11();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params11.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { params: isSet113(object.params) ? Params11.fromJSON(object.params) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params11.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse11.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse11();
    message.params = object.params !== void 0 && object.params !== null ? Params11.fromPartial(object.params) : void 0;
    return message;
  }
};
var QueryMinterRequest = {
  $type: "seiprotocol.seichain.mint.QueryMinterRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryMinterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryMinterRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryMinterRequest();
    return message;
  }
};
var QueryMinterResponse = {
  $type: "seiprotocol.seichain.mint.QueryMinterResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.start_date !== "") {
      writer.uint32(10).string(message.start_date);
    }
    if (message.end_date !== "") {
      writer.uint32(18).string(message.end_date);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    if (message.total_mint_amount !== 0) {
      writer.uint32(32).uint64(message.total_mint_amount);
    }
    if (message.remaining_mint_amount !== 0) {
      writer.uint32(40).uint64(message.remaining_mint_amount);
    }
    if (message.last_mint_amount !== 0) {
      writer.uint32(48).uint64(message.last_mint_amount);
    }
    if (message.last_mint_date !== "") {
      writer.uint32(58).string(message.last_mint_date);
    }
    if (message.last_mint_height !== 0) {
      writer.uint32(64).uint64(message.last_mint_height);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryMinterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.start_date = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.end_date = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.total_mint_amount = longToNumber56(reader.uint64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.remaining_mint_amount = longToNumber56(reader.uint64());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.last_mint_amount = longToNumber56(reader.uint64());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.last_mint_date = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }
          message.last_mint_height = longToNumber56(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      start_date: isSet113(object.start_date) ? globalThis.String(object.start_date) : "",
      end_date: isSet113(object.end_date) ? globalThis.String(object.end_date) : "",
      denom: isSet113(object.denom) ? globalThis.String(object.denom) : "",
      total_mint_amount: isSet113(object.total_mint_amount) ? globalThis.Number(object.total_mint_amount) : 0,
      remaining_mint_amount: isSet113(object.remaining_mint_amount) ? globalThis.Number(object.remaining_mint_amount) : 0,
      last_mint_amount: isSet113(object.last_mint_amount) ? globalThis.Number(object.last_mint_amount) : 0,
      last_mint_date: isSet113(object.last_mint_date) ? globalThis.String(object.last_mint_date) : "",
      last_mint_height: isSet113(object.last_mint_height) ? globalThis.Number(object.last_mint_height) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.start_date !== "") {
      obj.start_date = message.start_date;
    }
    if (message.end_date !== "") {
      obj.end_date = message.end_date;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.total_mint_amount !== 0) {
      obj.total_mint_amount = Math.round(message.total_mint_amount);
    }
    if (message.remaining_mint_amount !== 0) {
      obj.remaining_mint_amount = Math.round(message.remaining_mint_amount);
    }
    if (message.last_mint_amount !== 0) {
      obj.last_mint_amount = Math.round(message.last_mint_amount);
    }
    if (message.last_mint_date !== "") {
      obj.last_mint_date = message.last_mint_date;
    }
    if (message.last_mint_height !== 0) {
      obj.last_mint_height = Math.round(message.last_mint_height);
    }
    return obj;
  },
  create(base) {
    return QueryMinterResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryMinterResponse();
    message.start_date = object.start_date ?? "";
    message.end_date = object.end_date ?? "";
    message.denom = object.denom ?? "";
    message.total_mint_amount = object.total_mint_amount ?? 0;
    message.remaining_mint_amount = object.remaining_mint_amount ?? 0;
    message.last_mint_amount = object.last_mint_amount ?? 0;
    message.last_mint_date = object.last_mint_date ?? "";
    message.last_mint_height = object.last_mint_height ?? 0;
    return message;
  }
};
function createBaseQueryParamsRequest11() {
  return {};
}
function createBaseQueryParamsResponse11() {
  return { params: void 0 };
}
function createBaseQueryMinterRequest() {
  return {};
}
function createBaseQueryMinterResponse() {
  return {
    start_date: "",
    end_date: "",
    denom: "",
    total_mint_amount: 0,
    remaining_mint_amount: 0,
    last_mint_amount: 0,
    last_mint_date: "",
    last_mint_height: 0
  };
}
function longToNumber56(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet113(value) {
  return value !== null && value !== void 0;
}
var registry119 = [
  ["/seiprotocol.seichain.mint.QueryParamsRequest", QueryParamsRequest11],
  ["/seiprotocol.seichain.mint.QueryParamsResponse", QueryParamsResponse11],
  ["/seiprotocol.seichain.mint.QueryMinterRequest", QueryMinterRequest],
  ["/seiprotocol.seichain.mint.QueryMinterResponse", QueryMinterResponse]
];
var aminoConverters119 = {
  "/seiprotocol.seichain.mint.QueryParamsRequest": {
    aminoType: "mint/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.mint.QueryParamsResponse": {
    aminoType: "mint/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.mint.QueryMinterRequest": {
    aminoType: "mint/QueryMinterRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.mint.QueryMinterResponse": {
    aminoType: "mint/QueryMinterResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/oracle/index.js
var oracle_exports = {};
__export(oracle_exports, {
  AggregateExchangeRateVote: () => AggregateExchangeRateVote,
  Denom: () => Denom,
  DenomOracleExchangeRatePair: () => DenomOracleExchangeRatePair,
  ExchangeRateTuple: () => ExchangeRateTuple,
  FeederDelegation: () => FeederDelegation,
  GenesisState: () => GenesisState20,
  MsgAggregateExchangeRateVote: () => MsgAggregateExchangeRateVote,
  MsgAggregateExchangeRateVoteResponse: () => MsgAggregateExchangeRateVoteResponse,
  MsgDelegateFeedConsent: () => MsgDelegateFeedConsent,
  MsgDelegateFeedConsentResponse: () => MsgDelegateFeedConsentResponse,
  OracleExchangeRate: () => OracleExchangeRate,
  OracleTwap: () => OracleTwap,
  Params: () => Params12,
  PenaltyCounter: () => PenaltyCounter,
  PriceSnapshot: () => PriceSnapshot,
  PriceSnapshotItem: () => PriceSnapshotItem,
  QueryActivesRequest: () => QueryActivesRequest,
  QueryActivesResponse: () => QueryActivesResponse,
  QueryExchangeRateRequest: () => QueryExchangeRateRequest,
  QueryExchangeRateResponse: () => QueryExchangeRateResponse,
  QueryExchangeRatesRequest: () => QueryExchangeRatesRequest,
  QueryExchangeRatesResponse: () => QueryExchangeRatesResponse,
  QueryFeederDelegationRequest: () => QueryFeederDelegationRequest,
  QueryFeederDelegationResponse: () => QueryFeederDelegationResponse,
  QueryParamsRequest: () => QueryParamsRequest12,
  QueryParamsResponse: () => QueryParamsResponse12,
  QueryPriceSnapshotHistoryRequest: () => QueryPriceSnapshotHistoryRequest,
  QueryPriceSnapshotHistoryResponse: () => QueryPriceSnapshotHistoryResponse,
  QuerySlashWindowRequest: () => QuerySlashWindowRequest,
  QuerySlashWindowResponse: () => QuerySlashWindowResponse,
  QueryTwapsRequest: () => QueryTwapsRequest,
  QueryTwapsResponse: () => QueryTwapsResponse,
  QueryVotePenaltyCounterRequest: () => QueryVotePenaltyCounterRequest,
  QueryVotePenaltyCounterResponse: () => QueryVotePenaltyCounterResponse,
  QueryVoteTargetsRequest: () => QueryVoteTargetsRequest,
  QueryVoteTargetsResponse: () => QueryVoteTargetsResponse,
  VotePenaltyCounter: () => VotePenaltyCounter
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/oracle/oracle.js
var Params12 = {
  $type: "seiprotocol.seichain.oracle.Params",
  encode(message, writer = new BinaryWriter()) {
    if (message.vote_period !== 0) {
      writer.uint32(8).uint64(message.vote_period);
    }
    if (message.vote_threshold !== "") {
      writer.uint32(18).string(message.vote_threshold);
    }
    if (message.reward_band !== "") {
      writer.uint32(26).string(message.reward_band);
    }
    for (const v of message.whitelist) {
      Denom.encode(v, writer.uint32(34).fork()).join();
    }
    if (message.slash_fraction !== "") {
      writer.uint32(42).string(message.slash_fraction);
    }
    if (message.slash_window !== 0) {
      writer.uint32(48).uint64(message.slash_window);
    }
    if (message.min_valid_per_window !== "") {
      writer.uint32(58).string(message.min_valid_per_window);
    }
    if (message.lookback_duration !== 0) {
      writer.uint32(72).uint64(message.lookback_duration);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams12();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.vote_period = longToNumber57(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.vote_threshold = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.reward_band = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.whitelist.push(Denom.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.slash_fraction = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.slash_window = longToNumber57(reader.uint64());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.min_valid_per_window = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }
          message.lookback_duration = longToNumber57(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      vote_period: isSet114(object.vote_period) ? globalThis.Number(object.vote_period) : 0,
      vote_threshold: isSet114(object.vote_threshold) ? globalThis.String(object.vote_threshold) : "",
      reward_band: isSet114(object.reward_band) ? globalThis.String(object.reward_band) : "",
      whitelist: globalThis.Array.isArray(object == null ? void 0 : object.whitelist) ? object.whitelist.map((e) => Denom.fromJSON(e)) : [],
      slash_fraction: isSet114(object.slash_fraction) ? globalThis.String(object.slash_fraction) : "",
      slash_window: isSet114(object.slash_window) ? globalThis.Number(object.slash_window) : 0,
      min_valid_per_window: isSet114(object.min_valid_per_window) ? globalThis.String(object.min_valid_per_window) : "",
      lookback_duration: isSet114(object.lookback_duration) ? globalThis.Number(object.lookback_duration) : 0
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.vote_period !== 0) {
      obj.vote_period = Math.round(message.vote_period);
    }
    if (message.vote_threshold !== "") {
      obj.vote_threshold = message.vote_threshold;
    }
    if (message.reward_band !== "") {
      obj.reward_band = message.reward_band;
    }
    if ((_a = message.whitelist) == null ? void 0 : _a.length) {
      obj.whitelist = message.whitelist.map((e) => Denom.toJSON(e));
    }
    if (message.slash_fraction !== "") {
      obj.slash_fraction = message.slash_fraction;
    }
    if (message.slash_window !== 0) {
      obj.slash_window = Math.round(message.slash_window);
    }
    if (message.min_valid_per_window !== "") {
      obj.min_valid_per_window = message.min_valid_per_window;
    }
    if (message.lookback_duration !== 0) {
      obj.lookback_duration = Math.round(message.lookback_duration);
    }
    return obj;
  },
  create(base) {
    return Params12.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseParams12();
    message.vote_period = object.vote_period ?? 0;
    message.vote_threshold = object.vote_threshold ?? "";
    message.reward_band = object.reward_band ?? "";
    message.whitelist = ((_a = object.whitelist) == null ? void 0 : _a.map((e) => Denom.fromPartial(e))) || [];
    message.slash_fraction = object.slash_fraction ?? "";
    message.slash_window = object.slash_window ?? 0;
    message.min_valid_per_window = object.min_valid_per_window ?? "";
    message.lookback_duration = object.lookback_duration ?? 0;
    return message;
  }
};
var Denom = {
  $type: "seiprotocol.seichain.oracle.Denom",
  encode(message, writer = new BinaryWriter()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { name: isSet114(object.name) ? globalThis.String(object.name) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },
  create(base) {
    return Denom.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDenom();
    message.name = object.name ?? "";
    return message;
  }
};
var AggregateExchangeRateVote = {
  $type: "seiprotocol.seichain.oracle.AggregateExchangeRateVote",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.exchange_rate_tuples) {
      ExchangeRateTuple.encode(v, writer.uint32(10).fork()).join();
    }
    if (message.voter !== "") {
      writer.uint32(18).string(message.voter);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAggregateExchangeRateVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.exchange_rate_tuples.push(ExchangeRateTuple.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.voter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      exchange_rate_tuples: globalThis.Array.isArray(object == null ? void 0 : object.exchange_rate_tuples) ? object.exchange_rate_tuples.map((e) => ExchangeRateTuple.fromJSON(e)) : [],
      voter: isSet114(object.voter) ? globalThis.String(object.voter) : ""
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.exchange_rate_tuples) == null ? void 0 : _a.length) {
      obj.exchange_rate_tuples = message.exchange_rate_tuples.map((e) => ExchangeRateTuple.toJSON(e));
    }
    if (message.voter !== "") {
      obj.voter = message.voter;
    }
    return obj;
  },
  create(base) {
    return AggregateExchangeRateVote.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseAggregateExchangeRateVote();
    message.exchange_rate_tuples = ((_a = object.exchange_rate_tuples) == null ? void 0 : _a.map((e) => ExchangeRateTuple.fromPartial(e))) || [];
    message.voter = object.voter ?? "";
    return message;
  }
};
var ExchangeRateTuple = {
  $type: "seiprotocol.seichain.oracle.ExchangeRateTuple",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.exchange_rate !== "") {
      writer.uint32(18).string(message.exchange_rate);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseExchangeRateTuple();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.exchange_rate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denom: isSet114(object.denom) ? globalThis.String(object.denom) : "",
      exchange_rate: isSet114(object.exchange_rate) ? globalThis.String(object.exchange_rate) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.exchange_rate !== "") {
      obj.exchange_rate = message.exchange_rate;
    }
    return obj;
  },
  create(base) {
    return ExchangeRateTuple.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseExchangeRateTuple();
    message.denom = object.denom ?? "";
    message.exchange_rate = object.exchange_rate ?? "";
    return message;
  }
};
var OracleExchangeRate = {
  $type: "seiprotocol.seichain.oracle.OracleExchangeRate",
  encode(message, writer = new BinaryWriter()) {
    if (message.exchange_rate !== "") {
      writer.uint32(10).string(message.exchange_rate);
    }
    if (message.last_update !== "") {
      writer.uint32(18).string(message.last_update);
    }
    if (message.last_update_timestamp !== 0) {
      writer.uint32(24).int64(message.last_update_timestamp);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseOracleExchangeRate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.exchange_rate = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.last_update = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.last_update_timestamp = longToNumber57(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      exchange_rate: isSet114(object.exchange_rate) ? globalThis.String(object.exchange_rate) : "",
      last_update: isSet114(object.last_update) ? globalThis.String(object.last_update) : "",
      last_update_timestamp: isSet114(object.last_update_timestamp) ? globalThis.Number(object.last_update_timestamp) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.exchange_rate !== "") {
      obj.exchange_rate = message.exchange_rate;
    }
    if (message.last_update !== "") {
      obj.last_update = message.last_update;
    }
    if (message.last_update_timestamp !== 0) {
      obj.last_update_timestamp = Math.round(message.last_update_timestamp);
    }
    return obj;
  },
  create(base) {
    return OracleExchangeRate.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseOracleExchangeRate();
    message.exchange_rate = object.exchange_rate ?? "";
    message.last_update = object.last_update ?? "";
    message.last_update_timestamp = object.last_update_timestamp ?? 0;
    return message;
  }
};
var PriceSnapshotItem = {
  $type: "seiprotocol.seichain.oracle.PriceSnapshotItem",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.oracle_exchange_rate !== void 0) {
      OracleExchangeRate.encode(message.oracle_exchange_rate, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePriceSnapshotItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.oracle_exchange_rate = OracleExchangeRate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denom: isSet114(object.denom) ? globalThis.String(object.denom) : "",
      oracle_exchange_rate: isSet114(object.oracle_exchange_rate) ? OracleExchangeRate.fromJSON(object.oracle_exchange_rate) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.oracle_exchange_rate !== void 0) {
      obj.oracle_exchange_rate = OracleExchangeRate.toJSON(message.oracle_exchange_rate);
    }
    return obj;
  },
  create(base) {
    return PriceSnapshotItem.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePriceSnapshotItem();
    message.denom = object.denom ?? "";
    message.oracle_exchange_rate = object.oracle_exchange_rate !== void 0 && object.oracle_exchange_rate !== null ? OracleExchangeRate.fromPartial(object.oracle_exchange_rate) : void 0;
    return message;
  }
};
var PriceSnapshot = {
  $type: "seiprotocol.seichain.oracle.PriceSnapshot",
  encode(message, writer = new BinaryWriter()) {
    if (message.snapshot_timestamp !== 0) {
      writer.uint32(8).int64(message.snapshot_timestamp);
    }
    for (const v of message.price_snapshot_items) {
      PriceSnapshotItem.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePriceSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.snapshot_timestamp = longToNumber57(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.price_snapshot_items.push(PriceSnapshotItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      snapshot_timestamp: isSet114(object.snapshot_timestamp) ? globalThis.Number(object.snapshot_timestamp) : 0,
      price_snapshot_items: globalThis.Array.isArray(object == null ? void 0 : object.price_snapshot_items) ? object.price_snapshot_items.map((e) => PriceSnapshotItem.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.snapshot_timestamp !== 0) {
      obj.snapshot_timestamp = Math.round(message.snapshot_timestamp);
    }
    if ((_a = message.price_snapshot_items) == null ? void 0 : _a.length) {
      obj.price_snapshot_items = message.price_snapshot_items.map((e) => PriceSnapshotItem.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return PriceSnapshot.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBasePriceSnapshot();
    message.snapshot_timestamp = object.snapshot_timestamp ?? 0;
    message.price_snapshot_items = ((_a = object.price_snapshot_items) == null ? void 0 : _a.map((e) => PriceSnapshotItem.fromPartial(e))) || [];
    return message;
  }
};
var OracleTwap = {
  $type: "seiprotocol.seichain.oracle.OracleTwap",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.twap !== "") {
      writer.uint32(18).string(message.twap);
    }
    if (message.lookback_seconds !== 0) {
      writer.uint32(24).int64(message.lookback_seconds);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseOracleTwap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.twap = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.lookback_seconds = longToNumber57(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denom: isSet114(object.denom) ? globalThis.String(object.denom) : "",
      twap: isSet114(object.twap) ? globalThis.String(object.twap) : "",
      lookback_seconds: isSet114(object.lookback_seconds) ? globalThis.Number(object.lookback_seconds) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.twap !== "") {
      obj.twap = message.twap;
    }
    if (message.lookback_seconds !== 0) {
      obj.lookback_seconds = Math.round(message.lookback_seconds);
    }
    return obj;
  },
  create(base) {
    return OracleTwap.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseOracleTwap();
    message.denom = object.denom ?? "";
    message.twap = object.twap ?? "";
    message.lookback_seconds = object.lookback_seconds ?? 0;
    return message;
  }
};
var VotePenaltyCounter = {
  $type: "seiprotocol.seichain.oracle.VotePenaltyCounter",
  encode(message, writer = new BinaryWriter()) {
    if (message.miss_count !== 0) {
      writer.uint32(8).uint64(message.miss_count);
    }
    if (message.abstain_count !== 0) {
      writer.uint32(16).uint64(message.abstain_count);
    }
    if (message.success_count !== 0) {
      writer.uint32(24).uint64(message.success_count);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVotePenaltyCounter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.miss_count = longToNumber57(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.abstain_count = longToNumber57(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.success_count = longToNumber57(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      miss_count: isSet114(object.miss_count) ? globalThis.Number(object.miss_count) : 0,
      abstain_count: isSet114(object.abstain_count) ? globalThis.Number(object.abstain_count) : 0,
      success_count: isSet114(object.success_count) ? globalThis.Number(object.success_count) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.miss_count !== 0) {
      obj.miss_count = Math.round(message.miss_count);
    }
    if (message.abstain_count !== 0) {
      obj.abstain_count = Math.round(message.abstain_count);
    }
    if (message.success_count !== 0) {
      obj.success_count = Math.round(message.success_count);
    }
    return obj;
  },
  create(base) {
    return VotePenaltyCounter.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseVotePenaltyCounter();
    message.miss_count = object.miss_count ?? 0;
    message.abstain_count = object.abstain_count ?? 0;
    message.success_count = object.success_count ?? 0;
    return message;
  }
};
function createBaseParams12() {
  return {
    vote_period: 0,
    vote_threshold: "",
    reward_band: "",
    whitelist: [],
    slash_fraction: "",
    slash_window: 0,
    min_valid_per_window: "",
    lookback_duration: 0
  };
}
function createBaseDenom() {
  return { name: "" };
}
function createBaseAggregateExchangeRateVote() {
  return { exchange_rate_tuples: [], voter: "" };
}
function createBaseExchangeRateTuple() {
  return { denom: "", exchange_rate: "" };
}
function createBaseOracleExchangeRate() {
  return { exchange_rate: "", last_update: "", last_update_timestamp: 0 };
}
function createBasePriceSnapshotItem() {
  return { denom: "", oracle_exchange_rate: void 0 };
}
function createBasePriceSnapshot() {
  return { snapshot_timestamp: 0, price_snapshot_items: [] };
}
function createBaseOracleTwap() {
  return { denom: "", twap: "", lookback_seconds: 0 };
}
function createBaseVotePenaltyCounter() {
  return { miss_count: 0, abstain_count: 0, success_count: 0 };
}
function longToNumber57(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet114(value) {
  return value !== null && value !== void 0;
}
var registry120 = [
  ["/seiprotocol.seichain.oracle.Params", Params12],
  ["/seiprotocol.seichain.oracle.Denom", Denom],
  ["/seiprotocol.seichain.oracle.AggregateExchangeRateVote", AggregateExchangeRateVote],
  ["/seiprotocol.seichain.oracle.ExchangeRateTuple", ExchangeRateTuple],
  ["/seiprotocol.seichain.oracle.OracleExchangeRate", OracleExchangeRate],
  ["/seiprotocol.seichain.oracle.PriceSnapshotItem", PriceSnapshotItem],
  ["/seiprotocol.seichain.oracle.PriceSnapshot", PriceSnapshot],
  ["/seiprotocol.seichain.oracle.OracleTwap", OracleTwap],
  ["/seiprotocol.seichain.oracle.VotePenaltyCounter", VotePenaltyCounter]
];
var aminoConverters120 = {
  "/seiprotocol.seichain.oracle.Params": {
    aminoType: "oracle/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.Denom": {
    aminoType: "oracle/Denom",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.AggregateExchangeRateVote": {
    aminoType: "oracle/AggregateExchangeRateVote",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.ExchangeRateTuple": {
    aminoType: "oracle/ExchangeRateTuple",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.OracleExchangeRate": {
    aminoType: "oracle/OracleExchangeRate",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.PriceSnapshotItem": {
    aminoType: "oracle/PriceSnapshotItem",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.PriceSnapshot": {
    aminoType: "oracle/PriceSnapshot",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.OracleTwap": {
    aminoType: "oracle/OracleTwap",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.VotePenaltyCounter": {
    aminoType: "oracle/VotePenaltyCounter",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/oracle/genesis.js
var GenesisState20 = {
  $type: "seiprotocol.seichain.oracle.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params12.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.feeder_delegations) {
      FeederDelegation.encode(v, writer.uint32(18).fork()).join();
    }
    for (const v of message.exchange_rates) {
      ExchangeRateTuple.encode(v, writer.uint32(26).fork()).join();
    }
    for (const v of message.penalty_counters) {
      PenaltyCounter.encode(v, writer.uint32(34).fork()).join();
    }
    for (const v of message.aggregate_exchange_rate_votes) {
      AggregateExchangeRateVote.encode(v, writer.uint32(50).fork()).join();
    }
    for (const v of message.price_snapshots) {
      PriceSnapshot.encode(v, writer.uint32(58).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState20();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params12.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.feeder_delegations.push(FeederDelegation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.exchange_rates.push(ExchangeRateTuple.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.penalty_counters.push(PenaltyCounter.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.aggregate_exchange_rate_votes.push(AggregateExchangeRateVote.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.price_snapshots.push(PriceSnapshot.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet115(object.params) ? Params12.fromJSON(object.params) : void 0,
      feeder_delegations: globalThis.Array.isArray(object == null ? void 0 : object.feeder_delegations) ? object.feeder_delegations.map((e) => FeederDelegation.fromJSON(e)) : [],
      exchange_rates: globalThis.Array.isArray(object == null ? void 0 : object.exchange_rates) ? object.exchange_rates.map((e) => ExchangeRateTuple.fromJSON(e)) : [],
      penalty_counters: globalThis.Array.isArray(object == null ? void 0 : object.penalty_counters) ? object.penalty_counters.map((e) => PenaltyCounter.fromJSON(e)) : [],
      aggregate_exchange_rate_votes: globalThis.Array.isArray(object == null ? void 0 : object.aggregate_exchange_rate_votes) ? object.aggregate_exchange_rate_votes.map((e) => AggregateExchangeRateVote.fromJSON(e)) : [],
      price_snapshots: globalThis.Array.isArray(object == null ? void 0 : object.price_snapshots) ? object.price_snapshots.map((e) => PriceSnapshot.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a, _b, _c, _d, _e;
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params12.toJSON(message.params);
    }
    if ((_a = message.feeder_delegations) == null ? void 0 : _a.length) {
      obj.feeder_delegations = message.feeder_delegations.map((e) => FeederDelegation.toJSON(e));
    }
    if ((_b = message.exchange_rates) == null ? void 0 : _b.length) {
      obj.exchange_rates = message.exchange_rates.map((e) => ExchangeRateTuple.toJSON(e));
    }
    if ((_c = message.penalty_counters) == null ? void 0 : _c.length) {
      obj.penalty_counters = message.penalty_counters.map((e) => PenaltyCounter.toJSON(e));
    }
    if ((_d = message.aggregate_exchange_rate_votes) == null ? void 0 : _d.length) {
      obj.aggregate_exchange_rate_votes = message.aggregate_exchange_rate_votes.map((e) => AggregateExchangeRateVote.toJSON(e));
    }
    if ((_e = message.price_snapshots) == null ? void 0 : _e.length) {
      obj.price_snapshots = message.price_snapshots.map((e) => PriceSnapshot.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState20.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a, _b, _c, _d, _e;
    const message = createBaseGenesisState20();
    message.params = object.params !== void 0 && object.params !== null ? Params12.fromPartial(object.params) : void 0;
    message.feeder_delegations = ((_a = object.feeder_delegations) == null ? void 0 : _a.map((e) => FeederDelegation.fromPartial(e))) || [];
    message.exchange_rates = ((_b = object.exchange_rates) == null ? void 0 : _b.map((e) => ExchangeRateTuple.fromPartial(e))) || [];
    message.penalty_counters = ((_c = object.penalty_counters) == null ? void 0 : _c.map((e) => PenaltyCounter.fromPartial(e))) || [];
    message.aggregate_exchange_rate_votes = ((_d = object.aggregate_exchange_rate_votes) == null ? void 0 : _d.map((e) => AggregateExchangeRateVote.fromPartial(e))) || [];
    message.price_snapshots = ((_e = object.price_snapshots) == null ? void 0 : _e.map((e) => PriceSnapshot.fromPartial(e))) || [];
    return message;
  }
};
var FeederDelegation = {
  $type: "seiprotocol.seichain.oracle.FeederDelegation",
  encode(message, writer = new BinaryWriter()) {
    if (message.feeder_address !== "") {
      writer.uint32(10).string(message.feeder_address);
    }
    if (message.validator_address !== "") {
      writer.uint32(18).string(message.validator_address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFeederDelegation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.feeder_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validator_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      feeder_address: isSet115(object.feeder_address) ? globalThis.String(object.feeder_address) : "",
      validator_address: isSet115(object.validator_address) ? globalThis.String(object.validator_address) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.feeder_address !== "") {
      obj.feeder_address = message.feeder_address;
    }
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    return obj;
  },
  create(base) {
    return FeederDelegation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFeederDelegation();
    message.feeder_address = object.feeder_address ?? "";
    message.validator_address = object.validator_address ?? "";
    return message;
  }
};
var PenaltyCounter = {
  $type: "seiprotocol.seichain.oracle.PenaltyCounter",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_address !== "") {
      writer.uint32(10).string(message.validator_address);
    }
    if (message.vote_penalty_counter !== void 0) {
      VotePenaltyCounter.encode(message.vote_penalty_counter, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePenaltyCounter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.vote_penalty_counter = VotePenaltyCounter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator_address: isSet115(object.validator_address) ? globalThis.String(object.validator_address) : "",
      vote_penalty_counter: isSet115(object.vote_penalty_counter) ? VotePenaltyCounter.fromJSON(object.vote_penalty_counter) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_address !== "") {
      obj.validator_address = message.validator_address;
    }
    if (message.vote_penalty_counter !== void 0) {
      obj.vote_penalty_counter = VotePenaltyCounter.toJSON(message.vote_penalty_counter);
    }
    return obj;
  },
  create(base) {
    return PenaltyCounter.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePenaltyCounter();
    message.validator_address = object.validator_address ?? "";
    message.vote_penalty_counter = object.vote_penalty_counter !== void 0 && object.vote_penalty_counter !== null ? VotePenaltyCounter.fromPartial(object.vote_penalty_counter) : void 0;
    return message;
  }
};
function createBaseGenesisState20() {
  return {
    params: void 0,
    feeder_delegations: [],
    exchange_rates: [],
    penalty_counters: [],
    aggregate_exchange_rate_votes: [],
    price_snapshots: []
  };
}
function createBaseFeederDelegation() {
  return { feeder_address: "", validator_address: "" };
}
function createBasePenaltyCounter() {
  return { validator_address: "", vote_penalty_counter: void 0 };
}
function isSet115(value) {
  return value !== null && value !== void 0;
}
var registry121 = [
  ["/seiprotocol.seichain.oracle.GenesisState", GenesisState20],
  ["/seiprotocol.seichain.oracle.FeederDelegation", FeederDelegation],
  ["/seiprotocol.seichain.oracle.PenaltyCounter", PenaltyCounter]
];
var aminoConverters121 = {
  "/seiprotocol.seichain.oracle.GenesisState": {
    aminoType: "oracle/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.FeederDelegation": {
    aminoType: "oracle/FeederDelegation",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.PenaltyCounter": {
    aminoType: "oracle/PenaltyCounter",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/oracle/query.js
var QueryExchangeRateRequest = {
  $type: "seiprotocol.seichain.oracle.QueryExchangeRateRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryExchangeRateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { denom: isSet116(object.denom) ? globalThis.String(object.denom) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },
  create(base) {
    return QueryExchangeRateRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryExchangeRateRequest();
    message.denom = object.denom ?? "";
    return message;
  }
};
var QueryExchangeRateResponse = {
  $type: "seiprotocol.seichain.oracle.QueryExchangeRateResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.oracle_exchange_rate !== void 0) {
      OracleExchangeRate.encode(message.oracle_exchange_rate, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryExchangeRateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.oracle_exchange_rate = OracleExchangeRate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      oracle_exchange_rate: isSet116(object.oracle_exchange_rate) ? OracleExchangeRate.fromJSON(object.oracle_exchange_rate) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.oracle_exchange_rate !== void 0) {
      obj.oracle_exchange_rate = OracleExchangeRate.toJSON(message.oracle_exchange_rate);
    }
    return obj;
  },
  create(base) {
    return QueryExchangeRateResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryExchangeRateResponse();
    message.oracle_exchange_rate = object.oracle_exchange_rate !== void 0 && object.oracle_exchange_rate !== null ? OracleExchangeRate.fromPartial(object.oracle_exchange_rate) : void 0;
    return message;
  }
};
var QueryExchangeRatesRequest = {
  $type: "seiprotocol.seichain.oracle.QueryExchangeRatesRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryExchangeRatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryExchangeRatesRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryExchangeRatesRequest();
    return message;
  }
};
var DenomOracleExchangeRatePair = {
  $type: "seiprotocol.seichain.oracle.DenomOracleExchangeRatePair",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.oracle_exchange_rate !== void 0) {
      OracleExchangeRate.encode(message.oracle_exchange_rate, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDenomOracleExchangeRatePair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.oracle_exchange_rate = OracleExchangeRate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denom: isSet116(object.denom) ? globalThis.String(object.denom) : "",
      oracle_exchange_rate: isSet116(object.oracle_exchange_rate) ? OracleExchangeRate.fromJSON(object.oracle_exchange_rate) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.oracle_exchange_rate !== void 0) {
      obj.oracle_exchange_rate = OracleExchangeRate.toJSON(message.oracle_exchange_rate);
    }
    return obj;
  },
  create(base) {
    return DenomOracleExchangeRatePair.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDenomOracleExchangeRatePair();
    message.denom = object.denom ?? "";
    message.oracle_exchange_rate = object.oracle_exchange_rate !== void 0 && object.oracle_exchange_rate !== null ? OracleExchangeRate.fromPartial(object.oracle_exchange_rate) : void 0;
    return message;
  }
};
var QueryExchangeRatesResponse = {
  $type: "seiprotocol.seichain.oracle.QueryExchangeRatesResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.denom_oracle_exchange_rate_pairs) {
      DenomOracleExchangeRatePair.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryExchangeRatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom_oracle_exchange_rate_pairs.push(DenomOracleExchangeRatePair.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denom_oracle_exchange_rate_pairs: globalThis.Array.isArray(object == null ? void 0 : object.denom_oracle_exchange_rate_pairs) ? object.denom_oracle_exchange_rate_pairs.map((e) => DenomOracleExchangeRatePair.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.denom_oracle_exchange_rate_pairs) == null ? void 0 : _a.length) {
      obj.denom_oracle_exchange_rate_pairs = message.denom_oracle_exchange_rate_pairs.map((e) => DenomOracleExchangeRatePair.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return QueryExchangeRatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryExchangeRatesResponse();
    message.denom_oracle_exchange_rate_pairs = ((_a = object.denom_oracle_exchange_rate_pairs) == null ? void 0 : _a.map((e) => DenomOracleExchangeRatePair.fromPartial(e))) || [];
    return message;
  }
};
var QueryActivesRequest = {
  $type: "seiprotocol.seichain.oracle.QueryActivesRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryActivesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryActivesRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryActivesRequest();
    return message;
  }
};
var QueryActivesResponse = {
  $type: "seiprotocol.seichain.oracle.QueryActivesResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.actives) {
      writer.uint32(10).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryActivesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.actives.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      actives: globalThis.Array.isArray(object == null ? void 0 : object.actives) ? object.actives.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.actives) == null ? void 0 : _a.length) {
      obj.actives = message.actives;
    }
    return obj;
  },
  create(base) {
    return QueryActivesResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryActivesResponse();
    message.actives = ((_a = object.actives) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var QueryVoteTargetsRequest = {
  $type: "seiprotocol.seichain.oracle.QueryVoteTargetsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryVoteTargetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryVoteTargetsRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryVoteTargetsRequest();
    return message;
  }
};
var QueryVoteTargetsResponse = {
  $type: "seiprotocol.seichain.oracle.QueryVoteTargetsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.vote_targets) {
      writer.uint32(10).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryVoteTargetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.vote_targets.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      vote_targets: globalThis.Array.isArray(object == null ? void 0 : object.vote_targets) ? object.vote_targets.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.vote_targets) == null ? void 0 : _a.length) {
      obj.vote_targets = message.vote_targets;
    }
    return obj;
  },
  create(base) {
    return QueryVoteTargetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryVoteTargetsResponse();
    message.vote_targets = ((_a = object.vote_targets) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var QueryPriceSnapshotHistoryRequest = {
  $type: "seiprotocol.seichain.oracle.QueryPriceSnapshotHistoryRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryPriceSnapshotHistoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryPriceSnapshotHistoryRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryPriceSnapshotHistoryRequest();
    return message;
  }
};
var QueryPriceSnapshotHistoryResponse = {
  $type: "seiprotocol.seichain.oracle.QueryPriceSnapshotHistoryResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.price_snapshots) {
      PriceSnapshot.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryPriceSnapshotHistoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.price_snapshots.push(PriceSnapshot.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      price_snapshots: globalThis.Array.isArray(object == null ? void 0 : object.price_snapshots) ? object.price_snapshots.map((e) => PriceSnapshot.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.price_snapshots) == null ? void 0 : _a.length) {
      obj.price_snapshots = message.price_snapshots.map((e) => PriceSnapshot.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return QueryPriceSnapshotHistoryResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryPriceSnapshotHistoryResponse();
    message.price_snapshots = ((_a = object.price_snapshots) == null ? void 0 : _a.map((e) => PriceSnapshot.fromPartial(e))) || [];
    return message;
  }
};
var QueryTwapsRequest = {
  $type: "seiprotocol.seichain.oracle.QueryTwapsRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.lookback_seconds !== 0) {
      writer.uint32(8).uint64(message.lookback_seconds);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryTwapsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.lookback_seconds = longToNumber58(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { lookback_seconds: isSet116(object.lookback_seconds) ? globalThis.Number(object.lookback_seconds) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.lookback_seconds !== 0) {
      obj.lookback_seconds = Math.round(message.lookback_seconds);
    }
    return obj;
  },
  create(base) {
    return QueryTwapsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryTwapsRequest();
    message.lookback_seconds = object.lookback_seconds ?? 0;
    return message;
  }
};
var QueryTwapsResponse = {
  $type: "seiprotocol.seichain.oracle.QueryTwapsResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.oracle_twaps) {
      OracleTwap.encode(v, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryTwapsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.oracle_twaps.push(OracleTwap.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      oracle_twaps: globalThis.Array.isArray(object == null ? void 0 : object.oracle_twaps) ? object.oracle_twaps.map((e) => OracleTwap.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.oracle_twaps) == null ? void 0 : _a.length) {
      obj.oracle_twaps = message.oracle_twaps.map((e) => OracleTwap.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return QueryTwapsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryTwapsResponse();
    message.oracle_twaps = ((_a = object.oracle_twaps) == null ? void 0 : _a.map((e) => OracleTwap.fromPartial(e))) || [];
    return message;
  }
};
var QueryFeederDelegationRequest = {
  $type: "seiprotocol.seichain.oracle.QueryFeederDelegationRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_addr !== "") {
      writer.uint32(10).string(message.validator_addr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryFeederDelegationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_addr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { validator_addr: isSet116(object.validator_addr) ? globalThis.String(object.validator_addr) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_addr !== "") {
      obj.validator_addr = message.validator_addr;
    }
    return obj;
  },
  create(base) {
    return QueryFeederDelegationRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryFeederDelegationRequest();
    message.validator_addr = object.validator_addr ?? "";
    return message;
  }
};
var QueryFeederDelegationResponse = {
  $type: "seiprotocol.seichain.oracle.QueryFeederDelegationResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.feeder_addr !== "") {
      writer.uint32(10).string(message.feeder_addr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryFeederDelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.feeder_addr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { feeder_addr: isSet116(object.feeder_addr) ? globalThis.String(object.feeder_addr) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.feeder_addr !== "") {
      obj.feeder_addr = message.feeder_addr;
    }
    return obj;
  },
  create(base) {
    return QueryFeederDelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryFeederDelegationResponse();
    message.feeder_addr = object.feeder_addr ?? "";
    return message;
  }
};
var QueryVotePenaltyCounterRequest = {
  $type: "seiprotocol.seichain.oracle.QueryVotePenaltyCounterRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.validator_addr !== "") {
      writer.uint32(10).string(message.validator_addr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryVotePenaltyCounterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator_addr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { validator_addr: isSet116(object.validator_addr) ? globalThis.String(object.validator_addr) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator_addr !== "") {
      obj.validator_addr = message.validator_addr;
    }
    return obj;
  },
  create(base) {
    return QueryVotePenaltyCounterRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryVotePenaltyCounterRequest();
    message.validator_addr = object.validator_addr ?? "";
    return message;
  }
};
var QueryVotePenaltyCounterResponse = {
  $type: "seiprotocol.seichain.oracle.QueryVotePenaltyCounterResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.vote_penalty_counter !== void 0) {
      VotePenaltyCounter.encode(message.vote_penalty_counter, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryVotePenaltyCounterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.vote_penalty_counter = VotePenaltyCounter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      vote_penalty_counter: isSet116(object.vote_penalty_counter) ? VotePenaltyCounter.fromJSON(object.vote_penalty_counter) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.vote_penalty_counter !== void 0) {
      obj.vote_penalty_counter = VotePenaltyCounter.toJSON(message.vote_penalty_counter);
    }
    return obj;
  },
  create(base) {
    return QueryVotePenaltyCounterResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryVotePenaltyCounterResponse();
    message.vote_penalty_counter = object.vote_penalty_counter !== void 0 && object.vote_penalty_counter !== null ? VotePenaltyCounter.fromPartial(object.vote_penalty_counter) : void 0;
    return message;
  }
};
var QuerySlashWindowRequest = {
  $type: "seiprotocol.seichain.oracle.QuerySlashWindowRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQuerySlashWindowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QuerySlashWindowRequest.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQuerySlashWindowRequest();
    return message;
  }
};
var QuerySlashWindowResponse = {
  $type: "seiprotocol.seichain.oracle.QuerySlashWindowResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.window_progress !== 0) {
      writer.uint32(8).uint64(message.window_progress);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQuerySlashWindowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.window_progress = longToNumber58(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { window_progress: isSet116(object.window_progress) ? globalThis.Number(object.window_progress) : 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.window_progress !== 0) {
      obj.window_progress = Math.round(message.window_progress);
    }
    return obj;
  },
  create(base) {
    return QuerySlashWindowResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQuerySlashWindowResponse();
    message.window_progress = object.window_progress ?? 0;
    return message;
  }
};
var QueryParamsRequest12 = {
  $type: "seiprotocol.seichain.oracle.QueryParamsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest12();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryParamsRequest12.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest12();
    return message;
  }
};
var QueryParamsResponse12 = {
  $type: "seiprotocol.seichain.oracle.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params12.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse12();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params12.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { params: isSet116(object.params) ? Params12.fromJSON(object.params) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params12.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse12.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse12();
    message.params = object.params !== void 0 && object.params !== null ? Params12.fromPartial(object.params) : void 0;
    return message;
  }
};
function createBaseQueryExchangeRateRequest() {
  return { denom: "" };
}
function createBaseQueryExchangeRateResponse() {
  return { oracle_exchange_rate: void 0 };
}
function createBaseQueryExchangeRatesRequest() {
  return {};
}
function createBaseDenomOracleExchangeRatePair() {
  return { denom: "", oracle_exchange_rate: void 0 };
}
function createBaseQueryExchangeRatesResponse() {
  return { denom_oracle_exchange_rate_pairs: [] };
}
function createBaseQueryActivesRequest() {
  return {};
}
function createBaseQueryActivesResponse() {
  return { actives: [] };
}
function createBaseQueryVoteTargetsRequest() {
  return {};
}
function createBaseQueryVoteTargetsResponse() {
  return { vote_targets: [] };
}
function createBaseQueryPriceSnapshotHistoryRequest() {
  return {};
}
function createBaseQueryPriceSnapshotHistoryResponse() {
  return { price_snapshots: [] };
}
function createBaseQueryTwapsRequest() {
  return { lookback_seconds: 0 };
}
function createBaseQueryTwapsResponse() {
  return { oracle_twaps: [] };
}
function createBaseQueryFeederDelegationRequest() {
  return { validator_addr: "" };
}
function createBaseQueryFeederDelegationResponse() {
  return { feeder_addr: "" };
}
function createBaseQueryVotePenaltyCounterRequest() {
  return { validator_addr: "" };
}
function createBaseQueryVotePenaltyCounterResponse() {
  return { vote_penalty_counter: void 0 };
}
function createBaseQuerySlashWindowRequest() {
  return {};
}
function createBaseQuerySlashWindowResponse() {
  return { window_progress: 0 };
}
function createBaseQueryParamsRequest12() {
  return {};
}
function createBaseQueryParamsResponse12() {
  return { params: void 0 };
}
function longToNumber58(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet116(value) {
  return value !== null && value !== void 0;
}
var registry122 = [
  ["/seiprotocol.seichain.oracle.QueryExchangeRateRequest", QueryExchangeRateRequest],
  ["/seiprotocol.seichain.oracle.QueryExchangeRateResponse", QueryExchangeRateResponse],
  ["/seiprotocol.seichain.oracle.QueryExchangeRatesRequest", QueryExchangeRatesRequest],
  ["/seiprotocol.seichain.oracle.DenomOracleExchangeRatePair", DenomOracleExchangeRatePair],
  ["/seiprotocol.seichain.oracle.QueryExchangeRatesResponse", QueryExchangeRatesResponse],
  ["/seiprotocol.seichain.oracle.QueryActivesRequest", QueryActivesRequest],
  ["/seiprotocol.seichain.oracle.QueryActivesResponse", QueryActivesResponse],
  ["/seiprotocol.seichain.oracle.QueryVoteTargetsRequest", QueryVoteTargetsRequest],
  ["/seiprotocol.seichain.oracle.QueryVoteTargetsResponse", QueryVoteTargetsResponse],
  ["/seiprotocol.seichain.oracle.QueryPriceSnapshotHistoryRequest", QueryPriceSnapshotHistoryRequest],
  ["/seiprotocol.seichain.oracle.QueryPriceSnapshotHistoryResponse", QueryPriceSnapshotHistoryResponse],
  ["/seiprotocol.seichain.oracle.QueryTwapsRequest", QueryTwapsRequest],
  ["/seiprotocol.seichain.oracle.QueryTwapsResponse", QueryTwapsResponse],
  ["/seiprotocol.seichain.oracle.QueryFeederDelegationRequest", QueryFeederDelegationRequest],
  ["/seiprotocol.seichain.oracle.QueryFeederDelegationResponse", QueryFeederDelegationResponse],
  ["/seiprotocol.seichain.oracle.QueryVotePenaltyCounterRequest", QueryVotePenaltyCounterRequest],
  ["/seiprotocol.seichain.oracle.QueryVotePenaltyCounterResponse", QueryVotePenaltyCounterResponse],
  ["/seiprotocol.seichain.oracle.QuerySlashWindowRequest", QuerySlashWindowRequest],
  ["/seiprotocol.seichain.oracle.QuerySlashWindowResponse", QuerySlashWindowResponse],
  ["/seiprotocol.seichain.oracle.QueryParamsRequest", QueryParamsRequest12],
  ["/seiprotocol.seichain.oracle.QueryParamsResponse", QueryParamsResponse12]
];
var aminoConverters122 = {
  "/seiprotocol.seichain.oracle.QueryExchangeRateRequest": {
    aminoType: "oracle/QueryExchangeRateRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryExchangeRateResponse": {
    aminoType: "oracle/QueryExchangeRateResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryExchangeRatesRequest": {
    aminoType: "oracle/QueryExchangeRatesRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.DenomOracleExchangeRatePair": {
    aminoType: "oracle/DenomOracleExchangeRatePair",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryExchangeRatesResponse": {
    aminoType: "oracle/QueryExchangeRatesResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryActivesRequest": {
    aminoType: "oracle/QueryActivesRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryActivesResponse": {
    aminoType: "oracle/QueryActivesResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryVoteTargetsRequest": {
    aminoType: "oracle/QueryVoteTargetsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryVoteTargetsResponse": {
    aminoType: "oracle/QueryVoteTargetsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryPriceSnapshotHistoryRequest": {
    aminoType: "oracle/QueryPriceSnapshotHistoryRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryPriceSnapshotHistoryResponse": {
    aminoType: "oracle/QueryPriceSnapshotHistoryResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryTwapsRequest": {
    aminoType: "oracle/QueryTwapsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryTwapsResponse": {
    aminoType: "oracle/QueryTwapsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryFeederDelegationRequest": {
    aminoType: "oracle/QueryFeederDelegationRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryFeederDelegationResponse": {
    aminoType: "oracle/QueryFeederDelegationResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryVotePenaltyCounterRequest": {
    aminoType: "oracle/QueryVotePenaltyCounterRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryVotePenaltyCounterResponse": {
    aminoType: "oracle/QueryVotePenaltyCounterResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QuerySlashWindowRequest": {
    aminoType: "oracle/QuerySlashWindowRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QuerySlashWindowResponse": {
    aminoType: "oracle/QuerySlashWindowResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryParamsRequest": {
    aminoType: "oracle/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.QueryParamsResponse": {
    aminoType: "oracle/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/oracle/tx.js
var MsgAggregateExchangeRateVote = {
  $type: "seiprotocol.seichain.oracle.MsgAggregateExchangeRateVote",
  encode(message, writer = new BinaryWriter()) {
    if (message.exchange_rates !== "") {
      writer.uint32(18).string(message.exchange_rates);
    }
    if (message.feeder !== "") {
      writer.uint32(26).string(message.feeder);
    }
    if (message.validator !== "") {
      writer.uint32(34).string(message.validator);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgAggregateExchangeRateVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }
          message.exchange_rates = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.feeder = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.validator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      exchange_rates: isSet117(object.exchange_rates) ? globalThis.String(object.exchange_rates) : "",
      feeder: isSet117(object.feeder) ? globalThis.String(object.feeder) : "",
      validator: isSet117(object.validator) ? globalThis.String(object.validator) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.exchange_rates !== "") {
      obj.exchange_rates = message.exchange_rates;
    }
    if (message.feeder !== "") {
      obj.feeder = message.feeder;
    }
    if (message.validator !== "") {
      obj.validator = message.validator;
    }
    return obj;
  },
  create(base) {
    return MsgAggregateExchangeRateVote.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgAggregateExchangeRateVote();
    message.exchange_rates = object.exchange_rates ?? "";
    message.feeder = object.feeder ?? "";
    message.validator = object.validator ?? "";
    return message;
  }
};
var MsgAggregateExchangeRateVoteResponse = {
  $type: "seiprotocol.seichain.oracle.MsgAggregateExchangeRateVoteResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgAggregateExchangeRateVoteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgAggregateExchangeRateVoteResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgAggregateExchangeRateVoteResponse();
    return message;
  }
};
var MsgDelegateFeedConsent = {
  $type: "seiprotocol.seichain.oracle.MsgDelegateFeedConsent",
  encode(message, writer = new BinaryWriter()) {
    if (message.operator !== "") {
      writer.uint32(10).string(message.operator);
    }
    if (message.delegate !== "") {
      writer.uint32(18).string(message.delegate);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegateFeedConsent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.operator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.delegate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      operator: isSet117(object.operator) ? globalThis.String(object.operator) : "",
      delegate: isSet117(object.delegate) ? globalThis.String(object.delegate) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.operator !== "") {
      obj.operator = message.operator;
    }
    if (message.delegate !== "") {
      obj.delegate = message.delegate;
    }
    return obj;
  },
  create(base) {
    return MsgDelegateFeedConsent.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgDelegateFeedConsent();
    message.operator = object.operator ?? "";
    message.delegate = object.delegate ?? "";
    return message;
  }
};
var MsgDelegateFeedConsentResponse = {
  $type: "seiprotocol.seichain.oracle.MsgDelegateFeedConsentResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegateFeedConsentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgDelegateFeedConsentResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgDelegateFeedConsentResponse();
    return message;
  }
};
function createBaseMsgAggregateExchangeRateVote() {
  return { exchange_rates: "", feeder: "", validator: "" };
}
function createBaseMsgAggregateExchangeRateVoteResponse() {
  return {};
}
function createBaseMsgDelegateFeedConsent() {
  return { operator: "", delegate: "" };
}
function createBaseMsgDelegateFeedConsentResponse() {
  return {};
}
function isSet117(value) {
  return value !== null && value !== void 0;
}
var registry123 = [
  ["/seiprotocol.seichain.oracle.MsgAggregateExchangeRateVote", MsgAggregateExchangeRateVote],
  ["/seiprotocol.seichain.oracle.MsgAggregateExchangeRateVoteResponse", MsgAggregateExchangeRateVoteResponse],
  ["/seiprotocol.seichain.oracle.MsgDelegateFeedConsent", MsgDelegateFeedConsent],
  ["/seiprotocol.seichain.oracle.MsgDelegateFeedConsentResponse", MsgDelegateFeedConsentResponse]
];
var aminoConverters123 = {
  "/seiprotocol.seichain.oracle.MsgAggregateExchangeRateVote": {
    aminoType: "oracle/MsgAggregateExchangeRateVote",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.MsgAggregateExchangeRateVoteResponse": {
    aminoType: "oracle/MsgAggregateExchangeRateVoteResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.MsgDelegateFeedConsent": {
    aminoType: "oracle/MsgDelegateFeedConsent",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.oracle.MsgDelegateFeedConsentResponse": {
    aminoType: "oracle/MsgDelegateFeedConsentResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/abci/index.js
var abci_exports = {};
__export(abci_exports, {
  CommitInfo: () => CommitInfo,
  Event: () => Event,
  EventAttribute: () => EventAttribute,
  ExecTxResult: () => ExecTxResult,
  ExtendedCommitInfo: () => ExtendedCommitInfo,
  ExtendedVoteInfo: () => ExtendedVoteInfo,
  Misbehavior: () => Misbehavior,
  Request: () => Request,
  RequestApplySnapshotChunk: () => RequestApplySnapshotChunk,
  RequestCheckTx: () => RequestCheckTx,
  RequestCommit: () => RequestCommit,
  RequestEcho: () => RequestEcho,
  RequestExtendVote: () => RequestExtendVote,
  RequestFinalizeBlock: () => RequestFinalizeBlock,
  RequestFlush: () => RequestFlush,
  RequestInfo: () => RequestInfo,
  RequestInitChain: () => RequestInitChain,
  RequestListSnapshots: () => RequestListSnapshots,
  RequestLoadSnapshotChunk: () => RequestLoadSnapshotChunk,
  RequestOfferSnapshot: () => RequestOfferSnapshot,
  RequestPrepareProposal: () => RequestPrepareProposal,
  RequestProcessProposal: () => RequestProcessProposal,
  RequestQuery: () => RequestQuery,
  RequestVerifyVoteExtension: () => RequestVerifyVoteExtension,
  Response: () => Response,
  ResponseApplySnapshotChunk: () => ResponseApplySnapshotChunk,
  ResponseCheckTx: () => ResponseCheckTx,
  ResponseCommit: () => ResponseCommit,
  ResponseDeliverTx: () => ResponseDeliverTx,
  ResponseEcho: () => ResponseEcho,
  ResponseException: () => ResponseException,
  ResponseExtendVote: () => ResponseExtendVote,
  ResponseFinalizeBlock: () => ResponseFinalizeBlock,
  ResponseFlush: () => ResponseFlush,
  ResponseInfo: () => ResponseInfo,
  ResponseInitChain: () => ResponseInitChain,
  ResponseListSnapshots: () => ResponseListSnapshots,
  ResponseLoadSnapshotChunk: () => ResponseLoadSnapshotChunk,
  ResponseOfferSnapshot: () => ResponseOfferSnapshot,
  ResponsePrepareProposal: () => ResponsePrepareProposal,
  ResponseProcessProposal: () => ResponseProcessProposal,
  ResponseQuery: () => ResponseQuery,
  ResponseVerifyVoteExtension: () => ResponseVerifyVoteExtension,
  Snapshot: () => Snapshot,
  TxRecord: () => TxRecord,
  TxResult: () => TxResult,
  Validator: () => Validator,
  ValidatorUpdate: () => ValidatorUpdate,
  VoteInfo: () => VoteInfo,
  aminoConverters: () => aminoConverters36,
  checkTxTypeFromJSON: () => checkTxTypeFromJSON,
  checkTxTypeToJSON: () => checkTxTypeToJSON,
  misbehaviorTypeFromJSON: () => misbehaviorTypeFromJSON,
  misbehaviorTypeToJSON: () => misbehaviorTypeToJSON,
  registry: () => registry36,
  responseApplySnapshotChunkResultFromJSON: () => responseApplySnapshotChunkResultFromJSON,
  responseApplySnapshotChunkResultToJSON: () => responseApplySnapshotChunkResultToJSON,
  responseOfferSnapshotResultFromJSON: () => responseOfferSnapshotResultFromJSON,
  responseOfferSnapshotResultToJSON: () => responseOfferSnapshotResultToJSON,
  responseProcessProposalProposalStatusFromJSON: () => responseProcessProposalProposalStatusFromJSON,
  responseProcessProposalProposalStatusToJSON: () => responseProcessProposalProposalStatusToJSON,
  responseVerifyVoteExtensionVerifyStatusFromJSON: () => responseVerifyVoteExtensionVerifyStatusFromJSON,
  responseVerifyVoteExtensionVerifyStatusToJSON: () => responseVerifyVoteExtensionVerifyStatusToJSON,
  txRecordTxActionFromJSON: () => txRecordTxActionFromJSON,
  txRecordTxActionToJSON: () => txRecordTxActionToJSON
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/crypto/index.js
var crypto_exports = {};
__export(crypto_exports, {
  DominoOp: () => DominoOp,
  Proof: () => Proof,
  ProofOp: () => ProofOp,
  ProofOps: () => ProofOps,
  PublicKey: () => PublicKey,
  ValueOp: () => ValueOp
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/libs/bits/index.js
var bits_exports = {};
__export(bits_exports, {
  BitArray: () => BitArray,
  aminoConverters: () => aminoConverters124,
  registry: () => registry124
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/libs/bits/types.js
var BitArray = {
  $type: "tendermint.libs.bits.BitArray",
  encode(message, writer = new BinaryWriter()) {
    if (message.bits !== 0) {
      writer.uint32(8).int64(message.bits);
    }
    writer.uint32(18).fork();
    for (const v of message.elems) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseBitArray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.bits = longToNumber59(reader.int64());
          continue;
        case 2:
          if (tag === 16) {
            message.elems.push(longToNumber59(reader.uint64()));
            continue;
          }
          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.elems.push(longToNumber59(reader.uint64()));
            }
            continue;
          }
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      bits: isSet118(object.bits) ? globalThis.Number(object.bits) : 0,
      elems: globalThis.Array.isArray(object == null ? void 0 : object.elems) ? object.elems.map((e) => globalThis.Number(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.bits !== 0) {
      obj.bits = Math.round(message.bits);
    }
    if ((_a = message.elems) == null ? void 0 : _a.length) {
      obj.elems = message.elems.map((e) => Math.round(e));
    }
    return obj;
  },
  create(base) {
    return BitArray.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseBitArray();
    message.bits = object.bits ?? 0;
    message.elems = ((_a = object.elems) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
function createBaseBitArray() {
  return { bits: 0, elems: [] };
}
function longToNumber59(int64) {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}
function isSet118(value) {
  return value !== null && value !== void 0;
}
var registry124 = [["/tendermint.libs.bits.BitArray", BitArray]];
var aminoConverters124 = {
  "/tendermint.libs.bits.BitArray": {
    aminoType: "tendermint.libs.bits.BitArray",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/p2p/index.js
var p2p_exports = {};
__export(p2p_exports, {
  NodeInfo: () => NodeInfo,
  NodeInfoOther: () => NodeInfoOther,
  PeerAddressInfo: () => PeerAddressInfo,
  PeerInfo: () => PeerInfo,
  ProtocolVersion: () => ProtocolVersion,
  aminoConverters: () => aminoConverters44,
  registry: () => registry44
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/types/index.js
var types_exports2 = {};
__export(types_exports2, {
  ABCIParams: () => ABCIParams,
  Block: () => Block,
  BlockID: () => BlockID,
  BlockMeta: () => BlockMeta,
  BlockParams: () => BlockParams,
  Commit: () => Commit,
  CommitSig: () => CommitSig,
  ConsensusParams: () => ConsensusParams,
  Data: () => Data,
  DuplicateVoteEvidence: () => DuplicateVoteEvidence,
  Evidence: () => Evidence,
  EvidenceList: () => EvidenceList,
  EvidenceParams: () => EvidenceParams,
  ExtendedCommit: () => ExtendedCommit,
  ExtendedCommitSig: () => ExtendedCommitSig,
  HashedParams: () => HashedParams,
  Header: () => Header,
  LightBlock: () => LightBlock,
  LightClientAttackEvidence: () => LightClientAttackEvidence,
  Part: () => Part,
  PartSetHeader: () => PartSetHeader,
  Proposal: () => Proposal,
  SignedHeader: () => SignedHeader,
  SimpleValidator: () => SimpleValidator,
  SynchronyParams: () => SynchronyParams,
  TimeoutParams: () => TimeoutParams,
  TxProof: () => TxProof,
  Validator: () => Validator2,
  ValidatorParams: () => ValidatorParams,
  ValidatorSet: () => ValidatorSet,
  VersionParams: () => VersionParams,
  Vote: () => Vote,
  blockIDFlagFromJSON: () => blockIDFlagFromJSON,
  blockIDFlagToJSON: () => blockIDFlagToJSON,
  signedMsgTypeFromJSON: () => signedMsgTypeFromJSON,
  signedMsgTypeToJSON: () => signedMsgTypeToJSON
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/tendermint/version/index.js
var version_exports = {};
__export(version_exports, {
  App: () => App,
  Consensus: () => Consensus,
  aminoConverters: () => aminoConverters45,
  registry: () => registry45
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/tokenfactory/index.js
var tokenfactory_exports = {};
__export(tokenfactory_exports, {
  DenomAuthorityMetadata: () => DenomAuthorityMetadata,
  GenesisDenom: () => GenesisDenom,
  GenesisState: () => GenesisState21,
  MsgBurn: () => MsgBurn,
  MsgBurnResponse: () => MsgBurnResponse,
  MsgChangeAdmin: () => MsgChangeAdmin,
  MsgChangeAdminResponse: () => MsgChangeAdminResponse,
  MsgCreateDenom: () => MsgCreateDenom,
  MsgCreateDenomResponse: () => MsgCreateDenomResponse,
  MsgMint: () => MsgMint,
  MsgMintResponse: () => MsgMintResponse,
  MsgSetDenomMetadata: () => MsgSetDenomMetadata,
  MsgSetDenomMetadataResponse: () => MsgSetDenomMetadataResponse,
  MsgUpdateDenom: () => MsgUpdateDenom,
  MsgUpdateDenomResponse: () => MsgUpdateDenomResponse,
  Params: () => Params13,
  QueryDenomAllowListRequest: () => QueryDenomAllowListRequest,
  QueryDenomAllowListResponse: () => QueryDenomAllowListResponse,
  QueryDenomAuthorityMetadataRequest: () => QueryDenomAuthorityMetadataRequest,
  QueryDenomAuthorityMetadataResponse: () => QueryDenomAuthorityMetadataResponse,
  QueryDenomMetadataRequest: () => QueryDenomMetadataRequest2,
  QueryDenomMetadataResponse: () => QueryDenomMetadataResponse2,
  QueryDenomsFromCreatorRequest: () => QueryDenomsFromCreatorRequest,
  QueryDenomsFromCreatorResponse: () => QueryDenomsFromCreatorResponse,
  QueryParamsRequest: () => QueryParamsRequest13,
  QueryParamsResponse: () => QueryParamsResponse13
});

// node_modules/@sei-js/cosmos/dist/esm/encoding/tokenfactory/authorityMetadata.js
var DenomAuthorityMetadata = {
  $type: "seiprotocol.seichain.tokenfactory.DenomAuthorityMetadata",
  encode(message, writer = new BinaryWriter()) {
    if (message.admin !== "") {
      writer.uint32(10).string(message.admin);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDenomAuthorityMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.admin = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { admin: isSet119(object.admin) ? globalThis.String(object.admin) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.admin !== "") {
      obj.admin = message.admin;
    }
    return obj;
  },
  create(base) {
    return DenomAuthorityMetadata.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDenomAuthorityMetadata();
    message.admin = object.admin ?? "";
    return message;
  }
};
function createBaseDenomAuthorityMetadata() {
  return { admin: "" };
}
function isSet119(value) {
  return value !== null && value !== void 0;
}
var registry125 = [["/seiprotocol.seichain.tokenfactory.DenomAuthorityMetadata", DenomAuthorityMetadata]];
var aminoConverters125 = {
  "/seiprotocol.seichain.tokenfactory.DenomAuthorityMetadata": {
    aminoType: "tokenfactory/DenomAuthorityMetadata",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/tokenfactory/params.js
var Params13 = {
  $type: "seiprotocol.seichain.tokenfactory.Params",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom_allowlist_max_size !== 0) {
      writer.uint32(8).uint32(message.denom_allowlist_max_size);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseParams13();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.denom_allowlist_max_size = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denom_allowlist_max_size: isSet120(object.denom_allowlist_max_size) ? globalThis.Number(object.denom_allowlist_max_size) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom_allowlist_max_size !== 0) {
      obj.denom_allowlist_max_size = Math.round(message.denom_allowlist_max_size);
    }
    return obj;
  },
  create(base) {
    return Params13.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseParams13();
    message.denom_allowlist_max_size = object.denom_allowlist_max_size ?? 0;
    return message;
  }
};
function createBaseParams13() {
  return { denom_allowlist_max_size: 0 };
}
function isSet120(value) {
  return value !== null && value !== void 0;
}
var registry126 = [["/seiprotocol.seichain.tokenfactory.Params", Params13]];
var aminoConverters126 = {
  "/seiprotocol.seichain.tokenfactory.Params": {
    aminoType: "tokenfactory/Params",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/tokenfactory/genesis.js
var GenesisState21 = {
  $type: "seiprotocol.seichain.tokenfactory.GenesisState",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params13.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.factory_denoms) {
      GenesisDenom.encode(v, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisState21();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params13.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.factory_denoms.push(GenesisDenom.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet121(object.params) ? Params13.fromJSON(object.params) : void 0,
      factory_denoms: globalThis.Array.isArray(object == null ? void 0 : object.factory_denoms) ? object.factory_denoms.map((e) => GenesisDenom.fromJSON(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params13.toJSON(message.params);
    }
    if ((_a = message.factory_denoms) == null ? void 0 : _a.length) {
      obj.factory_denoms = message.factory_denoms.map((e) => GenesisDenom.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return GenesisState21.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseGenesisState21();
    message.params = object.params !== void 0 && object.params !== null ? Params13.fromPartial(object.params) : void 0;
    message.factory_denoms = ((_a = object.factory_denoms) == null ? void 0 : _a.map((e) => GenesisDenom.fromPartial(e))) || [];
    return message;
  }
};
var GenesisDenom = {
  $type: "seiprotocol.seichain.tokenfactory.GenesisDenom",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.authority_metadata !== void 0) {
      DenomAuthorityMetadata.encode(message.authority_metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGenesisDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.authority_metadata = DenomAuthorityMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denom: isSet121(object.denom) ? globalThis.String(object.denom) : "",
      authority_metadata: isSet121(object.authority_metadata) ? DenomAuthorityMetadata.fromJSON(object.authority_metadata) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.authority_metadata !== void 0) {
      obj.authority_metadata = DenomAuthorityMetadata.toJSON(message.authority_metadata);
    }
    return obj;
  },
  create(base) {
    return GenesisDenom.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGenesisDenom();
    message.denom = object.denom ?? "";
    message.authority_metadata = object.authority_metadata !== void 0 && object.authority_metadata !== null ? DenomAuthorityMetadata.fromPartial(object.authority_metadata) : void 0;
    return message;
  }
};
function createBaseGenesisState21() {
  return { params: void 0, factory_denoms: [] };
}
function createBaseGenesisDenom() {
  return { denom: "", authority_metadata: void 0 };
}
function isSet121(value) {
  return value !== null && value !== void 0;
}
var registry127 = [
  ["/seiprotocol.seichain.tokenfactory.GenesisState", GenesisState21],
  ["/seiprotocol.seichain.tokenfactory.GenesisDenom", GenesisDenom]
];
var aminoConverters127 = {
  "/seiprotocol.seichain.tokenfactory.GenesisState": {
    aminoType: "tokenfactory/GenesisState",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.GenesisDenom": {
    aminoType: "tokenfactory/GenesisDenom",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/tokenfactory/query.js
var QueryParamsRequest13 = {
  $type: "seiprotocol.seichain.tokenfactory.QueryParamsRequest",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest13();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return QueryParamsRequest13.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest13();
    return message;
  }
};
var QueryParamsResponse13 = {
  $type: "seiprotocol.seichain.tokenfactory.QueryParamsResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.params !== void 0) {
      Params13.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse13();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params13.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { params: isSet122(object.params) ? Params13.fromJSON(object.params) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== void 0) {
      obj.params = Params13.toJSON(message.params);
    }
    return obj;
  },
  create(base) {
    return QueryParamsResponse13.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse13();
    message.params = object.params !== void 0 && object.params !== null ? Params13.fromPartial(object.params) : void 0;
    return message;
  }
};
var QueryDenomAuthorityMetadataRequest = {
  $type: "seiprotocol.seichain.tokenfactory.QueryDenomAuthorityMetadataRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDenomAuthorityMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { denom: isSet122(object.denom) ? globalThis.String(object.denom) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },
  create(base) {
    return QueryDenomAuthorityMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDenomAuthorityMetadataRequest();
    message.denom = object.denom ?? "";
    return message;
  }
};
var QueryDenomAuthorityMetadataResponse = {
  $type: "seiprotocol.seichain.tokenfactory.QueryDenomAuthorityMetadataResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.authority_metadata !== void 0) {
      DenomAuthorityMetadata.encode(message.authority_metadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDenomAuthorityMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.authority_metadata = DenomAuthorityMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      authority_metadata: isSet122(object.authority_metadata) ? DenomAuthorityMetadata.fromJSON(object.authority_metadata) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.authority_metadata !== void 0) {
      obj.authority_metadata = DenomAuthorityMetadata.toJSON(message.authority_metadata);
    }
    return obj;
  },
  create(base) {
    return QueryDenomAuthorityMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDenomAuthorityMetadataResponse();
    message.authority_metadata = object.authority_metadata !== void 0 && object.authority_metadata !== null ? DenomAuthorityMetadata.fromPartial(object.authority_metadata) : void 0;
    return message;
  }
};
var QueryDenomsFromCreatorRequest = {
  $type: "seiprotocol.seichain.tokenfactory.QueryDenomsFromCreatorRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDenomsFromCreatorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.creator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { creator: isSet122(object.creator) ? globalThis.String(object.creator) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    return obj;
  },
  create(base) {
    return QueryDenomsFromCreatorRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDenomsFromCreatorRequest();
    message.creator = object.creator ?? "";
    return message;
  }
};
var QueryDenomsFromCreatorResponse = {
  $type: "seiprotocol.seichain.tokenfactory.QueryDenomsFromCreatorResponse",
  encode(message, writer = new BinaryWriter()) {
    for (const v of message.denoms) {
      writer.uint32(10).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDenomsFromCreatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denoms.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      denoms: globalThis.Array.isArray(object == null ? void 0 : object.denoms) ? object.denoms.map((e) => globalThis.String(e)) : []
    };
  },
  toJSON(message) {
    var _a;
    const obj = {};
    if ((_a = message.denoms) == null ? void 0 : _a.length) {
      obj.denoms = message.denoms;
    }
    return obj;
  },
  create(base) {
    return QueryDenomsFromCreatorResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    var _a;
    const message = createBaseQueryDenomsFromCreatorResponse();
    message.denoms = ((_a = object.denoms) == null ? void 0 : _a.map((e) => e)) || [];
    return message;
  }
};
var QueryDenomMetadataRequest2 = {
  $type: "seiprotocol.seichain.tokenfactory.QueryDenomMetadataRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDenomMetadataRequest2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { denom: isSet122(object.denom) ? globalThis.String(object.denom) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },
  create(base) {
    return QueryDenomMetadataRequest2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDenomMetadataRequest2();
    message.denom = object.denom ?? "";
    return message;
  }
};
var QueryDenomMetadataResponse2 = {
  $type: "seiprotocol.seichain.tokenfactory.QueryDenomMetadataResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.metadata !== void 0) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDenomMetadataResponse2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { metadata: isSet122(object.metadata) ? Metadata.fromJSON(object.metadata) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.metadata !== void 0) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },
  create(base) {
    return QueryDenomMetadataResponse2.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDenomMetadataResponse2();
    message.metadata = object.metadata !== void 0 && object.metadata !== null ? Metadata.fromPartial(object.metadata) : void 0;
    return message;
  }
};
var QueryDenomAllowListRequest = {
  $type: "seiprotocol.seichain.tokenfactory.QueryDenomAllowListRequest",
  encode(message, writer = new BinaryWriter()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDenomAllowListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { denom: isSet122(object.denom) ? globalThis.String(object.denom) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },
  create(base) {
    return QueryDenomAllowListRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDenomAllowListRequest();
    message.denom = object.denom ?? "";
    return message;
  }
};
var QueryDenomAllowListResponse = {
  $type: "seiprotocol.seichain.tokenfactory.QueryDenomAllowListResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.allow_list !== void 0) {
      AllowList.encode(message.allow_list, writer.uint32(10).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseQueryDenomAllowListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.allow_list = AllowList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { allow_list: isSet122(object.allow_list) ? AllowList.fromJSON(object.allow_list) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    if (message.allow_list !== void 0) {
      obj.allow_list = AllowList.toJSON(message.allow_list);
    }
    return obj;
  },
  create(base) {
    return QueryDenomAllowListResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDenomAllowListResponse();
    message.allow_list = object.allow_list !== void 0 && object.allow_list !== null ? AllowList.fromPartial(object.allow_list) : void 0;
    return message;
  }
};
function createBaseQueryParamsRequest13() {
  return {};
}
function createBaseQueryParamsResponse13() {
  return { params: void 0 };
}
function createBaseQueryDenomAuthorityMetadataRequest() {
  return { denom: "" };
}
function createBaseQueryDenomAuthorityMetadataResponse() {
  return { authority_metadata: void 0 };
}
function createBaseQueryDenomsFromCreatorRequest() {
  return { creator: "" };
}
function createBaseQueryDenomsFromCreatorResponse() {
  return { denoms: [] };
}
function createBaseQueryDenomMetadataRequest2() {
  return { denom: "" };
}
function createBaseQueryDenomMetadataResponse2() {
  return { metadata: void 0 };
}
function createBaseQueryDenomAllowListRequest() {
  return { denom: "" };
}
function createBaseQueryDenomAllowListResponse() {
  return { allow_list: void 0 };
}
function isSet122(value) {
  return value !== null && value !== void 0;
}
var registry128 = [
  ["/seiprotocol.seichain.tokenfactory.QueryParamsRequest", QueryParamsRequest13],
  ["/seiprotocol.seichain.tokenfactory.QueryParamsResponse", QueryParamsResponse13],
  ["/seiprotocol.seichain.tokenfactory.QueryDenomAuthorityMetadataRequest", QueryDenomAuthorityMetadataRequest],
  ["/seiprotocol.seichain.tokenfactory.QueryDenomAuthorityMetadataResponse", QueryDenomAuthorityMetadataResponse],
  ["/seiprotocol.seichain.tokenfactory.QueryDenomsFromCreatorRequest", QueryDenomsFromCreatorRequest],
  ["/seiprotocol.seichain.tokenfactory.QueryDenomsFromCreatorResponse", QueryDenomsFromCreatorResponse],
  ["/seiprotocol.seichain.tokenfactory.QueryDenomMetadataRequest", QueryDenomMetadataRequest2],
  ["/seiprotocol.seichain.tokenfactory.QueryDenomMetadataResponse", QueryDenomMetadataResponse2],
  ["/seiprotocol.seichain.tokenfactory.QueryDenomAllowListRequest", QueryDenomAllowListRequest],
  ["/seiprotocol.seichain.tokenfactory.QueryDenomAllowListResponse", QueryDenomAllowListResponse]
];
var aminoConverters128 = {
  "/seiprotocol.seichain.tokenfactory.QueryParamsRequest": {
    aminoType: "tokenfactory/QueryParamsRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.QueryParamsResponse": {
    aminoType: "tokenfactory/QueryParamsResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.QueryDenomAuthorityMetadataRequest": {
    aminoType: "tokenfactory/QueryDenomAuthorityMetadataRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.QueryDenomAuthorityMetadataResponse": {
    aminoType: "tokenfactory/QueryDenomAuthorityMetadataResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.QueryDenomsFromCreatorRequest": {
    aminoType: "tokenfactory/QueryDenomsFromCreatorRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.QueryDenomsFromCreatorResponse": {
    aminoType: "tokenfactory/QueryDenomsFromCreatorResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.QueryDenomMetadataRequest": {
    aminoType: "tokenfactory/QueryDenomMetadataRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.QueryDenomMetadataResponse": {
    aminoType: "tokenfactory/QueryDenomMetadataResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.QueryDenomAllowListRequest": {
    aminoType: "tokenfactory/QueryDenomAllowListRequest",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.QueryDenomAllowListResponse": {
    aminoType: "tokenfactory/QueryDenomAllowListResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/tokenfactory/tx.js
var MsgCreateDenom = {
  $type: "seiprotocol.seichain.tokenfactory.MsgCreateDenom",
  encode(message, writer = new BinaryWriter()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.subdenom !== "") {
      writer.uint32(18).string(message.subdenom);
    }
    if (message.allow_list !== void 0) {
      AllowList.encode(message.allow_list, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.subdenom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.allow_list = AllowList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet123(object.sender) ? globalThis.String(object.sender) : "",
      subdenom: isSet123(object.subdenom) ? globalThis.String(object.subdenom) : "",
      allow_list: isSet123(object.allow_list) ? AllowList.fromJSON(object.allow_list) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.subdenom !== "") {
      obj.subdenom = message.subdenom;
    }
    if (message.allow_list !== void 0) {
      obj.allow_list = AllowList.toJSON(message.allow_list);
    }
    return obj;
  },
  create(base) {
    return MsgCreateDenom.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateDenom();
    message.sender = object.sender ?? "";
    message.subdenom = object.subdenom ?? "";
    message.allow_list = object.allow_list !== void 0 && object.allow_list !== null ? AllowList.fromPartial(object.allow_list) : void 0;
    return message;
  }
};
var MsgCreateDenomResponse = {
  $type: "seiprotocol.seichain.tokenfactory.MsgCreateDenomResponse",
  encode(message, writer = new BinaryWriter()) {
    if (message.new_token_denom !== "") {
      writer.uint32(10).string(message.new_token_denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateDenomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.new_token_denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { new_token_denom: isSet123(object.new_token_denom) ? globalThis.String(object.new_token_denom) : "" };
  },
  toJSON(message) {
    const obj = {};
    if (message.new_token_denom !== "") {
      obj.new_token_denom = message.new_token_denom;
    }
    return obj;
  },
  create(base) {
    return MsgCreateDenomResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateDenomResponse();
    message.new_token_denom = object.new_token_denom ?? "";
    return message;
  }
};
var MsgMint = {
  $type: "seiprotocol.seichain.tokenfactory.MsgMint",
  encode(message, writer = new BinaryWriter()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.amount !== void 0) {
      Coin.encode(message.amount, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgMint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.amount = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet123(object.sender) ? globalThis.String(object.sender) : "",
      amount: isSet123(object.amount) ? Coin.fromJSON(object.amount) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.amount !== void 0) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },
  create(base) {
    return MsgMint.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgMint();
    message.sender = object.sender ?? "";
    message.amount = object.amount !== void 0 && object.amount !== null ? Coin.fromPartial(object.amount) : void 0;
    return message;
  }
};
var MsgMintResponse = {
  $type: "seiprotocol.seichain.tokenfactory.MsgMintResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgMintResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgMintResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgMintResponse();
    return message;
  }
};
var MsgBurn = {
  $type: "seiprotocol.seichain.tokenfactory.MsgBurn",
  encode(message, writer = new BinaryWriter()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.amount !== void 0) {
      Coin.encode(message.amount, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgBurn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.amount = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet123(object.sender) ? globalThis.String(object.sender) : "",
      amount: isSet123(object.amount) ? Coin.fromJSON(object.amount) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.amount !== void 0) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },
  create(base) {
    return MsgBurn.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgBurn();
    message.sender = object.sender ?? "";
    message.amount = object.amount !== void 0 && object.amount !== null ? Coin.fromPartial(object.amount) : void 0;
    return message;
  }
};
var MsgBurnResponse = {
  $type: "seiprotocol.seichain.tokenfactory.MsgBurnResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgBurnResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgBurnResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgBurnResponse();
    return message;
  }
};
var MsgChangeAdmin = {
  $type: "seiprotocol.seichain.tokenfactory.MsgChangeAdmin",
  encode(message, writer = new BinaryWriter()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.new_admin !== "") {
      writer.uint32(26).string(message.new_admin);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgChangeAdmin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.new_admin = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet123(object.sender) ? globalThis.String(object.sender) : "",
      denom: isSet123(object.denom) ? globalThis.String(object.denom) : "",
      new_admin: isSet123(object.new_admin) ? globalThis.String(object.new_admin) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.new_admin !== "") {
      obj.new_admin = message.new_admin;
    }
    return obj;
  },
  create(base) {
    return MsgChangeAdmin.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgChangeAdmin();
    message.sender = object.sender ?? "";
    message.denom = object.denom ?? "";
    message.new_admin = object.new_admin ?? "";
    return message;
  }
};
var MsgChangeAdminResponse = {
  $type: "seiprotocol.seichain.tokenfactory.MsgChangeAdminResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgChangeAdminResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgChangeAdminResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgChangeAdminResponse();
    return message;
  }
};
var MsgSetDenomMetadata = {
  $type: "seiprotocol.seichain.tokenfactory.MsgSetDenomMetadata",
  encode(message, writer = new BinaryWriter()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.metadata !== void 0) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgSetDenomMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet123(object.sender) ? globalThis.String(object.sender) : "",
      metadata: isSet123(object.metadata) ? Metadata.fromJSON(object.metadata) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.metadata !== void 0) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },
  create(base) {
    return MsgSetDenomMetadata.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgSetDenomMetadata();
    message.sender = object.sender ?? "";
    message.metadata = object.metadata !== void 0 && object.metadata !== null ? Metadata.fromPartial(object.metadata) : void 0;
    return message;
  }
};
var MsgSetDenomMetadataResponse = {
  $type: "seiprotocol.seichain.tokenfactory.MsgSetDenomMetadataResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgSetDenomMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgSetDenomMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgSetDenomMetadataResponse();
    return message;
  }
};
var MsgUpdateDenom = {
  $type: "seiprotocol.seichain.tokenfactory.MsgUpdateDenom",
  encode(message, writer = new BinaryWriter()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.allow_list !== void 0) {
      AllowList.encode(message.allow_list, writer.uint32(26).fork()).join();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.allow_list = AllowList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet123(object.sender) ? globalThis.String(object.sender) : "",
      denom: isSet123(object.denom) ? globalThis.String(object.denom) : "",
      allow_list: isSet123(object.allow_list) ? AllowList.fromJSON(object.allow_list) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.allow_list !== void 0) {
      obj.allow_list = AllowList.toJSON(message.allow_list);
    }
    return obj;
  },
  create(base) {
    return MsgUpdateDenom.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgUpdateDenom();
    message.sender = object.sender ?? "";
    message.denom = object.denom ?? "";
    message.allow_list = object.allow_list !== void 0 && object.allow_list !== null ? AllowList.fromPartial(object.allow_list) : void 0;
    return message;
  }
};
var MsgUpdateDenomResponse = {
  $type: "seiprotocol.seichain.tokenfactory.MsgUpdateDenomResponse",
  encode(_, writer = new BinaryWriter()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateDenomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgUpdateDenomResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgUpdateDenomResponse();
    return message;
  }
};
function createBaseMsgCreateDenom() {
  return { sender: "", subdenom: "", allow_list: void 0 };
}
function createBaseMsgCreateDenomResponse() {
  return { new_token_denom: "" };
}
function createBaseMsgMint() {
  return { sender: "", amount: void 0 };
}
function createBaseMsgMintResponse() {
  return {};
}
function createBaseMsgBurn() {
  return { sender: "", amount: void 0 };
}
function createBaseMsgBurnResponse() {
  return {};
}
function createBaseMsgChangeAdmin() {
  return { sender: "", denom: "", new_admin: "" };
}
function createBaseMsgChangeAdminResponse() {
  return {};
}
function createBaseMsgSetDenomMetadata() {
  return { sender: "", metadata: void 0 };
}
function createBaseMsgSetDenomMetadataResponse() {
  return {};
}
function createBaseMsgUpdateDenom() {
  return { sender: "", denom: "", allow_list: void 0 };
}
function createBaseMsgUpdateDenomResponse() {
  return {};
}
function isSet123(value) {
  return value !== null && value !== void 0;
}
var registry129 = [
  ["/seiprotocol.seichain.tokenfactory.MsgCreateDenom", MsgCreateDenom],
  ["/seiprotocol.seichain.tokenfactory.MsgCreateDenomResponse", MsgCreateDenomResponse],
  ["/seiprotocol.seichain.tokenfactory.MsgMint", MsgMint],
  ["/seiprotocol.seichain.tokenfactory.MsgMintResponse", MsgMintResponse],
  ["/seiprotocol.seichain.tokenfactory.MsgBurn", MsgBurn],
  ["/seiprotocol.seichain.tokenfactory.MsgBurnResponse", MsgBurnResponse],
  ["/seiprotocol.seichain.tokenfactory.MsgChangeAdmin", MsgChangeAdmin],
  ["/seiprotocol.seichain.tokenfactory.MsgChangeAdminResponse", MsgChangeAdminResponse],
  ["/seiprotocol.seichain.tokenfactory.MsgSetDenomMetadata", MsgSetDenomMetadata],
  ["/seiprotocol.seichain.tokenfactory.MsgSetDenomMetadataResponse", MsgSetDenomMetadataResponse],
  ["/seiprotocol.seichain.tokenfactory.MsgUpdateDenom", MsgUpdateDenom],
  ["/seiprotocol.seichain.tokenfactory.MsgUpdateDenomResponse", MsgUpdateDenomResponse]
];
var aminoConverters129 = {
  "/seiprotocol.seichain.tokenfactory.MsgCreateDenom": {
    aminoType: "tokenfactory/MsgCreateDenom",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.MsgCreateDenomResponse": {
    aminoType: "tokenfactory/MsgCreateDenomResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.MsgMint": {
    aminoType: "tokenfactory/MsgMint",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.MsgMintResponse": {
    aminoType: "tokenfactory/MsgMintResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.MsgBurn": {
    aminoType: "tokenfactory/MsgBurn",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.MsgBurnResponse": {
    aminoType: "tokenfactory/MsgBurnResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.MsgChangeAdmin": {
    aminoType: "tokenfactory/MsgChangeAdmin",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.MsgChangeAdminResponse": {
    aminoType: "tokenfactory/MsgChangeAdminResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.MsgSetDenomMetadata": {
    aminoType: "tokenfactory/MsgSetDenomMetadata",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.MsgSetDenomMetadataResponse": {
    aminoType: "tokenfactory/MsgSetDenomMetadataResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.MsgUpdateDenom": {
    aminoType: "tokenfactory/MsgUpdateDenom",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  },
  "/seiprotocol.seichain.tokenfactory.MsgUpdateDenomResponse": {
    aminoType: "tokenfactory/MsgUpdateDenomResponse",
    toAmino: (message) => ({ ...message }),
    fromAmino: (object) => ({ ...object })
  }
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/amino.js
var aminoConverters130 = {
  ...aminoConverters2,
  ...aminoConverters,
  ...aminoConverters4,
  ...aminoConverters3,
  ...aminoConverters7,
  ...aminoConverters8,
  ...aminoConverters6,
  ...aminoConverters9,
  ...aminoConverters12,
  ...aminoConverters13,
  ...aminoConverters14,
  ...aminoConverters15,
  ...aminoConverters10,
  ...aminoConverters11,
  ...aminoConverters17,
  ...aminoConverters18,
  ...aminoConverters19,
  ...aminoConverters21,
  ...aminoConverters22,
  ...aminoConverters23,
  ...aminoConverters24,
  ...aminoConverters25,
  ...aminoConverters27,
  ...aminoConverters28,
  ...aminoConverters29,
  ...aminoConverters30,
  ...aminoConverters31,
  ...aminoConverters37,
  ...aminoConverters38,
  ...aminoConverters5,
  ...aminoConverters39,
  ...aminoConverters40,
  ...aminoConverters41,
  ...aminoConverters42,
  ...aminoConverters43,
  ...aminoConverters50,
  ...aminoConverters26,
  ...aminoConverters51,
  ...aminoConverters52,
  ...aminoConverters53,
  ...aminoConverters54,
  ...aminoConverters55,
  ...aminoConverters56,
  ...aminoConverters92,
  ...aminoConverters57,
  ...aminoConverters58,
  ...aminoConverters59,
  ...aminoConverters60,
  ...aminoConverters61,
  ...aminoConverters62,
  ...aminoConverters63,
  ...aminoConverters64,
  ...aminoConverters65,
  ...aminoConverters66,
  ...aminoConverters67,
  ...aminoConverters68,
  ...aminoConverters69,
  ...aminoConverters70,
  ...aminoConverters71,
  ...aminoConverters72,
  ...aminoConverters74,
  ...aminoConverters73,
  ...aminoConverters75,
  ...aminoConverters76,
  ...aminoConverters78,
  ...aminoConverters77,
  ...aminoConverters79,
  ...aminoConverters80,
  ...aminoConverters81,
  ...aminoConverters82,
  ...aminoConverters84,
  ...aminoConverters85,
  ...aminoConverters83,
  ...aminoConverters86,
  ...aminoConverters87,
  ...aminoConverters89,
  ...aminoConverters90,
  ...aminoConverters88,
  ...aminoConverters91,
  ...aminoConverters93,
  ...aminoConverters95,
  ...aminoConverters94,
  ...aminoConverters97,
  ...aminoConverters96,
  ...aminoConverters98,
  ...aminoConverters99,
  ...aminoConverters100,
  ...aminoConverters102,
  ...aminoConverters101,
  ...aminoConverters103,
  ...aminoConverters104,
  ...aminoConverters105,
  ...aminoConverters107,
  ...aminoConverters108,
  ...aminoConverters106,
  ...aminoConverters109,
  ...aminoConverters110,
  ...aminoConverters111,
  ...aminoConverters112,
  ...aminoConverters113,
  ...aminoConverters114,
  ...aminoConverters16,
  ...aminoConverters115,
  ...aminoConverters34,
  ...aminoConverters20,
  ...aminoConverters117,
  ...aminoConverters118,
  ...aminoConverters116,
  ...aminoConverters119,
  ...aminoConverters121,
  ...aminoConverters120,
  ...aminoConverters122,
  ...aminoConverters123,
  ...aminoConverters36,
  ...aminoConverters32,
  ...aminoConverters33,
  ...aminoConverters124,
  ...aminoConverters44,
  ...aminoConverters49,
  ...aminoConverters48,
  ...aminoConverters35,
  ...aminoConverters47,
  ...aminoConverters46,
  ...aminoConverters45,
  ...aminoConverters125,
  ...aminoConverters127,
  ...aminoConverters126,
  ...aminoConverters128,
  ...aminoConverters129
};

// node_modules/@sei-js/cosmos/dist/esm/encoding/registry.js
var seiProtoRegistry = [
  ...registry2,
  ...registry,
  ...registry4,
  ...registry3,
  ...registry7,
  ...registry8,
  ...registry6,
  ...registry9,
  ...registry12,
  ...registry13,
  ...registry14,
  ...registry15,
  ...registry10,
  ...registry11,
  ...registry17,
  ...registry18,
  ...registry19,
  ...registry21,
  ...registry22,
  ...registry23,
  ...registry24,
  ...registry25,
  ...registry27,
  ...registry28,
  ...registry29,
  ...registry30,
  ...registry31,
  ...registry37,
  ...registry38,
  ...registry5,
  ...registry39,
  ...registry40,
  ...registry41,
  ...registry42,
  ...registry43,
  ...registry50,
  ...registry26,
  ...registry51,
  ...registry52,
  ...registry53,
  ...registry54,
  ...registry55,
  ...registry56,
  ...registry92,
  ...registry57,
  ...registry58,
  ...registry59,
  ...registry60,
  ...registry61,
  ...registry62,
  ...registry63,
  ...registry64,
  ...registry65,
  ...registry66,
  ...registry67,
  ...registry68,
  ...registry69,
  ...registry70,
  ...registry71,
  ...registry72,
  ...registry74,
  ...registry73,
  ...registry75,
  ...registry76,
  ...registry78,
  ...registry77,
  ...registry79,
  ...registry80,
  ...registry81,
  ...registry82,
  ...registry84,
  ...registry85,
  ...registry83,
  ...registry86,
  ...registry87,
  ...registry89,
  ...registry90,
  ...registry88,
  ...registry91,
  ...registry93,
  ...registry95,
  ...registry94,
  ...registry97,
  ...registry96,
  ...registry98,
  ...registry99,
  ...registry100,
  ...registry102,
  ...registry101,
  ...registry103,
  ...registry104,
  ...registry105,
  ...registry107,
  ...registry108,
  ...registry106,
  ...registry109,
  ...registry110,
  ...registry111,
  ...registry112,
  ...registry113,
  ...registry114,
  ...registry16,
  ...registry115,
  ...registry34,
  ...registry20,
  ...registry117,
  ...registry118,
  ...registry116,
  ...registry119,
  ...registry121,
  ...registry120,
  ...registry122,
  ...registry123,
  ...registry36,
  ...registry32,
  ...registry33,
  ...registry124,
  ...registry44,
  ...registry49,
  ...registry48,
  ...registry35,
  ...registry47,
  ...registry46,
  ...registry45,
  ...registry125,
  ...registry127,
  ...registry126,
  ...registry128,
  ...registry129
];

// node_modules/@sei-js/cosmos/dist/esm/encoding/index.js
var Encoder = {
  confidentialtransfers: confidentialtransfers_exports,
  confio: confio_exports,
  cosmos: {
    accesscontrol: accesscontrol_exports,
    accesscontrol_x: accesscontrol_x_exports,
    auth: { v1beta1: v1beta1_exports },
    authz: { v1beta1: v1beta1_exports2 },
    bank: { v1beta1: v1beta1_exports3 },
    base: {
      abci: { v1beta1: v1beta1_exports4 },
      kv: { v1beta1: v1beta1_exports5 },
      query: { v1beta1: v1beta1_exports6 },
      reflection: { v1beta1: v1beta1_exports7, v2alpha1: v2alpha1_exports },
      snapshots: { v1beta1: v1beta1_exports8 },
      store: { v1beta1: v1beta1_exports9 },
      tendermint: { v1beta1: v1beta1_exports10 },
      v1beta1: v1beta1_exports11
    },
    capability: { v1beta1: v1beta1_exports12 },
    crisis: { v1beta1: v1beta1_exports13 },
    crypto: {
      ed25519: ed25519_exports,
      multisig: multisig_exports,
      secp256k1: secp256k1_exports,
      secp256r1: secp256r1_exports,
      sr25519: sr25519_exports
    },
    distribution: { v1beta1: v1beta1_exports14 },
    evidence: { v1beta1: v1beta1_exports15 },
    feegrant: { v1beta1: v1beta1_exports16 },
    genutil: { v1beta1: v1beta1_exports17 },
    gov: { v1beta1: v1beta1_exports18 },
    mint: { v1beta1: v1beta1_exports19 },
    params: { types: types_exports, v1beta1: v1beta1_exports20 },
    slashing: { v1beta1: v1beta1_exports21 },
    staking: { v1beta1: v1beta1_exports22 },
    tx: { signing: { v1beta1: v1beta1_exports23 }, v1beta1: v1beta1_exports24 },
    upgrade: { v1beta1: v1beta1_exports25 },
    vesting: { v1beta1: v1beta1_exports26 }
  },
  epoch: epoch_exports,
  eth: eth_exports,
  evm: evm_exports,
  google: { api: api_exports, protobuf: protobuf_exports },
  mint: { v1beta1: v1beta1_exports27 },
  oracle: oracle_exports,
  tendermint: {
    abci: abci_exports,
    crypto: crypto_exports,
    libs: { bits: bits_exports },
    p2p: p2p_exports,
    types: types_exports2,
    version: version_exports
  },
  tokenfactory: tokenfactory_exports
};

export {
  aminoConverters130 as aminoConverters,
  seiProtoRegistry,
  Encoder
};
//# sourceMappingURL=chunk-5EJY5QAD.js.map
